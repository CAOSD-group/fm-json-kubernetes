apiVersion: v1
kind: ConfigMap
metadata:
  name: nextcloud-config
  labels:
    app.kubernetes.io/name: nextcloud
    app.kubernetes.io/instance: nextcloud
data:
  remoteip.conf: 'RemoteIPHeader X-Forwarded-For

    RemoteIPInternalProxy 10.0.0.0/8

    RemoteIPInternalProxy 172.16.0.0/12

    RemoteIPInternalProxy 192.168.0.0/16'
  other.config.php: "<?php\n$CONFIG = array (\n  'skeletondirectory' => '',\n  'lost_password_link'\
    \ => 'disabled',\n  'has_internet_connection' => false,\n  'simpleSignUpLink.shown'\
    \ => false,\n);"
  .htaccess: '# line below if for Apache 2.4

    <ifModule mod_authz_core.c>

    Require all denied

    </ifModule>

    # line below if for Apache 2.2

    <ifModule !mod_authz_core.c>

    deny from all

    </ifModule>

    # section for Apache 2.2 and 2.4

    <ifModule mod_autoindex.c>

    IndexIgnore *

    </ifModule>'
  apache-pretty-urls.config.php: "<?php\n$CONFIG = array (\n  'htaccess.RewriteBase'\
    \ => '/',\n);"
  apcu.config.php: "<?php\n$CONFIG = array (\n  'memcache.local' => '\\OC\\Memcache\\\
    APCu',\n);"
  apps.config.php: "<?php\n$CONFIG = array (\n  'apps_paths' => array (\n      0 =>\
    \ array (\n              'path'     => OC::$SERVERROOT.'/apps',\n            \
    \  'url'      => '/apps',\n              'writable' => false,\n      ),\n    \
    \  1 => array (\n              'path'     => OC::$SERVERROOT.'/custom_apps',\n\
    \              'url'      => '/custom_apps',\n              'writable' => true,\n\
    \      ),\n  ),\n);"
  autoconfig.php: "<?php\n$autoconfig_enabled = false;\nif (getenv('SQLITE_DATABASE'))\
    \ {\n    $AUTOCONFIG[\"dbtype\"] = \"sqlite\";\n    $AUTOCONFIG[\"dbname\"] =\
    \ getenv('SQLITE_DATABASE');\n    $autoconfig_enabled = true;\n} elseif (getenv('MYSQL_DATABASE_FILE')\
    \ && getenv('MYSQL_USER_FILE') && getenv('MYSQL_PASSWORD_FILE') && getenv('MYSQL_HOST'))\
    \ {\n    $AUTOCONFIG['dbtype'] = 'mysql';\n    $AUTOCONFIG['dbname'] = trim(file_get_contents(getenv('MYSQL_DATABASE_FILE')));\n\
    \    $AUTOCONFIG['dbuser'] = trim(file_get_contents(getenv('MYSQL_USER_FILE')));\n\
    \    $AUTOCONFIG['dbpass'] = trim(file_get_contents(getenv('MYSQL_PASSWORD_FILE')));\n\
    \    $AUTOCONFIG['dbhost'] = getenv('MYSQL_HOST');\n    $autoconfig_enabled =\
    \ true;\n} elseif (getenv('MYSQL_DATABASE') && getenv('MYSQL_USER') && getenv('MYSQL_PASSWORD')\
    \ && getenv('MYSQL_HOST')) {\n    $AUTOCONFIG[\"dbtype\"] = \"mysql\";\n    $AUTOCONFIG[\"\
    dbname\"] = getenv('MYSQL_DATABASE');\n    $AUTOCONFIG[\"dbuser\"] = getenv('MYSQL_USER');\n\
    \    $AUTOCONFIG[\"dbpass\"] = getenv('MYSQL_PASSWORD');\n    $AUTOCONFIG[\"dbhost\"\
    ] = getenv('MYSQL_HOST');\n    $autoconfig_enabled = true;\n} elseif (getenv('POSTGRES_DB_FILE')\
    \ && getenv('POSTGRES_USER_FILE') && getenv('POSTGRES_PASSWORD_FILE') && getenv('POSTGRES_HOST'))\
    \ {\n    $AUTOCONFIG['dbtype'] = 'pgsql';\n    $AUTOCONFIG['dbname'] = trim(file_get_contents(getenv('POSTGRES_DB_FILE')));\n\
    \    $AUTOCONFIG['dbuser'] = trim(file_get_contents(getenv('POSTGRES_USER_FILE')));\n\
    \    $AUTOCONFIG['dbpass'] = trim(file_get_contents(getenv('POSTGRES_PASSWORD_FILE')));\n\
    \    $AUTOCONFIG['dbhost'] = getenv('POSTGRES_HOST');\n    $autoconfig_enabled\
    \ = true;\n} elseif (getenv('POSTGRES_DB') && getenv('POSTGRES_USER') && getenv('POSTGRES_PASSWORD')\
    \ && getenv('POSTGRES_HOST')) {\n    $AUTOCONFIG[\"dbtype\"] = \"pgsql\";\n  \
    \  $AUTOCONFIG[\"dbname\"] = getenv('POSTGRES_DB');\n    $AUTOCONFIG[\"dbuser\"\
    ] = getenv('POSTGRES_USER');\n    $AUTOCONFIG[\"dbpass\"] = getenv('POSTGRES_PASSWORD');\n\
    \    $AUTOCONFIG[\"dbhost\"] = getenv('POSTGRES_HOST');\n    $autoconfig_enabled\
    \ = true;\n}\nif ($autoconfig_enabled) {\n    $AUTOCONFIG[\"directory\"] = getenv('NEXTCLOUD_DATA_DIR')\
    \ ?: \"/var/www/html/data\";\n}"
  redis.config.php: "<?php\nif (getenv('REDIS_HOST')) {\n  $CONFIG = array(\n    'memcache.distributed'\
    \ => '\\OC\\Memcache\\Redis',\n    'memcache.locking' => '\\OC\\Memcache\\Redis',\n\
    \    'redis' => array(\n      'host' => getenv('REDIS_HOST'),\n      'password'\
    \ => getenv('REDIS_HOST_PASSWORD_FILE') ? trim(file_get_contents(getenv('REDIS_HOST_PASSWORD_FILE')))\
    \ : (string) getenv('REDIS_HOST_PASSWORD'),\n    ),\n  );\n\n  if (getenv('REDIS_HOST_PORT')\
    \ !== false) {\n    $CONFIG['redis']['port'] = (int) getenv('REDIS_HOST_PORT');\n\
    \  } elseif (getenv('REDIS_HOST')[0] != '/') {\n    $CONFIG['redis']['port'] =\
    \ 6379;\n  }\n}"
  reverse-proxy.config.php: "<?php\n$overwriteHost = getenv('OVERWRITEHOST');\nif\
    \ ($overwriteHost) {\n  $CONFIG['overwritehost'] = $overwriteHost;\n}\n\n$overwriteProtocol\
    \ = getenv('OVERWRITEPROTOCOL');\nif ($overwriteProtocol) {\n  $CONFIG['overwriteprotocol']\
    \ = $overwriteProtocol;\n}\n\n$overwriteCliUrl = getenv('OVERWRITECLIURL');\n\
    if ($overwriteCliUrl) {\n  $CONFIG['overwrite.cli.url'] = $overwriteCliUrl;\n\
    }\n\n$overwriteWebRoot = getenv('OVERWRITEWEBROOT');\nif ($overwriteWebRoot) {\n\
    \  $CONFIG['overwritewebroot'] = $overwriteWebRoot;\n}\n\n$overwriteCondAddr =\
    \ getenv('OVERWRITECONDADDR');\nif ($overwriteCondAddr) {\n  $CONFIG['overwritecondaddr']\
    \ = $overwriteCondAddr;\n}\n\n$trustedProxies = getenv('TRUSTED_PROXIES');\nif\
    \ ($trustedProxies) {\n  $CONFIG['trusted_proxies'] = array_filter(array_map('trim',\
    \ explode(' ', $trustedProxies)));\n}\n\n$forwardedForHeaders = getenv('FORWARDED_FOR_HEADERS');\n\
    if ($forwardedForHeaders) {\n  $CONFIG['forwarded_for_headers'] = array_filter(array_map('trim',\
    \ explode(' ', $forwardedForHeaders)));\n}"
  s3.config.php: "<?php\nif (getenv('OBJECTSTORE_S3_BUCKET')) {\n  $use_ssl = getenv('OBJECTSTORE_S3_SSL');\n\
    \  $use_path = getenv('OBJECTSTORE_S3_USEPATH_STYLE');\n  $use_legacyauth = getenv('OBJECTSTORE_S3_LEGACYAUTH');\n\
    \  $autocreate = getenv('OBJECTSTORE_S3_AUTOCREATE');\n  $CONFIG = array(\n  \
    \  'objectstore' => array(\n      'class' => '\\OC\\Files\\ObjectStore\\S3',\n\
    \      'arguments' => array(\n        'bucket' => getenv('OBJECTSTORE_S3_BUCKET'),\n\
    \        'region' => getenv('OBJECTSTORE_S3_REGION') ?: '',\n        'hostname'\
    \ => getenv('OBJECTSTORE_S3_HOST') ?: '',\n        'port' => getenv('OBJECTSTORE_S3_PORT')\
    \ ?: '',\n        'storageClass' => getenv('OBJECTSTORE_S3_STORAGE_CLASS') ?:\
    \ '',\n        'objectPrefix' => getenv(\"OBJECTSTORE_S3_OBJECT_PREFIX\") ? getenv(\"\
    OBJECTSTORE_S3_OBJECT_PREFIX\") : \"urn:oid:\",\n        'autocreate' => strtolower($autocreate)\
    \ !== 'false',\n        'use_ssl' => strtolower($use_ssl) !== 'false',\n     \
    \   // required for some non Amazon S3 implementations\n        'use_path_style'\
    \ => $use_path == true && strtolower($use_path) !== 'false',\n        // required\
    \ for older protocol versions\n        'legacy_auth' => $use_legacyauth == true\
    \ && strtolower($use_legacyauth) !== 'false'\n      )\n    )\n  );\n\n  if (getenv('OBJECTSTORE_S3_KEY_FILE'))\
    \ {\n    $CONFIG['objectstore']['arguments']['key'] = trim(file_get_contents(getenv('OBJECTSTORE_S3_KEY_FILE')));\n\
    \  } elseif (getenv('OBJECTSTORE_S3_KEY')) {\n    $CONFIG['objectstore']['arguments']['key']\
    \ = getenv('OBJECTSTORE_S3_KEY');\n  } else {\n    $CONFIG['objectstore']['arguments']['key']\
    \ = '';\n  }\n\n  if (getenv('OBJECTSTORE_S3_SECRET_FILE')) {\n    $CONFIG['objectstore']['arguments']['secret']\
    \ = trim(file_get_contents(getenv('OBJECTSTORE_S3_SECRET_FILE')));\n  } elseif\
    \ (getenv('OBJECTSTORE_S3_SECRET')) {\n    $CONFIG['objectstore']['arguments']['secret']\
    \ = getenv('OBJECTSTORE_S3_SECRET');\n  } else {\n    $CONFIG['objectstore']['arguments']['secret']\
    \ = '';\n  }\n\n  if (getenv('OBJECTSTORE_S3_SSE_C_KEY_FILE')) {\n    $CONFIG['objectstore']['arguments']['sse_c_key']\
    \ = trim(file_get_contents(getenv('OBJECTSTORE_S3_SSE_C_KEY_FILE')));\n  } elseif\
    \ (getenv('OBJECTSTORE_S3_SSE_C_KEY')) {\n    $CONFIG['objectstore']['arguments']['sse_c_key']\
    \ = getenv('OBJECTSTORE_S3_SSE_C_KEY');\n  }\n}"
  smtp.config.php: "<?php\nif (getenv('SMTP_HOST') && getenv('MAIL_FROM_ADDRESS')\
    \ && getenv('MAIL_DOMAIN')) {\n  $CONFIG = array (\n    'mail_smtpmode' => 'smtp',\n\
    \    'mail_smtphost' => getenv('SMTP_HOST'),\n    'mail_smtpport' => getenv('SMTP_PORT')\
    \ ?: (getenv('SMTP_SECURE') ? 465 : 25),\n    'mail_smtpsecure' => getenv('SMTP_SECURE')\
    \ ?: '',\n    'mail_smtpauth' => getenv('SMTP_NAME') && (getenv('SMTP_PASSWORD')\
    \ || getenv('SMTP_PASSWORD_FILE')),\n    'mail_smtpauthtype' => getenv('SMTP_AUTHTYPE')\
    \ ?: 'LOGIN',\n    'mail_smtpname' => getenv('SMTP_NAME') ?: '',\n    'mail_from_address'\
    \ => getenv('MAIL_FROM_ADDRESS'),\n    'mail_domain' => getenv('MAIL_DOMAIN'),\n\
    \  );\n\n  if (getenv('SMTP_PASSWORD_FILE')) {\n      $CONFIG['mail_smtppassword']\
    \ = trim(file_get_contents(getenv('SMTP_PASSWORD_FILE')));\n  } elseif (getenv('SMTP_PASSWORD'))\
    \ {\n      $CONFIG['mail_smtppassword'] = getenv('SMTP_PASSWORD');\n  } else {\n\
    \      $CONFIG['mail_smtppassword'] = '';\n  }\n}"
  swift.config.php: "<?php\nif (getenv('OBJECTSTORE_SWIFT_URL')) {\n    $autocreate\
    \ = getenv('OBJECTSTORE_SWIFT_AUTOCREATE');\n  $CONFIG = array(\n    'objectstore'\
    \ => [\n      'class' => 'OC\\\\Files\\\\ObjectStore\\\\Swift',\n      'arguments'\
    \ => [\n        'autocreate' => $autocreate == true && strtolower($autocreate)\
    \ !== 'false',\n        'user' => [\n          'name' => getenv('OBJECTSTORE_SWIFT_USER_NAME'),\n\
    \          'password' => getenv('OBJECTSTORE_SWIFT_USER_PASSWORD'),\n        \
    \  'domain' => [\n            'name' => (getenv('OBJECTSTORE_SWIFT_USER_DOMAIN'))\
    \ ?: 'Default',\n          ],\n        ],\n        'scope' => [\n          'project'\
    \ => [\n            'name' => getenv('OBJECTSTORE_SWIFT_PROJECT_NAME'),\n    \
    \        'domain' => [\n              'name' => (getenv('OBJECTSTORE_SWIFT_PROJECT_DOMAIN'))\
    \ ?: 'Default',\n            ],\n          ],\n        ],\n        'serviceName'\
    \ => (getenv('OBJECTSTORE_SWIFT_SERVICE_NAME')) ?: 'swift',\n        'region'\
    \ => getenv('OBJECTSTORE_SWIFT_REGION'),\n        'url' => getenv('OBJECTSTORE_SWIFT_URL'),\n\
    \        'bucket' => getenv('OBJECTSTORE_SWIFT_CONTAINER_NAME'),\n      ]\n  \
    \  ]\n  );\n}"
  upgrade-disable-web.config.php: "<?php\n$CONFIG = array (\n  'upgrade.disable-web'\
    \ => true,\n);"
