apiVersion: v1
kind: ConfigMap
metadata:
  namespace: part5-stackgres-operator
  name: main-sgconfig
  annotations:
    helm.sh/hook: pre-install,pre-upgrade,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: '9'
data:
  sgconfig.yaml: "apiVersion: stackgres.io/v1\nkind: SGConfig\nmetadata:\n  annotations:\n\
    \    meta.helm.sh/release-name: main\n    meta.helm.sh/release-namespace: part5-stackgres-operator\n\
    \  labels:\n    app.kubernetes.io/managed-by: Helm\n  name: main\n  namespace:\
    \ part5-stackgres-operator\nspec:\n  \n  adminui:\n    image:\n      name: stackgres/admin-ui\n\
    \      pullPolicy: IfNotPresent\n      tag: 1.14.0\n    resources: {}\n    service:\n\
    \      exposeHTTP: false\n      \n      \n      \n      \n      type: ClusterIP\n\
    \  allowedNamespaces: []\n  authentication:\n    createAdminSecret: true\n   \
    \ \n    \n    type: jwt\n    user: admin\n  cert:\n    autoapprove: true\n   \
    \ certDuration: 730\n    certManager:\n      autoConfigure: false\n      duration:\
    \ 2160h\n      encoding: PKCS1\n      renewBefore: 360h\n      size: 2048\n  \
    \  createForCollector: true\n    createForOperator: true\n    createForWebApi:\
    \ true\n    \n    \n    \n    \n    regenerateCert: true\n    regenerateWebCert:\
    \ true\n    regenerateWebRsa: true\n    \n    \n    \n    \n    \n    \n  collector:\n\
    \    affinity: {}\n    annotations: {}\n    config:\n      exporters:\n      \
    \  otlp:\n          endpoint: stackgres-collector:4317\n          tls:\n     \
    \       ca_file: /etc/operator/certs/tls.crt\n        prometheus:\n          enable_open_metrics:\
    \ false\n          endpoint: 0.0.0.0:9464\n          metric_expiration: 180m\n\
    \          resource_to_telemetry_conversion:\n            enabled: false\n   \
    \       send_timestamps: true\n          tls:\n            ca_file: /etc/operator/certs/tls.crt\n\
    \            cert_file: /etc/operator/certs/tls.crt\n            key_file: /etc/operator/certs/tls.key\n\
    \            reload_interval: 10m\n      processors: {}\n      receivers:\n  \
    \      otlp:\n          protocols:\n            grpc:\n              endpoint:\
    \ 0.0.0.0:4317\n              tls:\n                ca_file: /etc/operator/certs/tls.crt\n\
    \                cert_file: /etc/operator/certs/tls.crt\n                key_file:\
    \ /etc/operator/certs/tls.key\n      service:\n        extensions: []\n      \
    \  pipelines:\n          metrics:\n            exporters:\n            - debug\n\
    \            - prometheus\n            processors: []\n            receivers:\n\
    \            - prometheus\n    name: stackgres-collector\n    nodeSelector: {}\n\
    \    ports:\n    - containerPort: 9464\n      name: prom-http\n      protocol:\
    \ TCP\n    prometheusOperator:\n      allowDiscovery: true\n      \n    receivers:\n\
    \      \n      enabled: false\n      exporters: 1\n    resources: {}\n    service:\n\
    \      annotations: {}\n      spec:\n        ports:\n        - name: prom-http\n\
    \          port: 9464\n          protocol: TCP\n          targetPort: prom-http\n\
    \        type: ClusterIP\n    serviceAccount:\n      annotations: {}\n    tolerations:\
    \ []\n    volumeMounts: []\n    volumes: []\n  containerRegistry: quay.io\n  deploy:\n\
    \    collector: true\n    operator: true\n    restapi: true\n  developer:\n  \
    \  allowPullExtensionsFromImageRepository: false\n    disableArbitraryUser: false\n\
    \    enableJvmDebug: false\n    enableJvmDebugSuspend: false\n    \n    \n   \
    \ \n    \n    \n    patches:\n      adminui:\n        volumeMounts: []\n     \
    \   volumes: []\n      clusterController:\n        volumeMounts: []\n        volumes:\
    \ []\n      distributedlogsController:\n        volumeMounts: []\n        volumes:\
    \ []\n      jobs:\n        volumeMounts: []\n        volumes: []\n      operator:\n\
    \        volumeMounts: []\n        volumes: []\n      restapi:\n        volumeMounts:\
    \ []\n        volumes: []\n    showDebug: false\n    showStackTraces: false\n\
    \    \n  extensions:\n    cache:\n      enabled: false\n      \n      persistentVolume:\n\
    \        size: 1Gi\n        \n      preloadedExtensions:\n      - x86_64/linux/timescaledb-1\\\
    .7\\.4-pg12\n    repositoryUrls:\n    - https://extensions.stackgres.io/postgres/repository\n\
    \  grafana:\n    autoEmbed: false\n    \n    datasourceName: Prometheus\n    password:\
    \ prom-operator\n    schema: http\n    \n    \n    \n    \n    \n    \n    user:\
    \ admin\n    \n  imagePullPolicy: IfNotPresent\n  jobs:\n    affinity: {}\n  \
    \  annotations: {}\n    image:\n      name: stackgres/jobs\n      pullPolicy:\
    \ IfNotPresent\n      tag: 1.14.0\n    nodeSelector: {}\n    resources: {}\n \
    \   tolerations: []\n  operator:\n    affinity: {}\n    annotations: {}\n    image:\n\
    \      name: stackgres/operator\n      pullPolicy: IfNotPresent\n      tag: 1.14.0\n\
    \    nodeSelector: {}\n    resources: {}\n    service:\n      annotations: {}\n\
    \    serviceAccount:\n      annotations: {}\n      repoCredentials: []\n    tolerations:\
    \ []\n  rbac:\n    create: true\n  restapi:\n    affinity: {}\n    annotations:\
    \ {}\n    image:\n      name: stackgres/restapi\n      pullPolicy: IfNotPresent\n\
    \      tag: 1.14.0\n    name: stackgres-restapi\n    nodeSelector: {}\n    resources:\
    \ {}\n    service:\n      annotations: {}\n    serviceAccount:\n      annotations:\
    \ {}\n      repoCredentials: []\n    tolerations: []\n  serviceAccount:\n    annotations:\
    \ {}\n    create: true\n    repoCredentials: []\n"
