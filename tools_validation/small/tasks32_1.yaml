apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sonarqube-scanner
  labels:
    app.kubernetes.io/version: '0.4'
  annotations:
    tekton.dev/deprecated: 'true'
    tekton.dev/pipelines.minVersion: 0.17.0
    tekton.dev/categories: Security
    tekton.dev/tags: security
    tekton.dev/displayName: sonarqube scanner
    tekton.dev/platforms: linux/amd64
spec:
  description: 'The following task can be used to perform static analysis on the source
    code provided the SonarQube server is hosted

    SonarQube is the leading tool for continuously inspecting the Code Quality and
    Security of your codebases, all while empowering development teams. Analyze over
    25 popular programming languages including C#, VB.Net, JavaScript, TypeScript
    and C++. It detects bugs, vulnerabilities and code smells across project branches
    and pull requests.'
  workspaces:
  - name: source
    description: Workspace containing the code which needs to be scanned by SonarQube
  - name: sonar-settings
    description: Optional workspace where SonarQube properties can be mounted
    optional: true
  - name: sonar-credentials
    description: 'A workspace containing a login or password for use within sonarqube.

      '
    optional: true
  params:
  - name: SONAR_HOST_URL
    description: SonarQube server URL
    default: ''
  - name: SONAR_PROJECT_KEY
    description: Project's unique key
    default: ''
  - name: PROJECT_VERSION
    description: 'Version of the project. Default: 1.0'
    default: '1.0'
  - name: SOURCE_TO_SCAN
    description: Comma-separated paths to directories containing main source files
    default: .
  - name: SONAR_ORGANIZATION
    description: The organization in sonarqube where the project exists
    default: ''
  - name: SONAR_SCANNER_IMAGE
    description: The sonarqube scanner CLI image which will run the scan
    default: docker.io/sonarsource/sonar-scanner-cli:latest
  - name: SONAR_LOGIN_KEY
    description: Name of the file of the login within the sonarqube credentials workspace
    default: login
  - name: SONAR_PASSWORD_KEY
    description: Name of the file of the password within the sonarqube credentials
      workspace
    default: password
  steps:
  - name: sonar-properties-create
    image: registry.access.redhat.com/ubi8/ubi-minimal:8.2
    workingDir: $(workspaces.source.path)
    env:
    - name: SONAR_HOST_URL
      value: $(params.SONAR_HOST_URL)
    - name: SONAR_PROJECT_KEY
      value: $(params.SONAR_PROJECT_KEY)
    - name: PROJECT_VERSION
      value: $(params.PROJECT_VERSION)
    - name: SOURCE_TO_SCAN
      value: $(params.SOURCE_TO_SCAN)
    - name: SONAR_ORGANIZATION
      value: $(params.SONAR_ORGANIZATION)
    script: "#!/usr/bin/env bash\n\nreplaceValues() {\n  filename=$1\n  thekey=$2\n\
      \  newvalue=$3\n\n  if ! grep -R \"^[#]*\\s*${thekey}=.*\" $filename >/dev/null;\
      \ then\n    echo \"APPENDING because '${thekey}' not found\"\n    echo \"\"\
      \ >>$filename\n    echo \"$thekey=$newvalue\" >>$filename\n  else\n    echo\
      \ \"SETTING because '${thekey}' found already\"\n    sed -ir \"s|^[#]*\\s*${thekey}=.*|$thekey=$newvalue|\"\
      \ $filename\n  fi\n}\n\nif [[ \"$(workspaces.sonar-settings.bound)\" == \"true\"\
      \ ]]; then\n  if [[ -f $(workspaces.sonar-settings.path)/sonar-project.properties\
      \ ]]; then\n    echo \"using user provided sonar-project.properties file\"\n\
      \    cp -RL $(workspaces.sonar-settings.path)/sonar-project.properties $(workspaces.source.path)/sonar-project.properties\n\
      \  fi\nfi\n\nif [[ -f $(workspaces.source.path)/sonar-project.properties ]];\
      \ then\n  if [[ -n \"${SONAR_HOST_URL}\" ]]; then\n    echo \"replacing sonar\
      \ host URL\"\n    replaceValues $(workspaces.source.path)/sonar-project.properties\
      \ sonar.host.url \"${SONAR_HOST_URL}\"\n  fi\n  if [[ -n \"${SONAR_PROJECT_KEY}\"\
      \ ]]; then\n    echo \"replacing sonar project key\"\n    replaceValues $(workspaces.source.path)/sonar-project.properties\
      \ sonar.projectKey \"${SONAR_PROJECT_KEY}\"\n  fi\n  echo \"Values in sonar-project.properties\
      \ file replaced successfully...\"\nelse\n  echo \"Creating sonar-project.properties\
      \ file...\"\n  touch sonar-project.properties\n  [[ -n \"${SONAR_PROJECT_KEY}\"\
      \ ]] && {\n    echo \"sonar.projectKey=${SONAR_PROJECT_KEY}\" >> sonar-project.properties\n\
      \  } || {\n    echo \"missing property SONAR_PROJECT_KEY\"\n    exit 1\n  }\n\
      \n  [[ -n \"${SONAR_HOST_URL}\" ]] && {\n    echo \"sonar.host.url=${SONAR_HOST_URL}\"\
      \ >> sonar-project.properties\n  } || {\n    echo \"missing property SONAR_HOST_URL\"\
      \n    exit 1\n  }\n\n  [[ -n \"${PROJECT_VERSION}\" ]] && {\n    echo \"sonar.projectVersion=${PROJECT_VERSION}\"\
      \ >> sonar-project.properties\n  } || {\n    echo \"missing property PROJECT_VERSION\"\
      \n    exit 1\n  }\n\n  [[ -n \"${SONAR_ORGANIZATION}\" ]] && {\n    echo \"\
      sonar.organization=${SONAR_ORGANIZATION}\" >> sonar-project.properties\n  }\
      \ || {\n    echo \"missing property SONAR_ORGANIZATION\"\n    exit 1\n  }\n\
      \  echo \"sonar.sources=${SOURCE_TO_SCAN}\" >> sonar-project.properties\n  echo\
      \ \"---------------------------\"\n  cat $(workspaces.source.path)/sonar-project.properties\n\
      fi\n\nif [[ \"$(workspaces.sonar-credentials.bound)\" == \"true\" ]]; then\n\
      \  if [[ -f $(workspaces.sonar-credentials.path)/$(params.SONAR_PASSWORD_KEY)\
      \ ]]; then\n    SONAR_PASSWORD=`cat $(workspaces.sonar-credentials.path)/$(params.SONAR_PASSWORD_KEY)`\n\
      \    replaceValues $(workspaces.source.path)/sonar-project.properties sonar.password\
      \ \"${SONAR_PASSWORD}\"\n  fi\n  if [[ -f $(workspaces.sonar-credentials.path)/$(params.SONAR_LOGIN_KEY)\
      \ ]]; then\n    SONAR_LOGIN=`cat $(workspaces.sonar-credentials.path)/$(params.SONAR_LOGIN_KEY)`\n\
      \    replaceValues $(workspaces.source.path)/sonar-project.properties sonar.login\
      \ \"${SONAR_LOGIN}\"\n  fi\nfi\n"
  - name: sonar-scan
    image: $(params.SONAR_SCANNER_IMAGE)
    workingDir: $(workspaces.source.path)
    command:
    - sonar-scanner
