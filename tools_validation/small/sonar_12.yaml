apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-sonarqube
  labels:
    app: sonarqube
    chart: sonarqube-10.3.0_2009
    release: release-name
    heritage: Helm
    app.kubernetes.io/name: sonarqube-release-name-sonarqube
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: sonarqube
    app.kubernetes.io/component: release-name-sonarqube
    app.kubernetes.io/version: 10.3.0-community
spec:
  replicas: 1
  serviceName: release-name-sonarqube
  selector:
    matchLabels:
      app: sonarqube
      release: release-name
  template:
    metadata:
      labels:
        app: sonarqube
        release: release-name
      annotations:
        checksum/init-sysctl: 06879df580e64bcf164f68192cdae036ef60a40f9399d19304016edfe7b761ea
        checksum/init-fs: 76b8fec2d97f8231439788240f8f8101df08d0d00baaf11bed3a78a5396a335b
        checksum/plugins: 41b2707fd3e840286b3863e67a720492db8b5b68c2ae43ad5b2af1426e65a186
        checksum/config: f3b22f9fd337028273e835d942e52c8c06204659d9cff39cdb60507f898b735f
        checksum/secret: 47695b0da31c8a3cbf1322a0d87dc2918deb709eaf1fb600f3409ed74e3ecb58
    spec:
      securityContext:
        fsGroup: 1000
      initContainers:
      - name: wait-for-db
        image: sonarqube:10.3.0-community
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        resources: {}
        command:
        - /bin/bash
        - -c
        args:
        - set -o pipefail;for i in {1..200};do (echo > /dev/tcp/release-name-postgresql/5432)
          && exit 0; sleep 2;done; exit 1
      - name: init-sysctl
        image: sonarqube:10.3.0-community
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
        resources: {}
        command:
        - /bin/bash
        - -e
        - /tmp/scripts/init_sysctl.sh
        volumeMounts:
        - name: init-sysctl
          mountPath: /tmp/scripts/
      containers:
      - name: sonarqube
        image: sonarqube:10.3.0-community
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 9000
          protocol: TCP
        resources:
          limits:
            cpu: 800m
            memory: 4Gi
          requests:
            cpu: 400m
            memory: 2Gi
        env:
        - name: SONAR_HELM_CHART_VERSION
          value: 10.3.0_2009
        - name: SONAR_WEB_JAVAOPTS
          value: null
        - name: SONAR_WEB_CONTEXT
          value: /
        - name: SONAR_CE_JAVAOPTS
          value: null
        - name: SONAR_JDBC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-postgresql
              key: postgresql-password
        - name: SONAR_WEB_SYSTEMPASSCODE
          valueFrom:
            secretKeyRef:
              name: release-name-sonarqube-monitoring-passcode
              key: SONAR_WEB_SYSTEMPASSCODE
        envFrom:
        - configMapRef:
            name: release-name-sonarqube-jdbc-config
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - 'host="$(hostname -i || echo ''127.0.0.1'')"

              wget --no-proxy --quiet -O /dev/null --timeout=1 --header="X-Sonar-Passcode:
              $SONAR_WEB_SYSTEMPASSCODE" "http://${host}:9000/api/system/liveness"

              '
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 6
          timeoutSeconds: 1
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "#!/bin/bash\n# A Sonarqube container is considered ready if the status\
              \ is UP, DB_MIGRATION_NEEDED or DB_MIGRATION_RUNNING\n# status about\
              \ migration are added to prevent the node to be kill while sonarqube\
              \ is upgrading the database.\nhost=\"$(hostname -i || echo '127.0.0.1')\"\
              \nif wget --no-proxy -qO- http://${host}:9000/api/system/status | grep\
              \ -q -e '\"status\":\"UP\"' -e '\"status\":\"DB_MIGRATION_NEEDED\"'\
              \ -e '\"status\":\"DB_MIGRATION_RUNNING\"'; then\n\texit 0\nfi\nexit\
              \ 1\n"
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 6
          timeoutSeconds: 1
        startupProbe:
          httpGet:
            scheme: HTTP
            path: /api/system/status
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 24
          timeoutSeconds: 1
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /opt/sonarqube/data
          name: sonarqube
          subPath: data
        - mountPath: /opt/sonarqube/temp
          name: sonarqube
          subPath: temp
        - mountPath: /opt/sonarqube/logs
          name: sonarqube
          subPath: logs
        - mountPath: /tmp
          name: tmp-dir
      serviceAccountName: default
      volumes:
      - name: init-sysctl
        configMap:
          name: release-name-sonarqube-init-sysctl
          items:
          - key: init_sysctl.sh
            path: init_sysctl.sh
      - name: init-fs
        configMap:
          name: release-name-sonarqube-init-fs
          items:
          - key: init_fs.sh
            path: init_fs.sh
      - name: install-plugins
        configMap:
          name: release-name-sonarqube-install-plugins
          items:
          - key: install_plugins.sh
            path: install_plugins.sh
      - name: sonarqube
        emptyDir: {}
      - name: tmp-dir
        emptyDir: {}
