apiVersion: v1
kind: ConfigMap
metadata:
  name: tretboot-app
  namespace: tretboot
data:
  docker-entrypoint.sh: '#!/bin/sh


    echo "Install dependencies..."

    apk add --no-cache git openssh helm yj jq kubectl bash > /dev/null || exit 1

    helm plugin install https://github.com/databus23/helm-diff > /dev/null || exit
    1

    echo "Install dependencies... [DONE]"

    /app/app.sh

    '
  app.sh: "#!/bin/bash\necho \"Running tretboot version $(md5sum /app/app.sh)\"\n\
    export tretboot_autoupdate=https://raw.githubusercontent.com/Deltachaos/tretboot/main/tretboot.yaml\n\
    if test -f /etc/tretboot/autoupdate; then\n  export tretboot_autoupdate=$(cat\
    \ /etc/tretboot/autoupdate)\nfi\n\nfunction deletepods {\n  echo \"Remove pods\"\
    \n  kubectl delete pods --namespace tretboot --selector=app=tretboot --wait=false\
    \ # Remove ourself\n  echo \"Remove pods [DONE]\"\n}\n\nfunction update {\n  trap\
    \ - EXIT\n  sleep 10\n  if ! [ -z \"$tretboot_autoupdate\" ]; then\n    echo \"\
    Check for updates\"\n    if ! kubectl diff -f \"$tretboot_autoupdate\"; then\n\
    \      echo \"Apply updates\"\n      kubectl apply -f \"$tretboot_autoupdate\"\
    \n      deletepods\n      exit 0\n    fi\n  fi;\n}\n\nfunction exittrap {\n  trap\
    \ - EXIT\n  echo \"Cleanup...\"\n  update\n  deletepods\n}\n\ntrap exittrap EXIT\n\
    \nfunction helmoperation {\n  echo \"Helm Operation:\"\n  echo \"Namespace: ${namespace}\"\
    \n  echo \"Release: ${release}\"\n  echo \"Chart: ${chart}\"\n  echo \"Values:\
    \ \"\n  cat /tmp/${name}.json\n  extravalues=\"\"\n  if [ -e /etc/tretboot/${release}.yaml\
    \ ]; then\n    echo \"Tretboot Values: \"\n    cat /etc/tretboot/${release}.yaml\n\
    \    extravalues=\"-f /etc/tretboot/${release}.yaml\"\n  fi\n\n  local helmsuccess=0\n\
    \  if ! helm status --namespace \"${namespace}\" \"${release}\"; then\n    echo\
    \ \"Initial install.\"\n    helm install --create-namespace --namespace \"${namespace}\"\
    \ -f /tmp/${name}.json $extravalues \"${release}\" \"${chart}\"\n    helmsuccess=$?\n\
    \  else\n    if [ \"${update}\" -eq \"1\" ]; then\n      count=$(helm diff upgrade\
    \ --namespace \"${namespace}\" \"${release}\" -f /tmp/${name}.json $extravalues\
    \ \"${chart}\" | grep -v '^$' | wc -l)\n      echo \"Diff lines: $count\"\n  \
    \    if [ \"$count\" -gt \"0\" ]; then\n        echo \"Upgrade existing release.\"\
    \n        helm upgrade --install --create-namespace --namespace \"${namespace}\"\
    \ -f /tmp/${name}.json $extravalues \"${release}\" \"${chart}\"\n        helmsuccess=$?\n\
    \      else\n        echo \"No changes. Skip.\"\n      fi\n    else\n      echo\
    \ \"Update disabled. Skip.\"\n    fi\n  fi\n\n  return $helmsuccess\n}\n\ntest\
    \ -f \"/etc/tretboot/repository\" || (echo \"Please set git url in key repository\
    \ in configmap tretboot-config\" && exit 1)\n\nexport tretboot_interval=60\nexport\
    \ tretboot_namespace=default\nexport tretboot_path=\"\"\n\ncd /etc/tretboot/ ||\
    \ exit 1\nfor var in *; do\n  if [ -f \"$var\" ]; then\n    export tretboot_${var}=$(cat\
    \ /etc/tretboot/$var) \n  fi\ndone;\n\nif [ -f \"/etc/tretboot/hook-before-clone\"\
    \ ]; then\n  source /etc/tretboot/hook-before-clone\nfi;\n\ncd /tmp || exit 1\n\
    if [ -d /tmp/repository ]; then\n  echo \"Clean up old directory\"\n  rm -Rf /tmp/repository\n\
    fi\nexport GIT_SSH_COMMAND=\"ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no\"\
    \ngit clone \"${tretboot_repository}\" repository || exit 1\n\nwhile true; do\n\
    \  cd \"/tmp/repository\" || exit 1\n  echo \"Update repository...\"\n  git fetch\n\
    \  git reset origin/$(git rev-parse --abbrev-ref HEAD) --hard\n  echo \"Update\
    \ repository... [DONE]\"\n\n  echo \"List contents of repository:\"\n  ls -l /tmp/repository/\n\
    \n  cd \"/tmp/repository/${tretboot_path}\" || exit 1\n\n  echo \"List contents\
    \ of tretboot path:\"\n  ls -l\n\n  if [ -f \"/etc/tretboot/hook-loop\" ]; then\n\
    \    source /etc/tretboot/hook-loop\n  fi;\n\n  helmsuccess=0\n  \n  for dir in\
    \ *; do\n    cd \"/tmp/repository/${tretboot_path}\" || exit 1\n    echo \"Check\
    \ $dir\"\n    if [ -d \"$dir\" ]; then\n      name=$(basename $dir)\n      echo\
    \ \"{}\" > /tmp/${name}.json\n      release=${name}\n      update=1\n      echo\
    \ \"Check for $dir/fleet.yaml\"\n      if [ -e \"$dir/fleet.yaml\" ]; then\n \
    \       echo \"Found fleet bundle $name in $dir\"\n        echo \"Helm:\"\n  \
    \      if yj \"$dir/fleet.yaml\" | jq -e '.helm'; then\n          namespace=$(yj\
    \ \"$dir/fleet.yaml\" | jq -e --raw-output '.defaultNamespace' || echo $tretboot_namespace)\n\
    \          chart=$(yj \"$dir/fleet.yaml\" | jq --raw-output '.helm.chart')\n \
    \         echo \"Helm releaseName:\"\n          if yj \"$dir/fleet.yaml\" | jq\
    \ -e '.helm.releaseName'; then\n            release=$(yj \"$dir/fleet.yaml\" |\
    \ jq --raw-output '.helm.releaseName')\n          fi\n          echo \"Helm disableUpdate:\"\
    \n          if yj \"$dir/fleet.yaml\" | jq -e '.helm.disableUpdate'; then\n  \
    \          update=$(yj \"$dir/fleet.yaml\" | jq --raw-output 'if .helm.disableUpdate\
    \ then 0 else 1 end')\n          fi\n          echo \"Helm values:\"\n       \
    \   if yj \"$dir/fleet.yaml\" | jq -e '.helm.values'; then\n            yj \"\
    $dir/fleet.yaml\" | jq '.helm.values' > /tmp/${name}.json\n          fi\n    \
    \      if yj \"$dir/fleet.yaml\" | jq -e '.helm.repo'; then\n            repo=$(yj\
    \ \"$dir/fleet.yaml\" | jq --raw-output '.helm.repo')\n            echo \"Add\
    \ repository ${name} with url ${repo}\";\n            helm repo add \"${name}\"\
    \ \"${repo}\" --force-update\n            helm repo update\n            chart=\"\
    ${name}/${chart}\"\n          else\n            echo \"Chart without repository.\
    \ Assume local chart\";\n            cd \"${name}\"\n          fi\n          helmoperation\n\
    \          helmsuccess=$?\n        else\n          echo \"Bundle $name has no\
    \ helm entry. Unsupported.\"\n        fi\n      else\n        echo \"Check for\
    \ $dir/Chart.yaml\"\n        if [ -e \"$dir/Chart.yaml\" ]; then\n          echo\
    \ \"Found helm chart $name in $dir\"\n          namespace=$tretboot_namespace\n\
    \          chart=\"./${dir}\"\n          helm dependency update \"${chart}\"\n\
    \          helmoperation\n          helmsuccess=$?\n        fi\n      fi\n   \
    \ fi;\n  done;\n\n  if [ \"$helmsuccess\" -gt \"0\" ]; then\n    echo \"Not all\
    \ ressources applied. Sleep for 10 seconds and retry.\"\n    sleep 10\n  else\n\
    \    echo \"Sleep for ${tretboot_interval} seconds\"\n    sleep ${tretboot_interval}\n\
    \    update\n  fi\ndone;\n"
