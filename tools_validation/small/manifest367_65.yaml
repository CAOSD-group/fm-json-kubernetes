apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbit
  namespace: default
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: rabbitmq
    app.kubernetes.io/version: 3.12.13
    helm.sh/chart: rabbitmq-13.0.0
spec:
  serviceName: rabbit-headless
  podManagementPolicy: OrderedReady
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: rabbitmq
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: rabbitmq
        app.kubernetes.io/version: 3.12.13
        helm.sh/chart: rabbitmq-13.0.0
      annotations:
        checksum/config: 0845d01890a928270266dda9d6d6e4b74199bd3c5b77b7bc23b447f20d0113e6
        checksum/secret: 003a1e32c18365b949c3f6436ff1ffc77a0f956ed888a9386a6b4b1a25b3163f
    spec:
      serviceAccountName: rabbit
      affinity:
        podAffinity: null
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: release-name
                  app.kubernetes.io/name: rabbitmq
              topologyKey: kubernetes.io/hostname
            weight: 1
        nodeAffinity: null
      automountServiceAccountToken: true
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      terminationGracePeriodSeconds: 120
      enableServiceLinks: true
      initContainers: null
      containers:
      - name: rabbitmq
        image: docker.io/bitnami/rabbitmq:3.12.13-debian-12-r2
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1001
          runAsNonRoot: true
          runAsUser: 1001
          seccompProfile:
            type: RuntimeDefault
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/bash
              - -ec
              - "if [[ -f /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh ]]; then\n\
                \    /opt/bitnami/scripts/rabbitmq/nodeshutdown.sh -t \"120\" -d \"\
                false\"\nelse\n    rabbitmqctl stop_app\nfi\n"
        env:
        - name: BITNAMI_DEBUG
          value: 'false'
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: RABBITMQ_FORCE_BOOT
          value: 'no'
        - name: RABBITMQ_NODE_NAME
          value: rabbit@$(MY_POD_NAME).rabbit-headless.$(MY_POD_NAMESPACE).svc.cluster.local
        - name: RABBITMQ_MNESIA_DIR
          value: /opt/bitnami/rabbitmq/.rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)
        - name: RABBITMQ_LDAP_ENABLE
          value: 'no'
        - name: RABBITMQ_LOGS
          value: '-'
        - name: RABBITMQ_ULIMIT_NOFILES
          value: '65536'
        - name: RABBITMQ_USE_LONGNAME
          value: 'true'
        - name: RABBITMQ_ERL_COOKIE
          valueFrom:
            secretKeyRef:
              name: rabbit
              key: rabbitmq-erlang-cookie
        - name: RABBITMQ_LOAD_DEFINITIONS
          value: 'no'
        - name: RABBITMQ_DEFINITIONS_FILE
          value: /app/load_definition.json
        - name: RABBITMQ_SECURE_PASSWORD
          value: 'yes'
        - name: RABBITMQ_USERNAME
          value: admin
        - name: RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rabbit
              key: rabbitmq-password
        - name: RABBITMQ_PLUGINS
          value: rabbitmq_management, rabbitmq_peer_discovery_k8s, rabbitmq_auth_backend_ldap
        envFrom: null
        ports:
        - name: amqp
          containerPort: 5672
        - name: dist
          containerPort: 25672
        - name: stats
          containerPort: 15672
        - name: epmd
          containerPort: 4369
        livenessProbe:
          failureThreshold: 6
          initialDelaySeconds: 120
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 20
          exec:
            command:
            - sh
            - -ec
            - curl -f --user admin:$RABBITMQ_PASSWORD 127.0.0.1:15672/api/health/checks/virtual-hosts
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 20
          exec:
            command:
            - sh
            - -ec
            - curl -f --user admin:$RABBITMQ_PASSWORD 127.0.0.1:15672/api/health/checks/local-alarms
        resources:
          limits:
            cpu: 375m
            ephemeral-storage: 1024Mi
            memory: 384Mi
          requests:
            cpu: 250m
            ephemeral-storage: 50Mi
            memory: 256Mi
        volumeMounts:
        - name: configuration
          mountPath: /bitnami/rabbitmq/conf
        - name: empty-dir
          mountPath: /tmp
          subPath: tmp-dir
        - name: empty-dir
          mountPath: /opt/bitnami/rabbitmq/etc/rabbitmq
          subPath: app-conf-dir
        - name: empty-dir
          mountPath: /opt/bitnami/rabbitmq/var/lib/rabbitmq
          subPath: app-tmp-dir
        - name: empty-dir
          mountPath: /opt/bitnami/rabbitmq/.rabbitmq/
          subPath: app-erlang-cookie
        - name: empty-dir
          mountPath: /opt/bitnami/rabbitmq/var/log/rabbitmq
          subPath: app-logs-dir
        - name: data
          mountPath: /opt/bitnami/rabbitmq/.rabbitmq/mnesia
      volumes:
      - name: empty-dir
        emptyDir: {}
      - name: configuration
        projected:
          sources:
          - secret:
              name: rabbit-config
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: data
      labels:
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/name: rabbitmq
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
