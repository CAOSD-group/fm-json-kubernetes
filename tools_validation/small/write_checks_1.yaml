apiVersion: v1
kind: ConfigMap
metadata:
  name: service-source
  namespace: write-checks
  labels:
    app: write-checks
data:
  requirements.txt: 'flask

    pyjwt

    requests'
  startup.sh: '#!/bin/bash


    pip3 install -r /src/requirements.txt


    echo "Starting python service..."


    python3 /src/service.py'
  service.py: "from flask import Flask\nimport os\nimport socket\nimport json\nfrom\
    \ flask import request\nfrom pathlib import Path\nimport requests\nimport base64\n\
    \napp = Flask(__name__)\n\n@app.route('/headers')\ndef return_headers():\n  return\
    \ json.dumps({\"headers\":str(request.headers)})\n\n@app.route('/write-check')\n\
    def write_check():\n\n    # let's first get the original JWT.  We'll\n    # use\
    \ this as an input for impersonation\n\n    az_header = request.headers[\"Authorization\"\
    ]\n    user_jwt = az_header[7:]\n\n    # next, get the pod's ServiceAccount token\n\
    \    # so we can identify the pod to the IdP for\n    # an impersonation token\n\
    \n    pod_jwt = Path('/var/run/secrets/kubernetes.io/serviceaccount/token').read_text()\n\
    \n\n    # with the subject (user) jwt and the pod \n    # jwt we can now request\
    \ an impersonated \n    # token for our user from openunison\n\n    impersonation_request\
    \ = {\n      \"grant_type\":\"urn:ietf:params:oauth:grant-type:token-exchange\"\
    ,\n      \"audience\":\"checkfunds\",\n      \"subject_token\":user_jwt,\n   \
    \   \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\",\n  \
    \    \"client_id\":\"sts-impersonation\"\n    }\n\n    impersonation_headers =\
    \ {\n      \"Authorization\": \"Bearer %s\" % pod_jwt\n    }\n\n    resp = requests.post(\"\
    https://k8sou.IPADDR.nip.io/auth/idp/service-idp/token\",verify=False,data=impersonation_request,headers=impersonation_headers)\n\
    \n    response_payload = json.loads(resp.text)\n\n    impersonated_id_token =\
    \ response_payload[\"id_token\"]\n\n    # with the impersonated user's id_token,\
    \ call another\n    # service as that user\n\n    call_funds_headers = {\n   \
    \   \"Authorization\": \"Bearer %s\" % impersonated_id_token\n    }\n\n    resp\
    \ = requests.get(\"http://write-checks.IPADDR.nip.io/check-funds\",verify=False,headers=call_funds_headers)\n\
    \n    call_funds_text = resp.text\n\n    # Next, pull the funds with a delegated\
    \ token\n\n    # get the pod's ServiceAccount token\n    # so we can identify\
    \ the pod to the IdP for\n    # an impersonation token\n\n    pod_jwt = Path('/var/run/secrets/kubernetes.io/serviceaccount/token').read_text()\n\
    \n    # get a jwt from the idp for our pod's sa\n    # using the client_credentials\
    \ grant\n\n    client_credentials_grant_request = {\n      \"grant_type\": \"\
    client_credentials\",\n      \"client_id\" : \"sts-delegation\"\n    }\n\n   \
    \ delegation_headers = {\n      \"Authorization\": \"Bearer %s\" % pod_jwt\n \
    \   }\n\n    resp = requests.post(\"https://k8sou.IPADDR.nip.io/auth/idp/service-idp/token\"\
    ,verify=False,data=client_credentials_grant_request,headers=delegation_headers)\n\
    \n    response_payload = json.loads(resp.text)\n    actor_token = response_payload[\"\
    id_token\"]\n\n    # with an actor token, call the tokens endpoint to\n    # get\
    \ a delegated token\n\n    delegation_request = {\n      \"grant_type\":\"urn:ietf:params:oauth:grant-type:token-exchange\"\
    ,\n      \"audience\":\"pullfunds\",\n      \"subject_token\":user_jwt,\n    \
    \  \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\",\n   \
    \   \"client_id\":\"sts-delegation\",\n      \"actor_token\": actor_token,\n \
    \     \"actor_token_type\": \"urn:ietf:params:oauth:token-type:id_token\"\n  \
    \  }\n\n    resp = requests.post(\"https://k8sou.IPADDR.nip.io/auth/idp/service-idp/token\"\
    ,verify=False,data=delegation_request)\n\n    response_payload = json.loads(resp.text)\n\
    \n    delegation_token = response_payload[\"id_token\"]\n\n    pull_funds_header\
    \ = {\n      \"Authorization\": \"Bearer %s\" % delegation_token\n    }\n\n  \
    \  resp = requests.get(\"http://write-checks.IPADDR.nip.io/pull-funds\",verify=False,headers=pull_funds_header)\n\
    \n    pull_funds_text = resp.text\n\n    retVal = {\n        \"msg\":\"hello world!\"\
    ,\n        \"host\":\"%s\" % socket.gethostname(),\n        \"user_jwt\": user_jwt,\n\
    \        \"pod_jwt\": pod_jwt,\n        \"impersonated_jwt\" : impersonated_id_token,\n\
    \        \"call_funds_status_code\" : resp.status_code,\n        \"call_funds_text\"\
    \ : call_funds_text, \n        \"actor_token\" : actor_token,\n        \"delegation_token\"\
    \ : delegation_token,\n        \"pull_funds_text\" : pull_funds_text\n    }\n\n\
    \    return json.dumps(retVal)\n\n@app.route(\"/check-funds\")\ndef check_funds():\n\
    \  user_info = request.headers[\"User-Info\"]\n  user_info_json = base64.b64decode(user_info).decode(\"\
    utf8\")\n  user_info_obj = json.loads(user_info_json)\n\n  print(\"Calling check\
    \ funds as '%s'\" % user_info_obj[\"sub\"])\n\n  return json.dumps({\"funds_available\"\
    :True,\"user\":user_info_obj[\"sub\"]})\n\n@app.route(\"/pull-funds\")\ndef pull_funds():\n\
    \  user_info = request.headers[\"User-Info\"]\n  user_info_json = base64.b64decode(user_info).decode(\"\
    utf8\")\n  user_info_obj = json.loads(user_info_json)\n\n  print(\"Calling pull\
    \ funds as '%s'\" % user_info_obj[\"sub\"])\n\n  return json.dumps({\"funds_pulled\"\
    :True,\"user\":user_info_obj[\"sub\"],\"actor\":user_info_obj[\"act\"][\"sub\"\
    ]})\n\n\n@app.route(\"/health-check\")\ndef health_check():\n  ret_val = {\n \
    \   \"status\":\"I'm not dead yet!\"\n  }\n  return json.dumps(ret_val)\n\nif\
    \ __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8080, debug=True)"
