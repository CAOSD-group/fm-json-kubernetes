apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rolling-node
  namespace: testing
spec:
  podManagementPolicy: Parallel
  replicas: 1
  serviceName: rolling-node
  selector:
    matchLabels:
      node_class: rolling-node
  template:
    metadata:
      labels:
        appType: octez-node
        node_class: rolling-node
    spec:
      containers:
      - name: octez-node
        image: tezos/tezos:octez-v20.2
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        args:
        - -c
        - "#!/bin/sh\n\nset -xe\n\n# ensure we can run octez-client commands without\
          \ specifying client dir\nln -s /var/tezos/client /home/tezos/.tezos-client\n\
          #\n# Not every error is fatal on start.\n# So, we try a few times with increasing\
          \ delays:\n\nfor d in 1 1 5 10 20 60 120; do\n\t/usr/local/bin/octez-node\
          \ run\t\t\t\t\\\n\t\t\t--bootstrap-threshold 0\t\t\t\\\n\t\t\t--config-file\
          \ /etc/tezos/config.json\n\tsleep $d\ndone\n\n#\n# Keep the container alive\
          \ for troubleshooting on failures:\n\nsleep 3600\n"
        envFrom: null
        env:
        - name: DAEMON
          value: octez-node
        volumeMounts:
        - mountPath: /etc/tezos
          name: config-volume
        - mountPath: /var/tezos
          name: var-volume
        ports:
        - containerPort: 8732
          name: tezos-rpc
        - containerPort: 9732
          name: tezos-net
        - containerPort: 9932
          name: metrics
        readinessProbe:
          httpGet:
            path: /is_synced
            port: 31732
      - name: sidecar
        image: ghcr.io/tacoinfra/tezos-k8s-utils:main
        imagePullPolicy: IfNotPresent
        args:
        - sidecar
        envFrom:
        - configMapRef:
            name: tezos-config
        env:
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_TYPE
          value: node
        - name: MY_NODE_CLASS
          value: rolling-node
        - name: DAEMON
          value: sidecar
        volumeMounts:
        - mountPath: /etc/tezos
          name: config-volume
        - mountPath: /var/tezos
          name: var-volume
        resources:
          limits:
            memory: 100Mi
          requests:
            memory: 80Mi
      initContainers:
      - name: config-init
        image: tezos/tezos:octez-v20.2
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        args:
        - -c
        - "set -e\n\necho \"Writing custom configuration for public node\"\nmkdir\
          \ -p /etc/tezos/data\n\n# if config already exists (container is rebooting),\
          \ dump and delete it.\nif [ -e /etc/tezos/data/config.json ]; then\n  printf\
          \ \"Found pre-existing config.json:\\n\"\n  cat /etc/tezos/data/config.json\n\
          \  printf \"Deleting\\n\"\n  rm -rvf /etc/tezos/data/config.json\nfi\n\n\
          /usr/local/bin/octez-node config init\t\t\\\n    --config-file /etc/tezos/data/config.json\t\
          \\\n    --data-dir /etc/tezos/data\t\t\t\\\n    --network $CHAIN_NAME\n\n\
          cat /etc/tezos/data/config.json\n\nprintf \"\\n\\n\\n\\n\\n\\n\\n\"\n"
        envFrom:
        - configMapRef:
            name: tezos-config
        env:
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_TYPE
          value: node
        - name: MY_NODE_CLASS
          value: rolling-node
        - name: DAEMON
          value: config-init
        volumeMounts:
        - mountPath: /etc/tezos
          name: config-volume
        - mountPath: /var/tezos
          name: var-volume
      - name: config-generator
        image: ghcr.io/tacoinfra/tezos-k8s-utils:main
        imagePullPolicy: IfNotPresent
        args:
        - config-generator
        envFrom:
        - configMapRef:
            name: tezos-config
        env:
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_TYPE
          value: node
        - name: MY_NODE_CLASS
          value: rolling-node
        - name: DAEMON
          value: config-generator
        volumeMounts:
        - mountPath: /etc/tezos
          name: config-volume
        - mountPath: /var/tezos
          name: var-volume
        - mountPath: /etc/secret-volume
          name: tezos-accounts
      - name: snapshot-downloader
        image: ghcr.io/tacoinfra/tezos-k8s-utils:main
        imagePullPolicy: IfNotPresent
        args:
        - snapshot-downloader
        envFrom:
        - configMapRef:
            name: tezos-config
        env:
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_TYPE
          value: node
        - name: MY_NODE_CLASS
          value: rolling-node
        - name: DAEMON
          value: snapshot-downloader
        volumeMounts:
        - mountPath: /etc/tezos
          name: config-volume
        - mountPath: /var/tezos
          name: var-volume
      - name: snapshot-importer
        image: tezos/tezos:octez-v20.2
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        args:
        - -c
        - "set -e\n\nbin_dir=\"/usr/local/bin\"\ndata_dir=\"/var/tezos\"\nnode_dir=\"\
          $data_dir/node\"\nnode_data_dir=\"$node_dir/data\"\nnode=\"$bin_dir/octez-node\"\
          \nsnapshot_file=${node_dir}/chain.snapshot\n\nif [ ! -f ${snapshot_file}\
          \ ]; then\n    echo \"No snapshot to import.\"\n    exit 0\nfi\n\nif [ -e\
          \ ${node_data_dir}/context/store.dict ]; then\n    echo \"Blockchain has\
          \ already been imported. If a tarball\"\n    echo \"instead of a regular\
          \ tezos snapshot was used, it was\"\n    echo \"imported in the snapshot-downloader\
          \ container.\"\n    exit 0\nfi\n\ncp -v /etc/tezos/config.json ${node_data_dir}\n\
          \nif [ -f ${node_dir}/chain.snapshot.block_hash ]; then\n    block_hash_arg=\"\
          --block $(cat ${node_dir}/chain.snapshot.block_hash)\"\nfi\n\n${node} snapshot\
          \ import ${snapshot_file} --data-dir ${node_data_dir} --no-check\nfind ${node_dir}\n\
          \nrm -rvf ${snapshot_file}\n"
        envFrom:
        - configMapRef:
            name: tezos-config
        env:
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_TYPE
          value: node
        - name: MY_NODE_CLASS
          value: rolling-node
        - name: DAEMON
          value: snapshot-importer
        volumeMounts:
        - mountPath: /etc/tezos
          name: config-volume
        - mountPath: /var/tezos
          name: var-volume
      - name: upgrade-storage
        image: tezos/tezos:octez-v20.2
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        args:
        - -c
        - "set -ex\n\nif [ ! -e /var/tezos/node/data/context/store.dict ]\nthen\n\
          \  printf \"No store in data dir found, probably initial start, doing nothing.\"\
          \n  exit 0\nfi\noctez-node upgrade storage --config /etc/tezos/config.json\n"
        envFrom: null
        env:
        - name: DAEMON
          value: upgrade-storage
        volumeMounts:
        - mountPath: /etc/tezos
          name: config-volume
        - mountPath: /var/tezos
          name: var-volume
      securityContext:
        fsGroup: 1000
      volumes:
      - emptyDir: {}
        name: config-volume
      - name: tezos-accounts
        secret:
          secretName: tezos-secret
  volumeClaimTemplates:
  - metadata:
      name: var-volume
      namespace: testing
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 100Gi
