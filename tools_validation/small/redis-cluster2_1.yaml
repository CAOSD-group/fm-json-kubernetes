apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-masters
  namespace: redis
spec:
  serviceName: redis-masters
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        appCluster: redis-masters
    spec:
      terminationGracePeriodSeconds: 20
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  appCluster: redis-masters
              topologyKey: kubernetes.io/hostname
            weight: 5
      volumes:
      - name: shared
        emptyDir: {}
      - name: tls
        secret:
          secretName: redis-tls
      initContainers:
      - name: init-tls
        image: alpine/openssl
        env:
        - name: TZ
          value: America/Sao_Paulo
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: shared
          mountPath: /tls
        - name: tls
          mountPath: /tls/ca.crt
          subPath: ca.crt
          readOnly: true
        - name: tls
          mountPath: /tls/ca.key
          subPath: ca.key
          readOnly: true
        - name: tls
          mountPath: /tls/redis.key
          subPath: redis.key
          readOnly: true
        command:
        - /bin/sh
        args:
        - -c
        - "set -ex\ncd /tls\nopenssl req -new -key redis.key -out server.csr \\\n\
          \  -subj '/O=test/CN=redis'\necho \"extendedKeyUsage = serverAuth,clientAuth\"\
          \ > server_cert.txt\necho \"subjectAltName=IP:127.0.0.1,IP:$(POD_IP),DNS:*.redis.svc.cluster.local,DNS:*.redis-masters.redis.svc.cluster.local,DNS:*.redis-replicas.redis.svc.cluster.local\"\
          \ >> server_cert.txt\nopenssl x509 -req -CA ca.crt \\\n  -CAkey ca.key -CAcreateserial\
          \ -days 36500 \\\n  -in server.csr -out redis.crt -sha256 -extfile server_cert.txt\n\
          openssl verify -CAfile ca.crt redis.crt\n"
      containers:
      - name: redis
        image: redis:7-alpine
        envFrom:
        - secretRef:
            name: redis-pass
        env:
        - name: TZ
          value: America/Sao_Paulo
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_INDEX
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
        - name: SLAVE_REPLICA
          value: redis-replicas-$(POD_INDEX).redis-replicas.redis.svc.cluster.local
        args:
        - redis-server
        - --save 60 1
        - --loglevel notice
        - --dir /data
        - --port 0
        - --tls-port 6379
        - --tls-cert-file /tls/redis.crt
        - --tls-key-file /tls/redis.key
        - --tls-ca-cert-file /tls/ca.crt
        - --tls-auth-clients no
        - --tls-replication yes
        - --tls-cluster yes
        - --cluster-enabled yes
        - --cluster-announce-ip $(POD_IP)
        - --cluster-config-file /data/nodes.conf
        - --cluster-node-timeout 15000
        - --appendonly yes
        - --requirepass $(REDISCLI_AUTH)
        - --masterauth $(REDISCLI_AUTH)
        lifecycle:
          postStart:
            exec:
              command:
              - sh
              - -c
              - "role=$(redis-cli --tls --cacert /tls/ca.crt role | awk '{print $1;\
                \ exit}')\nwhile [ \"$role\" = \"slave\" ]; do\n  redis-cli --tls\
                \ --cacert /tls/ca.crt cluster failover\n  sleep 5\n  role=$(redis-cli\
                \ --tls --cacert /tls/ca.crt role | awk '{print $1; exit}')\ndone\n"
          preStop:
            exec:
              command:
              - sh
              - -c
              - "role=$(redis-cli --tls --cacert /tls/ca.crt -h $SLAVE_REPLICA role\
                \ | awk '{print $1; exit}')\nwhile [ \"$role\" = \"slave\" ]; do\n\
                \  redis-cli --tls --cacert /tls/ca.crt -h $SLAVE_REPLICA cluster\
                \ failover\n  sleep 5\n  role=$(redis-cli --tls --cacert /tls/ca.crt\
                \ -h $SLAVE_REPLICA role | awk '{print $1; exit}')\ndone\n"
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        - name: cluster
          containerPort: 16379
          protocol: TCP
        volumeMounts:
        - name: data
          mountPath: /data
          readOnly: false
        - name: shared
          mountPath: /tls
        - name: tls
          mountPath: /tls/ca.crt
          subPath: ca.crt
          readOnly: true
        - name: tls
          mountPath: /tls/ca.key
          subPath: ca.key
          readOnly: true
        - name: tls
          mountPath: /tls/redis.key
          subPath: redis.key
          readOnly: true
        startupProbe:
          exec:
            command:
            - sh
            - -c
            - exec redis-cli --tls --cacert /tls/ca.crt ping
          failureThreshold: 10
          initialDelaySeconds: 10
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec redis-cli --tls --cacert /tls/ca.crt ping
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec redis-cli --tls --cacert /tls/ca.crt ping
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 20Gi
