
Report Summary

┌─────────────────────────────────────────────────┬────────────┬───────────────────┐
│                     Target                      │    Type    │ Misconfigurations │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service-ClusterIP8.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service-NodePort25.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service-argocd-applicationset-controller.yaml   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service-argocd-dex-server.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service-argocd-redis.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service-argocd-repo-server.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service-argocd-server.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service-cilium-envoy.yaml                       │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service-hubble-peer.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service-hubble-relay.yaml                       │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service-hubble-ui.yaml                          │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service-k8s-gateway.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service-miniflux.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service-onepassword-connect.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-ClusterIP2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a_2.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a_3.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account45.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account46.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account47.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account48.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account49.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account4_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account5.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account50.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account51.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account52.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account54.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account55.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account56.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account57.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account58.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account59.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account5_1.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account5_2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account5_3.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account5_4.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account6.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account60.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account61.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account62.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account63.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account64.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account65.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account66.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account67.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account68.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account69.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account7.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account70.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account71.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account71_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account71_2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account72.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account72_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account72_2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account73.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account74.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account76.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account78.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account79.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account8.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account80.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account81.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account83.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account84.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account85.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account86.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account87.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account9.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account96.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account97.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account98.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account99.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account_1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account_2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-accounts.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-accounts1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-accounts1_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-accounts2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-accounts2_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-accounts2_2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-accounts3.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-accounts3_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-accounts_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-accounts_2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-allInOne.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-and-endpoint.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-and-endpoint_1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-api-gateway.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-api-gateway1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-api-persona.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-api-persona1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-api.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-api1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-app2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-app3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-auth1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-auth2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b1.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b1_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b1_3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b2.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b3.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b3_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b3_2.yaml                               │ kubernetes │        18         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b3_3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b4.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b4_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b4_2.yaml                               │ kubernetes │        18         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b4_3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b5.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b6.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b6_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b6_2.yaml                               │ kubernetes │        18         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b6_3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b7.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b7_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b7_2.yaml                               │ kubernetes │        18         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b7_3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b_2.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-b_3.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-back.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-backend1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-backend2.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-backend3.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-backend4.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-backend5.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-bdd.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-billing-app-db.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-billing-app-db1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-billing-app.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-billing-app1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-billingapp-back.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-billingapp-back1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-billingapp-front.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-billingapp-front1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-blue.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-bookstack.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-bot.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-ca-deployment.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-ca-deployment_1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-ca-deployment_2.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-ca-deployment_3.yaml                    │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-ca-deployment_4.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-ca-deployment_5.yaml                    │ kubernetes │         4         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-ca-deployment_6.yaml                    │ kubernetes │        15         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-ca-deployment_8.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-cam.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-catalogo.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-chronograf.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-chronograf1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-client.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-client1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-client_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-cloudflared-metrics.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-cloudflared-metrics1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-cloudflared-metrics2.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-cluster-ip-definition.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-cluster-ip.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-cluster-ip1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-cluster-ip2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-cluster-ip3.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-cluster-ip4.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-cluster-ip5.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-cluster-ip6.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-cluster-ip7.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-clusterIP3.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-clusterIp.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-clusterip-definition.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-clusterip-definition1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-clusterip-definition2.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-clusterip-definition3.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-clusterip1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-clusterip10.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-clusterip4.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-clusterip5.yaml                         │ kubernetes │        15         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-clusterip5_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-clusterip6.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-clusterip7.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-clusterip9.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-cobranca.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-coit-backend1-lb.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-coit-backend1-lb1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-coit-backend1-lb2.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-coit-backend1-lb3.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-coit-backend1-lb4.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-coit-backend2.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-coit-backend21.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-coit-backend22.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-coit-frontend-lb.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-coit-frontend-lb1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-coit-frontend-lb2.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-coit-frontend-lb3.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-coit-frontend-lb4.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-coit-frontend-lb5.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-config.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-coredns-nodeport.yaml                   │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-data1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-database.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-database1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-database2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-db-noticias.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-db.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-db1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-db2.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-db4.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-db5.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-db6.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-db7.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-db8.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-def.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-default.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-default1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-default11.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-default12.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-default13.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-default14.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-default15.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-default16.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-default2.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-default3.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-default4.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-default5.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-default6.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-default7.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-default8.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-default9.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-defination.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definiation.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definiation1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition-1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition-clusterIP.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition-clusterIP1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition-clusterIP2.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition-clusterIP21.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition-nodePort.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition-nodePort1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition-nodePort11.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition-nodePort3.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition-nodep.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition10.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition10_1.yaml                     │ kubernetes │        18         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition11.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition12.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition13.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition14.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition15.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition16.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition17.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition18.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition19.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition20.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition21.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition22.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition23.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition24.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition25.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition26.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition27.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition28.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition29.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition3.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition30.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition31.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition32.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition33.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition34.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition35.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition36.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition37.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition38.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition39.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition4.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition40.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition41.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition42.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition43.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition5.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition6.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition7.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition8.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-definition9.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-defintion.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-defintion1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-demo-redis.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-demo.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-deploy.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-deploy_1.yaml                           │ kubernetes │        15         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-deployment-django.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-deployment-manifest.yaml                │ kubernetes │        18         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-deployment-nodePort.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-deployment-nodePort1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-deployment.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-deployment1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-deployment1_1.yaml                      │ kubernetes │        17         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-deployment2.yaml                        │ kubernetes │        17         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-deployment_1.yaml                       │ kubernetes │        17         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-depoloyemt.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-destruction.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-dev.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-dev1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-dev2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-dev3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-dev4.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-discovery-config-map.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-discovery-config-map_1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-discovery.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-django.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-drupal.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-elasticsearch.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-elasticsearch1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-endpoint.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-endpoint1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-endpoint1_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-endpoint2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-endpoint2_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-endpoint_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example1.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example10.yaml                          │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example10_1.yaml                        │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example1_1.yaml                         │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example2.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example2_1.yaml                         │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example3.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example3_1.yaml                         │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example4.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example4_1.yaml                         │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example5.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example6.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example6_1.yaml                         │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example7.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example7_1.yaml                         │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example8.yaml                           │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example8_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example9.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example9_1.yaml                         │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-example_1.yaml                          │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-exporter.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-exporter1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-external-name.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-external-redis.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-external.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-external1.yaml                          │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-external2.yaml                          │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-external3.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-external4.yaml                          │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-externalName10.yaml                     │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-externalips.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-externalname.yaml                       │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-externalname1.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-externalname2.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-externalname3.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-externalname4.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-externalname5.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-externalname6.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-externalname7.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-externalname8.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-externalname9.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-fail.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-fail1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-fail2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-fail3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-fail4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-fastapi1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-fe.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-forward.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-forward1.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-front.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-frontend-lb.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-frontend-lb1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-frontend-lb10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-frontend-lb11.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-frontend-lb2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-frontend-lb3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-frontend-lb4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-frontend-lb5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-frontend-lb6.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-frontend-lb7.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-frontend-lb8.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-frontend-lb9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-frontend.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-frontend2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-frontend3.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-frontend4.yaml                          │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-frontend5.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-frontend6.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-gallery.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-ghost1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-giropops-senhas.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-gotenberg.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-green.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-guacamole.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-guacd.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-hash.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-headless13.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-headless19.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-headless24.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-headless26.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-headless8.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-healthcheck.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-hello-world.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-hello.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-hitohub-backend.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-hitohub-backend1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-hitohub-backend2.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-hitohub-frontend.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-hitohub-frontend1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-hitohub-frontend2.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-http.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-http1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-image-database.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-influxdb.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-influxdb1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-insight-secret.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-instances-ns.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-inventario.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-inventory-app-db.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-inventory-app-db1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-inventory-app.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-inventory-app1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-jenkins.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-jenkins1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-jupyter.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-kapacitor.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-kapacitor1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-kibana.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-kibana1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-kubernetes.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-l4.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-l41.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-l41_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-l4_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-lb.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-lb1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-lb2.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-lb3.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-lb4.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-lb5.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-lb6.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-lb7.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-lb8.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-load-balancer.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-load-balancer1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-load-balancer2.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-load-balancer3.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-load-balancer4.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-load-balancer5.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-load-balancer6.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-load-balancing.yaml                     │ kubernetes │        20         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-load-balancing_1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-load-balancing_2.yaml                   │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-load.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-loadBalancer.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-loadbalance-app.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-loadbalancer-definition.yaml            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-loadbalancer-definition1.yaml           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-loadbalancer1.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-loadbalancer2.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-loadbalancer3.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-loadbalancer4.yaml                      │ kubernetes │        15         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-loadbalancer4_1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-loadbalancer5.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-loadbalancer6.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-loadbalancer7.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-loadbalancer8.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-locust.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-logstash.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-logstash1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-lubelogger.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-manager.yaml                            │ kubernetes │        17         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-manager_1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mariadb.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mariadb1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mariadb2.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mariadb3.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-maybe.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mdw.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-metrics-server-exporter.yaml            │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-metrics7.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mongodb-staging.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mongodb.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mongodb1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mss-app.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-my-app.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-my-nginx.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-my-phpfpm.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-my-rabbitmq.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-my-rabbitmq1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-myapp1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mydb.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-myserver.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mysql-read.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mysql.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mysql1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mysql11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mysql12.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mysql13.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mysql14.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mysql15.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mysql16.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mysql17.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mysql2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mysql3.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mysql4.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mysql5.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mysql6.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mysql7.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mysql8.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-mysql9.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-net.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nextjs-staging.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nextjs.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nexus.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-ng.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-1-with-selector-nginx.yaml        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-2-with-non-existing-selector.yaml │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-ingress.yaml                      │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-ingress1.yaml                     │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-ingress1_1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-ingress1_2.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-ingress2.yaml                     │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-ingress2_1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-ingress3.yaml                     │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-ingress3_1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-ingress3_2.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-ingress4.yaml                     │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-ingress4_1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-ingress4_2.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-ingress5.yaml                     │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-ingress5_1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-ingress6.yaml                     │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-ingress6_1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-ingress_1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-loadbalancer.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-loadbalancer1.yaml                │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-loadbalancer1_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-loadbalancer2.yaml                │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-loadbalancer2_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-loadbalancer3.yaml                │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-loadbalancer3_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-loadbalancer4.yaml                │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-loadbalancer4_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-loadbalancer5.yaml                │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-loadbalancer5_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-loadbalancer6.yaml                │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-loadbalancer6_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-loadbalancer_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-nodeport.yaml                     │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-nodeport1.yaml                    │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-nodeport1_1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-nodeport1_2.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-nodeport2.yaml                    │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-nodeport2_1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-nodeport3.yaml                    │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-nodeport3_1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-nodeport3_2.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-nodeport4.yaml                    │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-nodeport4_1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-nodeport5.yaml                    │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-nodeport5_1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-nodeport6.yaml                    │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-nodeport6_1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-nodeport7.yaml                    │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-nodeport7_1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-nodeport_1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-with-ingress.yaml                 │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-with-ingress_1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-with-ingress_2.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-with-loadbalancer.yaml            │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-with-loadbalancer_1.yaml          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-with-nodeport.yaml                │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx-with-nodeport_1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx.yaml                              │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx1.yaml                             │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx10.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx12.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx13.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx14.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx15.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx16.yaml                            │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx16_1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx16_2.yaml                          │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx17.yaml                            │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx17_1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx17_2.yaml                          │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx1_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx1_2.yaml                           │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx2.yaml                             │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx2_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx2_2.yaml                           │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx3.yaml                             │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx3_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx3_2.yaml                           │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx4.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx5.yaml                             │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx5_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx5_2.yaml                           │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx6.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx7.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx8.yaml                             │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx8_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx8_2.yaml                           │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx9.yaml                             │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx9_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx9_2.yaml                           │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nginx_2.yaml                            │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-no-port-name-system-namespace.yaml      │ kubernetes │         1         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-no-port-name-system-namespace_1.yaml    │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-no-port-name-system-namespace_2.yaml    │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-no-port-name-system-namespace_3.yaml    │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-no-port-name.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-no-port-name_1.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-node-port-definition.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-node-port-for-deployment.yaml           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-node-port-for-statefulset.yaml          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-node-port.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-node-port1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-node-port10.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-node-port11.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-node-port2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-node-port3.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-node-port4.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-node-port5.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-node-port6.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-node-port7.yaml                         │ kubernetes │        20         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-node-port7_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-node-port8.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-node-port9.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-node-provider-labeler.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-node1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodePort2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodePort23.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodejs-app.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodejs.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport-definition.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport-definition1.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport-deplyment.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport10.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport11.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport12.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport13.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport14.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport15.yaml                         │ kubernetes │        15         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport15_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport16.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport17.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport18.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport19.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport20.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport24.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport26.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport27.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport28.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport29.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport3.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport30.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport31.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport5.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport6.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport7.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport8.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodeport9.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nodesjs-deployment.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-nordport.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-np.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-np1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-np2.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-of-different-namespace.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-of-different-namespace_1.yaml           │ kubernetes │        15         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-order-service.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-otel-instrumentation.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-otel.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-otel1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-paperless.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pass.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pass1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pass2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pass3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pass4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-patch.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pedido.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pedido1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pg-flights-data.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pgadmin.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pgadmin2.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pgadmin3.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pgadmin4.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pgadmin5.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-php.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-php1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-phpmyadmin.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-phpmyadmin1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pingpong.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pingpong1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pingpong2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pingpong3.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pingpong4.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pingpong5.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-1-lb.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-def.yaml                            │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-def1.yaml                           │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-def1_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-def2.yaml                           │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-def2_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-def3.yaml                           │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-def3_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-def4.yaml                           │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-def4_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-def5.yaml                           │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-def5_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-def6.yaml                           │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-def6_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-def7.yaml                           │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-def7_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-def8.yaml                           │ kubernetes │        19         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-def8_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod-def_1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-pod.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-podinfo.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-port-name.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-port-name_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-port-name_2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-port.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-portal-noticias.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-posgres.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-posgres1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-postgres.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-postgres1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-postgres4.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-postgres5.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-postgresql.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-postgresql1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-postgresql2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-postgresql3.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-postgresql4.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-postgresql5.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-postgresql6.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-prod.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-prod1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-prod2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-product-service.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-produto.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-profisee.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-project.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-rabbitmq.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-rabbitmq1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-rabbitmq2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-rabbitmq3.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-reader.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-reader1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-reader2.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-readsb-data.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-readsb-metrics.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-readsb-web.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-red.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-redis-master.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-redis-slave.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-redis.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-redis1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-redis2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-redis3.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-redis4.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-redis5.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-redis6.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-redis7.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-redis8.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-redis9.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-registory-statefulset.yaml              │ kubernetes │        18         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-registory-statefulset_1.yaml            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-registory-statefulset_2.yaml            │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-revision1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-revision11.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-revision110.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-revision111.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-revision113.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-revision114.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-revision115.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-revision116.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-revision117.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-revision118.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-revision12.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-revision13.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-revision14.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-revision15.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-revision16.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-revision17.yaml                         │ kubernetes │         0         │
└─────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


Service-cilium-envoy.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'cilium-envoy' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 Service-cilium-envoy.yaml:15-23
────────────────────────────────────────
  15 ┌   clusterIP: None
  16 │   ports:
  17 │     - name: envoy-metrics
  18 │       port: 9964
  19 │       protocol: TCP
  20 │       targetPort: envoy-metrics
  21 │   selector:
  22 │     k8s-app: cilium-envoy
  23 └   type: ClusterIP
────────────────────────────────────────



Service-hubble-peer.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'hubble-peer' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 Service-hubble-peer.yaml:11-18
────────────────────────────────────────
  11 ┌   internalTrafficPolicy: Local
  12 │   ports:
  13 │     - name: peer-service
  14 │       port: 443
  15 │       protocol: TCP
  16 │       targetPort: 4244
  17 │   selector:
  18 └     k8s-app: cilium
────────────────────────────────────────



Service-hubble-relay.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'hubble-relay' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 Service-hubble-relay.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │     - port: 80
  13 │       protocol: TCP
  14 │       targetPort: grpc
  15 │   selector:
  16 │     k8s-app: hubble-relay
  17 └   type: ClusterIP
────────────────────────────────────────



Service-hubble-ui.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'hubble-ui' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 Service-hubble-ui.yaml:11-17
────────────────────────────────────────
  11 ┌   ports:
  12 │     - name: http
  13 │       port: 80
  14 │       targetPort: 8081
  15 │   selector:
  16 │     k8s-app: hubble-ui
  17 └   type: ClusterIP
────────────────────────────────────────



service-a_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'service-a' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-a_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'service-a' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-a_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'service-a' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-a_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-a_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'service-a' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-a_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'service-a' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-a_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-a_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-a_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-a_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'service-a' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-a_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'service-a' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-a_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-a_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "service-a" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-a_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-a_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-a in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-a_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: service-a
   5 │   labels:
   6 └     app: service-a
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment service-a in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-a in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-a_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-a in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-a_2.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 └         - name: config
  ..   
────────────────────────────────────────



service-account5_1.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-role-binding' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 service-account5_1.yaml:4-5
────────────────────────────────────────
   4 ┌   name: cluster-role-binding
   5 └   namespace: vault
────────────────────────────────────────



service-b3_2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'service-b' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-b3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'service-b' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-b3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'service-b' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-b3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'service-b' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-b3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'service-b' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-b3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'service-b' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-b3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'service-b' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-b3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'service-b' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-b3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'service-b' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-b3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'service-b' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-b3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'service-b' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-b3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-b3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "service-b" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-b3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-b3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-b in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-b3_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: service-b
   5 │   labels:
   6 └     app: service-b
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment service-b in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-b in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-b3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-b in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-b3_2.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 └         - name: config
  ..   
────────────────────────────────────────



service-b4_2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'service-b' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-b4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'service-b' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-b4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'service-b' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-b4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'service-b' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-b4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'service-b' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-b4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'service-b' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-b4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'service-b' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-b4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'service-b' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-b4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'service-b' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-b4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'service-b' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-b4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'service-b' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-b4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-b4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "service-b" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-b4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-b4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-b in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-b4_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: service-b
   5 │   labels:
   6 └     app: service-b
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment service-b in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-b in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-b4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-b in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-b4_2.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 └         - name: config
  ..   
────────────────────────────────────────



service-b6_2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'service-b' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-b6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'service-b' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-b6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'service-b' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-b6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'service-b' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-b6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'service-b' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-b6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'service-b' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-b6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'service-b' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-b6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'service-b' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-b6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'service-b' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-b6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'service-b' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-b6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'service-b' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-b6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-b6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "service-b" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-b6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-b6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-b in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-b6_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: service-b
   5 │   labels:
   6 └     app: service-b
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment service-b in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-b in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-b6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-b in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-b6_2.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 └         - name: config
  ..   
────────────────────────────────────────



service-b7_2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'service-b' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-b7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'service-b' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-b7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'service-b' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-b7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'service-b' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-b7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'service-b' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-b7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'service-b' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-b7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'service-b' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-b7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'service-b' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-b7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'service-b' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-b7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'service-b' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-b7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'service-b' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-b7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-b7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "service-b" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-b7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-b7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-b in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-b7_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: service-b
   5 │   labels:
   6 └     app: service-b
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment service-b in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-b in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-b7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-b in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-b7_2.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 └         - name: config
  ..   
────────────────────────────────────────



service-b_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'service-b' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-b_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'service-b' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-b_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'service-b' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-b_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'service-b' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-b_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'service-b' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-b_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'service-b' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-b_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'service-b' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-b_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'service-b' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-b_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'service-b' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-b_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'service-b' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-b_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'service-b' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-b_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-b_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "service-b" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-b_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-b_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-b in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-b_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: service-b
   5 │   labels:
   6 └     app: service-b
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment service-b in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-b in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-b_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-b in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-b_2.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 └         - name: config
  ..   
────────────────────────────────────────



service-ca-deployment_3.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'service-ca' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 service-ca-deployment_3.yaml:21-30
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   verbs:
  26 │   - get
  27 │   - list
  28 │   - watch
  29 │   - update
  30 └   - create
────────────────────────────────────────



service-ca-deployment_5.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 110, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'service-ca' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 service-ca-deployment_5.yaml:6-16
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 │   - list
  13 │   - watch
  14 └   - create
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'service-ca' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 service-ca-deployment_5.yaml:56-64
────────────────────────────────────────
  56 ┌ - apiGroups:
  57 │   - ''
  58 │   resources:
  59 │   - configmaps
  60 │   verbs:
  61 │   - get
  62 │   - list
  63 │   - watch
  64 └   - update
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'service-ca' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 service-ca-deployment_5.yaml:17-26
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - services
  21 │   verbs:
  22 │   - get
  23 │   - list
  24 │   - watch
  25 │   - update
  26 └   - patch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'service-ca' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 service-ca-deployment_5.yaml:27-36
────────────────────────────────────────
  27 ┌ - apiGroups:
  28 │   - admissionregistration.k8s.io
  29 │   resources:
  30 │   - mutatingwebhookconfigurations
  31 │   - validatingwebhookconfigurations
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - update
────────────────────────────────────────



service-ca-deployment_6.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 99, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service-ca-controller' of Deployment 'service-ca' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-ca-deployment_6.yaml:28-47
────────────────────────────────────────
  28 ┌       - name: service-ca-controller
  29 │         image: quay.io/ykoer/service-ca-operator:latest
  30 │         imagePullPolicy: IfNotPresent
  31 │         command:
  32 │         - service-ca-operator
  33 │         - controller
  34 │         ports:
  35 │         - containerPort: 8443
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service-ca-controller' of Deployment 'service-ca' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-ca-deployment_6.yaml:28-47
────────────────────────────────────────
  28 ┌       - name: service-ca-controller
  29 │         image: quay.io/ykoer/service-ca-operator:latest
  30 │         imagePullPolicy: IfNotPresent
  31 │         command:
  32 │         - service-ca-operator
  33 │         - controller
  34 │         ports:
  35 │         - containerPort: 8443
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service-ca-controller' of 'deployment' 'service-ca' in 'kubernetes-service-ca' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-ca-deployment_6.yaml:28-47
────────────────────────────────────────
  28 ┌       - name: service-ca-controller
  29 │         image: quay.io/ykoer/service-ca-operator:latest
  30 │         imagePullPolicy: IfNotPresent
  31 │         command:
  32 │         - service-ca-operator
  33 │         - controller
  34 │         ports:
  35 │         - containerPort: 8443
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service-ca-controller' of Deployment 'service-ca' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-ca-deployment_6.yaml:28-47
────────────────────────────────────────
  28 ┌       - name: service-ca-controller
  29 │         image: quay.io/ykoer/service-ca-operator:latest
  30 │         imagePullPolicy: IfNotPresent
  31 │         command:
  32 │         - service-ca-operator
  33 │         - controller
  34 │         ports:
  35 │         - containerPort: 8443
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service-ca-controller' of Deployment 'service-ca' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-ca-deployment_6.yaml:28-47
────────────────────────────────────────
  28 ┌       - name: service-ca-controller
  29 │         image: quay.io/ykoer/service-ca-operator:latest
  30 │         imagePullPolicy: IfNotPresent
  31 │         command:
  32 │         - service-ca-operator
  33 │         - controller
  34 │         ports:
  35 │         - containerPort: 8443
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'service-ca-controller' of Deployment 'service-ca' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-ca-deployment_6.yaml:28-47
────────────────────────────────────────
  28 ┌       - name: service-ca-controller
  29 │         image: quay.io/ykoer/service-ca-operator:latest
  30 │         imagePullPolicy: IfNotPresent
  31 │         command:
  32 │         - service-ca-operator
  33 │         - controller
  34 │         ports:
  35 │         - containerPort: 8443
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service-ca-controller' of Deployment 'service-ca' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-ca-deployment_6.yaml:28-47
────────────────────────────────────────
  28 ┌       - name: service-ca-controller
  29 │         image: quay.io/ykoer/service-ca-operator:latest
  30 │         imagePullPolicy: IfNotPresent
  31 │         command:
  32 │         - service-ca-operator
  33 │         - controller
  34 │         ports:
  35 │         - containerPort: 8443
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service-ca-controller' of Deployment 'service-ca' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-ca-deployment_6.yaml:28-47
────────────────────────────────────────
  28 ┌       - name: service-ca-controller
  29 │         image: quay.io/ykoer/service-ca-operator:latest
  30 │         imagePullPolicy: IfNotPresent
  31 │         command:
  32 │         - service-ca-operator
  33 │         - controller
  34 │         ports:
  35 │         - containerPort: 8443
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service-ca-controller' of Deployment 'service-ca' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-ca-deployment_6.yaml:28-47
────────────────────────────────────────
  28 ┌       - name: service-ca-controller
  29 │         image: quay.io/ykoer/service-ca-operator:latest
  30 │         imagePullPolicy: IfNotPresent
  31 │         command:
  32 │         - service-ca-operator
  33 │         - controller
  34 │         ports:
  35 │         - containerPort: 8443
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service-ca-controller' of Deployment 'service-ca' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-ca-deployment_6.yaml:28-47
────────────────────────────────────────
  28 ┌       - name: service-ca-controller
  29 │         image: quay.io/ykoer/service-ca-operator:latest
  30 │         imagePullPolicy: IfNotPresent
  31 │         command:
  32 │         - service-ca-operator
  33 │         - controller
  34 │         ports:
  35 │         - containerPort: 8443
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-ca-deployment_6.yaml:28-47
────────────────────────────────────────
  28 ┌       - name: service-ca-controller
  29 │         image: quay.io/ykoer/service-ca-operator:latest
  30 │         imagePullPolicy: IfNotPresent
  31 │         command:
  32 │         - service-ca-operator
  33 │         - controller
  34 │         ports:
  35 │         - containerPort: 8443
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service-ca-controller" of deployment "service-ca" in "kubernetes-service-ca" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-ca-deployment_6.yaml:28-47
────────────────────────────────────────
  28 ┌       - name: service-ca-controller
  29 │         image: quay.io/ykoer/service-ca-operator:latest
  30 │         imagePullPolicy: IfNotPresent
  31 │         command:
  32 │         - service-ca-operator
  33 │         - controller
  34 │         ports:
  35 │         - containerPort: 8443
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-ca-deployment_6.yaml:28-47
────────────────────────────────────────
  28 ┌       - name: service-ca-controller
  29 │         image: quay.io/ykoer/service-ca-operator:latest
  30 │         imagePullPolicy: IfNotPresent
  31 │         command:
  32 │         - service-ca-operator
  33 │         - controller
  34 │         ports:
  35 │         - containerPort: 8443
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-ca in kubernetes-service-ca namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-ca-deployment_6.yaml:26-54
────────────────────────────────────────
  26 ┌       serviceAccountName: service-ca
  27 │       containers:
  28 │       - name: service-ca-controller
  29 │         image: quay.io/ykoer/service-ca-operator:latest
  30 │         imagePullPolicy: IfNotPresent
  31 │         command:
  32 │         - service-ca-operator
  33 │         - controller
  34 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container service-ca-controller in deployment service-ca (namespace: kubernetes-service-ca) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-ca-deployment_6.yaml:28-47
────────────────────────────────────────
  28 ┌       - name: service-ca-controller
  29 │         image: quay.io/ykoer/service-ca-operator:latest
  30 │         imagePullPolicy: IfNotPresent
  31 │         command:
  32 │         - service-ca-operator
  33 │         - controller
  34 │         ports:
  35 │         - containerPort: 8443
  36 └         securityContext:
  ..   
────────────────────────────────────────



service-clusterip5.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-clusterip5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-clusterip5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-clusterip5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-clusterip5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-clusterip5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-clusterip5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-clusterip5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-clusterip5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-clusterip5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-clusterip5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-clusterip5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-clusterip5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx
   5 │   labels:
   6 └     deploy: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-clusterip5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-clusterip5.yaml:17-28
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 └             memory: 128Mi
  ..   
────────────────────────────────────────



service-coredns-nodeport.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'coredns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 service-coredns-nodeport.yaml:9-22
────────────────────────────────────────
   9 ┌   type: NodePort
  10 │   ports:
  11 │   - port: 53
  12 │     name: dns-tcp
  13 │     protocol: TCP
  14 │     targetPort: 53
  15 │     nodePort: 32053
  16 │   - port: 53
  17 └     name: dns
  ..   
────────────────────────────────────────



service-definition10_1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-despliegue' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-definition10_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.7.9
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-despliegue' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-definition10_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.7.9
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-despliegue' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-definition10_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.7.9
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-despliegue' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-definition10_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.7.9
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-despliegue' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-definition10_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.7.9
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-despliegue' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-definition10_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.7.9
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-despliegue' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-definition10_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.7.9
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-despliegue' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-definition10_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.7.9
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-despliegue' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-definition10_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.7.9
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-despliegue' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-definition10_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.7.9
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-despliegue' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-definition10_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.7.9
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-definition10_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.7.9
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-despliegue" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-definition10_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.7.9
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-definition10_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.7.9
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-despliegue in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-definition10_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-despliegue
   5 │   labels:
   6 └     app: mi-app
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-despliegue in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-despliegue in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-definition10_1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.7.9
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-despliegue in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-definition10_1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.7.9
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



service-deploy_1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'mutating-admission-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-deploy_1.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: controller
  20 │         image: localhost/ma-controller:latest
  21 │         imagePullPolicy: Never
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 128Mi
  26 │           requests:
  27 │             cpu: 250m
  28 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'controller' of Deployment 'mutating-admission-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-deploy_1.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: controller
  20 │         image: localhost/ma-controller:latest
  21 │         imagePullPolicy: Never
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 128Mi
  26 │           requests:
  27 │             cpu: 250m
  28 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'controller' of 'deployment' 'mutating-admission-controller' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-deploy_1.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: controller
  20 │         image: localhost/ma-controller:latest
  21 │         imagePullPolicy: Never
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 128Mi
  26 │           requests:
  27 │             cpu: 250m
  28 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'mutating-admission-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-deploy_1.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: controller
  20 │         image: localhost/ma-controller:latest
  21 │         imagePullPolicy: Never
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 128Mi
  26 │           requests:
  27 │             cpu: 250m
  28 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'controller' of Deployment 'mutating-admission-controller' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-deploy_1.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: controller
  20 │         image: localhost/ma-controller:latest
  21 │         imagePullPolicy: Never
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 128Mi
  26 │           requests:
  27 │             cpu: 250m
  28 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'mutating-admission-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-deploy_1.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: controller
  20 │         image: localhost/ma-controller:latest
  21 │         imagePullPolicy: Never
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 128Mi
  26 │           requests:
  27 │             cpu: 250m
  28 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'mutating-admission-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-deploy_1.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: controller
  20 │         image: localhost/ma-controller:latest
  21 │         imagePullPolicy: Never
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 128Mi
  26 │           requests:
  27 │             cpu: 250m
  28 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'mutating-admission-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-deploy_1.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: controller
  20 │         image: localhost/ma-controller:latest
  21 │         imagePullPolicy: Never
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 128Mi
  26 │           requests:
  27 │             cpu: 250m
  28 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-deploy_1.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: controller
  20 │         image: localhost/ma-controller:latest
  21 │         imagePullPolicy: Never
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 128Mi
  26 │           requests:
  27 │             cpu: 250m
  28 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "mutating-admission-controller" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-deploy_1.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: controller
  20 │         image: localhost/ma-controller:latest
  21 │         imagePullPolicy: Never
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 128Mi
  26 │           requests:
  27 │             cpu: 250m
  28 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-deploy_1.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: controller
  20 │         image: localhost/ma-controller:latest
  21 │         imagePullPolicy: Never
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 128Mi
  26 │           requests:
  27 │             cpu: 250m
  28 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mutating-admission-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-deploy_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mutating-admission-controller
   5 │   labels:
   6 └     app: mutating-admission-controller
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mutating-admission-controller in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-deploy_1.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: controller
  20 │         image: localhost/ma-controller:latest
  21 │         imagePullPolicy: Never
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 128Mi
  26 │           requests:
  27 │             cpu: 250m
  28 └             memory: 64Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mutating-admission-controller in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-deploy_1.yaml:18-28
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: controller
  20 │         image: localhost/ma-controller:latest
  21 │         imagePullPolicy: Never
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 128Mi
  26 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment mutating-admission-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-deploy_1.yaml:19-28
────────────────────────────────────────
  19 ┌       - name: controller
  20 │         image: localhost/ma-controller:latest
  21 │         imagePullPolicy: Never
  22 │         resources:
  23 │           limits:
  24 │             cpu: 500m
  25 │             memory: 128Mi
  26 │           requests:
  27 │             cpu: 250m
  28 └             memory: 64Mi
────────────────────────────────────────



service-deployment-manifest.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'promethium-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-deployment-manifest.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'promethium-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-deployment-manifest.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'promethium-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-deployment-manifest.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'promethium-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-deployment-manifest.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'promethium-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-deployment-manifest.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'promethium-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-deployment-manifest.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'promethium-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-deployment-manifest.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'promethium-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-deployment-manifest.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'promethium-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-deployment-manifest.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'promethium-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-deployment-manifest.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'promethium-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-deployment-manifest.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'promethium-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-deployment-manifest.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-deployment-manifest.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "promethium-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-deployment-manifest.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-deployment-manifest.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment promethium-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-deployment-manifest.yaml:4
────────────────────────────────────────
   4 [   name: promethium-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container promethium-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-deployment-manifest.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx
  17 └         image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment promethium-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-deployment-manifest.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nginx
  17 └         image: nginx
────────────────────────────────────────



service-deployment1_1.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of Pod 'hello-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-deployment1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of Pod 'hello-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-deployment1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'pod' 'hello-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-deployment1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of Pod 'hello-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-deployment1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of Pod 'hello-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-deployment1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of Pod 'hello-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-deployment1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of Pod 'hello-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-deployment1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of Pod 'hello-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-deployment1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of Pod 'hello-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-deployment1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of Pod 'hello-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-deployment1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of Pod 'hello-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-deployment1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-deployment1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of pod "hello-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-deployment1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-deployment1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod hello-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-deployment1_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: hello-pod
   5 │   labels:
   6 └     app: hello
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-deployment1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod hello-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-deployment1_1.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────



service-deployment2.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service-app' of Deployment 'service-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: service-app
  17 │         image: your-service-image:tag
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service-app' of Deployment 'service-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: service-app
  17 │         image: your-service-image:tag
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service-app' of 'deployment' 'service-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: service-app
  17 │         image: your-service-image:tag
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service-app' of Deployment 'service-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: service-app
  17 │         image: your-service-image:tag
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service-app' of Deployment 'service-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: service-app
  17 │         image: your-service-image:tag
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service-app' of Deployment 'service-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: service-app
  17 │         image: your-service-image:tag
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service-app' of Deployment 'service-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: service-app
  17 │         image: your-service-image:tag
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service-app' of Deployment 'service-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: service-app
  17 │         image: your-service-image:tag
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service-app' of Deployment 'service-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: service-app
  17 │         image: your-service-image:tag
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service-app' of Deployment 'service-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: service-app
  17 │         image: your-service-image:tag
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service-app' of Deployment 'service-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: service-app
  17 │         image: your-service-image:tag
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: service-app
  17 │         image: your-service-image:tag
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service-app" of deployment "service-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: service-app
  17 │         image: your-service-image:tag
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: service-app
  17 │         image: your-service-image:tag
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-deployment2.yaml:4
────────────────────────────────────────
   4 [   name: service-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-deployment2.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: service-app
  17 │         image: your-service-image:tag
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-deployment2.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: service-app
  17 │         image: your-service-image:tag
  18 │         ports:
  19 └         - containerPort: 3000
────────────────────────────────────────



service-deployment_1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of Pod 'hello-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-deployment_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of Pod 'hello-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-deployment_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'pod' 'hello-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-deployment_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of Pod 'hello-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-deployment_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of Pod 'hello-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-deployment_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of Pod 'hello-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-deployment_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of Pod 'hello-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-deployment_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of Pod 'hello-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-deployment_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of Pod 'hello-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-deployment_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of Pod 'hello-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-deployment_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of Pod 'hello-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-deployment_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-deployment_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of pod "hello-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-deployment_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-deployment_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod hello-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-deployment_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: hello-pod
   5 │   labels:
   6 └     app: hello
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-deployment_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod hello-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-deployment_1.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-container
  10 └     image: nginx:1.14.2
────────────────────────────────────────



service-example.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'example-service' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-example1.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'example-service' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-example10.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'example-service' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-example10_1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-example10_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'curl' of Pod 'curl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-example10_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'curl' of 'pod' 'curl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-example10_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-example10_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-example10_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'curl' of Pod 'curl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-example10_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curl' of Pod 'curl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-example10_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-example10_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-example10_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-example10_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-example10_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-example10_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-example10_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "curl" of pod "curl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-example10_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-example10_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod curl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-example10_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: curl
   5 │   labels:
   6 └     name: curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container curl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-example10_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod curl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-example10_1.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container curl in pod curl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-example10_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────



service-example1_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-example1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'curl' of Pod 'curl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-example1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'curl' of 'pod' 'curl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-example1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-example1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-example1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'curl' of Pod 'curl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-example1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curl' of Pod 'curl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-example1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-example1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-example1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-example1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-example1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-example1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-example1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "curl" of pod "curl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-example1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-example1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod curl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-example1_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: curl
   5 │   labels:
   6 └     name: curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container curl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-example1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod curl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-example1_1.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container curl in pod curl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-example1_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────



service-example2.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'example-service' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-example2_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-example2_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'curl' of Pod 'curl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-example2_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'curl' of 'pod' 'curl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-example2_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-example2_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-example2_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'curl' of Pod 'curl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-example2_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curl' of Pod 'curl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-example2_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-example2_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-example2_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-example2_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-example2_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-example2_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-example2_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "curl" of pod "curl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-example2_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-example2_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod curl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-example2_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: curl
   5 │   labels:
   6 └     name: curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container curl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-example2_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod curl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-example2_1.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container curl in pod curl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-example2_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────



service-example3.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'example-service' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-example3_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-example3_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'curl' of Pod 'curl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-example3_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'curl' of 'pod' 'curl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-example3_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-example3_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-example3_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'curl' of Pod 'curl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-example3_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curl' of Pod 'curl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-example3_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-example3_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-example3_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-example3_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-example3_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-example3_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-example3_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "curl" of pod "curl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-example3_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-example3_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod curl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-example3_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: curl
   5 │   labels:
   6 └     name: curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container curl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-example3_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod curl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-example3_1.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container curl in pod curl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-example3_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────



service-example4.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'example-service' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-example4_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-example4_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'curl' of Pod 'curl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-example4_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'curl' of 'pod' 'curl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-example4_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-example4_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-example4_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'curl' of Pod 'curl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-example4_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curl' of Pod 'curl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-example4_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-example4_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-example4_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-example4_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-example4_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-example4_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-example4_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "curl" of pod "curl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-example4_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-example4_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod curl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-example4_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: curl
   5 │   labels:
   6 └     name: curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container curl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-example4_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod curl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-example4_1.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container curl in pod curl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-example4_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────



service-example6.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'example-service' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-example6_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-example6_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'curl' of Pod 'curl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-example6_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'curl' of 'pod' 'curl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-example6_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-example6_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-example6_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'curl' of Pod 'curl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-example6_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curl' of Pod 'curl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-example6_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-example6_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-example6_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-example6_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-example6_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-example6_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-example6_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "curl" of pod "curl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-example6_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-example6_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod curl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-example6_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: curl
   5 │   labels:
   6 └     name: curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container curl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-example6_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod curl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-example6_1.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container curl in pod curl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-example6_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────



service-example7.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'example-service' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-example7_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-example7_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'curl' of Pod 'curl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-example7_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'curl' of 'pod' 'curl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-example7_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-example7_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-example7_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'curl' of Pod 'curl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-example7_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curl' of Pod 'curl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-example7_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-example7_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-example7_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-example7_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-example7_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-example7_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-example7_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "curl" of pod "curl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-example7_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-example7_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod curl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-example7_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: curl
   5 │   labels:
   6 └     name: curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container curl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-example7_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod curl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-example7_1.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container curl in pod curl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-example7_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────



service-example8.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-nginx' of Deployment 'my-nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-example8.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-nginx' of Deployment 'my-nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-example8.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-nginx' of 'deployment' 'my-nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-example8.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-nginx' of Deployment 'my-nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-example8.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-nginx' of Deployment 'my-nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-example8.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-nginx' of Deployment 'my-nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-example8.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-nginx' of Deployment 'my-nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-example8.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-nginx' of Deployment 'my-nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-example8.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-nginx' of Deployment 'my-nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-example8.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-nginx' of Deployment 'my-nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-example8.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-nginx' of Deployment 'my-nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-example8.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-nginx' of Deployment 'my-nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-example8.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-example8.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-nginx" of deployment "my-nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-example8.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-example8.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-example8.yaml:4
────────────────────────────────────────
   4 [   name: my-nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment my-nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-example8.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: my-nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-example8.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: my-nginx
  17 │         image: nginx
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



service-example9.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'example-service' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-example9_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-example9_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'curl' of Pod 'curl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-example9_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'curl' of 'pod' 'curl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-example9_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-example9_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-example9_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'curl' of Pod 'curl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-example9_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curl' of Pod 'curl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-example9_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-example9_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-example9_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-example9_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-example9_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-example9_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-example9_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "curl" of pod "curl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-example9_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-example9_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod curl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-example9_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: curl
   5 │   labels:
   6 └     name: curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container curl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-example9_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod curl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-example9_1.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container curl in pod curl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-example9_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────



service-example_1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-example_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'curl' of Pod 'curl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-example_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'curl' of 'pod' 'curl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-example_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-example_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-example_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'curl' of Pod 'curl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-example_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curl' of Pod 'curl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-example_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-example_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-example_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-example_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-example_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-example_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-example_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "curl" of pod "curl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-example_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-example_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod curl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-example_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: curl
   5 │   labels:
   6 └     name: curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container curl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-example_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod curl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-example_1.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container curl in pod curl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-example_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────



service-external-name.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'my-service-external' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-external.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'desenvolvedorio' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-external1.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'desenvolvedorio' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-external2.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'desenvolvedorio' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-external4.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'service-external' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-externalName10.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'apache-service' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-externalips.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'api-tester-3221-externalips' in 'anotherclass-322' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-externalname.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'meu-service' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-externalname1.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'utrains-service' in 'dev' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-externalname2.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'utrains-service' in 'dev' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-externalname3.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'utrains-service' in 'dev' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-externalname4.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'utrains-service' in 'dev' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-externalname5.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'utrains-service' in 'dev' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-externalname6.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'utrains-service' in 'dev' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-externalname7.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'utrains-service' in 'dev' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-externalname8.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'utrains-service' in 'dev' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-externalname9.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'utrains-service' in 'dev' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-forward.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'webapp-service-forward' in 'test' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-forward1.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'webapp-service-forward' in 'test' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-frontend4.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'frontend-service' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



service-load-balancing.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'my-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-load-balancing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'my-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-load-balancing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'my-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-load-balancing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'my-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-load-balancing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'my-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-load-balancing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'my-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-load-balancing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'my-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-load-balancing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'my-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-load-balancing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'my-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-load-balancing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'my-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-load-balancing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'my-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-load-balancing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'my-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-load-balancing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-load-balancing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "my-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-load-balancing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-load-balancing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-load-balancing.yaml:4
────────────────────────────────────────
   4 [   name: my-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment my-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-load-balancing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-load-balancing.yaml:15-20
────────────────────────────────────────
  15 ┌       terminationGracePeriodSeconds: 1
  16 │       containers:
  17 │       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx in deployment my-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-load-balancing.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-load-balancing_2.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'demo' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-load-balancing_2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo
   9 │     image: vinsdocker/util
  10 │     args:
  11 │     - sleep
  12 └     - '3600'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'demo' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-load-balancing_2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo
   9 │     image: vinsdocker/util
  10 │     args:
  11 │     - sleep
  12 └     - '3600'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'demo' of 'pod' 'my-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-load-balancing_2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo
   9 │     image: vinsdocker/util
  10 │     args:
  11 │     - sleep
  12 └     - '3600'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'demo' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-load-balancing_2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo
   9 │     image: vinsdocker/util
  10 │     args:
  11 │     - sleep
  12 └     - '3600'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'demo' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-load-balancing_2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo
   9 │     image: vinsdocker/util
  10 │     args:
  11 │     - sleep
  12 └     - '3600'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'demo' of Pod 'my-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-load-balancing_2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo
   9 │     image: vinsdocker/util
  10 │     args:
  11 │     - sleep
  12 └     - '3600'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'demo' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-load-balancing_2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo
   9 │     image: vinsdocker/util
  10 │     args:
  11 │     - sleep
  12 └     - '3600'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'demo' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-load-balancing_2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo
   9 │     image: vinsdocker/util
  10 │     args:
  11 │     - sleep
  12 └     - '3600'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'demo' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-load-balancing_2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo
   9 │     image: vinsdocker/util
  10 │     args:
  11 │     - sleep
  12 └     - '3600'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'demo' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-load-balancing_2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo
   9 │     image: vinsdocker/util
  10 │     args:
  11 │     - sleep
  12 └     - '3600'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'demo' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-load-balancing_2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo
   9 │     image: vinsdocker/util
  10 │     args:
  11 │     - sleep
  12 └     - '3600'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'demo' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-load-balancing_2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo
   9 │     image: vinsdocker/util
  10 │     args:
  11 │     - sleep
  12 └     - '3600'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-load-balancing_2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo
   9 │     image: vinsdocker/util
  10 │     args:
  11 │     - sleep
  12 └     - '3600'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "demo" of pod "my-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-load-balancing_2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo
   9 │     image: vinsdocker/util
  10 │     args:
  11 │     - sleep
  12 └     - '3600'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-load-balancing_2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo
   9 │     image: vinsdocker/util
  10 │     args:
  11 │     - sleep
  12 └     - '3600'
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-load-balancing_2.yaml:4
────────────────────────────────────────
   4 [   name: my-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-load-balancing_2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo
   9 │     image: vinsdocker/util
  10 │     args:
  11 │     - sleep
  12 └     - '3600'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-load-balancing_2.yaml:6-12
────────────────────────────────────────
   6 ┌   terminationGracePeriodSeconds: 1
   7 │   containers:
   8 │   - name: demo
   9 │     image: vinsdocker/util
  10 │     args:
  11 │     - sleep
  12 └     - '3600'
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container demo in pod my-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-load-balancing_2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: demo
   9 │     image: vinsdocker/util
  10 │     args:
  11 │     - sleep
  12 └     - '3600'
────────────────────────────────────────



service-loadbalancer4.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-loadbalancer4.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-loadbalancer4.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-loadbalancer4.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-loadbalancer4.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-loadbalancer4.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-loadbalancer4.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-loadbalancer4.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-loadbalancer4.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-loadbalancer4.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-loadbalancer4.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-loadbalancer4.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-loadbalancer4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx
   5 │   labels:
   6 └     deploy: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-loadbalancer4.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-loadbalancer4.yaml:17-28
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 └             memory: 128Mi
  ..   
────────────────────────────────────────



service-manager.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cluster-service-manager' of Deployment 'cluster-netmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-manager.yaml:27-50
────────────────────────────────────────
  27 ┌       - name: cluster-service-manager
  28 │         image: ghcr.io/jakobke/oakestra-cluster-service-manager:0.1-amd
  29 │         imagePullPolicy: Always
  30 │         ports:
  31 │         - containerPort: 10110
  32 │         env:
  33 │         - name: MY_PORT
  34 │           value: '10110'
  35 └         - name: MQTT_BROKER_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cluster-service-manager' of Deployment 'cluster-netmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-manager.yaml:27-50
────────────────────────────────────────
  27 ┌       - name: cluster-service-manager
  28 │         image: ghcr.io/jakobke/oakestra-cluster-service-manager:0.1-amd
  29 │         imagePullPolicy: Always
  30 │         ports:
  31 │         - containerPort: 10110
  32 │         env:
  33 │         - name: MY_PORT
  34 │           value: '10110'
  35 └         - name: MQTT_BROKER_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cluster-service-manager' of 'deployment' 'cluster-netmanager' in 'oakestra-network' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-manager.yaml:27-50
────────────────────────────────────────
  27 ┌       - name: cluster-service-manager
  28 │         image: ghcr.io/jakobke/oakestra-cluster-service-manager:0.1-amd
  29 │         imagePullPolicy: Always
  30 │         ports:
  31 │         - containerPort: 10110
  32 │         env:
  33 │         - name: MY_PORT
  34 │           value: '10110'
  35 └         - name: MQTT_BROKER_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cluster-service-manager' of Deployment 'cluster-netmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-manager.yaml:27-50
────────────────────────────────────────
  27 ┌       - name: cluster-service-manager
  28 │         image: ghcr.io/jakobke/oakestra-cluster-service-manager:0.1-amd
  29 │         imagePullPolicy: Always
  30 │         ports:
  31 │         - containerPort: 10110
  32 │         env:
  33 │         - name: MY_PORT
  34 │           value: '10110'
  35 └         - name: MQTT_BROKER_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cluster-service-manager' of Deployment 'cluster-netmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-manager.yaml:27-50
────────────────────────────────────────
  27 ┌       - name: cluster-service-manager
  28 │         image: ghcr.io/jakobke/oakestra-cluster-service-manager:0.1-amd
  29 │         imagePullPolicy: Always
  30 │         ports:
  31 │         - containerPort: 10110
  32 │         env:
  33 │         - name: MY_PORT
  34 │           value: '10110'
  35 └         - name: MQTT_BROKER_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cluster-service-manager' of Deployment 'cluster-netmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-manager.yaml:27-50
────────────────────────────────────────
  27 ┌       - name: cluster-service-manager
  28 │         image: ghcr.io/jakobke/oakestra-cluster-service-manager:0.1-amd
  29 │         imagePullPolicy: Always
  30 │         ports:
  31 │         - containerPort: 10110
  32 │         env:
  33 │         - name: MY_PORT
  34 │           value: '10110'
  35 └         - name: MQTT_BROKER_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cluster-service-manager' of Deployment 'cluster-netmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-manager.yaml:27-50
────────────────────────────────────────
  27 ┌       - name: cluster-service-manager
  28 │         image: ghcr.io/jakobke/oakestra-cluster-service-manager:0.1-amd
  29 │         imagePullPolicy: Always
  30 │         ports:
  31 │         - containerPort: 10110
  32 │         env:
  33 │         - name: MY_PORT
  34 │           value: '10110'
  35 └         - name: MQTT_BROKER_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cluster-service-manager' of Deployment 'cluster-netmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-manager.yaml:27-50
────────────────────────────────────────
  27 ┌       - name: cluster-service-manager
  28 │         image: ghcr.io/jakobke/oakestra-cluster-service-manager:0.1-amd
  29 │         imagePullPolicy: Always
  30 │         ports:
  31 │         - containerPort: 10110
  32 │         env:
  33 │         - name: MY_PORT
  34 │           value: '10110'
  35 └         - name: MQTT_BROKER_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cluster-service-manager' of Deployment 'cluster-netmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-manager.yaml:27-50
────────────────────────────────────────
  27 ┌       - name: cluster-service-manager
  28 │         image: ghcr.io/jakobke/oakestra-cluster-service-manager:0.1-amd
  29 │         imagePullPolicy: Always
  30 │         ports:
  31 │         - containerPort: 10110
  32 │         env:
  33 │         - name: MY_PORT
  34 │           value: '10110'
  35 └         - name: MQTT_BROKER_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cluster-service-manager' of Deployment 'cluster-netmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-manager.yaml:27-50
────────────────────────────────────────
  27 ┌       - name: cluster-service-manager
  28 │         image: ghcr.io/jakobke/oakestra-cluster-service-manager:0.1-amd
  29 │         imagePullPolicy: Always
  30 │         ports:
  31 │         - containerPort: 10110
  32 │         env:
  33 │         - name: MY_PORT
  34 │           value: '10110'
  35 └         - name: MQTT_BROKER_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cluster-service-manager' of Deployment 'cluster-netmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-manager.yaml:27-50
────────────────────────────────────────
  27 ┌       - name: cluster-service-manager
  28 │         image: ghcr.io/jakobke/oakestra-cluster-service-manager:0.1-amd
  29 │         imagePullPolicy: Always
  30 │         ports:
  31 │         - containerPort: 10110
  32 │         env:
  33 │         - name: MY_PORT
  34 │           value: '10110'
  35 └         - name: MQTT_BROKER_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-manager.yaml:27-50
────────────────────────────────────────
  27 ┌       - name: cluster-service-manager
  28 │         image: ghcr.io/jakobke/oakestra-cluster-service-manager:0.1-amd
  29 │         imagePullPolicy: Always
  30 │         ports:
  31 │         - containerPort: 10110
  32 │         env:
  33 │         - name: MY_PORT
  34 │           value: '10110'
  35 └         - name: MQTT_BROKER_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cluster-service-manager" of deployment "cluster-netmanager" in "oakestra-network" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-manager.yaml:27-50
────────────────────────────────────────
  27 ┌       - name: cluster-service-manager
  28 │         image: ghcr.io/jakobke/oakestra-cluster-service-manager:0.1-amd
  29 │         imagePullPolicy: Always
  30 │         ports:
  31 │         - containerPort: 10110
  32 │         env:
  33 │         - name: MY_PORT
  34 │           value: '10110'
  35 └         - name: MQTT_BROKER_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-manager.yaml:27-50
────────────────────────────────────────
  27 ┌       - name: cluster-service-manager
  28 │         image: ghcr.io/jakobke/oakestra-cluster-service-manager:0.1-amd
  29 │         imagePullPolicy: Always
  30 │         ports:
  31 │         - containerPort: 10110
  32 │         env:
  33 │         - name: MY_PORT
  34 │           value: '10110'
  35 └         - name: MQTT_BROKER_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container cluster-netmanager in oakestra-network namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-manager.yaml:27-50
────────────────────────────────────────
  27 ┌       - name: cluster-service-manager
  28 │         image: ghcr.io/jakobke/oakestra-cluster-service-manager:0.1-amd
  29 │         imagePullPolicy: Always
  30 │         ports:
  31 │         - containerPort: 10110
  32 │         env:
  33 │         - name: MY_PORT
  34 │           value: '10110'
  35 └         - name: MQTT_BROKER_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment cluster-netmanager in oakestra-network namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-manager.yaml:16-50
────────────────────────────────────────
  16 ┌       affinity:
  17 │         podAffinity:
  18 │           requiredDuringSchedulingIgnoredDuringExecution:
  19 │           - labelSelector:
  20 │               matchExpressions:
  21 │               - key: plugin
  22 │                 operator: In
  23 │                 values:
  24 └                 - oakestra
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cluster-service-manager in deployment cluster-netmanager (namespace: oakestra-network) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-manager.yaml:27-50
────────────────────────────────────────
  27 ┌       - name: cluster-service-manager
  28 │         image: ghcr.io/jakobke/oakestra-cluster-service-manager:0.1-amd
  29 │         imagePullPolicy: Always
  30 │         ports:
  31 │         - containerPort: 10110
  32 │         env:
  33 │         - name: MY_PORT
  34 │           value: '10110'
  35 └         - name: MQTT_BROKER_PORT
  ..   
────────────────────────────────────────



service-metrics-server-exporter.yaml (kubernetes)
=================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'metrics-server-exporter' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 service-metrics-server-exporter.yaml:13-18
────────────────────────────────────────
  13 ┌   ports:
  14 │   - port: 9104
  15 │     protocol: TCP
  16 │     targetPort: 8000
  17 │   selector:
  18 └     k8s-app: metrics-server-exporter
────────────────────────────────────────



service-nginx-ingress.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-ingress.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-ingress.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-ingress1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-ingress1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-ingress1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-ingress1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-ingress1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-ingress1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-ingress1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-ingress1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-ingress1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-ingress1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-ingress1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-ingress1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-ingress1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-ingress1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-ingress1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-ingress1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-ingress1.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-ingress1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-ingress1.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-ingress2.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-ingress2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-ingress2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-ingress2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-ingress2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-ingress2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-ingress2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-ingress2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-ingress2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-ingress2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-ingress2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-ingress2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-ingress2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-ingress2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-ingress2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-ingress2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-ingress2.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-ingress2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-ingress2.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-ingress3.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-ingress3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-ingress3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-ingress3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-ingress3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-ingress3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-ingress3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-ingress3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-ingress3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-ingress3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-ingress3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-ingress3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-ingress3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-ingress3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-ingress3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-ingress3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-ingress3.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-ingress3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-ingress3.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-ingress4.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-ingress4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-ingress4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-ingress4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-ingress4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-ingress4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-ingress4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-ingress4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-ingress4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-ingress4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-ingress4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-ingress4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-ingress4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-ingress4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-ingress4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-ingress4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-ingress4.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-ingress4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-ingress4.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-ingress5.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-ingress5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-ingress5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-ingress5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-ingress5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-ingress5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-ingress5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-ingress5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-ingress5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-ingress5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-ingress5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-ingress5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-ingress5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-ingress5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-ingress5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-ingress5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-ingress5.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-ingress5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-ingress5.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-ingress6.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-ingress6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-ingress6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-ingress6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-ingress6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-ingress6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-ingress6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-ingress6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-ingress6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-ingress6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-ingress6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-ingress6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-ingress6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-ingress6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-ingress6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-ingress6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-ingress6.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-ingress6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-ingress6.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-loadbalancer.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-loadbalancer.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-loadbalancer.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-loadbalancer1.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-loadbalancer1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-loadbalancer1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-loadbalancer1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-loadbalancer1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-loadbalancer1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-loadbalancer1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-loadbalancer1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-loadbalancer1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-loadbalancer1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-loadbalancer1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-loadbalancer1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-loadbalancer1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-loadbalancer1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-loadbalancer1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-loadbalancer1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-loadbalancer1.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-loadbalancer1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-loadbalancer1.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-loadbalancer2.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-loadbalancer2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-loadbalancer2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-loadbalancer2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-loadbalancer2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-loadbalancer2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-loadbalancer2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-loadbalancer2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-loadbalancer2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-loadbalancer2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-loadbalancer2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-loadbalancer2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-loadbalancer2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-loadbalancer2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-loadbalancer2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-loadbalancer2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-loadbalancer2.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-loadbalancer2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-loadbalancer2.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-loadbalancer3.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-loadbalancer3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-loadbalancer3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-loadbalancer3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-loadbalancer3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-loadbalancer3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-loadbalancer3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-loadbalancer3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-loadbalancer3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-loadbalancer3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-loadbalancer3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-loadbalancer3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-loadbalancer3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-loadbalancer3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-loadbalancer3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-loadbalancer3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-loadbalancer3.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-loadbalancer3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-loadbalancer3.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-loadbalancer4.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-loadbalancer4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-loadbalancer4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-loadbalancer4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-loadbalancer4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-loadbalancer4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-loadbalancer4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-loadbalancer4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-loadbalancer4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-loadbalancer4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-loadbalancer4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-loadbalancer4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-loadbalancer4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-loadbalancer4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-loadbalancer4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-loadbalancer4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-loadbalancer4.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-loadbalancer4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-loadbalancer4.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-loadbalancer5.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-loadbalancer5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-loadbalancer5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-loadbalancer5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-loadbalancer5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-loadbalancer5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-loadbalancer5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-loadbalancer5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-loadbalancer5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-loadbalancer5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-loadbalancer5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-loadbalancer5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-loadbalancer5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-loadbalancer5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-loadbalancer5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-loadbalancer5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-loadbalancer5.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-loadbalancer5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-loadbalancer5.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-loadbalancer6.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-loadbalancer6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-loadbalancer6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-loadbalancer6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-loadbalancer6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-loadbalancer6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-loadbalancer6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-loadbalancer6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-loadbalancer6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-loadbalancer6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-loadbalancer6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-loadbalancer6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-loadbalancer6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-loadbalancer6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-loadbalancer6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-loadbalancer6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-loadbalancer6.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-loadbalancer6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-loadbalancer6.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-nodeport.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-nodeport.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-nodeport.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-nodeport1.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-nodeport1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-nodeport1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-nodeport1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-nodeport1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-nodeport1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-nodeport1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-nodeport1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-nodeport1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-nodeport1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-nodeport1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-nodeport1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-nodeport1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-nodeport1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-nodeport1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-nodeport1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-nodeport1.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-nodeport1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-nodeport1.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-nodeport2.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-nodeport2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-nodeport2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-nodeport2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-nodeport2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-nodeport2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-nodeport2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-nodeport2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-nodeport2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-nodeport2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-nodeport2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-nodeport2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-nodeport2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-nodeport2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-nodeport2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-nodeport2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-nodeport2.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-nodeport2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-nodeport2.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-nodeport3.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-nodeport3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-nodeport3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-nodeport3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-nodeport3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-nodeport3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-nodeport3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-nodeport3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-nodeport3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-nodeport3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-nodeport3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-nodeport3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-nodeport3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-nodeport3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-nodeport3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-nodeport3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-nodeport3.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-nodeport3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-nodeport3.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-nodeport4.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-nodeport4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-nodeport4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-nodeport4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-nodeport4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-nodeport4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-nodeport4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-nodeport4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-nodeport4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-nodeport4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-nodeport4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-nodeport4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-nodeport4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-nodeport4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-nodeport4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-nodeport4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-nodeport4.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-nodeport4.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-nodeport4.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-nodeport5.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-nodeport5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-nodeport5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-nodeport5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-nodeport5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-nodeport5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-nodeport5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-nodeport5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-nodeport5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-nodeport5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-nodeport5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-nodeport5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-nodeport5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-nodeport5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-nodeport5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-nodeport5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-nodeport5.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-nodeport5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-nodeport5.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-nodeport6.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-nodeport6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-nodeport6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-nodeport6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-nodeport6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-nodeport6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-nodeport6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-nodeport6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-nodeport6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-nodeport6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-nodeport6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-nodeport6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-nodeport6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-nodeport6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-nodeport6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-nodeport6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-nodeport6.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-nodeport6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-nodeport6.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-nodeport7.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-nodeport7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-nodeport7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-nodeport7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-nodeport7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-nodeport7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-nodeport7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-nodeport7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-nodeport7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-nodeport7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-nodeport7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-nodeport7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-nodeport7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-nodeport7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-nodeport7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-nodeport7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-nodeport7.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-nodeport7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-nodeport7.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-with-ingress.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-with-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-with-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-with-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-with-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-with-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-with-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-with-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-with-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-with-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-with-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-with-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-with-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-with-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-with-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-with-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-with-ingress.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-with-ingress.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-with-ingress.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-with-loadbalancer.yaml (kubernetes)
=================================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-with-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-with-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx-rs' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-with-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-with-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-with-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx-rs' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-with-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-with-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-with-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-with-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-with-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-with-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-with-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-with-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx-rs" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-with-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-with-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx-rs in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-with-loadbalancer.yaml:4
────────────────────────────────────────
   4 [   name: nginx-rs
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx-rs in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-rs in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-with-loadbalancer.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx-rs in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-with-loadbalancer.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx-with-nodeport.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx-with-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx-with-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx-rs' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx-with-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx-with-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx-with-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx-rs' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx-with-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx-with-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx-with-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx-with-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx-with-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx-with-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx-with-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx-with-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx-rs" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx-with-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx-with-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx-rs in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx-with-nodeport.yaml:4
────────────────────────────────────────
   4 [   name: nginx-rs
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx-rs in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-rs in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-with-nodeport.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx-rs in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx-with-nodeport.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx1.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx1.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx16.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx16.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx16.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx16.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx16_2.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx16_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'curl' of Pod 'curl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx16_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'curl' of 'pod' 'curl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx16_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx16_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx16_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'curl' of Pod 'curl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx16_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curl' of Pod 'curl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx16_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx16_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx16_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx16_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx16_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx16_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx16_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "curl" of pod "curl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx16_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx16_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod curl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx16_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: curl
   5 │   labels:
   6 └     name: curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container curl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx16_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod curl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx16_2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container curl in pod curl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-nginx16_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────



service-nginx17.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx17.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx17.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx17.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx17_2.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx17_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'curl' of Pod 'curl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx17_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'curl' of 'pod' 'curl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx17_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx17_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx17_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'curl' of Pod 'curl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx17_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curl' of Pod 'curl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx17_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx17_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx17_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx17_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx17_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx17_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx17_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "curl" of pod "curl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx17_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx17_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod curl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx17_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: curl
   5 │   labels:
   6 └     name: curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container curl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx17_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod curl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx17_2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container curl in pod curl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-nginx17_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────



service-nginx1_2.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx1_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'curl' of Pod 'curl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx1_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'curl' of 'pod' 'curl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx1_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx1_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx1_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'curl' of Pod 'curl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx1_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curl' of Pod 'curl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx1_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx1_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx1_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx1_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx1_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx1_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx1_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "curl" of pod "curl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx1_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx1_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod curl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx1_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: curl
   5 │   labels:
   6 └     name: curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container curl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx1_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod curl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx1_2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container curl in pod curl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-nginx1_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────



service-nginx2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx2.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx2.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx2_2.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'curl' of Pod 'curl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'curl' of 'pod' 'curl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'curl' of Pod 'curl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curl' of Pod 'curl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "curl" of pod "curl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod curl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx2_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: curl
   5 │   labels:
   6 └     name: curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container curl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod curl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx2_2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container curl in pod curl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-nginx2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────



service-nginx3.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx3.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx3.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx3.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx3_2.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx3_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'curl' of Pod 'curl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx3_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'curl' of 'pod' 'curl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx3_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx3_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx3_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'curl' of Pod 'curl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx3_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curl' of Pod 'curl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx3_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx3_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx3_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx3_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx3_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx3_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx3_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "curl" of pod "curl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx3_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx3_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod curl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx3_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: curl
   5 │   labels:
   6 └     name: curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container curl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx3_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod curl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx3_2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container curl in pod curl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-nginx3_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────



service-nginx5.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx5.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx5.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx5.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx5_2.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx5_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'curl' of Pod 'curl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx5_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'curl' of 'pod' 'curl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx5_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx5_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx5_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'curl' of Pod 'curl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx5_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curl' of Pod 'curl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx5_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx5_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx5_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx5_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx5_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx5_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx5_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "curl" of pod "curl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx5_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx5_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod curl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx5_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: curl
   5 │   labels:
   6 └     name: curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container curl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx5_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod curl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx5_2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container curl in pod curl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-nginx5_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────



service-nginx8.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx8.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx8.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx8.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx8.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx8.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx8.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx8.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx8.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx8.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx8.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx8.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx8.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx8.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx8.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx8.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx8.yaml:4
────────────────────────────────────────
   4 [   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx8.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx8.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx8_2.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'curl' of Pod 'curl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'curl' of 'pod' 'curl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'curl' of Pod 'curl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curl' of Pod 'curl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "curl" of pod "curl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod curl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx8_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: curl
   5 │   labels:
   6 └     name: curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container curl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod curl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx8_2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container curl in pod curl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-nginx8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────



service-nginx9.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx9.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx9.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'replicaset' 'nginx-rs' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx9.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx9.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx9.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of ReplicaSet 'nginx-rs' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx9.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx9.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx9.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx9.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx9.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx9.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of ReplicaSet 'nginx-rs' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx9.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx9.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of replicaset "nginx-rs" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx9.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx9.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicaset nginx-rs in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx9.yaml:4
────────────────────────────────────────
   4 [   name: nginx-rs
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): replicaset nginx-rs in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-rs in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx9.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicaset nginx-rs in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx9.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nginx9_2.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx9_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'curl' of Pod 'curl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx9_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'curl' of 'pod' 'curl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx9_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx9_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx9_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'curl' of Pod 'curl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx9_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curl' of Pod 'curl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx9_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx9_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx9_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx9_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx9_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx9_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx9_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "curl" of pod "curl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx9_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx9_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod curl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx9_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: curl
   5 │   labels:
   6 └     name: curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container curl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx9_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod curl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx9_2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container curl in pod curl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-nginx9_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: akhmadwildan/nginx-curl
────────────────────────────────────────



service-nginx_2.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nginx_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'curl' of Pod 'curl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nginx_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'curl' of 'pod' 'curl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nginx_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-nginx_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'curl' of Pod 'curl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nginx_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'curl' of Pod 'curl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nginx_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curl' of Pod 'curl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nginx_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-nginx_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'curl' of Pod 'curl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-nginx_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'curl' of Pod 'curl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-nginx_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nginx_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'curl' of Pod 'curl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nginx_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nginx_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "curl" of pod "curl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nginx_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nginx_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod curl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nginx_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: curl
   5 │   labels:
   6 └     name: curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container curl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod curl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nginx_2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container curl in pod curl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-nginx_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: curl
  10 └     image: khannedy/nginx-curl
────────────────────────────────────────



service-no-port-name-system-namespace.yaml (kubernetes)
=======================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'my-service1' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 service-no-port-name-system-namespace.yaml:7-15
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: my-service1
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 8080
  12 │     targetPort: 8080
  13 │   - protocol: TCP
  14 │     port: 8081
  15 └     targetPort: 8081
────────────────────────────────────────



service-node-port7.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'my-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-node-port7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'my-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-node-port7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'my-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-node-port7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'my-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-node-port7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'my-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-node-port7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'my-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-node-port7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'my-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-node-port7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'my-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-node-port7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'my-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-node-port7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'my-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-node-port7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'my-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-node-port7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'my-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-node-port7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-node-port7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "my-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-node-port7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-node-port7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-node-port7.yaml:4
────────────────────────────────────────
   4 [   name: my-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment my-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-node-port7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-node-port7.yaml:15-20
────────────────────────────────────────
  15 ┌       terminationGracePeriodSeconds: 1
  16 │       containers:
  17 │       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx in deployment my-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-node-port7.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: vinsdocker/nginx-gke
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



service-nodeport15.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-nodeport15.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-nodeport15.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-nodeport15.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-nodeport15.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-nodeport15.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-nodeport15.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-nodeport15.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-nodeport15.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-nodeport15.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-nodeport15.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-nodeport15.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-nodeport15.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx
   5 │   labels:
   6 └     deploy: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nodeport15.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 │             memory: 128Mi
  26 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-nodeport15.yaml:17-28
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx
  20 │         resources:
  21 │           requests:
  22 │             memory: 60Mi
  23 │             cpu: 100m
  24 │           limits:
  25 └             memory: 128Mi
  ..   
────────────────────────────────────────



service-of-different-namespace_1.yaml (kubernetes)
==================================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'delivery' of Deployment 'delivery' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-of-different-namespace_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: delivery
  23 │         image: yoonjeong/my-app:2.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'delivery' of Deployment 'delivery' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-of-different-namespace_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: delivery
  23 │         image: yoonjeong/my-app:2.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'delivery' of 'deployment' 'delivery' in 'fancy-snackbar' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-of-different-namespace_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: delivery
  23 │         image: yoonjeong/my-app:2.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'delivery' of Deployment 'delivery' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-of-different-namespace_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: delivery
  23 │         image: yoonjeong/my-app:2.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'delivery' of Deployment 'delivery' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-of-different-namespace_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: delivery
  23 │         image: yoonjeong/my-app:2.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'delivery' of Deployment 'delivery' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-of-different-namespace_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: delivery
  23 │         image: yoonjeong/my-app:2.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'delivery' of Deployment 'delivery' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-of-different-namespace_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: delivery
  23 │         image: yoonjeong/my-app:2.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'delivery' of Deployment 'delivery' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-of-different-namespace_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: delivery
  23 │         image: yoonjeong/my-app:2.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'delivery' of Deployment 'delivery' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-of-different-namespace_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: delivery
  23 │         image: yoonjeong/my-app:2.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-of-different-namespace_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: delivery
  23 │         image: yoonjeong/my-app:2.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "delivery" of deployment "delivery" in "fancy-snackbar" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-of-different-namespace_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: delivery
  23 │         image: yoonjeong/my-app:2.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-of-different-namespace_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: delivery
  23 │         image: yoonjeong/my-app:2.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container delivery in fancy-snackbar namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-of-different-namespace_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: delivery
  23 │         image: yoonjeong/my-app:2.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment delivery in fancy-snackbar namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-of-different-namespace_1.yaml:21-29
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: delivery
  23 │         image: yoonjeong/my-app:2.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container delivery in deployment delivery (namespace: fancy-snackbar) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-of-different-namespace_1.yaml:22-29
────────────────────────────────────────
  22 ┌       - name: delivery
  23 │         image: yoonjeong/my-app:2.0
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         resources:
  27 │           limits:
  28 │             memory: 64Mi
  29 └             cpu: 50m
────────────────────────────────────────



service-pod-def.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-pod-def.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'utrains-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-pod-def.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'utrains-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-pod-def.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-pod-def.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-pod-def.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-pod-def.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-pod-def.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-pod-def.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-pod-def.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-pod-def.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-pod-def.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-pod-def.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-pod-def.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "utrains-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-pod-def.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-pod-def.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod utrains-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-pod-def.yaml:4-6
────────────────────────────────────────
   4 ┌   name: utrains-pod
   5 │   labels:
   6 └     name: utrains
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod utrains-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container utrains-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-pod-def.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod utrains-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-pod-def.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



service-pod-def1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-pod-def1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'utrains-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-pod-def1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'utrains-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-pod-def1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-pod-def1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-pod-def1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-pod-def1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-pod-def1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-pod-def1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-pod-def1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-pod-def1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-pod-def1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-pod-def1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-pod-def1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "utrains-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-pod-def1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-pod-def1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod utrains-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-pod-def1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: utrains-pod
   5 │   labels:
   6 └     name: utrains
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod utrains-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container utrains-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-pod-def1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod utrains-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-pod-def1.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



service-pod-def2.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-pod-def2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'utrains-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-pod-def2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'utrains-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-pod-def2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-pod-def2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-pod-def2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-pod-def2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-pod-def2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-pod-def2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-pod-def2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-pod-def2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-pod-def2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-pod-def2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-pod-def2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "utrains-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-pod-def2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-pod-def2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod utrains-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-pod-def2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: utrains-pod
   5 │   labels:
   6 └     name: utrains
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod utrains-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container utrains-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-pod-def2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod utrains-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-pod-def2.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



service-pod-def3.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-pod-def3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'utrains-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-pod-def3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'utrains-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-pod-def3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-pod-def3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-pod-def3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-pod-def3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-pod-def3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-pod-def3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-pod-def3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-pod-def3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-pod-def3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-pod-def3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-pod-def3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "utrains-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-pod-def3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-pod-def3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod utrains-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-pod-def3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: utrains-pod
   5 │   labels:
   6 └     name: utrains
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod utrains-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container utrains-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-pod-def3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod utrains-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-pod-def3.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



service-pod-def4.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-pod-def4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'utrains-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-pod-def4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'utrains-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-pod-def4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-pod-def4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-pod-def4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-pod-def4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-pod-def4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-pod-def4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-pod-def4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-pod-def4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-pod-def4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-pod-def4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-pod-def4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "utrains-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-pod-def4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-pod-def4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod utrains-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-pod-def4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: utrains-pod
   5 │   labels:
   6 └     name: utrains
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod utrains-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container utrains-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-pod-def4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod utrains-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-pod-def4.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



service-pod-def5.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-pod-def5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'utrains-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-pod-def5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'utrains-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-pod-def5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-pod-def5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-pod-def5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-pod-def5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-pod-def5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-pod-def5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-pod-def5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-pod-def5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-pod-def5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-pod-def5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-pod-def5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "utrains-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-pod-def5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-pod-def5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod utrains-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-pod-def5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: utrains-pod
   5 │   labels:
   6 └     name: utrains
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod utrains-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container utrains-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-pod-def5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod utrains-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-pod-def5.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



service-pod-def6.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-pod-def6.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'utrains-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-pod-def6.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'utrains-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-pod-def6.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-pod-def6.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-pod-def6.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-pod-def6.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-pod-def6.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-pod-def6.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-pod-def6.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-pod-def6.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-pod-def6.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-pod-def6.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-pod-def6.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "utrains-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-pod-def6.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-pod-def6.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod utrains-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-pod-def6.yaml:4-6
────────────────────────────────────────
   4 ┌   name: utrains-pod
   5 │   labels:
   6 └     name: utrains
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod utrains-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container utrains-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-pod-def6.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod utrains-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-pod-def6.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



service-pod-def7.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-pod-def7.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'utrains-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-pod-def7.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'utrains-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-pod-def7.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-pod-def7.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-pod-def7.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-pod-def7.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-pod-def7.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-pod-def7.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-pod-def7.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-pod-def7.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-pod-def7.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-pod-def7.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-pod-def7.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "utrains-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-pod-def7.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-pod-def7.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod utrains-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-pod-def7.yaml:4-6
────────────────────────────────────────
   4 ┌   name: utrains-pod
   5 │   labels:
   6 └     name: utrains
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod utrains-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container utrains-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-pod-def7.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod utrains-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-pod-def7.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



service-pod-def8.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-pod-def8.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'utrains-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-pod-def8.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'utrains-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-pod-def8.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-pod-def8.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-pod-def8.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'utrains-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-pod-def8.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-pod-def8.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-pod-def8.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-pod-def8.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-pod-def8.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-pod-def8.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'utrains-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-pod-def8.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-pod-def8.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "utrains-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-pod-def8.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-pod-def8.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod utrains-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-pod-def8.yaml:4-6
────────────────────────────────────────
   4 ┌   name: utrains-pod
   5 │   labels:
   6 └     name: utrains
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod utrains-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container utrains-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-pod-def8.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod utrains-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-pod-def8.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx
  10 │     image: nginx
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



service-pod.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'alpine' of Pod 'pod-pvc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-pod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command: ["/bin/sh", "-c"]
  10 │     args: ["shuf -i 0-100 -n 1 >> /opt/number.out;"]
  11 │     volumeMounts:
  12 │     - mountPath: /opt
  13 └       name: data-volume
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alpine' of Pod 'pod-pvc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-pod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command: ["/bin/sh", "-c"]
  10 │     args: ["shuf -i 0-100 -n 1 >> /opt/number.out;"]
  11 │     volumeMounts:
  12 │     - mountPath: /opt
  13 └       name: data-volume
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alpine' of 'pod' 'pod-pvc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-pod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command: ["/bin/sh", "-c"]
  10 │     args: ["shuf -i 0-100 -n 1 >> /opt/number.out;"]
  11 │     volumeMounts:
  12 │     - mountPath: /opt
  13 └       name: data-volume
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'alpine' of Pod 'pod-pvc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-pod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command: ["/bin/sh", "-c"]
  10 │     args: ["shuf -i 0-100 -n 1 >> /opt/number.out;"]
  11 │     volumeMounts:
  12 │     - mountPath: /opt
  13 └       name: data-volume
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alpine' of Pod 'pod-pvc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-pod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command: ["/bin/sh", "-c"]
  10 │     args: ["shuf -i 0-100 -n 1 >> /opt/number.out;"]
  11 │     volumeMounts:
  12 │     - mountPath: /opt
  13 └       name: data-volume
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'alpine' of Pod 'pod-pvc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-pod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command: ["/bin/sh", "-c"]
  10 │     args: ["shuf -i 0-100 -n 1 >> /opt/number.out;"]
  11 │     volumeMounts:
  12 │     - mountPath: /opt
  13 └       name: data-volume
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'alpine' of Pod 'pod-pvc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-pod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command: ["/bin/sh", "-c"]
  10 │     args: ["shuf -i 0-100 -n 1 >> /opt/number.out;"]
  11 │     volumeMounts:
  12 │     - mountPath: /opt
  13 └       name: data-volume
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'alpine' of Pod 'pod-pvc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-pod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command: ["/bin/sh", "-c"]
  10 │     args: ["shuf -i 0-100 -n 1 >> /opt/number.out;"]
  11 │     volumeMounts:
  12 │     - mountPath: /opt
  13 └       name: data-volume
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'alpine' of Pod 'pod-pvc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-pod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command: ["/bin/sh", "-c"]
  10 │     args: ["shuf -i 0-100 -n 1 >> /opt/number.out;"]
  11 │     volumeMounts:
  12 │     - mountPath: /opt
  13 └       name: data-volume
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'alpine' of Pod 'pod-pvc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-pod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command: ["/bin/sh", "-c"]
  10 │     args: ["shuf -i 0-100 -n 1 >> /opt/number.out;"]
  11 │     volumeMounts:
  12 │     - mountPath: /opt
  13 └       name: data-volume
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'alpine' of Pod 'pod-pvc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-pod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command: ["/bin/sh", "-c"]
  10 │     args: ["shuf -i 0-100 -n 1 >> /opt/number.out;"]
  11 │     volumeMounts:
  12 │     - mountPath: /opt
  13 └       name: data-volume
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'alpine' of Pod 'pod-pvc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-pod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command: ["/bin/sh", "-c"]
  10 │     args: ["shuf -i 0-100 -n 1 >> /opt/number.out;"]
  11 │     volumeMounts:
  12 │     - mountPath: /opt
  13 └       name: data-volume
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-pod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command: ["/bin/sh", "-c"]
  10 │     args: ["shuf -i 0-100 -n 1 >> /opt/number.out;"]
  11 │     volumeMounts:
  12 │     - mountPath: /opt
  13 └       name: data-volume
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alpine" of pod "pod-pvc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-pod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command: ["/bin/sh", "-c"]
  10 │     args: ["shuf -i 0-100 -n 1 >> /opt/number.out;"]
  11 │     volumeMounts:
  12 │     - mountPath: /opt
  13 └       name: data-volume
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-pod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command: ["/bin/sh", "-c"]
  10 │     args: ["shuf -i 0-100 -n 1 >> /opt/number.out;"]
  11 │     volumeMounts:
  12 │     - mountPath: /opt
  13 └       name: data-volume
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pod-pvc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-pod.yaml:4
────────────────────────────────────────
   4 [   name: pod-pvc
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-pvc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-pod.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command: ["/bin/sh", "-c"]
  10 │     args: ["shuf -i 0-100 -n 1 >> /opt/number.out;"]
  11 │     volumeMounts:
  12 │     - mountPath: /opt
  13 └       name: data-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod-pvc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-pod.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: alpine
   8 │     image: alpine
   9 │     command: ["/bin/sh", "-c"]
  10 │     args: ["shuf -i 0-100 -n 1 >> /opt/number.out;"]
  11 │     volumeMounts:
  12 │     - mountPath: /opt
  13 │       name: data-volume
  14 └   volumes:
  ..   
────────────────────────────────────────



service-registory-statefulset.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'eureka' of StatefulSet 'eureka' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-registory-statefulset.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'eureka' of StatefulSet 'eureka' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-registory-statefulset.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'eureka' of 'statefulset' 'eureka' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-registory-statefulset.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'eureka' of StatefulSet 'eureka' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-registory-statefulset.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'eureka' of StatefulSet 'eureka' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-registory-statefulset.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'eureka' of StatefulSet 'eureka' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-registory-statefulset.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'eureka' of StatefulSet 'eureka' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-registory-statefulset.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'eureka' of StatefulSet 'eureka' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-registory-statefulset.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'eureka' of StatefulSet 'eureka' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-registory-statefulset.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'eureka' of StatefulSet 'eureka' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-registory-statefulset.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'eureka' of StatefulSet 'eureka' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-registory-statefulset.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-registory-statefulset.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "eureka" of statefulset "eureka" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-registory-statefulset.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-registory-statefulset.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset eureka in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-registory-statefulset.yaml:4-5
────────────────────────────────────────
   4 ┌   name: eureka
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container eureka in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-registory-statefulset.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset eureka in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-registory-statefulset.yaml:17-22
────────────────────────────────────────
  17 ┌       terminationGracePeriodSeconds: 10
  18 │       containers:
  19 │       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container eureka in statefulset eureka (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-registory-statefulset.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


