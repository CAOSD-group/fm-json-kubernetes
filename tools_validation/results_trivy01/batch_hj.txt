
Report Summary

┌───────────────────────────────────────────────┬────────────┬───────────────────┐
│                    Target                     │    Type    │ Misconfigurations │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC674.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC747.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC750.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_1.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_11.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_12.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_13.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_14.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_15.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_16.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_17.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_18.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_19.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_2.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_21.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_22.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_23.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_24.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_25.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_26.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_3.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_Deployment_Service.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_Deployment_Service_1.yaml                 │ kubernetes │        12         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_Deployment_Service_2.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_SC(custom).yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVC_SC(default).yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVClaim.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVClaim_1.yaml                                │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_11.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_12.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_13.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_14.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_15.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_16.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_17.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_2.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_21.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_22.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_23.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_24.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_31.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_32.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_4.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_PVC1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_PVC1_1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_PVC2.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_PVC2_1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_PVC3.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_PVC3_1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_PVC4.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_PVC4_1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_PVC5.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_PVC5_1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_PVC_Pod1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_PVC_Pod1_1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_PVC_Pod1_2.yaml                            │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PV_nfs.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVol.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVol1.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PVol2.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PW_King-deployment-service.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PW_King-deployment-service_1.yaml             │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PythonApp-Deployment.yaml                     │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ PythonApp-Deployment_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q101.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q101_1.yaml                                   │ kubernetes │        15         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q101_2.yaml                                   │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q111.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q111_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q111_2.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q111_3.yaml                                   │ kubernetes │        14         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q111_4.yaml                                   │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q111_5.yaml                                   │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q111_6.yaml                                   │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q121.yaml                                     │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q13-Solution.yaml                             │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q17.yaml                                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q17_1.yaml                                    │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q17_2.yaml                                    │ kubernetes │        15         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q17_3.yaml                                    │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q4.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q4_1.yaml                                     │ kubernetes │        16         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q51.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q51_1.yaml                                    │ kubernetes │        16         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q7.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q7_1.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q7_2.yaml                                     │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q8-Part6-Solution.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q8-Part6-Solution_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Q8-Part6-Solution_2.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvClaim1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvCreateLocal.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvWithSC.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_1.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_and_pvc.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_and_pvc1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_and_pvc1_1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_and_pvc_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_claim_config.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_claim_config_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_claim_config_2.yaml                        │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_persistent_volume.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath1_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath1_2.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath1_3.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath1_4.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath1_5.yaml                       │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath2.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath2_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath2_2.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath2_3.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath2_4.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath2_5.yaml                       │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath3.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath3_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath3_2.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath3_3.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath3_4.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath3_5.yaml                       │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath_2.yaml                        │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath_3.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath_4.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_hostpath_5.yaml                        │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_nfs.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_nfs1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_nfs1_1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_nfs1_2.yaml                            │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_nfs1_3.yaml                            │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_nfs1_4.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_nfs2.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_nfs2_1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_nfs2_2.yaml                            │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_nfs2_3.yaml                            │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_nfs2_4.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_nfs3.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_nfs3_1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_nfs3_2.yaml                            │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_nfs3_3.yaml                            │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_nfs_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_nfs_2.yaml                             │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_nfs_3.yaml                             │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_nfs_4.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_pod.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_pod_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_pvc_pod_2.yaml                             │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_sample.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_sample_1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_sample_2.yaml                              │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_wordpress.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pv_wordpress_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc671.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc672.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc673.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc675.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc676.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc677.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc678.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc679.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc68.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc680.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc681.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc682.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc683.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc684.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc686.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc688.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc69.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc690.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc692.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc693.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc694.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc695.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc696.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc698.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc7.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc70.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc702.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc703.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc706.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc707.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc707_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc707_2.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc707_3.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc707_4.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc707_5.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc708.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc709.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc710.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc711.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc712.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc713.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc714.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc715.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc716.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc717.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc718.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc719.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc720.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc721.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc722.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc723.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc724.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc725.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc726.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc727.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc728.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc729.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc730.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc731.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc732.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc732_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc733.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc734.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc735.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc736.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc737.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc739.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc74.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc740.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc741.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc741_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc742.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc744.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc745.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc746.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc749.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc75.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc751.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc753.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc754.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc75_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc76.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc765.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc766.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc767.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc768.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc77.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc770.yaml                                   │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc770_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc771.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc772.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc773.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc774.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc774_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc775.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc776.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc778.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc779.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc780.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc781.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc782.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc783.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc784.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc785.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc786.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc787.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc788.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc789.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc79.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc790.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc791.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc791_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc792.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc794.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc798.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc799.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc8.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc80.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc800.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc801.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc802.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc803.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc804.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc805.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc806.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc807.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc808.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc809.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc81.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc810.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc811.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc812.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc813.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc814.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc815.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc816.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc817.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc818.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc819.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc82.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc820.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc821.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc822.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc823.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc824.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc824_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc824_2.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc824_3.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc824_4.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc824_5.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc825.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc826.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc827.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc828.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc829.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc83.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc830.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc836.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc837.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc838.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc839.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc84.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc840.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc841.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc842.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc843.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc844.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc845.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc846.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc847.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc849.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc85.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc850.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc851.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc852.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc853.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc854.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc855.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc855_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc856.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc857.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc858.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc86.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc860.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc861.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc864.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc864_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc865.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc866.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc867.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc868.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc869.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc87.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc870.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc871.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc872.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc873.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc874.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc875.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc876.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc877.yaml                                   │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc878.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc88.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc880.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc881.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc882.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc883.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc884.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc885.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc886.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc887.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc888.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc889.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc889_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc890.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc891.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc892.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc893.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc898.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc899.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc899_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc899_2.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc9.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc901.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc902.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc902_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc903.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc903_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc904.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc905.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc906.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc907.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc908.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc909.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc91.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc915.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc916.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc917.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc918.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc919.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc92.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc920.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc921.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc922.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc923.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc924.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc925.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc926.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc927.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc928.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc929.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc93.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc930.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc931.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc932.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc933.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc934.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc935.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc936.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc937.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc938.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc939.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc94.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc940.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc941.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc942.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc943.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc946.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc949.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc95.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc950.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc956.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc957.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc958.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc959.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc96.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc960.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc961.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc962.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc963.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc964.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc965.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc966.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc967.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc968.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc969.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc969_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc970.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc971.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc972.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc973.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc974.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc975.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc976.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc977.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc977_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc977_2.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc978.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc979.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc98.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc980.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc984.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc985.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc987.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc988.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc989.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc99.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc990.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc991.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc992.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc992_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc992_2.yaml                                 │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc993.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc994.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc995.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc996.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc997.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc998.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc999.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvcAndSc.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvcWithSC.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc_cache-storage.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc_cache-storage1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc_datasource_snapshot.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc_deployment.yaml                           │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc_example.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc_example1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc_example2.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc_example3.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc_nfs.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc_persistent_volume claim.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc_sc.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc_storage_class.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc_storage_class1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc_test1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc_wordpress.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvc_wordpress1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvcbackup_editor_role.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvcbackup_editor_role1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvcbackup_viewer_role.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvcbackup_viewer_role1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvclaim2.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvclaim3.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvclaim_azure_nfs.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvclaim_azure_nfs1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvclaim_azure_nfs1_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvclaim_azure_nfs1_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvclaim_azure_nfs_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvclaim_azure_nfs_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvclaim_onpremise.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvclaim_onpremise1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvclaim_onpremise1_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvclaim_onpremise1_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvclaim_onpremise_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvclaim_onpremise_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvcmongo.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvcrestore_editor_role.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvcrestore_editor_role1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvcrestore_viewer_role.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvcrestore_viewer_role1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvcs1.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvcs1_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvcs3.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvcs4.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvctest.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvcwordpress.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvcwordpress_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pve.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pve2.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pve2_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pve2_2.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pve_1.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pve_2.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvl-controller-role.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvl-controller-role1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvl-controller-role10.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvl-controller-role11.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvl-controller-role2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvl-controller-role3.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvl-controller-role4.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvl-controller-role5.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvl-controller-role7.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvl-controller-role8.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvl-controller-role9.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvnfs.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvnfs10gb.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvpod.yaml                                    │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvpod2.yaml                                   │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvs.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvs1.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvs1_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvs1_2.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvs2.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvs2_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvs2_2.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvs2_3.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvs2_4.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvs3.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvs3_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvs4.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvs_1.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvs_2.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvss.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvss_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvss_2.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvssa.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvssb.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvssc.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvtest.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvtest1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pvwordpress.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pwru.yaml                                     │ kubernetes │        22         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-kafka.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-kafka_1.yaml                               │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-kafka_10.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-kafka_11.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-kafka_12.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-kafka_13.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-kafka_14.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-kafka_15.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-kafka_16.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-kafka_2.yaml                               │ kubernetes │        33         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-kafka_3.yaml                               │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-kafka_4.yaml                               │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-kafka_5.yaml                               │ kubernetes │        33         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-kafka_6.yaml                               │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-kafka_7.yaml                               │ kubernetes │        33         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-kafka_8.yaml                               │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-kafka_9.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_1.yaml                                │ kubernetes │         8         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_10.yaml                               │ kubernetes │        15         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_11.yaml                               │ kubernetes │        31         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_12.yaml                               │ kubernetes │        14         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_13.yaml                               │ kubernetes │         9         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_14.yaml                               │ kubernetes │         8         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_15.yaml                               │ kubernetes │        14         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_16.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_17.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_18.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_19.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_2.yaml                                │ kubernetes │        14         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_20.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_21.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_22.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_23.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_24.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_25.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_26.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_27.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_28.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_29.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_3.yaml                                │ kubernetes │         8         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_4.yaml                                │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_5.yaml                                │ kubernetes │         6         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_6.yaml                                │ kubernetes │        33         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_7.yaml                                │ kubernetes │         8         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_8.yaml                                │ kubernetes │        14         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ px-sock_9.yaml                                │ kubernetes │         8         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxbbq-frontend-tc.yaml                        │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxbbq-frontend-tc_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxbbq-frontend.yaml                           │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxbbq-frontend_1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxbbq-mongo-restore.yaml                      │ kubernetes │        15         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxbbq-mongo-restore_1.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxbbq-mongo-tc.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxbbq-mongo-tc_1.yaml                         │ kubernetes │        15         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxbbq-mongo-tc_2.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxbbq-mongo.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxbbq-mongo_1.yaml                            │ kubernetes │        15         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxbbq-mongo_2.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-cluster-service.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-cluster-service1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-cluster-service2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-node1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-node11.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-node11_1.yaml                             │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-node12.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-node12_1.yaml                             │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-node1_1.yaml                              │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-node2.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-node21.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-node21_1.yaml                             │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-node22.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-node22_1.yaml                             │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-node2_1.yaml                              │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-node3.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-node31.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-node31_1.yaml                             │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-node32.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-node32_1.yaml                             │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pxc-node3_1.yaml                              │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pyaes-hpa.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pyaes.yaml                                    │ kubernetes │        15         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pyaes_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pykmip-server.yaml                            │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pyspark-deployment.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pyspark-job.yaml                              │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pyspark-service.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ pyspark.yaml                                  │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python-app-deployment.yaml                    │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python-app-deployment_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python-app.yaml                               │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python-app1.yaml                              │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python-app2.yaml                              │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python-app2_1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python-deploy.yaml                            │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python-local-deployment.yaml                  │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python-pod.yaml                               │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python-service-deployment.yaml                │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python-service-tcp-service.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python-service.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python-svc.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python-to-do.yaml                             │ kubernetes │        14         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python-to-do_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python-todo-app.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python-todo-app_1.yaml                        │ kubernetes │        34         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python.yaml                                   │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python1.yaml                                  │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python_app_deployment.yaml                    │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python_app_service.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python_deployment.yaml                        │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ python_deployment_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q06.yaml                                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q09.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q09_1.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q1.yaml                                       │ kubernetes │        16         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q10.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q10_1.yaml                                    │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q11.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q12.yaml                                      │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q19.yaml                                      │ kubernetes │        34         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q2.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q20-2.yaml                                    │ kubernetes │        35         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q20.yaml                                      │ kubernetes │        50         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q25.yaml                                      │ kubernetes │        50         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q26.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q2_1.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q3.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q31.yaml                                      │ kubernetes │        16         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q32.yaml                                      │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q5.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q50-1.yaml                                    │ kubernetes │        34         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q50-2.yaml                                    │ kubernetes │        34         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q50-3.yaml                                    │ kubernetes │        32         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ q5_1.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qa-api-database-migration-job.yaml            │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qa-api-deployment-hpa.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qa-api-deployment.yaml                        │ kubernetes │        16         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qa-api-service.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qa-ingress.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qa-ui-deployment-hpa.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qa-ui-deployment.yaml                         │ kubernetes │        16         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qa-ui-service.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qa3.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qa4.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qa5.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qa5_1.yaml                                    │ kubernetes │        15         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent-claim0-persistentvolumeclaim.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent-claim1-persistentvolumeclaim.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent-claim2-persistentvolumeclaim.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent-claim3-persistentvolumeclaim.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent-claim4-persistentvolumeclaim.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent-claim5-persistentvolumeclaim.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent-configmap.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent-deployment.yaml                   │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent-deployment1.yaml                  │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent-deployment2.yaml                  │ kubernetes │        77         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent-ingress.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent-pvc-config.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent-pvc.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent-pvc_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent-service-ui.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent-service.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent-service1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent.yaml                              │ kubernetes │        34         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent3.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent4.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbittorrent4_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbtools-config.sops.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbtools.secret.sops.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qbtools.secret.sops1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qdrant-deployment.yaml                        │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qdrant-deployment_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qos-besteffort.yaml                           │ kubernetes │        34         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qos-besteffort1.yaml                          │ kubernetes │        34         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qos-besteffort2.yaml                          │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qos-burstable.yaml                            │ kubernetes │        33         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qos-burstable1.yaml                           │ kubernetes │        33         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qos-burstable2.yaml                           │ kubernetes │        33         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qos-burstable21.yaml                          │ kubernetes │        33         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qos-burstable3.yaml                           │ kubernetes │        16         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qos-guaranteed.yaml                           │ kubernetes │        26         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qos-guaranteed1.yaml                          │ kubernetes │        26         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qos-guaranteed2.yaml                          │ kubernetes │        13         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qotm-endpoints.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qotm-endpoints_1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qotm.yaml                                     │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qotm_1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qrgen-deploy.yaml                             │ kubernetes │        16         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ qrgen-service.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ quake-service.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ quake1_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ quake3.yaml                                   │ kubernetes │        36         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ quake31.yaml                                  │ kubernetes │        36         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ quake31_1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ quake31_2.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ quake3_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ quake3_2.yaml                                 │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ quake_1.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ quakes-api.yaml                               │ kubernetes │        13         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ quality-definition-resizings1.yaml            │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ quarkus-deployment.yaml                       │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ quarkus-service.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ quarkus.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ quarkus_1.yaml                                │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ quarkus_2.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ quartered.yaml                                │ kubernetes │        14         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ quay-io1.yaml                                 │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ quay-io1_1.yaml                               │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl.yaml                               │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl1.yaml                              │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl10.yaml                             │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl10_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl11.yaml                             │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl11_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl12.yaml                             │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl12_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl13.yaml                             │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl13_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl14.yaml                             │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl14_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl15.yaml                             │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl15_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl16.yaml                             │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl16_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl17.yaml                             │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl17_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl18.yaml                             │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl18_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl19.yaml                             │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl19_1.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl1_1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl2.yaml                              │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ query-depl20.yaml                             │ kubernetes │        19         │
└───────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


PVC_Deployment_Service_1.yaml (kubernetes)
==========================================
Tests: 108 (SUCCESSES: 96, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'jenkins' of Deployment 'jenkins-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 PVC_Deployment_Service_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: jenkins
  20 │         image: jenkins/jenkins:lts
  21 │         resources:
  22 │           limits:
  23 │             memory: 2Gi
  24 │             cpu: 1000m
  25 │           requests:
  26 │             memory: 500Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'jenkins' of Deployment 'jenkins-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 PVC_Deployment_Service_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: jenkins
  20 │         image: jenkins/jenkins:lts
  21 │         resources:
  22 │           limits:
  23 │             memory: 2Gi
  24 │             cpu: 1000m
  25 │           requests:
  26 │             memory: 500Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'jenkins' of 'deployment' 'jenkins-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 PVC_Deployment_Service_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: jenkins
  20 │         image: jenkins/jenkins:lts
  21 │         resources:
  22 │           limits:
  23 │             memory: 2Gi
  24 │             cpu: 1000m
  25 │           requests:
  26 │             memory: 500Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'jenkins' of Deployment 'jenkins-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 PVC_Deployment_Service_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: jenkins
  20 │         image: jenkins/jenkins:lts
  21 │         resources:
  22 │           limits:
  23 │             memory: 2Gi
  24 │             cpu: 1000m
  25 │           requests:
  26 │             memory: 500Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'jenkins' of Deployment 'jenkins-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 PVC_Deployment_Service_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: jenkins
  20 │         image: jenkins/jenkins:lts
  21 │         resources:
  22 │           limits:
  23 │             memory: 2Gi
  24 │             cpu: 1000m
  25 │           requests:
  26 │             memory: 500Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'jenkins' of Deployment 'jenkins-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 PVC_Deployment_Service_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: jenkins
  20 │         image: jenkins/jenkins:lts
  21 │         resources:
  22 │           limits:
  23 │             memory: 2Gi
  24 │             cpu: 1000m
  25 │           requests:
  26 │             memory: 500Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'jenkins' of Deployment 'jenkins-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 PVC_Deployment_Service_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: jenkins
  20 │         image: jenkins/jenkins:lts
  21 │         resources:
  22 │           limits:
  23 │             memory: 2Gi
  24 │             cpu: 1000m
  25 │           requests:
  26 │             memory: 500Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 PVC_Deployment_Service_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: jenkins
  20 │         image: jenkins/jenkins:lts
  21 │         resources:
  22 │           limits:
  23 │             memory: 2Gi
  24 │             cpu: 1000m
  25 │           requests:
  26 │             memory: 500Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "jenkins" of deployment "jenkins-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 PVC_Deployment_Service_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: jenkins
  20 │         image: jenkins/jenkins:lts
  21 │         resources:
  22 │           limits:
  23 │             memory: 2Gi
  24 │             cpu: 1000m
  25 │           requests:
  26 │             memory: 500Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 PVC_Deployment_Service_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: jenkins
  20 │         image: jenkins/jenkins:lts
  21 │         resources:
  22 │           limits:
  23 │             memory: 2Gi
  24 │             cpu: 1000m
  25 │           requests:
  26 │             memory: 500Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment jenkins-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 PVC_Deployment_Service_1.yaml:4
────────────────────────────────────────
   4 [   name: jenkins-deployment
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container jenkins in deployment jenkins-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 PVC_Deployment_Service_1.yaml:19-51
────────────────────────────────────────
  19 ┌       - name: jenkins
  20 │         image: jenkins/jenkins:lts
  21 │         resources:
  22 │           limits:
  23 │             memory: 2Gi
  24 │             cpu: 1000m
  25 │           requests:
  26 │             memory: 500Mi
  27 └             cpu: 500m
  ..   
────────────────────────────────────────



PVClaim_1.yaml (kubernetes)
===========================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mongo' of Pod 'mongodb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 PVClaim_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: mongo
   8 │     image: mongodb
   9 │     resources: {}
  10 │     volumeMounts:
  11 │     - name: mongodb-data
  12 │       mountPath: /data/db
  13 │     ports:
  14 │     - containerPort: 27017
  15 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mongo' of Pod 'mongodb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 PVClaim_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: mongo
   8 │     image: mongodb
   9 │     resources: {}
  10 │     volumeMounts:
  11 │     - name: mongodb-data
  12 │       mountPath: /data/db
  13 │     ports:
  14 │     - containerPort: 27017
  15 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mongo' of 'pod' 'mongodb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 PVClaim_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: mongo
   8 │     image: mongodb
   9 │     resources: {}
  10 │     volumeMounts:
  11 │     - name: mongodb-data
  12 │       mountPath: /data/db
  13 │     ports:
  14 │     - containerPort: 27017
  15 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mongo' of Pod 'mongodb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 PVClaim_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: mongo
   8 │     image: mongodb
   9 │     resources: {}
  10 │     volumeMounts:
  11 │     - name: mongodb-data
  12 │       mountPath: /data/db
  13 │     ports:
  14 │     - containerPort: 27017
  15 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mongo' of Pod 'mongodb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 PVClaim_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: mongo
   8 │     image: mongodb
   9 │     resources: {}
  10 │     volumeMounts:
  11 │     - name: mongodb-data
  12 │       mountPath: /data/db
  13 │     ports:
  14 │     - containerPort: 27017
  15 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mongo' of Pod 'mongodb' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 PVClaim_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: mongo
   8 │     image: mongodb
   9 │     resources: {}
  10 │     volumeMounts:
  11 │     - name: mongodb-data
  12 │       mountPath: /data/db
  13 │     ports:
  14 │     - containerPort: 27017
  15 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mongo' of Pod 'mongodb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 PVClaim_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: mongo
   8 │     image: mongodb
   9 │     resources: {}
  10 │     volumeMounts:
  11 │     - name: mongodb-data
  12 │       mountPath: /data/db
  13 │     ports:
  14 │     - containerPort: 27017
  15 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mongo' of Pod 'mongodb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 PVClaim_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: mongo
   8 │     image: mongodb
   9 │     resources: {}
  10 │     volumeMounts:
  11 │     - name: mongodb-data
  12 │       mountPath: /data/db
  13 │     ports:
  14 │     - containerPort: 27017
  15 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mongo' of Pod 'mongodb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 PVClaim_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: mongo
   8 │     image: mongodb
   9 │     resources: {}
  10 │     volumeMounts:
  11 │     - name: mongodb-data
  12 │       mountPath: /data/db
  13 │     ports:
  14 │     - containerPort: 27017
  15 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mongo' of Pod 'mongodb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 PVClaim_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: mongo
   8 │     image: mongodb
   9 │     resources: {}
  10 │     volumeMounts:
  11 │     - name: mongodb-data
  12 │       mountPath: /data/db
  13 │     ports:
  14 │     - containerPort: 27017
  15 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mongo' of Pod 'mongodb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 PVClaim_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: mongo
   8 │     image: mongodb
   9 │     resources: {}
  10 │     volumeMounts:
  11 │     - name: mongodb-data
  12 │       mountPath: /data/db
  13 │     ports:
  14 │     - containerPort: 27017
  15 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mongo' of Pod 'mongodb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 PVClaim_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: mongo
   8 │     image: mongodb
   9 │     resources: {}
  10 │     volumeMounts:
  11 │     - name: mongodb-data
  12 │       mountPath: /data/db
  13 │     ports:
  14 │     - containerPort: 27017
  15 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 PVClaim_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: mongo
   8 │     image: mongodb
   9 │     resources: {}
  10 │     volumeMounts:
  11 │     - name: mongodb-data
  12 │       mountPath: /data/db
  13 │     ports:
  14 │     - containerPort: 27017
  15 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mongo" of pod "mongodb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 PVClaim_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: mongo
   8 │     image: mongodb
   9 │     resources: {}
  10 │     volumeMounts:
  11 │     - name: mongodb-data
  12 │       mountPath: /data/db
  13 │     ports:
  14 │     - containerPort: 27017
  15 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 PVClaim_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: mongo
   8 │     image: mongodb
   9 │     resources: {}
  10 │     volumeMounts:
  11 │     - name: mongodb-data
  12 │       mountPath: /data/db
  13 │     ports:
  14 │     - containerPort: 27017
  15 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod mongodb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 PVClaim_1.yaml:4
────────────────────────────────────────
   4 [   name: mongodb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mongodb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 PVClaim_1.yaml:7-15
────────────────────────────────────────
   7 ┌   - name: mongo
   8 │     image: mongodb
   9 │     resources: {}
  10 │     volumeMounts:
  11 │     - name: mongodb-data
  12 │       mountPath: /data/db
  13 │     ports:
  14 │     - containerPort: 27017
  15 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod mongodb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 PVClaim_1.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: mongo
   8 │     image: mongodb
   9 │     resources: {}
  10 │     volumeMounts:
  11 │     - name: mongodb-data
  12 │       mountPath: /data/db
  13 │     ports:
  14 └     - containerPort: 27017
  ..   
────────────────────────────────────────



PV_PVC_Pod1_2.yaml (kubernetes)
===============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myvolumes-container' of Pod 'myvolumes-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 PV_PVC_Pod1_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container
  10 │     command:
  11 │     - sh
  12 │     - -c
  13 │     - echo Container 1 is Running ; sleep 3600
  14 │     volumeMounts:
  15 │     - mountPath: /my-pv-path
  16 └       name: my-persistent-volumeclaim-name
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myvolumes-container' of Pod 'myvolumes-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 PV_PVC_Pod1_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container
  10 │     command:
  11 │     - sh
  12 │     - -c
  13 │     - echo Container 1 is Running ; sleep 3600
  14 │     volumeMounts:
  15 │     - mountPath: /my-pv-path
  16 └       name: my-persistent-volumeclaim-name
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myvolumes-container' of 'pod' 'myvolumes-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 PV_PVC_Pod1_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container
  10 │     command:
  11 │     - sh
  12 │     - -c
  13 │     - echo Container 1 is Running ; sleep 3600
  14 │     volumeMounts:
  15 │     - mountPath: /my-pv-path
  16 └       name: my-persistent-volumeclaim-name
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myvolumes-container' of Pod 'myvolumes-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 PV_PVC_Pod1_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container
  10 │     command:
  11 │     - sh
  12 │     - -c
  13 │     - echo Container 1 is Running ; sleep 3600
  14 │     volumeMounts:
  15 │     - mountPath: /my-pv-path
  16 └       name: my-persistent-volumeclaim-name
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myvolumes-container' of Pod 'myvolumes-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 PV_PVC_Pod1_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container
  10 │     command:
  11 │     - sh
  12 │     - -c
  13 │     - echo Container 1 is Running ; sleep 3600
  14 │     volumeMounts:
  15 │     - mountPath: /my-pv-path
  16 └       name: my-persistent-volumeclaim-name
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myvolumes-container' of Pod 'myvolumes-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 PV_PVC_Pod1_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container
  10 │     command:
  11 │     - sh
  12 │     - -c
  13 │     - echo Container 1 is Running ; sleep 3600
  14 │     volumeMounts:
  15 │     - mountPath: /my-pv-path
  16 └       name: my-persistent-volumeclaim-name
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myvolumes-container' of Pod 'myvolumes-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 PV_PVC_Pod1_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container
  10 │     command:
  11 │     - sh
  12 │     - -c
  13 │     - echo Container 1 is Running ; sleep 3600
  14 │     volumeMounts:
  15 │     - mountPath: /my-pv-path
  16 └       name: my-persistent-volumeclaim-name
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myvolumes-container' of Pod 'myvolumes-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 PV_PVC_Pod1_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container
  10 │     command:
  11 │     - sh
  12 │     - -c
  13 │     - echo Container 1 is Running ; sleep 3600
  14 │     volumeMounts:
  15 │     - mountPath: /my-pv-path
  16 └       name: my-persistent-volumeclaim-name
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myvolumes-container' of Pod 'myvolumes-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 PV_PVC_Pod1_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container
  10 │     command:
  11 │     - sh
  12 │     - -c
  13 │     - echo Container 1 is Running ; sleep 3600
  14 │     volumeMounts:
  15 │     - mountPath: /my-pv-path
  16 └       name: my-persistent-volumeclaim-name
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myvolumes-container' of Pod 'myvolumes-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 PV_PVC_Pod1_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container
  10 │     command:
  11 │     - sh
  12 │     - -c
  13 │     - echo Container 1 is Running ; sleep 3600
  14 │     volumeMounts:
  15 │     - mountPath: /my-pv-path
  16 └       name: my-persistent-volumeclaim-name
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myvolumes-container' of Pod 'myvolumes-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 PV_PVC_Pod1_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container
  10 │     command:
  11 │     - sh
  12 │     - -c
  13 │     - echo Container 1 is Running ; sleep 3600
  14 │     volumeMounts:
  15 │     - mountPath: /my-pv-path
  16 └       name: my-persistent-volumeclaim-name
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myvolumes-container' of Pod 'myvolumes-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 PV_PVC_Pod1_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container
  10 │     command:
  11 │     - sh
  12 │     - -c
  13 │     - echo Container 1 is Running ; sleep 3600
  14 │     volumeMounts:
  15 │     - mountPath: /my-pv-path
  16 └       name: my-persistent-volumeclaim-name
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 PV_PVC_Pod1_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container
  10 │     command:
  11 │     - sh
  12 │     - -c
  13 │     - echo Container 1 is Running ; sleep 3600
  14 │     volumeMounts:
  15 │     - mountPath: /my-pv-path
  16 └       name: my-persistent-volumeclaim-name
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myvolumes-container" of pod "myvolumes-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 PV_PVC_Pod1_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container
  10 │     command:
  11 │     - sh
  12 │     - -c
  13 │     - echo Container 1 is Running ; sleep 3600
  14 │     volumeMounts:
  15 │     - mountPath: /my-pv-path
  16 └       name: my-persistent-volumeclaim-name
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 PV_PVC_Pod1_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container
  10 │     command:
  11 │     - sh
  12 │     - -c
  13 │     - echo Container 1 is Running ; sleep 3600
  14 │     volumeMounts:
  15 │     - mountPath: /my-pv-path
  16 └       name: my-persistent-volumeclaim-name
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myvolumes-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 PV_PVC_Pod1_2.yaml:4
────────────────────────────────────────
   4 [   name: myvolumes-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myvolumes-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 PV_PVC_Pod1_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container
  10 │     command:
  11 │     - sh
  12 │     - -c
  13 │     - echo Container 1 is Running ; sleep 3600
  14 │     volumeMounts:
  15 │     - mountPath: /my-pv-path
  16 └       name: my-persistent-volumeclaim-name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myvolumes-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 PV_PVC_Pod1_2.yaml:6-20
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: alpine
   8 │     imagePullPolicy: IfNotPresent
   9 │     name: myvolumes-container
  10 │     command:
  11 │     - sh
  12 │     - -c
  13 │     - echo Container 1 is Running ; sleep 3600
  14 └     volumeMounts:
  ..   
────────────────────────────────────────



PW_King-deployment-service_1.yaml (kubernetes)
==============================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app-vjp-image23' of Deployment 'only-deployment-4' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 PW_King-deployment-service_1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: app-vjp-image23
  17 │         image: vimaldevops/vjp-image23:king-june30
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           requests:
  22 └             cpu: 100m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app-vjp-image23' of Deployment 'only-deployment-4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 PW_King-deployment-service_1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: app-vjp-image23
  17 │         image: vimaldevops/vjp-image23:king-june30
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           requests:
  22 └             cpu: 100m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app-vjp-image23' of 'deployment' 'only-deployment-4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 PW_King-deployment-service_1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: app-vjp-image23
  17 │         image: vimaldevops/vjp-image23:king-june30
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           requests:
  22 └             cpu: 100m
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app-vjp-image23' of Deployment 'only-deployment-4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 PW_King-deployment-service_1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: app-vjp-image23
  17 │         image: vimaldevops/vjp-image23:king-june30
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           requests:
  22 └             cpu: 100m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app-vjp-image23' of Deployment 'only-deployment-4' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 PW_King-deployment-service_1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: app-vjp-image23
  17 │         image: vimaldevops/vjp-image23:king-june30
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           requests:
  22 └             cpu: 100m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app-vjp-image23' of Deployment 'only-deployment-4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 PW_King-deployment-service_1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: app-vjp-image23
  17 │         image: vimaldevops/vjp-image23:king-june30
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           requests:
  22 └             cpu: 100m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app-vjp-image23' of Deployment 'only-deployment-4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 PW_King-deployment-service_1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: app-vjp-image23
  17 │         image: vimaldevops/vjp-image23:king-june30
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           requests:
  22 └             cpu: 100m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app-vjp-image23' of Deployment 'only-deployment-4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 PW_King-deployment-service_1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: app-vjp-image23
  17 │         image: vimaldevops/vjp-image23:king-june30
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           requests:
  22 └             cpu: 100m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app-vjp-image23' of Deployment 'only-deployment-4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 PW_King-deployment-service_1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: app-vjp-image23
  17 │         image: vimaldevops/vjp-image23:king-june30
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           requests:
  22 └             cpu: 100m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app-vjp-image23' of Deployment 'only-deployment-4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 PW_King-deployment-service_1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: app-vjp-image23
  17 │         image: vimaldevops/vjp-image23:king-june30
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           requests:
  22 └             cpu: 100m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 PW_King-deployment-service_1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: app-vjp-image23
  17 │         image: vimaldevops/vjp-image23:king-june30
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           requests:
  22 └             cpu: 100m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app-vjp-image23" of deployment "only-deployment-4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 PW_King-deployment-service_1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: app-vjp-image23
  17 │         image: vimaldevops/vjp-image23:king-june30
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           requests:
  22 └             cpu: 100m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 PW_King-deployment-service_1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: app-vjp-image23
  17 │         image: vimaldevops/vjp-image23:king-june30
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           requests:
  22 └             cpu: 100m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment only-deployment-4 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 PW_King-deployment-service_1.yaml:4
────────────────────────────────────────
   4 [   name: only-deployment-4
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment only-deployment-4 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container only-deployment-4 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 PW_King-deployment-service_1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: app-vjp-image23
  17 │         image: vimaldevops/vjp-image23:king-june30
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           requests:
  22 └             cpu: 100m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment only-deployment-4 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 PW_King-deployment-service_1.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: app-vjp-image23
  17 │         image: vimaldevops/vjp-image23:king-june30
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           requests:
  22 │             cpu: 100m
  23 │       imagePullSecrets:
  24 └       - name: vjp-docker-hub-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container app-vjp-image23 in deployment only-deployment-4 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 PW_King-deployment-service_1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: app-vjp-image23
  17 │         image: vimaldevops/vjp-image23:king-june30
  18 │         ports:
  19 │         - containerPort: 80
  20 │         resources:
  21 │           requests:
  22 └             cpu: 100m
────────────────────────────────────────



PythonApp-Deployment.yaml (kubernetes)
======================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'python-app' of Deployment 'python-app-development' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 PythonApp-Deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: mominshahzad12/python-app:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 5002
  23 │         env:
  24 │         - name: MONGO_URI
  25 └           value: mongodb://mominmongo:Aisha1234@mongodb:27017/BOOKSTORE
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'python-app' of Deployment 'python-app-development' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 PythonApp-Deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: mominshahzad12/python-app:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 5002
  23 │         env:
  24 │         - name: MONGO_URI
  25 └           value: mongodb://mominmongo:Aisha1234@mongodb:27017/BOOKSTORE
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'python-app' of 'deployment' 'python-app-development' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 PythonApp-Deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: mominshahzad12/python-app:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 5002
  23 │         env:
  24 │         - name: MONGO_URI
  25 └           value: mongodb://mominmongo:Aisha1234@mongodb:27017/BOOKSTORE
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'python-app' of Deployment 'python-app-development' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 PythonApp-Deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: mominshahzad12/python-app:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 5002
  23 │         env:
  24 │         - name: MONGO_URI
  25 └           value: mongodb://mominmongo:Aisha1234@mongodb:27017/BOOKSTORE
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'python-app' of Deployment 'python-app-development' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 PythonApp-Deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: mominshahzad12/python-app:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 5002
  23 │         env:
  24 │         - name: MONGO_URI
  25 └           value: mongodb://mominmongo:Aisha1234@mongodb:27017/BOOKSTORE
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'python-app' of Deployment 'python-app-development' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 PythonApp-Deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: mominshahzad12/python-app:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 5002
  23 │         env:
  24 │         - name: MONGO_URI
  25 └           value: mongodb://mominmongo:Aisha1234@mongodb:27017/BOOKSTORE
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'python-app' of Deployment 'python-app-development' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 PythonApp-Deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: mominshahzad12/python-app:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 5002
  23 │         env:
  24 │         - name: MONGO_URI
  25 └           value: mongodb://mominmongo:Aisha1234@mongodb:27017/BOOKSTORE
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'python-app' of Deployment 'python-app-development' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 PythonApp-Deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: mominshahzad12/python-app:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 5002
  23 │         env:
  24 │         - name: MONGO_URI
  25 └           value: mongodb://mominmongo:Aisha1234@mongodb:27017/BOOKSTORE
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'python-app' of Deployment 'python-app-development' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 PythonApp-Deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: mominshahzad12/python-app:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 5002
  23 │         env:
  24 │         - name: MONGO_URI
  25 └           value: mongodb://mominmongo:Aisha1234@mongodb:27017/BOOKSTORE
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'python-app' of Deployment 'python-app-development' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 PythonApp-Deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: mominshahzad12/python-app:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 5002
  23 │         env:
  24 │         - name: MONGO_URI
  25 └           value: mongodb://mominmongo:Aisha1234@mongodb:27017/BOOKSTORE
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'python-app' of Deployment 'python-app-development' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 PythonApp-Deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: mominshahzad12/python-app:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 5002
  23 │         env:
  24 │         - name: MONGO_URI
  25 └           value: mongodb://mominmongo:Aisha1234@mongodb:27017/BOOKSTORE
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'python-app' of Deployment 'python-app-development' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 PythonApp-Deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: mominshahzad12/python-app:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 5002
  23 │         env:
  24 │         - name: MONGO_URI
  25 └           value: mongodb://mominmongo:Aisha1234@mongodb:27017/BOOKSTORE
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 PythonApp-Deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: mominshahzad12/python-app:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 5002
  23 │         env:
  24 │         - name: MONGO_URI
  25 └           value: mongodb://mominmongo:Aisha1234@mongodb:27017/BOOKSTORE
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "python-app" of deployment "python-app-development" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 PythonApp-Deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: mominshahzad12/python-app:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 5002
  23 │         env:
  24 │         - name: MONGO_URI
  25 └           value: mongodb://mominmongo:Aisha1234@mongodb:27017/BOOKSTORE
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 PythonApp-Deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: mominshahzad12/python-app:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 5002
  23 │         env:
  24 │         - name: MONGO_URI
  25 └           value: mongodb://mominmongo:Aisha1234@mongodb:27017/BOOKSTORE
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment python-app-development in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 PythonApp-Deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: python-app-development
   5 │   labels:
   6 └     app: python-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container python-app-development in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 PythonApp-Deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: mominshahzad12/python-app:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 5002
  23 │         env:
  24 │         - name: MONGO_URI
  25 └           value: mongodb://mominmongo:Aisha1234@mongodb:27017/BOOKSTORE
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment python-app-development in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 PythonApp-Deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: python-app
  19 │         image: mominshahzad12/python-app:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 5002
  23 │         env:
  24 │         - name: MONGO_URI
  25 └           value: mongodb://mominmongo:Aisha1234@mongodb:27017/BOOKSTORE
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container python-app in deployment python-app-development (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 PythonApp-Deployment.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: mominshahzad12/python-app:latest
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 │         - containerPort: 5002
  23 │         env:
  24 │         - name: MONGO_URI
  25 └           value: mongodb://mominmongo:Aisha1234@mongodb:27017/BOOKSTORE
────────────────────────────────────────



Q101.yaml (kubernetes)
======================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'application' of Pod 'application' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Q101.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'application' of Pod 'application' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Q101.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'application' of 'pod' 'application' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Q101.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'application' of Pod 'application' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Q101.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'application' of Pod 'application' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Q101.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'application' of Pod 'application' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Q101.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'application' of Pod 'application' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Q101.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'application' of Pod 'application' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Q101.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'application' of Pod 'application' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Q101.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'application' of Pod 'application' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Q101.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'application' of Pod 'application' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Q101.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Q101.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "application" of pod "application" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Q101.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Q101.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod application in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Q101.yaml:4-6
────────────────────────────────────────
   4 ┌   name: application
   5 │   labels:
   6 └     app: application
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container application in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q101.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod application in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q101.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: application
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container application in pod application (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Q101.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────



Q101_1.yaml (kubernetes)
========================
Tests: 109 (SUCCESSES: 94, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'backend' of Pod 'backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Q101_1.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: backend
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'backend' of Pod 'backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Q101_1.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: backend
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'backend' of 'pod' 'backend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Q101_1.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: backend
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'backend' of Pod 'backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Q101_1.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: backend
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'backend' of Pod 'backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Q101_1.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: backend
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'backend' of Pod 'backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Q101_1.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: backend
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'backend' of Pod 'backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Q101_1.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: backend
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'backend' of Pod 'backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Q101_1.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: backend
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'backend' of Pod 'backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Q101_1.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: backend
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Q101_1.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: backend
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "backend" of pod "backend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Q101_1.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: backend
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Q101_1.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: backend
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod backend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Q101_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: backend
   5 │   labels:
   6 └     app: backend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container backend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q101_1.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: backend
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod backend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q101_1.yaml:8-25
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: backend
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 └     - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────



Q101_2.yaml (kubernetes)
========================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'frontend' of Pod 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Q101_2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: frontend
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'frontend' of Pod 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Q101_2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: frontend
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'frontend' of 'pod' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Q101_2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: frontend
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'frontend' of Pod 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Q101_2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: frontend
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'frontend' of Pod 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Q101_2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: frontend
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'frontend' of Pod 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Q101_2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: frontend
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend' of Pod 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Q101_2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: frontend
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend' of Pod 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Q101_2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: frontend
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend' of Pod 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Q101_2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: frontend
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend' of Pod 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Q101_2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: frontend
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend' of Pod 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Q101_2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: frontend
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Q101_2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: frontend
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend" of pod "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Q101_2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: frontend
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Q101_2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: frontend
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Q101_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: frontend
   5 │   labels:
   6 └     app: frontend
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod frontend in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q101_2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: frontend
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q101_2.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: frontend
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container frontend in pod frontend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Q101_2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: frontend
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



Q111_3.yaml (kubernetes)
========================
Tests: 109 (SUCCESSES: 95, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'db-pod' of Pod 'db-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Q111_3.yaml:10-26
────────────────────────────────────────
  10 ┌   - name: db-pod
  11 │     image: mysql:5.7
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     env:
  15 │     - name: MYSQL_ROOT_PASSWORD
  16 │       value: YourStrong@Passw0rd
  17 │     - name: MYSQL_DATABASE
  18 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'db-pod' of Pod 'db-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Q111_3.yaml:10-26
────────────────────────────────────────
  10 ┌   - name: db-pod
  11 │     image: mysql:5.7
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     env:
  15 │     - name: MYSQL_ROOT_PASSWORD
  16 │       value: YourStrong@Passw0rd
  17 │     - name: MYSQL_DATABASE
  18 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'db-pod' of 'pod' 'db-pod' in 'project-a' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Q111_3.yaml:10-26
────────────────────────────────────────
  10 ┌   - name: db-pod
  11 │     image: mysql:5.7
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     env:
  15 │     - name: MYSQL_ROOT_PASSWORD
  16 │       value: YourStrong@Passw0rd
  17 │     - name: MYSQL_DATABASE
  18 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'db-pod' of Pod 'db-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Q111_3.yaml:10-26
────────────────────────────────────────
  10 ┌   - name: db-pod
  11 │     image: mysql:5.7
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     env:
  15 │     - name: MYSQL_ROOT_PASSWORD
  16 │       value: YourStrong@Passw0rd
  17 │     - name: MYSQL_DATABASE
  18 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'db-pod' of Pod 'db-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Q111_3.yaml:10-26
────────────────────────────────────────
  10 ┌   - name: db-pod
  11 │     image: mysql:5.7
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     env:
  15 │     - name: MYSQL_ROOT_PASSWORD
  16 │       value: YourStrong@Passw0rd
  17 │     - name: MYSQL_DATABASE
  18 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'db-pod' of Pod 'db-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Q111_3.yaml:10-26
────────────────────────────────────────
  10 ┌   - name: db-pod
  11 │     image: mysql:5.7
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     env:
  15 │     - name: MYSQL_ROOT_PASSWORD
  16 │       value: YourStrong@Passw0rd
  17 │     - name: MYSQL_DATABASE
  18 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'db-pod' of Pod 'db-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Q111_3.yaml:10-26
────────────────────────────────────────
  10 ┌   - name: db-pod
  11 │     image: mysql:5.7
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     env:
  15 │     - name: MYSQL_ROOT_PASSWORD
  16 │       value: YourStrong@Passw0rd
  17 │     - name: MYSQL_DATABASE
  18 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'db-pod' of Pod 'db-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Q111_3.yaml:10-26
────────────────────────────────────────
  10 ┌   - name: db-pod
  11 │     image: mysql:5.7
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     env:
  15 │     - name: MYSQL_ROOT_PASSWORD
  16 │       value: YourStrong@Passw0rd
  17 │     - name: MYSQL_DATABASE
  18 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'db-pod' of Pod 'db-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Q111_3.yaml:10-26
────────────────────────────────────────
  10 ┌   - name: db-pod
  11 │     image: mysql:5.7
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     env:
  15 │     - name: MYSQL_ROOT_PASSWORD
  16 │       value: YourStrong@Passw0rd
  17 │     - name: MYSQL_DATABASE
  18 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Q111_3.yaml:10-26
────────────────────────────────────────
  10 ┌   - name: db-pod
  11 │     image: mysql:5.7
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     env:
  15 │     - name: MYSQL_ROOT_PASSWORD
  16 │       value: YourStrong@Passw0rd
  17 │     - name: MYSQL_DATABASE
  18 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "db-pod" of pod "db-pod" in "project-a" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Q111_3.yaml:10-26
────────────────────────────────────────
  10 ┌   - name: db-pod
  11 │     image: mysql:5.7
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     env:
  15 │     - name: MYSQL_ROOT_PASSWORD
  16 │       value: YourStrong@Passw0rd
  17 │     - name: MYSQL_DATABASE
  18 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Q111_3.yaml:10-26
────────────────────────────────────────
  10 ┌   - name: db-pod
  11 │     image: mysql:5.7
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     env:
  15 │     - name: MYSQL_ROOT_PASSWORD
  16 │       value: YourStrong@Passw0rd
  17 │     - name: MYSQL_DATABASE
  18 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container db-pod in project-a namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q111_3.yaml:10-26
────────────────────────────────────────
  10 ┌   - name: db-pod
  11 │     image: mysql:5.7
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     env:
  15 │     - name: MYSQL_ROOT_PASSWORD
  16 │       value: YourStrong@Passw0rd
  17 │     - name: MYSQL_DATABASE
  18 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod db-pod in project-a namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q111_3.yaml:9-26
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: db-pod
  11 │     image: mysql:5.7
  12 │     ports:
  13 │     - containerPort: 3306
  14 │     env:
  15 │     - name: MYSQL_ROOT_PASSWORD
  16 │       value: YourStrong@Passw0rd
  17 └     - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────



Q111_4.yaml (kubernetes)
========================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service-pod' of Pod 'service-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Q111_4.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: service-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service-pod' of Pod 'service-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Q111_4.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: service-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service-pod' of 'pod' 'service-pod' in 'project-b' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Q111_4.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: service-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service-pod' of Pod 'service-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Q111_4.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: service-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service-pod' of Pod 'service-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Q111_4.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: service-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service-pod' of Pod 'service-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Q111_4.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: service-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service-pod' of Pod 'service-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Q111_4.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: service-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service-pod' of Pod 'service-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Q111_4.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: service-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service-pod' of Pod 'service-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Q111_4.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: service-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service-pod' of Pod 'service-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Q111_4.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: service-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service-pod' of Pod 'service-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Q111_4.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: service-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Q111_4.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: service-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service-pod" of pod "service-pod" in "project-b" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Q111_4.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: service-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Q111_4.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: service-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-pod in project-b namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q111_4.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: service-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod service-pod in project-b namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q111_4.yaml:9-13
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: service-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container service-pod in pod service-pod (namespace: project-b) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Q111_4.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: service-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────



Q111_5.yaml (kubernetes)
========================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web-pod' of Pod 'web-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Q111_5.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: web-pod
  11 │     image: kubernetesway/web:v1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web-pod' of Pod 'web-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Q111_5.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: web-pod
  11 │     image: kubernetesway/web:v1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web-pod' of 'pod' 'web-pod' in 'project-b' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Q111_5.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: web-pod
  11 │     image: kubernetesway/web:v1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web-pod' of Pod 'web-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Q111_5.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: web-pod
  11 │     image: kubernetesway/web:v1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web-pod' of Pod 'web-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Q111_5.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: web-pod
  11 │     image: kubernetesway/web:v1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web-pod' of Pod 'web-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Q111_5.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: web-pod
  11 │     image: kubernetesway/web:v1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web-pod' of Pod 'web-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Q111_5.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: web-pod
  11 │     image: kubernetesway/web:v1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web-pod' of Pod 'web-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Q111_5.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: web-pod
  11 │     image: kubernetesway/web:v1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web-pod' of Pod 'web-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Q111_5.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: web-pod
  11 │     image: kubernetesway/web:v1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web-pod' of Pod 'web-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Q111_5.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: web-pod
  11 │     image: kubernetesway/web:v1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web-pod' of Pod 'web-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Q111_5.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: web-pod
  11 │     image: kubernetesway/web:v1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Q111_5.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: web-pod
  11 │     image: kubernetesway/web:v1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web-pod" of pod "web-pod" in "project-b" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Q111_5.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: web-pod
  11 │     image: kubernetesway/web:v1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Q111_5.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: web-pod
  11 │     image: kubernetesway/web:v1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod web-pod in project-b namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web-pod in project-b namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q111_5.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: web-pod
  11 │     image: kubernetesway/web:v1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod web-pod in project-b namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q111_5.yaml:9-13
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: web-pod
  11 │     image: kubernetesway/web:v1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web-pod in pod web-pod (namespace: project-b) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Q111_5.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: web-pod
  11 │     image: kubernetesway/web:v1
  12 │     ports:
  13 └     - containerPort: 80
────────────────────────────────────────



Q111_6.yaml (kubernetes)
========================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'application-pod' of Pod 'application-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Q111_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: application-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'application-pod' of Pod 'application-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Q111_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: application-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'application-pod' of 'pod' 'application-pod' in 'project-c' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Q111_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: application-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'application-pod' of Pod 'application-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Q111_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: application-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'application-pod' of Pod 'application-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Q111_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: application-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'application-pod' of Pod 'application-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Q111_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: application-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'application-pod' of Pod 'application-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Q111_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: application-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'application-pod' of Pod 'application-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Q111_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: application-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'application-pod' of Pod 'application-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Q111_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: application-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'application-pod' of Pod 'application-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Q111_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: application-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'application-pod' of Pod 'application-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Q111_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: application-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Q111_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: application-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "application-pod" of pod "application-pod" in "project-c" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Q111_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: application-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Q111_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: application-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container application-pod in project-c namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q111_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: application-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod application-pod in project-c namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q111_6.yaml:9-13
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: application-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container application-pod in pod application-pod (namespace: project-c) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Q111_6.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: application-pod
  11 │     image: kubernetesway/service:v1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────



Q121.yaml (kubernetes)
======================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web-pod' of Pod 'multi-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Q121.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: web-pod
   8 │     image: nginx:latest    
   9 │     ports:
  10 │       - containerPort: 80
  11 │     volumeMounts:
  12 │     - mountPath: /var/log/nginx
  13 └       name: hostpath-volume
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web-pod' of Pod 'multi-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Q121.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: web-pod
   8 │     image: nginx:latest    
   9 │     ports:
  10 │       - containerPort: 80
  11 │     volumeMounts:
  12 │     - mountPath: /var/log/nginx
  13 └       name: hostpath-volume
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web-pod' of 'pod' 'multi-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Q121.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: web-pod
   8 │     image: nginx:latest    
   9 │     ports:
  10 │       - containerPort: 80
  11 │     volumeMounts:
  12 │     - mountPath: /var/log/nginx
  13 └       name: hostpath-volume
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web-pod' of Pod 'multi-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Q121.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: web-pod
   8 │     image: nginx:latest    
   9 │     ports:
  10 │       - containerPort: 80
  11 │     volumeMounts:
  12 │     - mountPath: /var/log/nginx
  13 └       name: hostpath-volume
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web-pod' of Pod 'multi-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Q121.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: web-pod
   8 │     image: nginx:latest    
   9 │     ports:
  10 │       - containerPort: 80
  11 │     volumeMounts:
  12 │     - mountPath: /var/log/nginx
  13 └       name: hostpath-volume
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web-pod' of Pod 'multi-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 Q121.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: web-pod
   8 │     image: nginx:latest    
   9 │     ports:
  10 │       - containerPort: 80
  11 │     volumeMounts:
  12 │     - mountPath: /var/log/nginx
  13 └       name: hostpath-volume
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web-pod' of Pod 'multi-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Q121.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: web-pod
   8 │     image: nginx:latest    
   9 │     ports:
  10 │       - containerPort: 80
  11 │     volumeMounts:
  12 │     - mountPath: /var/log/nginx
  13 └       name: hostpath-volume
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web-pod' of Pod 'multi-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Q121.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: web-pod
   8 │     image: nginx:latest    
   9 │     ports:
  10 │       - containerPort: 80
  11 │     volumeMounts:
  12 │     - mountPath: /var/log/nginx
  13 └       name: hostpath-volume
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web-pod' of Pod 'multi-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Q121.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: web-pod
   8 │     image: nginx:latest    
   9 │     ports:
  10 │       - containerPort: 80
  11 │     volumeMounts:
  12 │     - mountPath: /var/log/nginx
  13 └       name: hostpath-volume
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web-pod' of Pod 'multi-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Q121.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: web-pod
   8 │     image: nginx:latest    
   9 │     ports:
  10 │       - containerPort: 80
  11 │     volumeMounts:
  12 │     - mountPath: /var/log/nginx
  13 └       name: hostpath-volume
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web-pod' of Pod 'multi-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Q121.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: web-pod
   8 │     image: nginx:latest    
   9 │     ports:
  10 │       - containerPort: 80
  11 │     volumeMounts:
  12 │     - mountPath: /var/log/nginx
  13 └       name: hostpath-volume
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web-pod' of Pod 'multi-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Q121.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: web-pod
   8 │     image: nginx:latest    
   9 │     ports:
  10 │       - containerPort: 80
  11 │     volumeMounts:
  12 │     - mountPath: /var/log/nginx
  13 └       name: hostpath-volume
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'multi-pod' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 Q121.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: web-pod
   8 │     image: nginx:latest    
   9 │     ports:
  10 │       - containerPort: 80
  11 │     volumeMounts:
  12 │     - mountPath: /var/log/nginx
  13 │       name: hostpath-volume
  14 └   volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Q121.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: web-pod
   8 │     image: nginx:latest    
   9 │     ports:
  10 │       - containerPort: 80
  11 │     volumeMounts:
  12 │     - mountPath: /var/log/nginx
  13 └       name: hostpath-volume
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web-pod" of pod "multi-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Q121.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: web-pod
   8 │     image: nginx:latest    
   9 │     ports:
  10 │       - containerPort: 80
  11 │     volumeMounts:
  12 │     - mountPath: /var/log/nginx
  13 └       name: hostpath-volume
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Q121.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: web-pod
   8 │     image: nginx:latest    
   9 │     ports:
  10 │       - containerPort: 80
  11 │     volumeMounts:
  12 │     - mountPath: /var/log/nginx
  13 └       name: hostpath-volume
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod multi-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Q121.yaml:4
────────────────────────────────────────
   4 [   name: multi-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod multi-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container multi-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q121.yaml:7-13
────────────────────────────────────────
   7 ┌   - name: web-pod
   8 │     image: nginx:latest    
   9 │     ports:
  10 │       - containerPort: 80
  11 │     volumeMounts:
  12 │     - mountPath: /var/log/nginx
  13 └       name: hostpath-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod multi-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q121.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: web-pod
   8 │     image: nginx:latest    
   9 │     ports:
  10 │       - containerPort: 80
  11 │     volumeMounts:
  12 │     - mountPath: /var/log/nginx
  13 │       name: hostpath-volume
  14 └   volumes:
  ..   
────────────────────────────────────────



Q13-Solution.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busy-job' of CronJob 'my-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Q13-Solution.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: busy-job
  13 │             image: busybox:1.28
  14 │             imagePullPolicy: IfNotPresent
  15 │             command:
  16 │             - /bin/sh
  17 │             - -c
  18 └             - date
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busy-job' of CronJob 'my-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Q13-Solution.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: busy-job
  13 │             image: busybox:1.28
  14 │             imagePullPolicy: IfNotPresent
  15 │             command:
  16 │             - /bin/sh
  17 │             - -c
  18 └             - date
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busy-job' of 'cronjob' 'my-job' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Q13-Solution.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: busy-job
  13 │             image: busybox:1.28
  14 │             imagePullPolicy: IfNotPresent
  15 │             command:
  16 │             - /bin/sh
  17 │             - -c
  18 └             - date
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busy-job' of CronJob 'my-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Q13-Solution.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: busy-job
  13 │             image: busybox:1.28
  14 │             imagePullPolicy: IfNotPresent
  15 │             command:
  16 │             - /bin/sh
  17 │             - -c
  18 └             - date
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busy-job' of CronJob 'my-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Q13-Solution.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: busy-job
  13 │             image: busybox:1.28
  14 │             imagePullPolicy: IfNotPresent
  15 │             command:
  16 │             - /bin/sh
  17 │             - -c
  18 └             - date
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busy-job' of CronJob 'my-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Q13-Solution.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: busy-job
  13 │             image: busybox:1.28
  14 │             imagePullPolicy: IfNotPresent
  15 │             command:
  16 │             - /bin/sh
  17 │             - -c
  18 └             - date
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busy-job' of CronJob 'my-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Q13-Solution.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: busy-job
  13 │             image: busybox:1.28
  14 │             imagePullPolicy: IfNotPresent
  15 │             command:
  16 │             - /bin/sh
  17 │             - -c
  18 └             - date
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busy-job' of CronJob 'my-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Q13-Solution.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: busy-job
  13 │             image: busybox:1.28
  14 │             imagePullPolicy: IfNotPresent
  15 │             command:
  16 │             - /bin/sh
  17 │             - -c
  18 └             - date
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busy-job' of CronJob 'my-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Q13-Solution.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: busy-job
  13 │             image: busybox:1.28
  14 │             imagePullPolicy: IfNotPresent
  15 │             command:
  16 │             - /bin/sh
  17 │             - -c
  18 └             - date
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busy-job' of CronJob 'my-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Q13-Solution.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: busy-job
  13 │             image: busybox:1.28
  14 │             imagePullPolicy: IfNotPresent
  15 │             command:
  16 │             - /bin/sh
  17 │             - -c
  18 └             - date
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busy-job' of CronJob 'my-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Q13-Solution.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: busy-job
  13 │             image: busybox:1.28
  14 │             imagePullPolicy: IfNotPresent
  15 │             command:
  16 │             - /bin/sh
  17 │             - -c
  18 └             - date
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Q13-Solution.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: busy-job
  13 │             image: busybox:1.28
  14 │             imagePullPolicy: IfNotPresent
  15 │             command:
  16 │             - /bin/sh
  17 │             - -c
  18 └             - date
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busy-job" of cronjob "my-job" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Q13-Solution.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: busy-job
  13 │             image: busybox:1.28
  14 │             imagePullPolicy: IfNotPresent
  15 │             command:
  16 │             - /bin/sh
  17 │             - -c
  18 └             - date
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Q13-Solution.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: busy-job
  13 │             image: busybox:1.28
  14 │             imagePullPolicy: IfNotPresent
  15 │             command:
  16 │             - /bin/sh
  17 │             - -c
  18 └             - date
────────────────────────────────────────


AVD-KSV-0110 (LOW): cronjob my-job in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Q13-Solution.yaml:4
────────────────────────────────────────
   4 [   name: my-job
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-job in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q13-Solution.yaml:12-18
────────────────────────────────────────
  12 ┌           - name: busy-job
  13 │             image: busybox:1.28
  14 │             imagePullPolicy: IfNotPresent
  15 │             command:
  16 │             - /bin/sh
  17 │             - -c
  18 └             - date
────────────────────────────────────────


AVD-KSV-0118 (HIGH): cronjob my-job in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q13-Solution.yaml:11-19
────────────────────────────────────────
  11 ┌           containers:
  12 │           - name: busy-job
  13 │             image: busybox:1.28
  14 │             imagePullPolicy: IfNotPresent
  15 │             command:
  16 │             - /bin/sh
  17 │             - -c
  18 │             - date
  19 └           restartPolicy: OnFailure
────────────────────────────────────────



Q17.yaml (kubernetes)
=====================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'application' of Pod 'application' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Q17.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'application' of Pod 'application' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Q17.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'application' of 'pod' 'application' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Q17.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'application' of Pod 'application' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Q17.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'application' of Pod 'application' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Q17.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'application' of Pod 'application' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Q17.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'application' of Pod 'application' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Q17.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'application' of Pod 'application' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Q17.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'application' of Pod 'application' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Q17.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'application' of Pod 'application' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Q17.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'application' of Pod 'application' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Q17.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Q17.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "application" of pod "application" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Q17.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Q17.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod application in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Q17.yaml:4-6
────────────────────────────────────────
   4 ┌   name: application
   5 │   labels:
   6 └     app: service
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod application in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container application in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q17.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod application in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q17.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: application
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container application in pod application (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Q17.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: application
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



Q17_1.yaml (kubernetes)
=======================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Pod 'service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Q17_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: service
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Pod 'service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Q17_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: service
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'pod' 'service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Q17_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: service
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Pod 'service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Q17_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: service
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Pod 'service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Q17_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: service
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Pod 'service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Q17_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: service
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Pod 'service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Q17_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: service
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Pod 'service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Q17_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: service
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Pod 'service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Q17_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: service
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Pod 'service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Q17_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: service
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Pod 'service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Q17_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: service
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Q17_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: service
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of pod "service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Q17_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: service
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Q17_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: service
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Q17_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: service
   5 │   labels:
   6 └     app: service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q17_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: service
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q17_1.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: service
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container service in pod service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Q17_1.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: service
  10 │     image: kubernetesway/service:v1
  11 │     ports:
  12 └     - containerPort: 8080
────────────────────────────────────────



Q17_2.yaml (kubernetes)
=======================
Tests: 109 (SUCCESSES: 94, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'db' of Pod 'db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Q17_2.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: db
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'db' of Pod 'db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Q17_2.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: db
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'db' of 'pod' 'db' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Q17_2.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: db
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'db' of Pod 'db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Q17_2.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: db
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'db' of Pod 'db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Q17_2.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: db
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'db' of Pod 'db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Q17_2.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: db
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'db' of Pod 'db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Q17_2.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: db
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'db' of Pod 'db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Q17_2.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: db
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'db' of Pod 'db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Q17_2.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: db
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Q17_2.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: db
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "db" of pod "db" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Q17_2.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: db
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Q17_2.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: db
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod db in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Q17_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: db
   5 │   labels:
   6 └     app: db
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container db in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q17_2.yaml:9-25
────────────────────────────────────────
   9 ┌   - name: db
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 │     - name: MYSQL_DATABASE
  17 └       value: exampledb
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod db in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q17_2.yaml:8-25
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: db
  10 │     image: mysql:5.7
  11 │     ports:
  12 │     - containerPort: 3306
  13 │     env:
  14 │     - name: MYSQL_ROOT_PASSWORD
  15 │       value: YourStrong@Passw0rd
  16 └     - name: MYSQL_DATABASE
  ..   
────────────────────────────────────────



Q17_3.yaml (kubernetes)
=======================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Pod 'web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Q17_3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: web
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Pod 'web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Q17_3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: web
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'pod' 'web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Q17_3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: web
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Pod 'web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Q17_3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: web
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Pod 'web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Q17_3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: web
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Pod 'web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Q17_3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: web
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Pod 'web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Q17_3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: web
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Pod 'web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Q17_3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: web
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Pod 'web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Q17_3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: web
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Pod 'web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Q17_3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: web
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Pod 'web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Q17_3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: web
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Q17_3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: web
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of pod "web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Q17_3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: web
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Q17_3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: web
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Q17_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: web
   5 │   labels:
   6 └     app: web
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod web in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q17_3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: web
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod web in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q17_3.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: web
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in pod web (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Q17_3.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: web
  10 │     image: kubernetesway/web:v1
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



Q4_1.yaml (kubernetes)
======================
Tests: 109 (SUCCESSES: 93, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Q4_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Q4_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'frontend' in 'production' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Q4_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Q4_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Q4_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Q4_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Q4_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Q4_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Q4_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Q4_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Q4_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Q4_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "frontend" in "production" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Q4_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Q4_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in production namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q4_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in production namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q4_1.yaml:19-22
────────────────────────────────────────
  19 ┌       containers:
  20 │       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────



Q51_1.yaml (kubernetes)
=======================
Tests: 109 (SUCCESSES: 93, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Q51_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Q51_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'frontend' in 'production' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Q51_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Q51_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Q51_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Q51_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Q51_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Q51_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Q51_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Q51_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Q51_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Q51_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "frontend" in "production" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Q51_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Q51_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in production namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q51_1.yaml:20-22
────────────────────────────────────────
  20 ┌       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in production namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q51_1.yaml:19-22
────────────────────────────────────────
  19 ┌       containers:
  20 │       - image: nginx:1.24
  21 │         name: nginx
  22 └         resources: {}
────────────────────────────────────────



Q7_2.yaml (kubernetes)
======================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Q7_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Q7_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'task-pv-container' of 'pod' 'task-pv-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Q7_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Q7_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Q7_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 Q7_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Q7_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Q7_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Q7_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Q7_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Q7_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Q7_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Q7_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "task-pv-container" of pod "task-pv-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Q7_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Q7_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod task-pv-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Q7_2.yaml:4
────────────────────────────────────────
   4 [   name: task-pv-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod task-pv-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container task-pv-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q7_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod task-pv-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q7_2.yaml:6-18
────────────────────────────────────────
   6 ┌   volumes:
   7 │   - name: task-pv-storage
   8 │     persistentVolumeClaim:
   9 │       claimName: task-pv-claimm
  10 │   containers:
  11 │   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 └     - containerPort: 80
  ..   
────────────────────────────────────────



Q8-Part6-Solution_2.yaml (kubernetes)
=====================================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'web-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Q8-Part6-Solution_2.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: nginx
  24 │         image: nginx:1.14.2
  25 │         ports:
  26 │         - containerPort: 80
  27 │         volumeMounts:
  28 │         - mountPath: /tmp/web-data
  29 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'web-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Q8-Part6-Solution_2.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: nginx
  24 │         image: nginx:1.14.2
  25 │         ports:
  26 │         - containerPort: 80
  27 │         volumeMounts:
  28 │         - mountPath: /tmp/web-data
  29 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'web-deploy' in 'production' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Q8-Part6-Solution_2.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: nginx
  24 │         image: nginx:1.14.2
  25 │         ports:
  26 │         - containerPort: 80
  27 │         volumeMounts:
  28 │         - mountPath: /tmp/web-data
  29 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'web-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Q8-Part6-Solution_2.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: nginx
  24 │         image: nginx:1.14.2
  25 │         ports:
  26 │         - containerPort: 80
  27 │         volumeMounts:
  28 │         - mountPath: /tmp/web-data
  29 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'web-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Q8-Part6-Solution_2.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: nginx
  24 │         image: nginx:1.14.2
  25 │         ports:
  26 │         - containerPort: 80
  27 │         volumeMounts:
  28 │         - mountPath: /tmp/web-data
  29 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'web-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Q8-Part6-Solution_2.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: nginx
  24 │         image: nginx:1.14.2
  25 │         ports:
  26 │         - containerPort: 80
  27 │         volumeMounts:
  28 │         - mountPath: /tmp/web-data
  29 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'web-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Q8-Part6-Solution_2.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: nginx
  24 │         image: nginx:1.14.2
  25 │         ports:
  26 │         - containerPort: 80
  27 │         volumeMounts:
  28 │         - mountPath: /tmp/web-data
  29 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'web-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Q8-Part6-Solution_2.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: nginx
  24 │         image: nginx:1.14.2
  25 │         ports:
  26 │         - containerPort: 80
  27 │         volumeMounts:
  28 │         - mountPath: /tmp/web-data
  29 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'web-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Q8-Part6-Solution_2.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: nginx
  24 │         image: nginx:1.14.2
  25 │         ports:
  26 │         - containerPort: 80
  27 │         volumeMounts:
  28 │         - mountPath: /tmp/web-data
  29 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'web-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Q8-Part6-Solution_2.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: nginx
  24 │         image: nginx:1.14.2
  25 │         ports:
  26 │         - containerPort: 80
  27 │         volumeMounts:
  28 │         - mountPath: /tmp/web-data
  29 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'web-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Q8-Part6-Solution_2.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: nginx
  24 │         image: nginx:1.14.2
  25 │         ports:
  26 │         - containerPort: 80
  27 │         volumeMounts:
  28 │         - mountPath: /tmp/web-data
  29 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Q8-Part6-Solution_2.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: nginx
  24 │         image: nginx:1.14.2
  25 │         ports:
  26 │         - containerPort: 80
  27 │         volumeMounts:
  28 │         - mountPath: /tmp/web-data
  29 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "web-deploy" in "production" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Q8-Part6-Solution_2.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: nginx
  24 │         image: nginx:1.14.2
  25 │         ports:
  26 │         - containerPort: 80
  27 │         volumeMounts:
  28 │         - mountPath: /tmp/web-data
  29 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Q8-Part6-Solution_2.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: nginx
  24 │         image: nginx:1.14.2
  25 │         ports:
  26 │         - containerPort: 80
  27 │         volumeMounts:
  28 │         - mountPath: /tmp/web-data
  29 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment web-deploy in production namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web-deploy in production namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q8-Part6-Solution_2.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: nginx
  24 │         image: nginx:1.14.2
  25 │         ports:
  26 │         - containerPort: 80
  27 │         volumeMounts:
  28 │         - mountPath: /tmp/web-data
  29 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment web-deploy in production namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Q8-Part6-Solution_2.yaml:18-29
────────────────────────────────────────
  18 ┌       volumes:
  19 │       - name: task-pv-storage
  20 │         persistentVolumeClaim:
  21 │           claimName: web-pvc
  22 │       containers:
  23 │       - name: nginx
  24 │         image: nginx:1.14.2
  25 │         ports:
  26 └         - containerPort: 80
  ..   
────────────────────────────────────────



pv_claim_config_2.yaml (kubernetes)
===================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Pod 'app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv_claim_config_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -r
  12 │     args:
  13 │     - tail -f /dev/null
  14 │     volumeDevices:
  15 │     - name: data
  16 └       devicePath: /dev/xvda
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Pod 'app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv_claim_config_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -r
  12 │     args:
  13 │     - tail -f /dev/null
  14 │     volumeDevices:
  15 │     - name: data
  16 └       devicePath: /dev/xvda
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'pod' 'app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv_claim_config_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -r
  12 │     args:
  13 │     - tail -f /dev/null
  14 │     volumeDevices:
  15 │     - name: data
  16 └       devicePath: /dev/xvda
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Pod 'app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv_claim_config_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -r
  12 │     args:
  13 │     - tail -f /dev/null
  14 │     volumeDevices:
  15 │     - name: data
  16 └       devicePath: /dev/xvda
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Pod 'app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv_claim_config_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -r
  12 │     args:
  13 │     - tail -f /dev/null
  14 │     volumeDevices:
  15 │     - name: data
  16 └       devicePath: /dev/xvda
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app' of Pod 'app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv_claim_config_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -r
  12 │     args:
  13 │     - tail -f /dev/null
  14 │     volumeDevices:
  15 │     - name: data
  16 └       devicePath: /dev/xvda
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Pod 'app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv_claim_config_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -r
  12 │     args:
  13 │     - tail -f /dev/null
  14 │     volumeDevices:
  15 │     - name: data
  16 └       devicePath: /dev/xvda
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Pod 'app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv_claim_config_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -r
  12 │     args:
  13 │     - tail -f /dev/null
  14 │     volumeDevices:
  15 │     - name: data
  16 └       devicePath: /dev/xvda
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Pod 'app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv_claim_config_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -r
  12 │     args:
  13 │     - tail -f /dev/null
  14 │     volumeDevices:
  15 │     - name: data
  16 └       devicePath: /dev/xvda
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Pod 'app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv_claim_config_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -r
  12 │     args:
  13 │     - tail -f /dev/null
  14 │     volumeDevices:
  15 │     - name: data
  16 └       devicePath: /dev/xvda
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Pod 'app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv_claim_config_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -r
  12 │     args:
  13 │     - tail -f /dev/null
  14 │     volumeDevices:
  15 │     - name: data
  16 └       devicePath: /dev/xvda
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Pod 'app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv_claim_config_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -r
  12 │     args:
  13 │     - tail -f /dev/null
  14 │     volumeDevices:
  15 │     - name: data
  16 └       devicePath: /dev/xvda
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv_claim_config_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -r
  12 │     args:
  13 │     - tail -f /dev/null
  14 │     volumeDevices:
  15 │     - name: data
  16 └       devicePath: /dev/xvda
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of pod "app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv_claim_config_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -r
  12 │     args:
  13 │     - tail -f /dev/null
  14 │     volumeDevices:
  15 │     - name: data
  16 └       devicePath: /dev/xvda
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv_claim_config_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -r
  12 │     args:
  13 │     - tail -f /dev/null
  14 │     volumeDevices:
  15 │     - name: data
  16 └       devicePath: /dev/xvda
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv_claim_config_2.yaml:4
────────────────────────────────────────
   4 [   name: app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_claim_config_2.yaml:7-16
────────────────────────────────────────
   7 ┌   - name: app
   8 │     image: busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -r
  12 │     args:
  13 │     - tail -f /dev/null
  14 │     volumeDevices:
  15 │     - name: data
  16 └       devicePath: /dev/xvda
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_claim_config_2.yaml:6-20
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: app
   8 │     image: busybox
   9 │     command:
  10 │     - /bin/sh
  11 │     - -r
  12 │     args:
  13 │     - tail -f /dev/null
  14 └     volumeDevices:
  ..   
────────────────────────────────────────



pv_pvc_hostpath1_2.yaml (kubernetes)
====================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv_pvc_hostpath1_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv_pvc_hostpath1_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'task-pv-container' of 'pod' 'task-pv-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv_pvc_hostpath1_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv_pvc_hostpath1_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv_pvc_hostpath1_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv_pvc_hostpath1_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv_pvc_hostpath1_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv_pvc_hostpath1_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv_pvc_hostpath1_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv_pvc_hostpath1_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv_pvc_hostpath1_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv_pvc_hostpath1_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv_pvc_hostpath1_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "task-pv-container" of pod "task-pv-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv_pvc_hostpath1_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv_pvc_hostpath1_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod task-pv-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv_pvc_hostpath1_2.yaml:4
────────────────────────────────────────
   4 [   name: task-pv-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod task-pv-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container task-pv-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_hostpath1_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod task-pv-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_hostpath1_2.yaml:6-18
────────────────────────────────────────
   6 ┌   volumes:
   7 │   - name: task-pv-storage
   8 │     persistentVolumeClaim:
   9 │       claimName: task-pv-claim
  10 │   containers:
  11 │   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 └     - containerPort: 80
  ..   
────────────────────────────────────────



pv_pvc_hostpath1_5.yaml (kubernetes)
====================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv_pvc_hostpath1_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv_pvc_hostpath1_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv_pvc_hostpath1_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv_pvc_hostpath1_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv_pvc_hostpath1_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv_pvc_hostpath1_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv_pvc_hostpath1_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv_pvc_hostpath1_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv_pvc_hostpath1_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv_pvc_hostpath1_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv_pvc_hostpath1_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv_pvc_hostpath1_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv_pvc_hostpath1_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv_pvc_hostpath1_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv_pvc_hostpath1_5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_hostpath1_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_hostpath1_5.yaml:20-31
────────────────────────────────────────
  20 ┌       volumes:
  21 │       - name: task-pv-storage
  22 │         persistentVolumeClaim:
  23 │           claimName: task-pv-claim
  24 │       containers:
  25 │       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 └         - containerPort: 80
  ..   
────────────────────────────────────────



pv_pvc_hostpath2_2.yaml (kubernetes)
====================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv_pvc_hostpath2_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv_pvc_hostpath2_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'task-pv-container' of 'pod' 'task-pv-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv_pvc_hostpath2_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv_pvc_hostpath2_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv_pvc_hostpath2_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv_pvc_hostpath2_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv_pvc_hostpath2_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv_pvc_hostpath2_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv_pvc_hostpath2_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv_pvc_hostpath2_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv_pvc_hostpath2_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv_pvc_hostpath2_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv_pvc_hostpath2_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "task-pv-container" of pod "task-pv-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv_pvc_hostpath2_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv_pvc_hostpath2_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod task-pv-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv_pvc_hostpath2_2.yaml:4
────────────────────────────────────────
   4 [   name: task-pv-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod task-pv-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container task-pv-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_hostpath2_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod task-pv-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_hostpath2_2.yaml:6-18
────────────────────────────────────────
   6 ┌   volumes:
   7 │   - name: task-pv-storage
   8 │     persistentVolumeClaim:
   9 │       claimName: task-pv-claim
  10 │   containers:
  11 │   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 └     - containerPort: 80
  ..   
────────────────────────────────────────



pv_pvc_hostpath2_5.yaml (kubernetes)
====================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv_pvc_hostpath2_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv_pvc_hostpath2_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv_pvc_hostpath2_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv_pvc_hostpath2_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv_pvc_hostpath2_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv_pvc_hostpath2_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv_pvc_hostpath2_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv_pvc_hostpath2_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv_pvc_hostpath2_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv_pvc_hostpath2_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv_pvc_hostpath2_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv_pvc_hostpath2_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv_pvc_hostpath2_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv_pvc_hostpath2_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv_pvc_hostpath2_5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_hostpath2_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_hostpath2_5.yaml:20-31
────────────────────────────────────────
  20 ┌       volumes:
  21 │       - name: task-pv-storage
  22 │         persistentVolumeClaim:
  23 │           claimName: task-pv-claim
  24 │       containers:
  25 │       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 └         - containerPort: 80
  ..   
────────────────────────────────────────



pv_pvc_hostpath3_2.yaml (kubernetes)
====================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv_pvc_hostpath3_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv_pvc_hostpath3_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'task-pv-container' of 'pod' 'task-pv-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv_pvc_hostpath3_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv_pvc_hostpath3_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv_pvc_hostpath3_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv_pvc_hostpath3_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv_pvc_hostpath3_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv_pvc_hostpath3_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv_pvc_hostpath3_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv_pvc_hostpath3_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv_pvc_hostpath3_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv_pvc_hostpath3_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv_pvc_hostpath3_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "task-pv-container" of pod "task-pv-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv_pvc_hostpath3_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv_pvc_hostpath3_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod task-pv-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv_pvc_hostpath3_2.yaml:4
────────────────────────────────────────
   4 [   name: task-pv-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod task-pv-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container task-pv-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_hostpath3_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod task-pv-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_hostpath3_2.yaml:6-18
────────────────────────────────────────
   6 ┌   volumes:
   7 │   - name: task-pv-storage
   8 │     persistentVolumeClaim:
   9 │       claimName: task-pv-claim
  10 │   containers:
  11 │   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 └     - containerPort: 80
  ..   
────────────────────────────────────────



pv_pvc_hostpath3_5.yaml (kubernetes)
====================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv_pvc_hostpath3_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv_pvc_hostpath3_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv_pvc_hostpath3_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv_pvc_hostpath3_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv_pvc_hostpath3_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv_pvc_hostpath3_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv_pvc_hostpath3_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv_pvc_hostpath3_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv_pvc_hostpath3_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv_pvc_hostpath3_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv_pvc_hostpath3_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv_pvc_hostpath3_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv_pvc_hostpath3_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv_pvc_hostpath3_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv_pvc_hostpath3_5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_hostpath3_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_hostpath3_5.yaml:20-31
────────────────────────────────────────
  20 ┌       volumes:
  21 │       - name: task-pv-storage
  22 │         persistentVolumeClaim:
  23 │           claimName: task-pv-claim
  24 │       containers:
  25 │       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 └         - containerPort: 80
  ..   
────────────────────────────────────────



pv_pvc_hostpath_2.yaml (kubernetes)
===================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv_pvc_hostpath_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv_pvc_hostpath_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'task-pv-container' of 'pod' 'task-pv-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv_pvc_hostpath_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv_pvc_hostpath_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv_pvc_hostpath_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv_pvc_hostpath_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv_pvc_hostpath_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv_pvc_hostpath_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv_pvc_hostpath_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv_pvc_hostpath_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv_pvc_hostpath_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv_pvc_hostpath_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv_pvc_hostpath_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "task-pv-container" of pod "task-pv-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv_pvc_hostpath_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv_pvc_hostpath_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod task-pv-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv_pvc_hostpath_2.yaml:4
────────────────────────────────────────
   4 [   name: task-pv-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod task-pv-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container task-pv-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_hostpath_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod task-pv-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_hostpath_2.yaml:6-18
────────────────────────────────────────
   6 ┌   volumes:
   7 │   - name: task-pv-storage
   8 │     persistentVolumeClaim:
   9 │       claimName: task-pv-claim
  10 │   containers:
  11 │   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 └     - containerPort: 80
  ..   
────────────────────────────────────────



pv_pvc_hostpath_5.yaml (kubernetes)
===================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv_pvc_hostpath_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv_pvc_hostpath_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv_pvc_hostpath_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv_pvc_hostpath_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv_pvc_hostpath_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv_pvc_hostpath_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv_pvc_hostpath_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv_pvc_hostpath_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv_pvc_hostpath_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv_pvc_hostpath_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv_pvc_hostpath_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv_pvc_hostpath_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv_pvc_hostpath_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv_pvc_hostpath_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv_pvc_hostpath_5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_hostpath_5.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_hostpath_5.yaml:20-31
────────────────────────────────────────
  20 ┌       volumes:
  21 │       - name: task-pv-storage
  22 │         persistentVolumeClaim:
  23 │           claimName: task-pv-claim
  24 │       containers:
  25 │       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 └         - containerPort: 80
  ..   
────────────────────────────────────────



pv_pvc_nfs1_2.yaml (kubernetes)
===============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv_pvc_nfs1_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv_pvc_nfs1_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hello-nginx-nfs-pod' of 'pod' 'hello-nginx-nfs-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv_pvc_nfs1_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv_pvc_nfs1_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv_pvc_nfs1_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv_pvc_nfs1_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv_pvc_nfs1_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv_pvc_nfs1_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv_pvc_nfs1_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv_pvc_nfs1_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv_pvc_nfs1_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv_pvc_nfs1_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv_pvc_nfs1_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hello-nginx-nfs-pod" of pod "hello-nginx-nfs-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv_pvc_nfs1_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv_pvc_nfs1_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod hello-nginx-nfs-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv_pvc_nfs1_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: hello-nginx-nfs-pod
   5 │   labels:
   6 └     name: hello-nginx-nfs-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod hello-nginx-nfs-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello-nginx-nfs-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_nfs1_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod hello-nginx-nfs-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_nfs1_2.yaml:8-20
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
  ..   
────────────────────────────────────────



pv_pvc_nfs1_3.yaml (kubernetes)
===============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv_pvc_nfs1_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv_pvc_nfs1_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv_pvc_nfs1_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv_pvc_nfs1_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv_pvc_nfs1_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv_pvc_nfs1_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv_pvc_nfs1_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv_pvc_nfs1_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv_pvc_nfs1_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv_pvc_nfs1_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv_pvc_nfs1_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv_pvc_nfs1_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv_pvc_nfs1_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv_pvc_nfs1_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv_pvc_nfs1_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_nfs1_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_nfs1_3.yaml:20-31
────────────────────────────────────────
  20 ┌       volumes:
  21 │       - name: task-nfs-storage
  22 │         persistentVolumeClaim:
  23 │           claimName: nfs-pvc
  24 │       containers:
  25 │       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 └         - containerPort: 80
  ..   
────────────────────────────────────────



pv_pvc_nfs2_2.yaml (kubernetes)
===============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv_pvc_nfs2_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv_pvc_nfs2_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hello-nginx-nfs-pod' of 'pod' 'hello-nginx-nfs-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv_pvc_nfs2_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv_pvc_nfs2_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv_pvc_nfs2_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv_pvc_nfs2_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv_pvc_nfs2_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv_pvc_nfs2_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv_pvc_nfs2_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv_pvc_nfs2_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv_pvc_nfs2_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv_pvc_nfs2_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv_pvc_nfs2_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hello-nginx-nfs-pod" of pod "hello-nginx-nfs-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv_pvc_nfs2_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv_pvc_nfs2_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod hello-nginx-nfs-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv_pvc_nfs2_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: hello-nginx-nfs-pod
   5 │   labels:
   6 └     name: hello-nginx-nfs-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod hello-nginx-nfs-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello-nginx-nfs-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_nfs2_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod hello-nginx-nfs-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_nfs2_2.yaml:8-20
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
  ..   
────────────────────────────────────────



pv_pvc_nfs2_3.yaml (kubernetes)
===============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv_pvc_nfs2_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv_pvc_nfs2_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv_pvc_nfs2_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv_pvc_nfs2_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv_pvc_nfs2_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv_pvc_nfs2_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv_pvc_nfs2_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv_pvc_nfs2_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv_pvc_nfs2_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv_pvc_nfs2_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv_pvc_nfs2_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv_pvc_nfs2_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv_pvc_nfs2_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv_pvc_nfs2_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv_pvc_nfs2_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_nfs2_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_nfs2_3.yaml:20-31
────────────────────────────────────────
  20 ┌       volumes:
  21 │       - name: task-nfs-storage
  22 │         persistentVolumeClaim:
  23 │           claimName: nfs-pvc
  24 │       containers:
  25 │       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 └         - containerPort: 80
  ..   
────────────────────────────────────────



pv_pvc_nfs3_2.yaml (kubernetes)
===============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv_pvc_nfs3_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv_pvc_nfs3_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hello-nginx-nfs-pod' of 'pod' 'hello-nginx-nfs-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv_pvc_nfs3_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv_pvc_nfs3_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv_pvc_nfs3_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv_pvc_nfs3_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv_pvc_nfs3_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv_pvc_nfs3_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv_pvc_nfs3_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv_pvc_nfs3_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv_pvc_nfs3_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv_pvc_nfs3_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv_pvc_nfs3_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hello-nginx-nfs-pod" of pod "hello-nginx-nfs-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv_pvc_nfs3_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv_pvc_nfs3_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod hello-nginx-nfs-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv_pvc_nfs3_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: hello-nginx-nfs-pod
   5 │   labels:
   6 └     name: hello-nginx-nfs-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod hello-nginx-nfs-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello-nginx-nfs-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_nfs3_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod hello-nginx-nfs-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_nfs3_2.yaml:8-20
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
  ..   
────────────────────────────────────────



pv_pvc_nfs3_3.yaml (kubernetes)
===============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv_pvc_nfs3_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv_pvc_nfs3_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv_pvc_nfs3_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv_pvc_nfs3_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv_pvc_nfs3_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv_pvc_nfs3_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv_pvc_nfs3_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv_pvc_nfs3_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv_pvc_nfs3_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv_pvc_nfs3_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv_pvc_nfs3_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv_pvc_nfs3_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv_pvc_nfs3_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv_pvc_nfs3_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv_pvc_nfs3_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_nfs3_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_nfs3_3.yaml:20-31
────────────────────────────────────────
  20 ┌       volumes:
  21 │       - name: task-nfs-storage
  22 │         persistentVolumeClaim:
  23 │           claimName: nfs-pvc
  24 │       containers:
  25 │       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 └         - containerPort: 80
  ..   
────────────────────────────────────────



pv_pvc_nfs_2.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv_pvc_nfs_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv_pvc_nfs_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hello-nginx-nfs-pod' of 'pod' 'hello-nginx-nfs-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv_pvc_nfs_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv_pvc_nfs_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv_pvc_nfs_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv_pvc_nfs_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv_pvc_nfs_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv_pvc_nfs_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv_pvc_nfs_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv_pvc_nfs_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv_pvc_nfs_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hello-nginx-nfs-pod' of Pod 'hello-nginx-nfs-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv_pvc_nfs_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv_pvc_nfs_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hello-nginx-nfs-pod" of pod "hello-nginx-nfs-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv_pvc_nfs_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv_pvc_nfs_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod hello-nginx-nfs-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv_pvc_nfs_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: hello-nginx-nfs-pod
   5 │   labels:
   6 └     name: hello-nginx-nfs-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod hello-nginx-nfs-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello-nginx-nfs-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_nfs_2.yaml:9-16
────────────────────────────────────────
   9 ┌   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod hello-nginx-nfs-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_nfs_2.yaml:8-20
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: hello-nginx-nfs-pod
  10 │     image: nginx
  11 │     ports:
  12 │     - name: web
  13 │       containerPort: 80
  14 │     volumeMounts:
  15 │     - name: nfsvol
  16 └       mountPath: /usr/share/nginx/html
  ..   
────────────────────────────────────────



pv_pvc_nfs_3.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv_pvc_nfs_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv_pvc_nfs_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv_pvc_nfs_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv_pvc_nfs_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv_pvc_nfs_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv_pvc_nfs_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv_pvc_nfs_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv_pvc_nfs_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv_pvc_nfs_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv_pvc_nfs_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv_pvc_nfs_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv_pvc_nfs_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv_pvc_nfs_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv_pvc_nfs_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv_pvc_nfs_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_nfs_3.yaml:25-31
────────────────────────────────────────
  25 ┌       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 │         - containerPort: 80
  29 │         volumeMounts:
  30 │         - mountPath: /usr/share/nginx/html
  31 └           name: task-nfs-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_nfs_3.yaml:20-31
────────────────────────────────────────
  20 ┌       volumes:
  21 │       - name: task-nfs-storage
  22 │         persistentVolumeClaim:
  23 │           claimName: nfs-pvc
  24 │       containers:
  25 │       - name: nginx
  26 │         image: nginx:1.14.2
  27 │         ports:
  28 └         - containerPort: 80
  ..   
────────────────────────────────────────



pv_pvc_pod_2.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv_pvc_pod_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv_pvc_pod_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'task-pv-container' of 'pod' 'task-pv-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv_pvc_pod_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv_pvc_pod_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv_pvc_pod_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'task-pv-container' of Pod 'task-pv-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv_pvc_pod_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv_pvc_pod_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv_pvc_pod_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv_pvc_pod_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv_pvc_pod_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv_pvc_pod_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'task-pv-container' of Pod 'task-pv-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv_pvc_pod_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv_pvc_pod_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "task-pv-container" of pod "task-pv-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv_pvc_pod_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv_pvc_pod_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod task-pv-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv_pvc_pod_2.yaml:4
────────────────────────────────────────
   4 [   name: task-pv-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod task-pv-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container task-pv-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_pod_2.yaml:11-18
────────────────────────────────────────
  11 ┌   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 │     - containerPort: 80
  15 │       name: http-server
  16 │     volumeMounts:
  17 │     - mountPath: /usr/share/nginx/html
  18 └       name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod task-pv-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_pvc_pod_2.yaml:6-18
────────────────────────────────────────
   6 ┌   volumes:
   7 │   - name: task-pv-storage
   8 │     persistentVolumeClaim:
   9 │       claimName: task-pv-claim
  10 │   containers:
  11 │   - name: task-pv-container
  12 │     image: nginx
  13 │     ports:
  14 └     - containerPort: 80
  ..   
────────────────────────────────────────



pv_sample_2.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'task-pv-container' of Pod 'example-pv-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pv_sample_2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: task-pv-container
   8 │     image: nginx:latest
   9 │     ports:
  10 │     - containerPort: 80
  11 │       name: http-server
  12 │     volumeMounts:
  13 │     - mountPath: /usr/share/nginx/html
  14 └       name: example-pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'task-pv-container' of Pod 'example-pv-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pv_sample_2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: task-pv-container
   8 │     image: nginx:latest
   9 │     ports:
  10 │     - containerPort: 80
  11 │       name: http-server
  12 │     volumeMounts:
  13 │     - mountPath: /usr/share/nginx/html
  14 └       name: example-pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'task-pv-container' of 'pod' 'example-pv-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pv_sample_2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: task-pv-container
   8 │     image: nginx:latest
   9 │     ports:
  10 │     - containerPort: 80
  11 │       name: http-server
  12 │     volumeMounts:
  13 │     - mountPath: /usr/share/nginx/html
  14 └       name: example-pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'task-pv-container' of Pod 'example-pv-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pv_sample_2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: task-pv-container
   8 │     image: nginx:latest
   9 │     ports:
  10 │     - containerPort: 80
  11 │       name: http-server
  12 │     volumeMounts:
  13 │     - mountPath: /usr/share/nginx/html
  14 └       name: example-pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'task-pv-container' of Pod 'example-pv-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pv_sample_2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: task-pv-container
   8 │     image: nginx:latest
   9 │     ports:
  10 │     - containerPort: 80
  11 │       name: http-server
  12 │     volumeMounts:
  13 │     - mountPath: /usr/share/nginx/html
  14 └       name: example-pv-storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'task-pv-container' of Pod 'example-pv-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pv_sample_2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: task-pv-container
   8 │     image: nginx:latest
   9 │     ports:
  10 │     - containerPort: 80
  11 │       name: http-server
  12 │     volumeMounts:
  13 │     - mountPath: /usr/share/nginx/html
  14 └       name: example-pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'task-pv-container' of Pod 'example-pv-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pv_sample_2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: task-pv-container
   8 │     image: nginx:latest
   9 │     ports:
  10 │     - containerPort: 80
  11 │       name: http-server
  12 │     volumeMounts:
  13 │     - mountPath: /usr/share/nginx/html
  14 └       name: example-pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'task-pv-container' of Pod 'example-pv-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pv_sample_2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: task-pv-container
   8 │     image: nginx:latest
   9 │     ports:
  10 │     - containerPort: 80
  11 │       name: http-server
  12 │     volumeMounts:
  13 │     - mountPath: /usr/share/nginx/html
  14 └       name: example-pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'task-pv-container' of Pod 'example-pv-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pv_sample_2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: task-pv-container
   8 │     image: nginx:latest
   9 │     ports:
  10 │     - containerPort: 80
  11 │       name: http-server
  12 │     volumeMounts:
  13 │     - mountPath: /usr/share/nginx/html
  14 └       name: example-pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'task-pv-container' of Pod 'example-pv-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pv_sample_2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: task-pv-container
   8 │     image: nginx:latest
   9 │     ports:
  10 │     - containerPort: 80
  11 │       name: http-server
  12 │     volumeMounts:
  13 │     - mountPath: /usr/share/nginx/html
  14 └       name: example-pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'task-pv-container' of Pod 'example-pv-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pv_sample_2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: task-pv-container
   8 │     image: nginx:latest
   9 │     ports:
  10 │     - containerPort: 80
  11 │       name: http-server
  12 │     volumeMounts:
  13 │     - mountPath: /usr/share/nginx/html
  14 └       name: example-pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'task-pv-container' of Pod 'example-pv-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pv_sample_2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: task-pv-container
   8 │     image: nginx:latest
   9 │     ports:
  10 │     - containerPort: 80
  11 │       name: http-server
  12 │     volumeMounts:
  13 │     - mountPath: /usr/share/nginx/html
  14 └       name: example-pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pv_sample_2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: task-pv-container
   8 │     image: nginx:latest
   9 │     ports:
  10 │     - containerPort: 80
  11 │       name: http-server
  12 │     volumeMounts:
  13 │     - mountPath: /usr/share/nginx/html
  14 └       name: example-pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "task-pv-container" of pod "example-pv-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pv_sample_2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: task-pv-container
   8 │     image: nginx:latest
   9 │     ports:
  10 │     - containerPort: 80
  11 │       name: http-server
  12 │     volumeMounts:
  13 │     - mountPath: /usr/share/nginx/html
  14 └       name: example-pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pv_sample_2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: task-pv-container
   8 │     image: nginx:latest
   9 │     ports:
  10 │     - containerPort: 80
  11 │       name: http-server
  12 │     volumeMounts:
  13 │     - mountPath: /usr/share/nginx/html
  14 └       name: example-pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod example-pv-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pv_sample_2.yaml:4
────────────────────────────────────────
   4 [   name: example-pv-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod example-pv-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container example-pv-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_sample_2.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: task-pv-container
   8 │     image: nginx:latest
   9 │     ports:
  10 │     - containerPort: 80
  11 │       name: http-server
  12 │     volumeMounts:
  13 │     - mountPath: /usr/share/nginx/html
  14 └       name: example-pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod example-pv-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pv_sample_2.yaml:6-18
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: task-pv-container
   8 │     image: nginx:latest
   9 │     ports:
  10 │     - containerPort: 80
  11 │       name: http-server
  12 │     volumeMounts:
  13 │     - mountPath: /usr/share/nginx/html
  14 └       name: example-pv-storage
  ..   
────────────────────────────────────────



pvc770.yaml (kubernetes)
========================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-dep1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvc770.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: wwwroot
  20 │           mountPath: /usr/share/nginx/html
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-dep1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvc770.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: wwwroot
  20 │           mountPath: /usr/share/nginx/html
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-dep1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvc770.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: wwwroot
  20 │           mountPath: /usr/share/nginx/html
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-dep1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pvc770.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: wwwroot
  20 │           mountPath: /usr/share/nginx/html
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-dep1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvc770.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: wwwroot
  20 │           mountPath: /usr/share/nginx/html
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-dep1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pvc770.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: wwwroot
  20 │           mountPath: /usr/share/nginx/html
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-dep1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvc770.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: wwwroot
  20 │           mountPath: /usr/share/nginx/html
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-dep1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pvc770.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: wwwroot
  20 │           mountPath: /usr/share/nginx/html
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-dep1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pvc770.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: wwwroot
  20 │           mountPath: /usr/share/nginx/html
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-dep1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pvc770.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: wwwroot
  20 │           mountPath: /usr/share/nginx/html
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-dep1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvc770.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: wwwroot
  20 │           mountPath: /usr/share/nginx/html
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-dep1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvc770.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: wwwroot
  20 │           mountPath: /usr/share/nginx/html
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvc770.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: wwwroot
  20 │           mountPath: /usr/share/nginx/html
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-dep1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvc770.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: wwwroot
  20 │           mountPath: /usr/share/nginx/html
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvc770.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: wwwroot
  20 │           mountPath: /usr/share/nginx/html
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-dep1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvc770.yaml:4
────────────────────────────────────────
   4 [   name: nginx-dep1
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-dep1 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-dep1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc770.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: wwwroot
  20 │           mountPath: /usr/share/nginx/html
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-dep1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc770.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nginx
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: wwwroot
  20 │           mountPath: /usr/share/nginx/html
  21 │         ports:
  22 │         - containerPort: 80
  23 └       volumes:
  ..   
────────────────────────────────────────



pvc877.yaml (kubernetes)
========================
Tests: 108 (SUCCESSES: 107, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): PersistentVolumeClaim 'traefik-nfs-pvc' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 pvc877.yaml:7-12
────────────────────────────────────────
   7 ┌   accessModes:
   8 │     - ReadWriteMany
   9 │   resources:
  10 │     requests:
  11 │       storage: 10Gi
  12 └   volumeName: traefik-nfs-pv
────────────────────────────────────────



pvc992_2.yaml (kubernetes)
==========================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvc992_2.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - mountPath: /usr/share/nginx/html
  28 └           name: nginx-html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvc992_2.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - mountPath: /usr/share/nginx/html
  28 └           name: nginx-html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvc992_2.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - mountPath: /usr/share/nginx/html
  28 └           name: nginx-html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pvc992_2.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - mountPath: /usr/share/nginx/html
  28 └           name: nginx-html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvc992_2.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - mountPath: /usr/share/nginx/html
  28 └           name: nginx-html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pvc992_2.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - mountPath: /usr/share/nginx/html
  28 └           name: nginx-html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvc992_2.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - mountPath: /usr/share/nginx/html
  28 └           name: nginx-html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pvc992_2.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - mountPath: /usr/share/nginx/html
  28 └           name: nginx-html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pvc992_2.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - mountPath: /usr/share/nginx/html
  28 └           name: nginx-html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pvc992_2.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - mountPath: /usr/share/nginx/html
  28 └           name: nginx-html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvc992_2.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - mountPath: /usr/share/nginx/html
  28 └           name: nginx-html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvc992_2.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - mountPath: /usr/share/nginx/html
  28 └           name: nginx-html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvc992_2.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - mountPath: /usr/share/nginx/html
  28 └           name: nginx-html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvc992_2.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - mountPath: /usr/share/nginx/html
  28 └           name: nginx-html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvc992_2.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - mountPath: /usr/share/nginx/html
  28 └           name: nginx-html
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvc992_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc992_2.yaml:22-28
────────────────────────────────────────
  22 ┌       - name: nginx
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - mountPath: /usr/share/nginx/html
  28 └           name: nginx-html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc992_2.yaml:21-32
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: nginx
  23 │         image: nginx
  24 │         ports:
  25 │         - containerPort: 80
  26 │         volumeMounts:
  27 │         - mountPath: /usr/share/nginx/html
  28 │           name: nginx-html
  29 └       volumes:
  ..   
────────────────────────────────────────



pvc_deployment.yaml (kubernetes)
================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mongo-container' of Deployment 'pvc-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvc_deployment.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: mongo-container
  18 │           image: mongo
  19 │           args: ["--dbpath","/data/db"]
  20 │           env:
  21 │             - name: MONGO_INITDB_ROOT_USERNAME
  22 │               value: "admin"
  23 │             - name: MONGO_INITDB_ROOT_PASSWORD
  24 │               value: "password"
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mongo-container' of Deployment 'pvc-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvc_deployment.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: mongo-container
  18 │           image: mongo
  19 │           args: ["--dbpath","/data/db"]
  20 │           env:
  21 │             - name: MONGO_INITDB_ROOT_USERNAME
  22 │               value: "admin"
  23 │             - name: MONGO_INITDB_ROOT_PASSWORD
  24 │               value: "password"
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mongo-container' of 'deployment' 'pvc-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvc_deployment.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: mongo-container
  18 │           image: mongo
  19 │           args: ["--dbpath","/data/db"]
  20 │           env:
  21 │             - name: MONGO_INITDB_ROOT_USERNAME
  22 │               value: "admin"
  23 │             - name: MONGO_INITDB_ROOT_PASSWORD
  24 │               value: "password"
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mongo-container' of Deployment 'pvc-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pvc_deployment.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: mongo-container
  18 │           image: mongo
  19 │           args: ["--dbpath","/data/db"]
  20 │           env:
  21 │             - name: MONGO_INITDB_ROOT_USERNAME
  22 │               value: "admin"
  23 │             - name: MONGO_INITDB_ROOT_PASSWORD
  24 │               value: "password"
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mongo-container' of Deployment 'pvc-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvc_deployment.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: mongo-container
  18 │           image: mongo
  19 │           args: ["--dbpath","/data/db"]
  20 │           env:
  21 │             - name: MONGO_INITDB_ROOT_USERNAME
  22 │               value: "admin"
  23 │             - name: MONGO_INITDB_ROOT_PASSWORD
  24 │               value: "password"
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mongo-container' of Deployment 'pvc-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pvc_deployment.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: mongo-container
  18 │           image: mongo
  19 │           args: ["--dbpath","/data/db"]
  20 │           env:
  21 │             - name: MONGO_INITDB_ROOT_USERNAME
  22 │               value: "admin"
  23 │             - name: MONGO_INITDB_ROOT_PASSWORD
  24 │               value: "password"
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mongo-container' of Deployment 'pvc-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvc_deployment.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: mongo-container
  18 │           image: mongo
  19 │           args: ["--dbpath","/data/db"]
  20 │           env:
  21 │             - name: MONGO_INITDB_ROOT_USERNAME
  22 │               value: "admin"
  23 │             - name: MONGO_INITDB_ROOT_PASSWORD
  24 │               value: "password"
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mongo-container' of Deployment 'pvc-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pvc_deployment.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: mongo-container
  18 │           image: mongo
  19 │           args: ["--dbpath","/data/db"]
  20 │           env:
  21 │             - name: MONGO_INITDB_ROOT_USERNAME
  22 │               value: "admin"
  23 │             - name: MONGO_INITDB_ROOT_PASSWORD
  24 │               value: "password"
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mongo-container' of Deployment 'pvc-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pvc_deployment.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: mongo-container
  18 │           image: mongo
  19 │           args: ["--dbpath","/data/db"]
  20 │           env:
  21 │             - name: MONGO_INITDB_ROOT_USERNAME
  22 │               value: "admin"
  23 │             - name: MONGO_INITDB_ROOT_PASSWORD
  24 │               value: "password"
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mongo-container' of Deployment 'pvc-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pvc_deployment.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: mongo-container
  18 │           image: mongo
  19 │           args: ["--dbpath","/data/db"]
  20 │           env:
  21 │             - name: MONGO_INITDB_ROOT_USERNAME
  22 │               value: "admin"
  23 │             - name: MONGO_INITDB_ROOT_PASSWORD
  24 │               value: "password"
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mongo-container' of Deployment 'pvc-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvc_deployment.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: mongo-container
  18 │           image: mongo
  19 │           args: ["--dbpath","/data/db"]
  20 │           env:
  21 │             - name: MONGO_INITDB_ROOT_USERNAME
  22 │               value: "admin"
  23 │             - name: MONGO_INITDB_ROOT_PASSWORD
  24 │               value: "password"
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mongo-container' of Deployment 'pvc-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvc_deployment.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: mongo-container
  18 │           image: mongo
  19 │           args: ["--dbpath","/data/db"]
  20 │           env:
  21 │             - name: MONGO_INITDB_ROOT_USERNAME
  22 │               value: "admin"
  23 │             - name: MONGO_INITDB_ROOT_PASSWORD
  24 │               value: "password"
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvc_deployment.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: mongo-container
  18 │           image: mongo
  19 │           args: ["--dbpath","/data/db"]
  20 │           env:
  21 │             - name: MONGO_INITDB_ROOT_USERNAME
  22 │               value: "admin"
  23 │             - name: MONGO_INITDB_ROOT_PASSWORD
  24 │               value: "password"
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mongo-container" of deployment "pvc-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvc_deployment.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: mongo-container
  18 │           image: mongo
  19 │           args: ["--dbpath","/data/db"]
  20 │           env:
  21 │             - name: MONGO_INITDB_ROOT_USERNAME
  22 │               value: "admin"
  23 │             - name: MONGO_INITDB_ROOT_PASSWORD
  24 │               value: "password"
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvc_deployment.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: mongo-container
  18 │           image: mongo
  19 │           args: ["--dbpath","/data/db"]
  20 │           env:
  21 │             - name: MONGO_INITDB_ROOT_USERNAME
  22 │               value: "admin"
  23 │             - name: MONGO_INITDB_ROOT_PASSWORD
  24 │               value: "password"
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pvc-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvc_deployment.yaml:4
────────────────────────────────────────
   4 [   name: pvc-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pvc-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc_deployment.yaml:17-27
────────────────────────────────────────
  17 ┌         - name: mongo-container
  18 │           image: mongo
  19 │           args: ["--dbpath","/data/db"]
  20 │           env:
  21 │             - name: MONGO_INITDB_ROOT_USERNAME
  22 │               value: "admin"
  23 │             - name: MONGO_INITDB_ROOT_PASSWORD
  24 │               value: "password"
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pvc-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvc_deployment.yaml:16-31
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: mongo-container
  18 │           image: mongo
  19 │           args: ["--dbpath","/data/db"]
  20 │           env:
  21 │             - name: MONGO_INITDB_ROOT_USERNAME
  22 │               value: "admin"
  23 │             - name: MONGO_INITDB_ROOT_PASSWORD
  24 └               value: "password"
  ..   
────────────────────────────────────────



pvpod.yaml (kubernetes)
=======================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'task-pv-container' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvpod.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'task-pv-container' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvpod.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'task-pv-container' of 'pod' 'my-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvpod.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'task-pv-container' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pvpod.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'task-pv-container' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvpod.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'task-pv-container' of Pod 'my-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pvpod.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'task-pv-container' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvpod.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'task-pv-container' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pvpod.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'task-pv-container' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pvpod.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'task-pv-container' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pvpod.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'task-pv-container' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvpod.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'task-pv-container' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvpod.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvpod.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "task-pv-container" of pod "my-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvpod.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvpod.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvpod.yaml:5-7
────────────────────────────────────────
   5 ┌   name: my-pod
   6 │   labels:
   7 └     app: my-app
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod my-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 pvpod.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvpod.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvpod.yaml:9-21
────────────────────────────────────────
   9 ┌   volumes:
  10 │     - name: my-pvc
  11 │       persistentVolumeClaim:
  12 │         claimName: my-pvc
  13 │   containers:
  14 │     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 └         - containerPort: 80
  ..   
────────────────────────────────────────



pvpod2.yaml (kubernetes)
========================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'task-pv-container' of Pod 'my-pod1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pvpod2.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'task-pv-container' of Pod 'my-pod1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pvpod2.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'task-pv-container' of 'pod' 'my-pod1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pvpod2.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'task-pv-container' of Pod 'my-pod1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pvpod2.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'task-pv-container' of Pod 'my-pod1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pvpod2.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'task-pv-container' of Pod 'my-pod1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pvpod2.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'task-pv-container' of Pod 'my-pod1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pvpod2.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'task-pv-container' of Pod 'my-pod1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pvpod2.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'task-pv-container' of Pod 'my-pod1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pvpod2.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'task-pv-container' of Pod 'my-pod1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pvpod2.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'task-pv-container' of Pod 'my-pod1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pvpod2.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'task-pv-container' of Pod 'my-pod1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pvpod2.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pvpod2.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "task-pv-container" of pod "my-pod1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pvpod2.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pvpod2.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pvpod2.yaml:5-7
────────────────────────────────────────
   5 ┌   name: my-pod1
   6 │   labels:
   7 └     app: my-app
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod my-pod1 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 pvpod2.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvpod2.yaml:14-21
────────────────────────────────────────
  14 ┌     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 │         - containerPort: 80
  18 │           name: "http-server"
  19 │       volumeMounts:
  20 │         - mountPath: "/usr/local/apache2/htdocs"
  21 └           name: my-pvc
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pvpod2.yaml:9-21
────────────────────────────────────────
   9 ┌   volumes:
  10 │     - name: my-pvc
  11 │       persistentVolumeClaim:
  12 │         claimName: my-pvc
  13 │   containers:
  14 │     - name: task-pv-container
  15 │       image: httpd
  16 │       ports:
  17 └         - containerPort: 80
  ..   
────────────────────────────────────────



pwru.yaml (kubernetes)
======================
Tests: 108 (SUCCESSES: 86, FAILURES: 22)
Failures: 22 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pwru' of Pod 'pwru' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pwru.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 │     command: ["/bin/sh"]
  15 └     args: ["-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pwru' of Pod 'pwru' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pwru.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 │     command: ["/bin/sh"]
  15 └     args: ["-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pwru' of 'pod' 'pwru' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pwru.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 │     command: ["/bin/sh"]
  15 └     args: ["-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Pod 'pwru' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 pwru.yaml:6-22
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 └     command: ["/bin/sh"]
  ..   
────────────────────────────────────────


AVD-KSV-0010 (HIGH): Pod 'pwru' should not set 'spec.template.spec.hostPID' to true
════════════════════════════════════════
Sharing the host’s PID namespace allows visibility on host processes, potentially leaking information such as environment variables and configuration.

See https://avd.aquasec.com/misconfig/ksv010
────────────────────────────────────────
 pwru.yaml:6-22
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 └     command: ["/bin/sh"]
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pwru' of Pod 'pwru' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pwru.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 │     command: ["/bin/sh"]
  15 └     args: ["-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pwru' of Pod 'pwru' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pwru.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 │     command: ["/bin/sh"]
  15 └     args: ["-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pwru' of Pod 'pwru' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pwru.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 │     command: ["/bin/sh"]
  15 └     args: ["-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pwru' of Pod 'pwru' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pwru.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 │     command: ["/bin/sh"]
  15 └     args: ["-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pwru' of Pod 'pwru' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pwru.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 │     command: ["/bin/sh"]
  15 └     args: ["-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pwru' of Pod 'pwru' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pwru.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 │     command: ["/bin/sh"]
  15 └     args: ["-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0017 (HIGH): Container 'pwru' of Pod 'pwru' should set 'securityContext.privileged' to false
════════════════════════════════════════
Privileged containers share namespaces with the host system and do not offer any security. They should be used exclusively for system containers that require high privileges.

See https://avd.aquasec.com/misconfig/ksv017
────────────────────────────────────────
 pwru.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 │     command: ["/bin/sh"]
  15 └     args: ["-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pwru' of Pod 'pwru' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pwru.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 │     command: ["/bin/sh"]
  15 └     args: ["-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pwru' of Pod 'pwru' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pwru.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 │     command: ["/bin/sh"]
  15 └     args: ["-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pwru' of Pod 'pwru' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pwru.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 │     command: ["/bin/sh"]
  15 └     args: ["-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'pwru' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 pwru.yaml:6-22
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 └     command: ["/bin/sh"]
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pwru.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 │     command: ["/bin/sh"]
  15 └     args: ["-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pwru" of pod "pwru" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pwru.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 │     command: ["/bin/sh"]
  15 └     args: ["-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pwru.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 │     command: ["/bin/sh"]
  15 └     args: ["-c", "sleep infinity"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pwru in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pwru.yaml:4
────────────────────────────────────────
   4 [   name: pwru
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pwru in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pwru.yaml:6-22
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 └     command: ["/bin/sh"]
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pwru in pod pwru (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pwru.yaml:7-15
────────────────────────────────────────
   7 ┌   - image: docker.io/cilium/pwru:latest
   8 │     name: pwru
   9 │     volumeMounts:
  10 │     - mountPath: /sys/kernel/debug
  11 │       name: sys-kernel-debug
  12 │     securityContext:
  13 │       privileged: true
  14 │     command: ["/bin/sh"]
  15 └     args: ["-c", "sleep infinity"]
────────────────────────────────────────



px-kafka_1.yaml (kubernetes)
============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'apache' of Deployment 'apache' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-kafka_1.yaml:33-41
────────────────────────────────────────
  33 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-apache:1.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: apache
  36 │         ports:
  37 │         - containerPort: 80
  38 │           protocol: TCP
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'apache' of Deployment 'apache' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 px-kafka_1.yaml:33-41
────────────────────────────────────────
  33 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-apache:1.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: apache
  36 │         ports:
  37 │         - containerPort: 80
  38 │           protocol: TCP
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'apache' of 'deployment' 'apache' in 'px-kafka' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 px-kafka_1.yaml:33-41
────────────────────────────────────────
  33 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-apache:1.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: apache
  36 │         ports:
  37 │         - containerPort: 80
  38 │           protocol: TCP
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'apache' of Deployment 'apache' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 px-kafka_1.yaml:33-41
────────────────────────────────────────
  33 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-apache:1.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: apache
  36 │         ports:
  37 │         - containerPort: 80
  38 │           protocol: TCP
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'apache' of Deployment 'apache' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-kafka_1.yaml:33-41
────────────────────────────────────────
  33 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-apache:1.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: apache
  36 │         ports:
  37 │         - containerPort: 80
  38 │           protocol: TCP
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'apache' of Deployment 'apache' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 px-kafka_1.yaml:33-41
────────────────────────────────────────
  33 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-apache:1.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: apache
  36 │         ports:
  37 │         - containerPort: 80
  38 │           protocol: TCP
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'apache' of Deployment 'apache' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 px-kafka_1.yaml:33-41
────────────────────────────────────────
  33 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-apache:1.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: apache
  36 │         ports:
  37 │         - containerPort: 80
  38 │           protocol: TCP
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'apache' of Deployment 'apache' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 px-kafka_1.yaml:33-41
────────────────────────────────────────
  33 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-apache:1.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: apache
  36 │         ports:
  37 │         - containerPort: 80
  38 │           protocol: TCP
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'apache' of Deployment 'apache' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 px-kafka_1.yaml:33-41
────────────────────────────────────────
  33 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-apache:1.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: apache
  36 │         ports:
  37 │         - containerPort: 80
  38 │           protocol: TCP
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'apache' of Deployment 'apache' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-kafka_1.yaml:33-41
────────────────────────────────────────
  33 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-apache:1.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: apache
  36 │         ports:
  37 │         - containerPort: 80
  38 │           protocol: TCP
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'apache' of Deployment 'apache' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-kafka_1.yaml:33-41
────────────────────────────────────────
  33 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-apache:1.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: apache
  36 │         ports:
  37 │         - containerPort: 80
  38 │           protocol: TCP
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-kafka_1.yaml:33-41
────────────────────────────────────────
  33 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-apache:1.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: apache
  36 │         ports:
  37 │         - containerPort: 80
  38 │           protocol: TCP
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "apache" of deployment "apache" in "px-kafka" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-kafka_1.yaml:33-41
────────────────────────────────────────
  33 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-apache:1.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: apache
  36 │         ports:
  37 │         - containerPort: 80
  38 │           protocol: TCP
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-kafka_1.yaml:33-41
────────────────────────────────────────
  33 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-apache:1.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: apache
  36 │         ports:
  37 │         - containerPort: 80
  38 │           protocol: TCP
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment apache in px-kafka namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apache in px-kafka namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-kafka_1.yaml:33-41
────────────────────────────────────────
  33 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-apache:1.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: apache
  36 │         ports:
  37 │         - containerPort: 80
  38 │           protocol: TCP
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apache in px-kafka namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-kafka_1.yaml:32-46
────────────────────────────────────────
  32 ┌       containers:
  33 │       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-apache:1.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: apache
  36 │         ports:
  37 │         - containerPort: 80
  38 │           protocol: TCP
  39 │         resources: {}
  40 └         terminationMessagePath: /dev/termination-log
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container apache in deployment apache (namespace: px-kafka) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-kafka_1.yaml:33-41
────────────────────────────────────────
  33 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-apache:1.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: apache
  36 │         ports:
  37 │         - containerPort: 80
  38 │           protocol: TCP
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────



px-kafka_2.yaml (kubernetes)
============================
Tests: 125 (SUCCESSES: 92, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'invoicing' of Deployment 'invoicing' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-kafka_2.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-invoicing:2.0
  37 │         imagePullPolicy: Always
  38 │         name: invoicing
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-invoicing' of Deployment 'invoicing' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-kafka_2.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-invoicing
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'invoicing' of Deployment 'invoicing' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 px-kafka_2.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-invoicing:2.0
  37 │         imagePullPolicy: Always
  38 │         name: invoicing
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-invoicing' of Deployment 'invoicing' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 px-kafka_2.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-invoicing
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'invoicing' of 'deployment' 'invoicing' in 'px-kafka' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 px-kafka_2.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-invoicing:2.0
  37 │         imagePullPolicy: Always
  38 │         name: invoicing
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-invoicing' of 'deployment' 'invoicing' in 'px-kafka' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 px-kafka_2.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-invoicing
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'invoicing' of Deployment 'invoicing' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 px-kafka_2.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-invoicing:2.0
  37 │         imagePullPolicy: Always
  38 │         name: invoicing
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-invoicing' of Deployment 'invoicing' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 px-kafka_2.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-invoicing
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'invoicing' of Deployment 'invoicing' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-kafka_2.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-invoicing:2.0
  37 │         imagePullPolicy: Always
  38 │         name: invoicing
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-invoicing' of Deployment 'invoicing' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-kafka_2.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-invoicing
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'invoicing' of Deployment 'invoicing' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 px-kafka_2.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-invoicing:2.0
  37 │         imagePullPolicy: Always
  38 │         name: invoicing
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-invoicing' of Deployment 'invoicing' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 px-kafka_2.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-invoicing
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'invoicing' of Deployment 'invoicing' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 px-kafka_2.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-invoicing:2.0
  37 │         imagePullPolicy: Always
  38 │         name: invoicing
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-invoicing' of Deployment 'invoicing' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 px-kafka_2.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-invoicing
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'invoicing' of Deployment 'invoicing' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 px-kafka_2.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-invoicing:2.0
  37 │         imagePullPolicy: Always
  38 │         name: invoicing
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-invoicing' of Deployment 'invoicing' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 px-kafka_2.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-invoicing
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'invoicing' of Deployment 'invoicing' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 px-kafka_2.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-invoicing:2.0
  37 │         imagePullPolicy: Always
  38 │         name: invoicing
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-invoicing' of Deployment 'invoicing' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 px-kafka_2.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-invoicing
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'invoicing' of Deployment 'invoicing' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-kafka_2.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-invoicing:2.0
  37 │         imagePullPolicy: Always
  38 │         name: invoicing
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-invoicing' of Deployment 'invoicing' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-kafka_2.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-invoicing
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'invoicing' of Deployment 'invoicing' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-kafka_2.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-invoicing:2.0
  37 │         imagePullPolicy: Always
  38 │         name: invoicing
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-invoicing' of Deployment 'invoicing' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-kafka_2.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-invoicing
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-kafka_2.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-invoicing
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-kafka_2.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-invoicing:2.0
  37 │         imagePullPolicy: Always
  38 │         name: invoicing
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "invoicing" of deployment "invoicing" in "px-kafka" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-kafka_2.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-invoicing:2.0
  37 │         imagePullPolicy: Always
  38 │         name: invoicing
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-invoicing" of deployment "invoicing" in "px-kafka" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-kafka_2.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-invoicing
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-kafka_2.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-invoicing
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-kafka_2.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-invoicing:2.0
  37 │         imagePullPolicy: Always
  38 │         name: invoicing
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container invoicing in px-kafka namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-kafka_2.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-invoicing:2.0
  37 │         imagePullPolicy: Always
  38 │         name: invoicing
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container invoicing in px-kafka namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-kafka_2.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-invoicing
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment invoicing in px-kafka namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-kafka_2.yaml:32-57
────────────────────────────────────────
  32 ┌       containers:
  33 │       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-invoicing:2.0
  37 │         imagePullPolicy: Always
  38 │         name: invoicing
  39 │         resources: {}
  40 └         terminationMessagePath: /dev/termination-log
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container invoicing in deployment invoicing (namespace: px-kafka) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-kafka_2.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-invoicing:2.0
  37 │         imagePullPolicy: Always
  38 │         name: invoicing
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wait-invoicing in deployment invoicing (namespace: px-kafka) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-kafka_2.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-invoicing
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────



px-kafka_3.yaml (kubernetes)
============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kafka' of Deployment 'kafka' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-kafka_3.yaml:33-54
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: KAFKA_ADVERTISED_HOST_NAME
  35 │           value: kafka-service
  36 │         - name: KAFKA_ADVERTISED_PORT
  37 │           value: '9092'
  38 │         - name: KAFKA_CREATE_TOPICS
  39 │           value: order:5:1
  40 │         - name: KAFKA_ZOOKEEPER_CONNECT
  41 └           value: zookeeper:2181
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kafka' of Deployment 'kafka' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 px-kafka_3.yaml:33-54
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: KAFKA_ADVERTISED_HOST_NAME
  35 │           value: kafka-service
  36 │         - name: KAFKA_ADVERTISED_PORT
  37 │           value: '9092'
  38 │         - name: KAFKA_CREATE_TOPICS
  39 │           value: order:5:1
  40 │         - name: KAFKA_ZOOKEEPER_CONNECT
  41 └           value: zookeeper:2181
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kafka' of 'deployment' 'kafka' in 'px-kafka' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 px-kafka_3.yaml:33-54
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: KAFKA_ADVERTISED_HOST_NAME
  35 │           value: kafka-service
  36 │         - name: KAFKA_ADVERTISED_PORT
  37 │           value: '9092'
  38 │         - name: KAFKA_CREATE_TOPICS
  39 │           value: order:5:1
  40 │         - name: KAFKA_ZOOKEEPER_CONNECT
  41 └           value: zookeeper:2181
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kafka' of Deployment 'kafka' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 px-kafka_3.yaml:33-54
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: KAFKA_ADVERTISED_HOST_NAME
  35 │           value: kafka-service
  36 │         - name: KAFKA_ADVERTISED_PORT
  37 │           value: '9092'
  38 │         - name: KAFKA_CREATE_TOPICS
  39 │           value: order:5:1
  40 │         - name: KAFKA_ZOOKEEPER_CONNECT
  41 └           value: zookeeper:2181
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kafka' of Deployment 'kafka' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-kafka_3.yaml:33-54
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: KAFKA_ADVERTISED_HOST_NAME
  35 │           value: kafka-service
  36 │         - name: KAFKA_ADVERTISED_PORT
  37 │           value: '9092'
  38 │         - name: KAFKA_CREATE_TOPICS
  39 │           value: order:5:1
  40 │         - name: KAFKA_ZOOKEEPER_CONNECT
  41 └           value: zookeeper:2181
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kafka' of Deployment 'kafka' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 px-kafka_3.yaml:33-54
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: KAFKA_ADVERTISED_HOST_NAME
  35 │           value: kafka-service
  36 │         - name: KAFKA_ADVERTISED_PORT
  37 │           value: '9092'
  38 │         - name: KAFKA_CREATE_TOPICS
  39 │           value: order:5:1
  40 │         - name: KAFKA_ZOOKEEPER_CONNECT
  41 └           value: zookeeper:2181
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kafka' of Deployment 'kafka' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 px-kafka_3.yaml:33-54
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: KAFKA_ADVERTISED_HOST_NAME
  35 │           value: kafka-service
  36 │         - name: KAFKA_ADVERTISED_PORT
  37 │           value: '9092'
  38 │         - name: KAFKA_CREATE_TOPICS
  39 │           value: order:5:1
  40 │         - name: KAFKA_ZOOKEEPER_CONNECT
  41 └           value: zookeeper:2181
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kafka' of Deployment 'kafka' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 px-kafka_3.yaml:33-54
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: KAFKA_ADVERTISED_HOST_NAME
  35 │           value: kafka-service
  36 │         - name: KAFKA_ADVERTISED_PORT
  37 │           value: '9092'
  38 │         - name: KAFKA_CREATE_TOPICS
  39 │           value: order:5:1
  40 │         - name: KAFKA_ZOOKEEPER_CONNECT
  41 └           value: zookeeper:2181
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kafka' of Deployment 'kafka' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 px-kafka_3.yaml:33-54
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: KAFKA_ADVERTISED_HOST_NAME
  35 │           value: kafka-service
  36 │         - name: KAFKA_ADVERTISED_PORT
  37 │           value: '9092'
  38 │         - name: KAFKA_CREATE_TOPICS
  39 │           value: order:5:1
  40 │         - name: KAFKA_ZOOKEEPER_CONNECT
  41 └           value: zookeeper:2181
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kafka' of Deployment 'kafka' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-kafka_3.yaml:33-54
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: KAFKA_ADVERTISED_HOST_NAME
  35 │           value: kafka-service
  36 │         - name: KAFKA_ADVERTISED_PORT
  37 │           value: '9092'
  38 │         - name: KAFKA_CREATE_TOPICS
  39 │           value: order:5:1
  40 │         - name: KAFKA_ZOOKEEPER_CONNECT
  41 └           value: zookeeper:2181
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kafka' of Deployment 'kafka' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-kafka_3.yaml:33-54
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: KAFKA_ADVERTISED_HOST_NAME
  35 │           value: kafka-service
  36 │         - name: KAFKA_ADVERTISED_PORT
  37 │           value: '9092'
  38 │         - name: KAFKA_CREATE_TOPICS
  39 │           value: order:5:1
  40 │         - name: KAFKA_ZOOKEEPER_CONNECT
  41 └           value: zookeeper:2181
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-kafka_3.yaml:33-54
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: KAFKA_ADVERTISED_HOST_NAME
  35 │           value: kafka-service
  36 │         - name: KAFKA_ADVERTISED_PORT
  37 │           value: '9092'
  38 │         - name: KAFKA_CREATE_TOPICS
  39 │           value: order:5:1
  40 │         - name: KAFKA_ZOOKEEPER_CONNECT
  41 └           value: zookeeper:2181
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kafka" of deployment "kafka" in "px-kafka" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-kafka_3.yaml:33-54
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: KAFKA_ADVERTISED_HOST_NAME
  35 │           value: kafka-service
  36 │         - name: KAFKA_ADVERTISED_PORT
  37 │           value: '9092'
  38 │         - name: KAFKA_CREATE_TOPICS
  39 │           value: order:5:1
  40 │         - name: KAFKA_ZOOKEEPER_CONNECT
  41 └           value: zookeeper:2181
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-kafka_3.yaml:33-54
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: KAFKA_ADVERTISED_HOST_NAME
  35 │           value: kafka-service
  36 │         - name: KAFKA_ADVERTISED_PORT
  37 │           value: '9092'
  38 │         - name: KAFKA_CREATE_TOPICS
  39 │           value: order:5:1
  40 │         - name: KAFKA_ZOOKEEPER_CONNECT
  41 └           value: zookeeper:2181
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kafka in px-kafka namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-kafka_3.yaml:33-54
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: KAFKA_ADVERTISED_HOST_NAME
  35 │           value: kafka-service
  36 │         - name: KAFKA_ADVERTISED_PORT
  37 │           value: '9092'
  38 │         - name: KAFKA_CREATE_TOPICS
  39 │           value: order:5:1
  40 │         - name: KAFKA_ZOOKEEPER_CONNECT
  41 └           value: zookeeper:2181
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kafka in px-kafka namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-kafka_3.yaml:32-59
────────────────────────────────────────
  32 ┌       containers:
  33 │       - env:
  34 │         - name: KAFKA_ADVERTISED_HOST_NAME
  35 │           value: kafka-service
  36 │         - name: KAFKA_ADVERTISED_PORT
  37 │           value: '9092'
  38 │         - name: KAFKA_CREATE_TOPICS
  39 │           value: order:5:1
  40 └         - name: KAFKA_ZOOKEEPER_CONNECT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kafka in deployment kafka (namespace: px-kafka) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-kafka_3.yaml:33-54
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: KAFKA_ADVERTISED_HOST_NAME
  35 │           value: kafka-service
  36 │         - name: KAFKA_ADVERTISED_PORT
  37 │           value: '9092'
  38 │         - name: KAFKA_CREATE_TOPICS
  39 │           value: order:5:1
  40 │         - name: KAFKA_ZOOKEEPER_CONNECT
  41 └           value: zookeeper:2181
  ..   
────────────────────────────────────────



px-kafka_4.yaml (kubernetes)
============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'load-test' of Deployment 'load-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-kafka_4.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -u
  30 │         - '1'
  31 │         - -r
  32 │         - '1'
  33 │         - --headless
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'load-test' of Deployment 'load-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 px-kafka_4.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -u
  30 │         - '1'
  31 │         - -r
  32 │         - '1'
  33 │         - --headless
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'load-test' of 'deployment' 'load-test' in 'px-kafka' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 px-kafka_4.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -u
  30 │         - '1'
  31 │         - -r
  32 │         - '1'
  33 │         - --headless
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'load-test' of Deployment 'load-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 px-kafka_4.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -u
  30 │         - '1'
  31 │         - -r
  32 │         - '1'
  33 │         - --headless
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'load-test' of Deployment 'load-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-kafka_4.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -u
  30 │         - '1'
  31 │         - -r
  32 │         - '1'
  33 │         - --headless
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'load-test' of Deployment 'load-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 px-kafka_4.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -u
  30 │         - '1'
  31 │         - -r
  32 │         - '1'
  33 │         - --headless
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'load-test' of Deployment 'load-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 px-kafka_4.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -u
  30 │         - '1'
  31 │         - -r
  32 │         - '1'
  33 │         - --headless
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'load-test' of Deployment 'load-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 px-kafka_4.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -u
  30 │         - '1'
  31 │         - -r
  32 │         - '1'
  33 │         - --headless
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'load-test' of Deployment 'load-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 px-kafka_4.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -u
  30 │         - '1'
  31 │         - -r
  32 │         - '1'
  33 │         - --headless
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'load-test' of Deployment 'load-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-kafka_4.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -u
  30 │         - '1'
  31 │         - -r
  32 │         - '1'
  33 │         - --headless
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'load-test' of Deployment 'load-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-kafka_4.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -u
  30 │         - '1'
  31 │         - -r
  32 │         - '1'
  33 │         - --headless
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-kafka_4.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -u
  30 │         - '1'
  31 │         - -r
  32 │         - '1'
  33 │         - --headless
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "load-test" of deployment "load-test" in "px-kafka" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-kafka_4.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -u
  30 │         - '1'
  31 │         - -r
  32 │         - '1'
  33 │         - --headless
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-kafka_4.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -u
  30 │         - '1'
  31 │         - -r
  32 │         - '1'
  33 │         - --headless
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container load-test in px-kafka namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-kafka_4.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -u
  30 │         - '1'
  31 │         - -r
  32 │         - '1'
  33 │         - --headless
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment load-test in px-kafka namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-kafka_4.yaml:27-50
────────────────────────────────────────
  27 ┌       containers:
  28 │       - args:
  29 │         - -u
  30 │         - '1'
  31 │         - -r
  32 │         - '1'
  33 │         - --headless
  34 │         - -f
  35 └         - /config/locustfile.py
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container load-test in deployment load-test (namespace: px-kafka) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-kafka_4.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -u
  30 │         - '1'
  31 │         - -r
  32 │         - '1'
  33 │         - --headless
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────



px-kafka_5.yaml (kubernetes)
============================
Tests: 125 (SUCCESSES: 92, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'order' of Deployment 'order' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-kafka_5.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-order:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: order
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-order' of Deployment 'order' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-kafka_5.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-order
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'order' of Deployment 'order' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 px-kafka_5.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-order:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: order
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-order' of Deployment 'order' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 px-kafka_5.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-order
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'order' of 'deployment' 'order' in 'px-kafka' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 px-kafka_5.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-order:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: order
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-order' of 'deployment' 'order' in 'px-kafka' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 px-kafka_5.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-order
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'order' of Deployment 'order' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 px-kafka_5.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-order:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: order
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-order' of Deployment 'order' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 px-kafka_5.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-order
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'order' of Deployment 'order' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-kafka_5.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-order:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: order
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-order' of Deployment 'order' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-kafka_5.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-order
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'order' of Deployment 'order' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 px-kafka_5.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-order:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: order
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-order' of Deployment 'order' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 px-kafka_5.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-order
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'order' of Deployment 'order' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 px-kafka_5.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-order:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: order
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-order' of Deployment 'order' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 px-kafka_5.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-order
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'order' of Deployment 'order' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 px-kafka_5.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-order:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: order
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-order' of Deployment 'order' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 px-kafka_5.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-order
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'order' of Deployment 'order' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 px-kafka_5.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-order:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: order
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-order' of Deployment 'order' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 px-kafka_5.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-order
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'order' of Deployment 'order' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-kafka_5.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-order:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: order
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-order' of Deployment 'order' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-kafka_5.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-order
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'order' of Deployment 'order' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-kafka_5.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-order:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: order
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-order' of Deployment 'order' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-kafka_5.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-order
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-kafka_5.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-order
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-kafka_5.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-order:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: order
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "order" of deployment "order" in "px-kafka" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-kafka_5.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-order:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: order
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-order" of deployment "order" in "px-kafka" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-kafka_5.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-order
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-kafka_5.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-order
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-kafka_5.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-order:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: order
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container order in px-kafka namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-kafka_5.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-order:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: order
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container order in px-kafka namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-kafka_5.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-order
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment order in px-kafka namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-kafka_5.yaml:32-57
────────────────────────────────────────
  32 ┌       containers:
  33 │       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-order:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: order
  39 │         resources: {}
  40 └         terminationMessagePath: /dev/termination-log
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container order in deployment order (namespace: px-kafka) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-kafka_5.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-order:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: order
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wait-order in deployment order (namespace: px-kafka) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-kafka_5.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-order
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────



px-kafka_6.yaml (kubernetes)
============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-kafka_6.yaml:33-43
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           value: dbpass
  36 │         - name: POSTGRES_USER
  37 │           value: dbuser
  38 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-postgres:1.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: postgres
  41 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'postgres' of Deployment 'postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 px-kafka_6.yaml:33-43
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           value: dbpass
  36 │         - name: POSTGRES_USER
  37 │           value: dbuser
  38 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-postgres:1.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: postgres
  41 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'postgres' of 'deployment' 'postgres' in 'px-kafka' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 px-kafka_6.yaml:33-43
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           value: dbpass
  36 │         - name: POSTGRES_USER
  37 │           value: dbuser
  38 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-postgres:1.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: postgres
  41 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 px-kafka_6.yaml:33-43
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           value: dbpass
  36 │         - name: POSTGRES_USER
  37 │           value: dbuser
  38 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-postgres:1.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: postgres
  41 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-kafka_6.yaml:33-43
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           value: dbpass
  36 │         - name: POSTGRES_USER
  37 │           value: dbuser
  38 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-postgres:1.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: postgres
  41 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'postgres' of Deployment 'postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 px-kafka_6.yaml:33-43
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           value: dbpass
  36 │         - name: POSTGRES_USER
  37 │           value: dbuser
  38 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-postgres:1.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: postgres
  41 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 px-kafka_6.yaml:33-43
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           value: dbpass
  36 │         - name: POSTGRES_USER
  37 │           value: dbuser
  38 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-postgres:1.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: postgres
  41 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 px-kafka_6.yaml:33-43
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           value: dbpass
  36 │         - name: POSTGRES_USER
  37 │           value: dbuser
  38 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-postgres:1.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: postgres
  41 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'postgres' of Deployment 'postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 px-kafka_6.yaml:33-43
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           value: dbpass
  36 │         - name: POSTGRES_USER
  37 │           value: dbuser
  38 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-postgres:1.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: postgres
  41 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-kafka_6.yaml:33-43
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           value: dbpass
  36 │         - name: POSTGRES_USER
  37 │           value: dbuser
  38 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-postgres:1.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: postgres
  41 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'postgres' of Deployment 'postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-kafka_6.yaml:33-43
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           value: dbpass
  36 │         - name: POSTGRES_USER
  37 │           value: dbuser
  38 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-postgres:1.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: postgres
  41 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-kafka_6.yaml:33-43
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           value: dbpass
  36 │         - name: POSTGRES_USER
  37 │           value: dbuser
  38 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-postgres:1.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: postgres
  41 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "postgres" of deployment "postgres" in "px-kafka" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-kafka_6.yaml:33-43
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           value: dbpass
  36 │         - name: POSTGRES_USER
  37 │           value: dbuser
  38 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-postgres:1.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: postgres
  41 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-kafka_6.yaml:33-43
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           value: dbpass
  36 │         - name: POSTGRES_USER
  37 │           value: dbuser
  38 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-postgres:1.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: postgres
  41 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container postgres in px-kafka namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-kafka_6.yaml:33-43
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           value: dbpass
  36 │         - name: POSTGRES_USER
  37 │           value: dbuser
  38 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-postgres:1.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: postgres
  41 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment postgres in px-kafka namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-kafka_6.yaml:32-48
────────────────────────────────────────
  32 ┌       containers:
  33 │       - env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           value: dbpass
  36 │         - name: POSTGRES_USER
  37 │           value: dbuser
  38 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-postgres:1.0
  39 │         imagePullPolicy: IfNotPresent
  40 └         name: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container postgres in deployment postgres (namespace: px-kafka) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-kafka_6.yaml:33-43
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: POSTGRES_PASSWORD
  35 │           value: dbpass
  36 │         - name: POSTGRES_USER
  37 │           value: dbuser
  38 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-postgres:1.0
  39 │         imagePullPolicy: IfNotPresent
  40 │         name: postgres
  41 └         resources: {}
  ..   
────────────────────────────────────────



px-kafka_7.yaml (kubernetes)
============================
Tests: 125 (SUCCESSES: 92, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'shipping' of Deployment 'shipping' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-kafka_7.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-shipping:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: shipping
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-shipping' of Deployment 'shipping' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-kafka_7.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-shipping
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'shipping' of Deployment 'shipping' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 px-kafka_7.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-shipping:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: shipping
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-shipping' of Deployment 'shipping' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 px-kafka_7.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-shipping
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'shipping' of 'deployment' 'shipping' in 'px-kafka' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 px-kafka_7.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-shipping:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: shipping
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-shipping' of 'deployment' 'shipping' in 'px-kafka' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 px-kafka_7.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-shipping
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'shipping' of Deployment 'shipping' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 px-kafka_7.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-shipping:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: shipping
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-shipping' of Deployment 'shipping' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 px-kafka_7.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-shipping
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'shipping' of Deployment 'shipping' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-kafka_7.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-shipping:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: shipping
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-shipping' of Deployment 'shipping' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-kafka_7.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-shipping
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'shipping' of Deployment 'shipping' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 px-kafka_7.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-shipping:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: shipping
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-shipping' of Deployment 'shipping' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 px-kafka_7.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-shipping
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'shipping' of Deployment 'shipping' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 px-kafka_7.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-shipping:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: shipping
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-shipping' of Deployment 'shipping' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 px-kafka_7.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-shipping
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'shipping' of Deployment 'shipping' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 px-kafka_7.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-shipping:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: shipping
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-shipping' of Deployment 'shipping' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 px-kafka_7.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-shipping
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'shipping' of Deployment 'shipping' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 px-kafka_7.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-shipping:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: shipping
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-shipping' of Deployment 'shipping' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 px-kafka_7.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-shipping
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'shipping' of Deployment 'shipping' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-kafka_7.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-shipping:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: shipping
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-shipping' of Deployment 'shipping' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-kafka_7.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-shipping
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'shipping' of Deployment 'shipping' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-kafka_7.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-shipping:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: shipping
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-shipping' of Deployment 'shipping' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-kafka_7.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-shipping
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-kafka_7.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-shipping
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-kafka_7.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-shipping:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: shipping
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "shipping" of deployment "shipping" in "px-kafka" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-kafka_7.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-shipping:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: shipping
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-shipping" of deployment "shipping" in "px-kafka" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-kafka_7.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-shipping
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-kafka_7.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-shipping
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-kafka_7.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-shipping:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: shipping
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shipping in px-kafka namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-kafka_7.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-shipping:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: shipping
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container shipping in px-kafka namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-kafka_7.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-shipping
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shipping in px-kafka namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-kafka_7.yaml:32-57
────────────────────────────────────────
  32 ┌       containers:
  33 │       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-shipping:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: shipping
  39 │         resources: {}
  40 └         terminationMessagePath: /dev/termination-log
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container shipping in deployment shipping (namespace: px-kafka) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-kafka_7.yaml:33-41
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
  35 │           value: kafka-service:9092
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-shipping:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: shipping
  39 │         resources: {}
  40 │         terminationMessagePath: /dev/termination-log
  41 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wait-shipping in deployment shipping (namespace: px-kafka) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-kafka_7.yaml:44-53
────────────────────────────────────────
  44 ┌       - command:
  45 │         - sh
  46 │         - -c
  47 │         - sleep 10
  48 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-alpine:3.6
  49 │         imagePullPolicy: IfNotPresent
  50 │         name: wait-shipping
  51 │         resources: {}
  52 │         terminationMessagePath: /dev/termination-log
  53 └         terminationMessagePolicy: File
────────────────────────────────────────



px-kafka_8.yaml (kubernetes)
============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'zookeeper' of Deployment 'zookeeper' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-kafka_8.yaml:33-44
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: ZOOKEEPER_CLIENT_PORT
  35 │           value: '2181'
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-zookeeper:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: zookeeper
  39 │         ports:
  40 │         - containerPort: 2181
  41 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'zookeeper' of Deployment 'zookeeper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 px-kafka_8.yaml:33-44
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: ZOOKEEPER_CLIENT_PORT
  35 │           value: '2181'
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-zookeeper:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: zookeeper
  39 │         ports:
  40 │         - containerPort: 2181
  41 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'zookeeper' of 'deployment' 'zookeeper' in 'px-kafka' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 px-kafka_8.yaml:33-44
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: ZOOKEEPER_CLIENT_PORT
  35 │           value: '2181'
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-zookeeper:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: zookeeper
  39 │         ports:
  40 │         - containerPort: 2181
  41 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'zookeeper' of Deployment 'zookeeper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 px-kafka_8.yaml:33-44
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: ZOOKEEPER_CLIENT_PORT
  35 │           value: '2181'
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-zookeeper:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: zookeeper
  39 │         ports:
  40 │         - containerPort: 2181
  41 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'zookeeper' of Deployment 'zookeeper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-kafka_8.yaml:33-44
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: ZOOKEEPER_CLIENT_PORT
  35 │           value: '2181'
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-zookeeper:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: zookeeper
  39 │         ports:
  40 │         - containerPort: 2181
  41 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'zookeeper' of Deployment 'zookeeper' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 px-kafka_8.yaml:33-44
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: ZOOKEEPER_CLIENT_PORT
  35 │           value: '2181'
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-zookeeper:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: zookeeper
  39 │         ports:
  40 │         - containerPort: 2181
  41 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'zookeeper' of Deployment 'zookeeper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 px-kafka_8.yaml:33-44
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: ZOOKEEPER_CLIENT_PORT
  35 │           value: '2181'
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-zookeeper:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: zookeeper
  39 │         ports:
  40 │         - containerPort: 2181
  41 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'zookeeper' of Deployment 'zookeeper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 px-kafka_8.yaml:33-44
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: ZOOKEEPER_CLIENT_PORT
  35 │           value: '2181'
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-zookeeper:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: zookeeper
  39 │         ports:
  40 │         - containerPort: 2181
  41 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'zookeeper' of Deployment 'zookeeper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 px-kafka_8.yaml:33-44
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: ZOOKEEPER_CLIENT_PORT
  35 │           value: '2181'
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-zookeeper:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: zookeeper
  39 │         ports:
  40 │         - containerPort: 2181
  41 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'zookeeper' of Deployment 'zookeeper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-kafka_8.yaml:33-44
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: ZOOKEEPER_CLIENT_PORT
  35 │           value: '2181'
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-zookeeper:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: zookeeper
  39 │         ports:
  40 │         - containerPort: 2181
  41 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'zookeeper' of Deployment 'zookeeper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-kafka_8.yaml:33-44
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: ZOOKEEPER_CLIENT_PORT
  35 │           value: '2181'
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-zookeeper:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: zookeeper
  39 │         ports:
  40 │         - containerPort: 2181
  41 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-kafka_8.yaml:33-44
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: ZOOKEEPER_CLIENT_PORT
  35 │           value: '2181'
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-zookeeper:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: zookeeper
  39 │         ports:
  40 │         - containerPort: 2181
  41 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "zookeeper" of deployment "zookeeper" in "px-kafka" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-kafka_8.yaml:33-44
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: ZOOKEEPER_CLIENT_PORT
  35 │           value: '2181'
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-zookeeper:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: zookeeper
  39 │         ports:
  40 │         - containerPort: 2181
  41 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-kafka_8.yaml:33-44
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: ZOOKEEPER_CLIENT_PORT
  35 │           value: '2181'
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-zookeeper:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: zookeeper
  39 │         ports:
  40 │         - containerPort: 2181
  41 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container zookeeper in px-kafka namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-kafka_8.yaml:33-44
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: ZOOKEEPER_CLIENT_PORT
  35 │           value: '2181'
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-zookeeper:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: zookeeper
  39 │         ports:
  40 │         - containerPort: 2181
  41 └           protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment zookeeper in px-kafka namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-kafka_8.yaml:32-49
────────────────────────────────────────
  32 ┌       containers:
  33 │       - env:
  34 │         - name: ZOOKEEPER_CLIENT_PORT
  35 │           value: '2181'
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-zookeeper:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: zookeeper
  39 │         ports:
  40 └         - containerPort: 2181
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container zookeeper in deployment zookeeper (namespace: px-kafka) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-kafka_8.yaml:33-44
────────────────────────────────────────
  33 ┌       - env:
  34 │         - name: ZOOKEEPER_CLIENT_PORT
  35 │           value: '2181'
  36 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-kafka-zookeeper:2.0
  37 │         imagePullPolicy: IfNotPresent
  38 │         name: zookeeper
  39 │         ports:
  40 │         - containerPort: 2181
  41 └           protocol: TCP
  ..   
────────────────────────────────────────



px-sock_1.yaml (kubernetes)
===========================
Tests: 108 (SUCCESSES: 100, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'carts' of Deployment 'carts' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-sock_1.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-carts:latest
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'carts' of Deployment 'carts' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 px-sock_1.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-carts:latest
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'carts' of Deployment 'carts' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-sock_1.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-carts:latest
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'carts' of Deployment 'carts' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 px-sock_1.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-carts:latest
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-sock_1.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-carts:latest
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "carts" of deployment "carts" in "px-sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-sock_1.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-carts:latest
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment carts in px-sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-sock_1.yaml:27-93
────────────────────────────────────────
  27 ┌       containers:
  28 │       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 └             '
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container carts in deployment carts (namespace: px-sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-sock_1.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-carts:latest
  ..   
────────────────────────────────────────



px-sock_10.yaml (kubernetes)
============================
Tests: 109 (SUCCESSES: 94, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-sock_10.yaml:28-70
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-queue-master:latest
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'queue-master' of Deployment 'queue-master' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 px-sock_10.yaml:28-70
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-queue-master:latest
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'queue-master' of 'deployment' 'queue-master' in 'px-sock-shop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 px-sock_10.yaml:28-70
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-queue-master:latest
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-sock_10.yaml:28-70
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-queue-master:latest
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'queue-master' of Deployment 'queue-master' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 px-sock_10.yaml:28-70
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-queue-master:latest
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 px-sock_10.yaml:28-70
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-queue-master:latest
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-sock_10.yaml:28-70
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-queue-master:latest
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'queue-master' of Deployment 'queue-master' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-sock_10.yaml:28-70
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-queue-master:latest
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-sock_10.yaml:28-70
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-queue-master:latest
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "queue-master" of deployment "queue-master" in "px-sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-sock_10.yaml:28-70
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-queue-master:latest
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-sock_10.yaml:28-70
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-queue-master:latest
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment queue-master in px-sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container queue-master in px-sock-shop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-sock_10.yaml:28-70
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-queue-master:latest
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment queue-master in px-sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-sock_10.yaml:27-77
────────────────────────────────────────
  27 ┌       containers:
  28 │       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 └             '
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container queue-master in deployment queue-master (namespace: px-sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-sock_10.yaml:28-70
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-queue-master:latest
  ..   
────────────────────────────────────────



px-sock_11.yaml (kubernetes)
============================
Tests: 121 (SUCCESSES: 90, FAILURES: 31)
Failures: 31 (UNKNOWN: 0, LOW: 18, MEDIUM: 10, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-sock_11.yaml:30-52
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq:3.6.8-management
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: rabbitmq
  33 │         ports:
  34 │         - containerPort: 15672
  35 │           name: management
  36 │           protocol: TCP
  37 │         - containerPort: 5672
  38 └           name: rabbitmq
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-sock_11.yaml:53-62
────────────────────────────────────────
  53 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq-exporter:latest
  54 │         imagePullPolicy: Always
  55 │         name: rabbitmq-exporter
  56 │         ports:
  57 │         - containerPort: 9090
  58 │           name: exporter
  59 │           protocol: TCP
  60 │         resources: {}
  61 │         terminationMessagePath: /dev/termination-log
  62 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 px-sock_11.yaml:53-62
────────────────────────────────────────
  53 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq-exporter:latest
  54 │         imagePullPolicy: Always
  55 │         name: rabbitmq-exporter
  56 │         ports:
  57 │         - containerPort: 9090
  58 │           name: exporter
  59 │           protocol: TCP
  60 │         resources: {}
  61 │         terminationMessagePath: /dev/termination-log
  62 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rabbitmq-exporter' of 'deployment' 'rabbitmq' in 'px-sock-shop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 px-sock_11.yaml:53-62
────────────────────────────────────────
  53 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq-exporter:latest
  54 │         imagePullPolicy: Always
  55 │         name: rabbitmq-exporter
  56 │         ports:
  57 │         - containerPort: 9090
  58 │           name: exporter
  59 │           protocol: TCP
  60 │         resources: {}
  61 │         terminationMessagePath: /dev/termination-log
  62 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 px-sock_11.yaml:30-52
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq:3.6.8-management
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: rabbitmq
  33 │         ports:
  34 │         - containerPort: 15672
  35 │           name: management
  36 │           protocol: TCP
  37 │         - containerPort: 5672
  38 └           name: rabbitmq
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 px-sock_11.yaml:53-62
────────────────────────────────────────
  53 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq-exporter:latest
  54 │         imagePullPolicy: Always
  55 │         name: rabbitmq-exporter
  56 │         ports:
  57 │         - containerPort: 9090
  58 │           name: exporter
  59 │           protocol: TCP
  60 │         resources: {}
  61 │         terminationMessagePath: /dev/termination-log
  62 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-sock_11.yaml:30-52
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq:3.6.8-management
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: rabbitmq
  33 │         ports:
  34 │         - containerPort: 15672
  35 │           name: management
  36 │           protocol: TCP
  37 │         - containerPort: 5672
  38 └           name: rabbitmq
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-sock_11.yaml:53-62
────────────────────────────────────────
  53 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq-exporter:latest
  54 │         imagePullPolicy: Always
  55 │         name: rabbitmq-exporter
  56 │         ports:
  57 │         - containerPort: 9090
  58 │           name: exporter
  59 │           protocol: TCP
  60 │         resources: {}
  61 │         terminationMessagePath: /dev/termination-log
  62 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 px-sock_11.yaml:53-62
────────────────────────────────────────
  53 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq-exporter:latest
  54 │         imagePullPolicy: Always
  55 │         name: rabbitmq-exporter
  56 │         ports:
  57 │         - containerPort: 9090
  58 │           name: exporter
  59 │           protocol: TCP
  60 │         resources: {}
  61 │         terminationMessagePath: /dev/termination-log
  62 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 px-sock_11.yaml:53-62
────────────────────────────────────────
  53 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq-exporter:latest
  54 │         imagePullPolicy: Always
  55 │         name: rabbitmq-exporter
  56 │         ports:
  57 │         - containerPort: 9090
  58 │           name: exporter
  59 │           protocol: TCP
  60 │         resources: {}
  61 │         terminationMessagePath: /dev/termination-log
  62 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 px-sock_11.yaml:30-52
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq:3.6.8-management
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: rabbitmq
  33 │         ports:
  34 │         - containerPort: 15672
  35 │           name: management
  36 │           protocol: TCP
  37 │         - containerPort: 5672
  38 └           name: rabbitmq
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 px-sock_11.yaml:53-62
────────────────────────────────────────
  53 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq-exporter:latest
  54 │         imagePullPolicy: Always
  55 │         name: rabbitmq-exporter
  56 │         ports:
  57 │         - containerPort: 9090
  58 │           name: exporter
  59 │           protocol: TCP
  60 │         resources: {}
  61 │         terminationMessagePath: /dev/termination-log
  62 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 px-sock_11.yaml:30-52
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq:3.6.8-management
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: rabbitmq
  33 │         ports:
  34 │         - containerPort: 15672
  35 │           name: management
  36 │           protocol: TCP
  37 │         - containerPort: 5672
  38 └           name: rabbitmq
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 px-sock_11.yaml:53-62
────────────────────────────────────────
  53 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq-exporter:latest
  54 │         imagePullPolicy: Always
  55 │         name: rabbitmq-exporter
  56 │         ports:
  57 │         - containerPort: 9090
  58 │           name: exporter
  59 │           protocol: TCP
  60 │         resources: {}
  61 │         terminationMessagePath: /dev/termination-log
  62 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 px-sock_11.yaml:30-52
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq:3.6.8-management
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: rabbitmq
  33 │         ports:
  34 │         - containerPort: 15672
  35 │           name: management
  36 │           protocol: TCP
  37 │         - containerPort: 5672
  38 └           name: rabbitmq
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 px-sock_11.yaml:53-62
────────────────────────────────────────
  53 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq-exporter:latest
  54 │         imagePullPolicy: Always
  55 │         name: rabbitmq-exporter
  56 │         ports:
  57 │         - containerPort: 9090
  58 │           name: exporter
  59 │           protocol: TCP
  60 │         resources: {}
  61 │         terminationMessagePath: /dev/termination-log
  62 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-sock_11.yaml:30-52
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq:3.6.8-management
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: rabbitmq
  33 │         ports:
  34 │         - containerPort: 15672
  35 │           name: management
  36 │           protocol: TCP
  37 │         - containerPort: 5672
  38 └           name: rabbitmq
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-sock_11.yaml:53-62
────────────────────────────────────────
  53 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq-exporter:latest
  54 │         imagePullPolicy: Always
  55 │         name: rabbitmq-exporter
  56 │         ports:
  57 │         - containerPort: 9090
  58 │           name: exporter
  59 │           protocol: TCP
  60 │         resources: {}
  61 │         terminationMessagePath: /dev/termination-log
  62 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-sock_11.yaml:30-52
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq:3.6.8-management
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: rabbitmq
  33 │         ports:
  34 │         - containerPort: 15672
  35 │           name: management
  36 │           protocol: TCP
  37 │         - containerPort: 5672
  38 └           name: rabbitmq
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbitmq-exporter' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-sock_11.yaml:53-62
────────────────────────────────────────
  53 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq-exporter:latest
  54 │         imagePullPolicy: Always
  55 │         name: rabbitmq-exporter
  56 │         ports:
  57 │         - containerPort: 9090
  58 │           name: exporter
  59 │           protocol: TCP
  60 │         resources: {}
  61 │         terminationMessagePath: /dev/termination-log
  62 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 px-sock_11.yaml:30-52
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq:3.6.8-management
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: rabbitmq
  33 │         ports:
  34 │         - containerPort: 15672
  35 │           name: management
  36 │           protocol: TCP
  37 │         - containerPort: 5672
  38 └           name: rabbitmq
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-sock_11.yaml:53-62
────────────────────────────────────────
  53 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq-exporter:latest
  54 │         imagePullPolicy: Always
  55 │         name: rabbitmq-exporter
  56 │         ports:
  57 │         - containerPort: 9090
  58 │           name: exporter
  59 │           protocol: TCP
  60 │         resources: {}
  61 │         terminationMessagePath: /dev/termination-log
  62 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-sock_11.yaml:30-52
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq:3.6.8-management
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: rabbitmq
  33 │         ports:
  34 │         - containerPort: 15672
  35 │           name: management
  36 │           protocol: TCP
  37 │         - containerPort: 5672
  38 └           name: rabbitmq
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbitmq" of deployment "rabbitmq" in "px-sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-sock_11.yaml:30-52
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq:3.6.8-management
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: rabbitmq
  33 │         ports:
  34 │         - containerPort: 15672
  35 │           name: management
  36 │           protocol: TCP
  37 │         - containerPort: 5672
  38 └           name: rabbitmq
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbitmq-exporter" of deployment "rabbitmq" in "px-sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-sock_11.yaml:53-62
────────────────────────────────────────
  53 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq-exporter:latest
  54 │         imagePullPolicy: Always
  55 │         name: rabbitmq-exporter
  56 │         ports:
  57 │         - containerPort: 9090
  58 │           name: exporter
  59 │           protocol: TCP
  60 │         resources: {}
  61 │         terminationMessagePath: /dev/termination-log
  62 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-sock_11.yaml:53-62
────────────────────────────────────────
  53 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq-exporter:latest
  54 │         imagePullPolicy: Always
  55 │         name: rabbitmq-exporter
  56 │         ports:
  57 │         - containerPort: 9090
  58 │           name: exporter
  59 │           protocol: TCP
  60 │         resources: {}
  61 │         terminationMessagePath: /dev/termination-log
  62 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-sock_11.yaml:43-49
────────────────────────────────────────
  43 ┌             add:
  44 │             - CHOWN
  45 │             - SETGID
  46 │             - SETUID
  47 │             - DAC_OVERRIDE
  48 │             drop:
  49 └             - all
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rabbitmq in px-sock-shop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-sock_11.yaml:53-62
────────────────────────────────────────
  53 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq-exporter:latest
  54 │         imagePullPolicy: Always
  55 │         name: rabbitmq-exporter
  56 │         ports:
  57 │         - containerPort: 9090
  58 │           name: exporter
  59 │           protocol: TCP
  60 │         resources: {}
  61 │         terminationMessagePath: /dev/termination-log
  62 └         terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment rabbitmq in px-sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-sock_11.yaml:29-69
────────────────────────────────────────
  29 ┌       containers:
  30 │       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq:3.6.8-management
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: rabbitmq
  33 │         ports:
  34 │         - containerPort: 15672
  35 │           name: management
  36 │           protocol: TCP
  37 └         - containerPort: 5672
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rabbitmq in deployment rabbitmq (namespace: px-sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-sock_11.yaml:30-52
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq:3.6.8-management
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: rabbitmq
  33 │         ports:
  34 │         - containerPort: 15672
  35 │           name: management
  36 │           protocol: TCP
  37 │         - containerPort: 5672
  38 └           name: rabbitmq
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rabbitmq-exporter in deployment rabbitmq (namespace: px-sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-sock_11.yaml:53-62
────────────────────────────────────────
  53 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-rabbitmq-exporter:latest
  54 │         imagePullPolicy: Always
  55 │         name: rabbitmq-exporter
  56 │         ports:
  57 │         - containerPort: 9090
  58 │           name: exporter
  59 │           protocol: TCP
  60 │         resources: {}
  61 │         terminationMessagePath: /dev/termination-log
  62 └         terminationMessagePolicy: File
────────────────────────────────────────



px-sock_12.yaml (kubernetes)
============================
Tests: 108 (SUCCESSES: 94, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'session-db' of Deployment 'session-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-sock_12.yaml:30-48
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-redis:alpine
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: session-db
  33 │         ports:
  34 │         - containerPort: 6379
  35 │           name: redis
  36 │           protocol: TCP
  37 │         resources: {}
  38 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'session-db' of Deployment 'session-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 px-sock_12.yaml:30-48
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-redis:alpine
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: session-db
  33 │         ports:
  34 │         - containerPort: 6379
  35 │           name: redis
  36 │           protocol: TCP
  37 │         resources: {}
  38 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-sock_12.yaml:30-48
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-redis:alpine
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: session-db
  33 │         ports:
  34 │         - containerPort: 6379
  35 │           name: redis
  36 │           protocol: TCP
  37 │         resources: {}
  38 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'session-db' of Deployment 'session-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 px-sock_12.yaml:30-48
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-redis:alpine
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: session-db
  33 │         ports:
  34 │         - containerPort: 6379
  35 │           name: redis
  36 │           protocol: TCP
  37 │         resources: {}
  38 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'session-db' of Deployment 'session-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 px-sock_12.yaml:30-48
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-redis:alpine
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: session-db
  33 │         ports:
  34 │         - containerPort: 6379
  35 │           name: redis
  36 │           protocol: TCP
  37 │         resources: {}
  38 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'session-db' of Deployment 'session-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 px-sock_12.yaml:30-48
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-redis:alpine
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: session-db
  33 │         ports:
  34 │         - containerPort: 6379
  35 │           name: redis
  36 │           protocol: TCP
  37 │         resources: {}
  38 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-sock_12.yaml:30-48
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-redis:alpine
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: session-db
  33 │         ports:
  34 │         - containerPort: 6379
  35 │           name: redis
  36 │           protocol: TCP
  37 │         resources: {}
  38 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'session-db' of Deployment 'session-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-sock_12.yaml:30-48
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-redis:alpine
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: session-db
  33 │         ports:
  34 │         - containerPort: 6379
  35 │           name: redis
  36 │           protocol: TCP
  37 │         resources: {}
  38 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'session-db' of Deployment 'session-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 px-sock_12.yaml:30-48
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-redis:alpine
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: session-db
  33 │         ports:
  34 │         - containerPort: 6379
  35 │           name: redis
  36 │           protocol: TCP
  37 │         resources: {}
  38 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-sock_12.yaml:30-48
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-redis:alpine
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: session-db
  33 │         ports:
  34 │         - containerPort: 6379
  35 │           name: redis
  36 │           protocol: TCP
  37 │         resources: {}
  38 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "session-db" of deployment "session-db" in "px-sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-sock_12.yaml:30-48
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-redis:alpine
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: session-db
  33 │         ports:
  34 │         - containerPort: 6379
  35 │           name: redis
  36 │           protocol: TCP
  37 │         resources: {}
  38 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-sock_12.yaml:40-45
────────────────────────────────────────
  40 ┌             add:
  41 │             - CHOWN
  42 │             - SETGID
  43 │             - SETUID
  44 │             drop:
  45 └             - all
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment session-db in px-sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-sock_12.yaml:29-55
────────────────────────────────────────
  29 ┌       containers:
  30 │       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-redis:alpine
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: session-db
  33 │         ports:
  34 │         - containerPort: 6379
  35 │           name: redis
  36 │           protocol: TCP
  37 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container session-db in deployment session-db (namespace: px-sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-sock_12.yaml:30-48
────────────────────────────────────────
  30 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-redis:alpine
  31 │         imagePullPolicy: IfNotPresent
  32 │         name: session-db
  33 │         ports:
  34 │         - containerPort: 6379
  35 │           name: redis
  36 │           protocol: TCP
  37 │         resources: {}
  38 └         securityContext:
  ..   
────────────────────────────────────────



px-sock_13.yaml (kubernetes)
============================
Tests: 108 (SUCCESSES: 99, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 2, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'shipping' of Deployment 'shipping' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-sock_13.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-shipping:latest
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'shipping' of Deployment 'shipping' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 px-sock_13.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-shipping:latest
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'shipping' of Deployment 'shipping' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-sock_13.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-shipping:latest
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'shipping' of Deployment 'shipping' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 px-sock_13.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-shipping:latest
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-sock_13.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-shipping:latest
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "shipping" of deployment "shipping" in "px-sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-sock_13.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-shipping:latest
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment shipping in px-sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment shipping in px-sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-sock_13.yaml:27-93
────────────────────────────────────────
  27 ┌       containers:
  28 │       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 └             '
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container shipping in deployment shipping (namespace: px-sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-sock_13.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-shipping:latest
  ..   
────────────────────────────────────────



px-sock_14.yaml (kubernetes)
============================
Tests: 108 (SUCCESSES: 100, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'user' of Deployment 'user' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-sock_14.yaml:28-74
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: mongo
  30 │           value: user-db:27017
  31 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-user:0.4.7
  32 │         imagePullPolicy: IfNotPresent
  33 │         livenessProbe:
  34 │           failureThreshold: 3
  35 │           httpGet:
  36 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'user' of Deployment 'user' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-sock_14.yaml:28-74
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: mongo
  30 │           value: user-db:27017
  31 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-user:0.4.7
  32 │         imagePullPolicy: IfNotPresent
  33 │         livenessProbe:
  34 │           failureThreshold: 3
  35 │           httpGet:
  36 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'user' of Deployment 'user' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 px-sock_14.yaml:28-74
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: mongo
  30 │           value: user-db:27017
  31 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-user:0.4.7
  32 │         imagePullPolicy: IfNotPresent
  33 │         livenessProbe:
  34 │           failureThreshold: 3
  35 │           httpGet:
  36 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-sock_14.yaml:28-74
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: mongo
  30 │           value: user-db:27017
  31 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-user:0.4.7
  32 │         imagePullPolicy: IfNotPresent
  33 │         livenessProbe:
  34 │           failureThreshold: 3
  35 │           httpGet:
  36 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "user" of deployment "user" in "px-sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-sock_14.yaml:28-74
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: mongo
  30 │           value: user-db:27017
  31 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-user:0.4.7
  32 │         imagePullPolicy: IfNotPresent
  33 │         livenessProbe:
  34 │           failureThreshold: 3
  35 │           httpGet:
  36 └             path: /health
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment user in px-sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment user in px-sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-sock_14.yaml:27-81
────────────────────────────────────────
  27 ┌       containers:
  28 │       - env:
  29 │         - name: mongo
  30 │           value: user-db:27017
  31 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-user:0.4.7
  32 │         imagePullPolicy: IfNotPresent
  33 │         livenessProbe:
  34 │           failureThreshold: 3
  35 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container user in deployment user (namespace: px-sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-sock_14.yaml:28-74
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: mongo
  30 │           value: user-db:27017
  31 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-user:0.4.7
  32 │         imagePullPolicy: IfNotPresent
  33 │         livenessProbe:
  34 │           failureThreshold: 3
  35 │           httpGet:
  36 └             path: /health
  ..   
────────────────────────────────────────



px-sock_15.yaml (kubernetes)
============================
Tests: 108 (SUCCESSES: 94, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'user-db' of Deployment 'user-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-sock_15.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-user-db:0.3.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: user-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'user-db' of Deployment 'user-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 px-sock_15.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-user-db:0.3.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: user-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-sock_15.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-user-db:0.3.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: user-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'user-db' of Deployment 'user-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 px-sock_15.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-user-db:0.3.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: user-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'user-db' of Deployment 'user-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 px-sock_15.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-user-db:0.3.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: user-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'user-db' of Deployment 'user-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 px-sock_15.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-user-db:0.3.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: user-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-sock_15.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-user-db:0.3.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: user-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'user-db' of Deployment 'user-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-sock_15.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-user-db:0.3.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: user-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'user-db' of Deployment 'user-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 px-sock_15.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-user-db:0.3.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: user-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-sock_15.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-user-db:0.3.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: user-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "user-db" of deployment "user-db" in "px-sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-sock_15.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-user-db:0.3.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: user-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-sock_15.yaml:38-43
────────────────────────────────────────
  38 ┌             add:
  39 │             - CHOWN
  40 │             - SETGID
  41 │             - SETUID
  42 │             drop:
  43 └             - all
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment user-db in px-sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-sock_15.yaml:27-60
────────────────────────────────────────
  27 ┌       containers:
  28 │       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-user-db:0.3.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: user-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container user-db in deployment user-db (namespace: px-sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-sock_15.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-user-db:0.3.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: user-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────



px-sock_2.yaml (kubernetes)
===========================
Tests: 108 (SUCCESSES: 94, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-sock_2.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: carts-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 px-sock_2.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: carts-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-sock_2.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: carts-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 px-sock_2.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: carts-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 px-sock_2.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: carts-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 px-sock_2.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: carts-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-sock_2.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: carts-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'carts-db' of Deployment 'carts-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-sock_2.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: carts-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'carts-db' of Deployment 'carts-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 px-sock_2.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: carts-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-sock_2.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: carts-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "carts-db" of deployment "carts-db" in "px-sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-sock_2.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: carts-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-sock_2.yaml:38-43
────────────────────────────────────────
  38 ┌             add:
  39 │             - CHOWN
  40 │             - SETGID
  41 │             - SETUID
  42 │             drop:
  43 └             - all
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment carts-db in px-sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-sock_2.yaml:27-60
────────────────────────────────────────
  27 ┌       containers:
  28 │       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: carts-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container carts-db in deployment carts-db (namespace: px-sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-sock_2.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: carts-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────



px-sock_3.yaml (kubernetes)
===========================
Tests: 108 (SUCCESSES: 100, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-sock_3.yaml:28-75
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -port=80
  30 │         command:
  31 │         - /app
  32 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue:0.3.5
  33 │         imagePullPolicy: IfNotPresent
  34 │         livenessProbe:
  35 │           failureThreshold: 3
  36 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalogue' of Deployment 'catalogue' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-sock_3.yaml:28-75
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -port=80
  30 │         command:
  31 │         - /app
  32 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue:0.3.5
  33 │         imagePullPolicy: IfNotPresent
  34 │         livenessProbe:
  35 │           failureThreshold: 3
  36 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'catalogue' of Deployment 'catalogue' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 px-sock_3.yaml:28-75
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -port=80
  30 │         command:
  31 │         - /app
  32 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue:0.3.5
  33 │         imagePullPolicy: IfNotPresent
  34 │         livenessProbe:
  35 │           failureThreshold: 3
  36 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-sock_3.yaml:28-75
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -port=80
  30 │         command:
  31 │         - /app
  32 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue:0.3.5
  33 │         imagePullPolicy: IfNotPresent
  34 │         livenessProbe:
  35 │           failureThreshold: 3
  36 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalogue" of deployment "catalogue" in "px-sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-sock_3.yaml:28-75
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -port=80
  30 │         command:
  31 │         - /app
  32 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue:0.3.5
  33 │         imagePullPolicy: IfNotPresent
  34 │         livenessProbe:
  35 │           failureThreshold: 3
  36 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment catalogue in px-sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalogue in px-sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-sock_3.yaml:27-82
────────────────────────────────────────
  27 ┌       containers:
  28 │       - args:
  29 │         - -port=80
  30 │         command:
  31 │         - /app
  32 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue:0.3.5
  33 │         imagePullPolicy: IfNotPresent
  34 │         livenessProbe:
  35 └           failureThreshold: 3
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container catalogue in deployment catalogue (namespace: px-sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-sock_3.yaml:28-75
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -port=80
  30 │         command:
  31 │         - /app
  32 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue:0.3.5
  33 │         imagePullPolicy: IfNotPresent
  34 │         livenessProbe:
  35 │           failureThreshold: 3
  36 └           httpGet:
  ..   
────────────────────────────────────────



px-sock_4.yaml (kubernetes)
===========================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-sock_4.yaml:28-42
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: fake_password
  31 │         - name: MYSQL_DATABASE
  32 │           value: socksdb
  33 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue-db:0.3.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: catalogue-db
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 px-sock_4.yaml:28-42
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: fake_password
  31 │         - name: MYSQL_DATABASE
  32 │           value: socksdb
  33 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue-db:0.3.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: catalogue-db
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'catalogue-db' of 'deployment' 'catalogue-db' in 'px-sock-shop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 px-sock_4.yaml:28-42
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: fake_password
  31 │         - name: MYSQL_DATABASE
  32 │           value: socksdb
  33 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue-db:0.3.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: catalogue-db
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 px-sock_4.yaml:28-42
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: fake_password
  31 │         - name: MYSQL_DATABASE
  32 │           value: socksdb
  33 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue-db:0.3.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: catalogue-db
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-sock_4.yaml:28-42
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: fake_password
  31 │         - name: MYSQL_DATABASE
  32 │           value: socksdb
  33 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue-db:0.3.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: catalogue-db
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 px-sock_4.yaml:28-42
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: fake_password
  31 │         - name: MYSQL_DATABASE
  32 │           value: socksdb
  33 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue-db:0.3.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: catalogue-db
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 px-sock_4.yaml:28-42
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: fake_password
  31 │         - name: MYSQL_DATABASE
  32 │           value: socksdb
  33 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue-db:0.3.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: catalogue-db
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 px-sock_4.yaml:28-42
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: fake_password
  31 │         - name: MYSQL_DATABASE
  32 │           value: socksdb
  33 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue-db:0.3.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: catalogue-db
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 px-sock_4.yaml:28-42
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: fake_password
  31 │         - name: MYSQL_DATABASE
  32 │           value: socksdb
  33 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue-db:0.3.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: catalogue-db
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-sock_4.yaml:28-42
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: fake_password
  31 │         - name: MYSQL_DATABASE
  32 │           value: socksdb
  33 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue-db:0.3.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: catalogue-db
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'catalogue-db' of Deployment 'catalogue-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-sock_4.yaml:28-42
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: fake_password
  31 │         - name: MYSQL_DATABASE
  32 │           value: socksdb
  33 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue-db:0.3.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: catalogue-db
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-sock_4.yaml:28-42
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: fake_password
  31 │         - name: MYSQL_DATABASE
  32 │           value: socksdb
  33 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue-db:0.3.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: catalogue-db
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "catalogue-db" of deployment "catalogue-db" in "px-sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-sock_4.yaml:28-42
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: fake_password
  31 │         - name: MYSQL_DATABASE
  32 │           value: socksdb
  33 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue-db:0.3.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: catalogue-db
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-sock_4.yaml:28-42
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: fake_password
  31 │         - name: MYSQL_DATABASE
  32 │           value: socksdb
  33 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue-db:0.3.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: catalogue-db
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container catalogue-db in px-sock-shop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-sock_4.yaml:28-42
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: fake_password
  31 │         - name: MYSQL_DATABASE
  32 │           value: socksdb
  33 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue-db:0.3.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: catalogue-db
  36 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment catalogue-db in px-sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-sock_4.yaml:27-49
────────────────────────────────────────
  27 ┌       containers:
  28 │       - env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: fake_password
  31 │         - name: MYSQL_DATABASE
  32 │           value: socksdb
  33 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue-db:0.3.0
  34 │         imagePullPolicy: IfNotPresent
  35 └         name: catalogue-db
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container catalogue-db in deployment catalogue-db (namespace: px-sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-sock_4.yaml:28-42
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: fake_password
  31 │         - name: MYSQL_DATABASE
  32 │           value: socksdb
  33 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-catalogue-db:0.3.0
  34 │         imagePullPolicy: IfNotPresent
  35 │         name: catalogue-db
  36 └         ports:
  ..   
────────────────────────────────────────



px-sock_5.yaml (kubernetes)
===========================
Tests: 108 (SUCCESSES: 102, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 2, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'front-end' of Deployment 'front-end' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-sock_5.yaml:28-72
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: SESSION_REDIS
  30 │           value: 'true'
  31 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-front-end:0.3.12
  32 │         imagePullPolicy: IfNotPresent
  33 │         livenessProbe:
  34 │           failureThreshold: 3
  35 │           httpGet:
  36 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'front-end' of Deployment 'front-end' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-sock_5.yaml:28-72
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: SESSION_REDIS
  30 │           value: 'true'
  31 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-front-end:0.3.12
  32 │         imagePullPolicy: IfNotPresent
  33 │         livenessProbe:
  34 │           failureThreshold: 3
  35 │           httpGet:
  36 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-sock_5.yaml:28-72
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: SESSION_REDIS
  30 │           value: 'true'
  31 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-front-end:0.3.12
  32 │         imagePullPolicy: IfNotPresent
  33 │         livenessProbe:
  34 │           failureThreshold: 3
  35 │           httpGet:
  36 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "front-end" of deployment "front-end" in "px-sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-sock_5.yaml:28-72
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: SESSION_REDIS
  30 │           value: 'true'
  31 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-front-end:0.3.12
  32 │         imagePullPolicy: IfNotPresent
  33 │         livenessProbe:
  34 │           failureThreshold: 3
  35 │           httpGet:
  36 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment front-end in px-sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-sock_5.yaml:27-79
────────────────────────────────────────
  27 ┌       containers:
  28 │       - env:
  29 │         - name: SESSION_REDIS
  30 │           value: 'true'
  31 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-front-end:0.3.12
  32 │         imagePullPolicy: IfNotPresent
  33 │         livenessProbe:
  34 │           failureThreshold: 3
  35 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container front-end in deployment front-end (namespace: px-sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-sock_5.yaml:28-72
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: SESSION_REDIS
  30 │           value: 'true'
  31 │         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-front-end:0.3.12
  32 │         imagePullPolicy: IfNotPresent
  33 │         livenessProbe:
  34 │           failureThreshold: 3
  35 │           httpGet:
  36 └             path: /
  ..   
────────────────────────────────────────



px-sock_6.yaml (kubernetes)
===========================
Tests: 125 (SUCCESSES: 92, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'load-test' of Deployment 'load-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-sock_6.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -c
  30 │         - '100'
  31 │         - -r
  32 │         - '5'
  33 │         - --no-web
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-sock-shop' of Deployment 'load-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-sock_6.yaml:48-61
────────────────────────────────────────
  48 ┌       - command:
  49 │         - sh
  50 │         - -c
  51 │         - set -x; until timeout 2 curl -f "${SOCK_SHOP_HEALTH_ADDR}"; do echo "waiting
  52 │           for ${SOCK_SHOP_HEALTH_ADDR}"; sleep 2; done;
  53 │         env:
  54 │         - name: SOCK_SHOP_HEALTH_ADDR
  55 │           value: http://orders.px-sock-shop.svc.cluster.local/health
  56 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/pixie-oss-pixie-dev-public-curl:multiarch-7.87.0
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'load-test' of Deployment 'load-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 px-sock_6.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -c
  30 │         - '100'
  31 │         - -r
  32 │         - '5'
  33 │         - --no-web
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-sock-shop' of Deployment 'load-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 px-sock_6.yaml:48-61
────────────────────────────────────────
  48 ┌       - command:
  49 │         - sh
  50 │         - -c
  51 │         - set -x; until timeout 2 curl -f "${SOCK_SHOP_HEALTH_ADDR}"; do echo "waiting
  52 │           for ${SOCK_SHOP_HEALTH_ADDR}"; sleep 2; done;
  53 │         env:
  54 │         - name: SOCK_SHOP_HEALTH_ADDR
  55 │           value: http://orders.px-sock-shop.svc.cluster.local/health
  56 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/pixie-oss-pixie-dev-public-curl:multiarch-7.87.0
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'load-test' of 'deployment' 'load-test' in 'px-sock-shop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 px-sock_6.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -c
  30 │         - '100'
  31 │         - -r
  32 │         - '5'
  33 │         - --no-web
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-sock-shop' of 'deployment' 'load-test' in 'px-sock-shop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 px-sock_6.yaml:48-61
────────────────────────────────────────
  48 ┌       - command:
  49 │         - sh
  50 │         - -c
  51 │         - set -x; until timeout 2 curl -f "${SOCK_SHOP_HEALTH_ADDR}"; do echo "waiting
  52 │           for ${SOCK_SHOP_HEALTH_ADDR}"; sleep 2; done;
  53 │         env:
  54 │         - name: SOCK_SHOP_HEALTH_ADDR
  55 │           value: http://orders.px-sock-shop.svc.cluster.local/health
  56 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/pixie-oss-pixie-dev-public-curl:multiarch-7.87.0
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'load-test' of Deployment 'load-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 px-sock_6.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -c
  30 │         - '100'
  31 │         - -r
  32 │         - '5'
  33 │         - --no-web
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-sock-shop' of Deployment 'load-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 px-sock_6.yaml:48-61
────────────────────────────────────────
  48 ┌       - command:
  49 │         - sh
  50 │         - -c
  51 │         - set -x; until timeout 2 curl -f "${SOCK_SHOP_HEALTH_ADDR}"; do echo "waiting
  52 │           for ${SOCK_SHOP_HEALTH_ADDR}"; sleep 2; done;
  53 │         env:
  54 │         - name: SOCK_SHOP_HEALTH_ADDR
  55 │           value: http://orders.px-sock-shop.svc.cluster.local/health
  56 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/pixie-oss-pixie-dev-public-curl:multiarch-7.87.0
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'load-test' of Deployment 'load-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-sock_6.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -c
  30 │         - '100'
  31 │         - -r
  32 │         - '5'
  33 │         - --no-web
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-sock-shop' of Deployment 'load-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-sock_6.yaml:48-61
────────────────────────────────────────
  48 ┌       - command:
  49 │         - sh
  50 │         - -c
  51 │         - set -x; until timeout 2 curl -f "${SOCK_SHOP_HEALTH_ADDR}"; do echo "waiting
  52 │           for ${SOCK_SHOP_HEALTH_ADDR}"; sleep 2; done;
  53 │         env:
  54 │         - name: SOCK_SHOP_HEALTH_ADDR
  55 │           value: http://orders.px-sock-shop.svc.cluster.local/health
  56 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/pixie-oss-pixie-dev-public-curl:multiarch-7.87.0
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'load-test' of Deployment 'load-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 px-sock_6.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -c
  30 │         - '100'
  31 │         - -r
  32 │         - '5'
  33 │         - --no-web
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-sock-shop' of Deployment 'load-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 px-sock_6.yaml:48-61
────────────────────────────────────────
  48 ┌       - command:
  49 │         - sh
  50 │         - -c
  51 │         - set -x; until timeout 2 curl -f "${SOCK_SHOP_HEALTH_ADDR}"; do echo "waiting
  52 │           for ${SOCK_SHOP_HEALTH_ADDR}"; sleep 2; done;
  53 │         env:
  54 │         - name: SOCK_SHOP_HEALTH_ADDR
  55 │           value: http://orders.px-sock-shop.svc.cluster.local/health
  56 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/pixie-oss-pixie-dev-public-curl:multiarch-7.87.0
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'load-test' of Deployment 'load-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 px-sock_6.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -c
  30 │         - '100'
  31 │         - -r
  32 │         - '5'
  33 │         - --no-web
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-sock-shop' of Deployment 'load-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 px-sock_6.yaml:48-61
────────────────────────────────────────
  48 ┌       - command:
  49 │         - sh
  50 │         - -c
  51 │         - set -x; until timeout 2 curl -f "${SOCK_SHOP_HEALTH_ADDR}"; do echo "waiting
  52 │           for ${SOCK_SHOP_HEALTH_ADDR}"; sleep 2; done;
  53 │         env:
  54 │         - name: SOCK_SHOP_HEALTH_ADDR
  55 │           value: http://orders.px-sock-shop.svc.cluster.local/health
  56 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/pixie-oss-pixie-dev-public-curl:multiarch-7.87.0
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'load-test' of Deployment 'load-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 px-sock_6.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -c
  30 │         - '100'
  31 │         - -r
  32 │         - '5'
  33 │         - --no-web
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-sock-shop' of Deployment 'load-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 px-sock_6.yaml:48-61
────────────────────────────────────────
  48 ┌       - command:
  49 │         - sh
  50 │         - -c
  51 │         - set -x; until timeout 2 curl -f "${SOCK_SHOP_HEALTH_ADDR}"; do echo "waiting
  52 │           for ${SOCK_SHOP_HEALTH_ADDR}"; sleep 2; done;
  53 │         env:
  54 │         - name: SOCK_SHOP_HEALTH_ADDR
  55 │           value: http://orders.px-sock-shop.svc.cluster.local/health
  56 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/pixie-oss-pixie-dev-public-curl:multiarch-7.87.0
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'load-test' of Deployment 'load-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 px-sock_6.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -c
  30 │         - '100'
  31 │         - -r
  32 │         - '5'
  33 │         - --no-web
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-sock-shop' of Deployment 'load-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 px-sock_6.yaml:48-61
────────────────────────────────────────
  48 ┌       - command:
  49 │         - sh
  50 │         - -c
  51 │         - set -x; until timeout 2 curl -f "${SOCK_SHOP_HEALTH_ADDR}"; do echo "waiting
  52 │           for ${SOCK_SHOP_HEALTH_ADDR}"; sleep 2; done;
  53 │         env:
  54 │         - name: SOCK_SHOP_HEALTH_ADDR
  55 │           value: http://orders.px-sock-shop.svc.cluster.local/health
  56 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/pixie-oss-pixie-dev-public-curl:multiarch-7.87.0
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'load-test' of Deployment 'load-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-sock_6.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -c
  30 │         - '100'
  31 │         - -r
  32 │         - '5'
  33 │         - --no-web
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-sock-shop' of Deployment 'load-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-sock_6.yaml:48-61
────────────────────────────────────────
  48 ┌       - command:
  49 │         - sh
  50 │         - -c
  51 │         - set -x; until timeout 2 curl -f "${SOCK_SHOP_HEALTH_ADDR}"; do echo "waiting
  52 │           for ${SOCK_SHOP_HEALTH_ADDR}"; sleep 2; done;
  53 │         env:
  54 │         - name: SOCK_SHOP_HEALTH_ADDR
  55 │           value: http://orders.px-sock-shop.svc.cluster.local/health
  56 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/pixie-oss-pixie-dev-public-curl:multiarch-7.87.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'load-test' of Deployment 'load-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-sock_6.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -c
  30 │         - '100'
  31 │         - -r
  32 │         - '5'
  33 │         - --no-web
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-sock-shop' of Deployment 'load-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-sock_6.yaml:48-61
────────────────────────────────────────
  48 ┌       - command:
  49 │         - sh
  50 │         - -c
  51 │         - set -x; until timeout 2 curl -f "${SOCK_SHOP_HEALTH_ADDR}"; do echo "waiting
  52 │           for ${SOCK_SHOP_HEALTH_ADDR}"; sleep 2; done;
  53 │         env:
  54 │         - name: SOCK_SHOP_HEALTH_ADDR
  55 │           value: http://orders.px-sock-shop.svc.cluster.local/health
  56 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/pixie-oss-pixie-dev-public-curl:multiarch-7.87.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-sock_6.yaml:48-61
────────────────────────────────────────
  48 ┌       - command:
  49 │         - sh
  50 │         - -c
  51 │         - set -x; until timeout 2 curl -f "${SOCK_SHOP_HEALTH_ADDR}"; do echo "waiting
  52 │           for ${SOCK_SHOP_HEALTH_ADDR}"; sleep 2; done;
  53 │         env:
  54 │         - name: SOCK_SHOP_HEALTH_ADDR
  55 │           value: http://orders.px-sock-shop.svc.cluster.local/health
  56 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/pixie-oss-pixie-dev-public-curl:multiarch-7.87.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-sock_6.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -c
  30 │         - '100'
  31 │         - -r
  32 │         - '5'
  33 │         - --no-web
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "load-test" of deployment "load-test" in "px-sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-sock_6.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -c
  30 │         - '100'
  31 │         - -r
  32 │         - '5'
  33 │         - --no-web
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-sock-shop" of deployment "load-test" in "px-sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-sock_6.yaml:48-61
────────────────────────────────────────
  48 ┌       - command:
  49 │         - sh
  50 │         - -c
  51 │         - set -x; until timeout 2 curl -f "${SOCK_SHOP_HEALTH_ADDR}"; do echo "waiting
  52 │           for ${SOCK_SHOP_HEALTH_ADDR}"; sleep 2; done;
  53 │         env:
  54 │         - name: SOCK_SHOP_HEALTH_ADDR
  55 │           value: http://orders.px-sock-shop.svc.cluster.local/health
  56 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/pixie-oss-pixie-dev-public-curl:multiarch-7.87.0
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-sock_6.yaml:48-61
────────────────────────────────────────
  48 ┌       - command:
  49 │         - sh
  50 │         - -c
  51 │         - set -x; until timeout 2 curl -f "${SOCK_SHOP_HEALTH_ADDR}"; do echo "waiting
  52 │           for ${SOCK_SHOP_HEALTH_ADDR}"; sleep 2; done;
  53 │         env:
  54 │         - name: SOCK_SHOP_HEALTH_ADDR
  55 │           value: http://orders.px-sock-shop.svc.cluster.local/health
  56 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/pixie-oss-pixie-dev-public-curl:multiarch-7.87.0
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-sock_6.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -c
  30 │         - '100'
  31 │         - -r
  32 │         - '5'
  33 │         - --no-web
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container load-test in px-sock-shop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-sock_6.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -c
  30 │         - '100'
  31 │         - -r
  32 │         - '5'
  33 │         - --no-web
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container load-test in px-sock-shop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-sock_6.yaml:48-61
────────────────────────────────────────
  48 ┌       - command:
  49 │         - sh
  50 │         - -c
  51 │         - set -x; until timeout 2 curl -f "${SOCK_SHOP_HEALTH_ADDR}"; do echo "waiting
  52 │           for ${SOCK_SHOP_HEALTH_ADDR}"; sleep 2; done;
  53 │         env:
  54 │         - name: SOCK_SHOP_HEALTH_ADDR
  55 │           value: http://orders.px-sock-shop.svc.cluster.local/health
  56 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/pixie-oss-pixie-dev-public-curl:multiarch-7.87.0
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment load-test in px-sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-sock_6.yaml:27-67
────────────────────────────────────────
  27 ┌       containers:
  28 │       - args:
  29 │         - -c
  30 │         - '100'
  31 │         - -r
  32 │         - '5'
  33 │         - --no-web
  34 │         - -f
  35 └         - /config/locustfile.py
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container load-test in deployment load-test (namespace: px-sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-sock_6.yaml:28-45
────────────────────────────────────────
  28 ┌       - args:
  29 │         - -c
  30 │         - '100'
  31 │         - -r
  32 │         - '5'
  33 │         - --no-web
  34 │         - -f
  35 │         - /config/locustfile.py
  36 └         - --host
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wait-sock-shop in deployment load-test (namespace: px-sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-sock_6.yaml:48-61
────────────────────────────────────────
  48 ┌       - command:
  49 │         - sh
  50 │         - -c
  51 │         - set -x; until timeout 2 curl -f "${SOCK_SHOP_HEALTH_ADDR}"; do echo "waiting
  52 │           for ${SOCK_SHOP_HEALTH_ADDR}"; sleep 2; done;
  53 │         env:
  54 │         - name: SOCK_SHOP_HEALTH_ADDR
  55 │           value: http://orders.px-sock-shop.svc.cluster.local/health
  56 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/pixie-oss-pixie-dev-public-curl:multiarch-7.87.0
  ..   
────────────────────────────────────────



px-sock_7.yaml (kubernetes)
===========================
Tests: 108 (SUCCESSES: 100, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'orders' of Deployment 'orders' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-sock_7.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-orders:latest
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'orders' of Deployment 'orders' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 px-sock_7.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-orders:latest
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'orders' of Deployment 'orders' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-sock_7.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-orders:latest
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'orders' of Deployment 'orders' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 px-sock_7.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-orders:latest
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-sock_7.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-orders:latest
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "orders" of deployment "orders" in "px-sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-sock_7.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-orders:latest
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment orders in px-sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-sock_7.yaml:27-93
────────────────────────────────────────
  27 ┌       containers:
  28 │       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 └             '
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container orders in deployment orders (namespace: px-sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-sock_7.yaml:28-82
────────────────────────────────────────
  28 ┌       - env:
  29 │         - name: ZIPKIN
  30 │           value: zipkin.jaeger.svc.cluster.local
  31 │         - name: JAVA_OPTS
  32 │           value: '-Xms64m -Xmx128m -XX:+UseG1GC -Djava.security.egd=file:/dev/urandom
  33 │             -XX:+PreserveFramePointer
  34 │ 
  35 │             '
  36 └         image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-orders:latest
  ..   
────────────────────────────────────────



px-sock_8.yaml (kubernetes)
===========================
Tests: 108 (SUCCESSES: 94, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-sock_8.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: orders-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 px-sock_8.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: orders-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 px-sock_8.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: orders-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 px-sock_8.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: orders-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 px-sock_8.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: orders-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 px-sock_8.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: orders-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 px-sock_8.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: orders-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'orders-db' of Deployment 'orders-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-sock_8.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: orders-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'orders-db' of Deployment 'orders-db' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 px-sock_8.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: orders-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-sock_8.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: orders-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "orders-db" of deployment "orders-db" in "px-sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-sock_8.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: orders-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should not add stuff
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 px-sock_8.yaml:38-43
────────────────────────────────────────
  38 ┌             add:
  39 │             - CHOWN
  40 │             - SETGID
  41 │             - SETUID
  42 │             drop:
  43 └             - all
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment orders-db in px-sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-sock_8.yaml:27-60
────────────────────────────────────────
  27 ┌       containers:
  28 │       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: orders-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 └         resources: {}
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container orders-db in deployment orders-db (namespace: px-sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-sock_8.yaml:28-49
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-mongo:4
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: orders-db
  31 │         ports:
  32 │         - containerPort: 27017
  33 │           name: mongo
  34 │           protocol: TCP
  35 │         resources: {}
  36 └         securityContext:
  ..   
────────────────────────────────────────



px-sock_9.yaml (kubernetes)
===========================
Tests: 108 (SUCCESSES: 100, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 2, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'payment' of Deployment 'payment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 px-sock_9.yaml:28-71
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-payment:0.4.3
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 │             path: /health
  34 │             port: 80
  35 │             scheme: HTTP
  36 └           initialDelaySeconds: 300
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'payment' of Deployment 'payment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 px-sock_9.yaml:28-71
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-payment:0.4.3
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 │             path: /health
  34 │             port: 80
  35 │             scheme: HTTP
  36 └           initialDelaySeconds: 300
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'payment' of Deployment 'payment' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 px-sock_9.yaml:28-71
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-payment:0.4.3
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 │             path: /health
  34 │             port: 80
  35 │             scheme: HTTP
  36 └           initialDelaySeconds: 300
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 px-sock_9.yaml:28-71
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-payment:0.4.3
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 │             path: /health
  34 │             port: 80
  35 │             scheme: HTTP
  36 └           initialDelaySeconds: 300
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "payment" of deployment "payment" in "px-sock-shop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 px-sock_9.yaml:28-71
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-payment:0.4.3
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 │             path: /health
  34 │             port: 80
  35 │             scheme: HTTP
  36 └           initialDelaySeconds: 300
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment payment in px-sock-shop namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment payment in px-sock-shop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 px-sock_9.yaml:27-78
────────────────────────────────────────
  27 ┌       containers:
  28 │       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-payment:0.4.3
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 │             path: /health
  34 │             port: 80
  35 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container payment in deployment payment (namespace: px-sock-shop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 px-sock_9.yaml:28-71
────────────────────────────────────────
  28 ┌       - image: vcr.vngcloud.vn/60108-annd2-ingress/pixie-io/px-sock-shop-payment:0.4.3
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 │             path: /health
  34 │             port: 80
  35 │             scheme: HTTP
  36 └           initialDelaySeconds: 300
  ..   
────────────────────────────────────────



pxbbq-frontend-tc.yaml (kubernetes)
===================================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pxbbq-web' of Deployment 'pxbbq-web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pxbbq-frontend-tc.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pxbbq-web' of Deployment 'pxbbq-web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pxbbq-frontend-tc.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pxbbq-web' of 'deployment' 'pxbbq-web' in 'trashcan' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pxbbq-frontend-tc.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pxbbq-web' of Deployment 'pxbbq-web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pxbbq-frontend-tc.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pxbbq-web' of Deployment 'pxbbq-web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pxbbq-frontend-tc.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pxbbq-web' of Deployment 'pxbbq-web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pxbbq-frontend-tc.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pxbbq-web' of Deployment 'pxbbq-web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pxbbq-frontend-tc.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pxbbq-web' of Deployment 'pxbbq-web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pxbbq-frontend-tc.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pxbbq-web' of Deployment 'pxbbq-web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pxbbq-frontend-tc.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pxbbq-web' of Deployment 'pxbbq-web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pxbbq-frontend-tc.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pxbbq-web' of Deployment 'pxbbq-web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pxbbq-frontend-tc.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pxbbq-frontend-tc.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pxbbq-web" of deployment "pxbbq-web" in "trashcan" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pxbbq-frontend-tc.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pxbbq-frontend-tc.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pxbbq-web in trashcan namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxbbq-frontend-tc.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pxbbq-web in trashcan namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxbbq-frontend-tc.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 └         - name: MONGO_NODES
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pxbbq-web in deployment pxbbq-web (namespace: trashcan) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pxbbq-frontend-tc.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────



pxbbq-frontend.yaml (kubernetes)
================================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pxbbq-web' of Deployment 'pxbbq-web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pxbbq-frontend.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pxbbq-web' of Deployment 'pxbbq-web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pxbbq-frontend.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pxbbq-web' of 'deployment' 'pxbbq-web' in 'pxbbq' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pxbbq-frontend.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pxbbq-web' of Deployment 'pxbbq-web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pxbbq-frontend.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pxbbq-web' of Deployment 'pxbbq-web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pxbbq-frontend.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pxbbq-web' of Deployment 'pxbbq-web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pxbbq-frontend.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pxbbq-web' of Deployment 'pxbbq-web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pxbbq-frontend.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pxbbq-web' of Deployment 'pxbbq-web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pxbbq-frontend.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pxbbq-web' of Deployment 'pxbbq-web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pxbbq-frontend.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pxbbq-web' of Deployment 'pxbbq-web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pxbbq-frontend.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pxbbq-web' of Deployment 'pxbbq-web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pxbbq-frontend.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pxbbq-frontend.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pxbbq-web" of deployment "pxbbq-web" in "pxbbq" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pxbbq-frontend.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pxbbq-frontend.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pxbbq-web in pxbbq namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxbbq-frontend.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pxbbq-web in pxbbq namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxbbq-frontend.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 └         - name: MONGO_NODES
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pxbbq-web in deployment pxbbq-web (namespace: pxbbq) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pxbbq-frontend.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: pxbbq-web
  18 │         image: eshanks16/pxbbq:v3.2
  19 │         env:
  20 │         - name: MONGO_INIT_USER
  21 │           value: porxie
  22 │         - name: MONGO_INIT_PASS
  23 │           value: porxie
  24 │         - name: MONGO_NODES
  25 └           value: mongo
  ..   
────────────────────────────────────────



pxbbq-mongo-restore.yaml (kubernetes)
=====================================
Tests: 109 (SUCCESSES: 94, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mongo' of Deployment 'mongo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pxbbq-mongo-restore.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mongo' of Deployment 'mongo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pxbbq-mongo-restore.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mongo' of 'deployment' 'mongo' in 'pxbbq' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pxbbq-mongo-restore.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mongo' of Deployment 'mongo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pxbbq-mongo-restore.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mongo' of Deployment 'mongo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pxbbq-mongo-restore.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mongo' of Deployment 'mongo' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pxbbq-mongo-restore.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mongo' of Deployment 'mongo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pxbbq-mongo-restore.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mongo' of Deployment 'mongo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pxbbq-mongo-restore.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mongo' of Deployment 'mongo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pxbbq-mongo-restore.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mongo' of Deployment 'mongo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pxbbq-mongo-restore.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pxbbq-mongo-restore.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mongo" of deployment "mongo" in "pxbbq" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pxbbq-mongo-restore.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pxbbq-mongo-restore.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mongo in pxbbq namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxbbq-mongo-restore.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mongo in pxbbq namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxbbq-mongo-restore.yaml:21-44
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 └         args:
  ..   
────────────────────────────────────────



pxbbq-mongo-tc_1.yaml (kubernetes)
==================================
Tests: 109 (SUCCESSES: 94, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mongo' of Deployment 'mongo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pxbbq-mongo-tc_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mongo' of Deployment 'mongo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pxbbq-mongo-tc_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mongo' of 'deployment' 'mongo' in 'trashcan' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pxbbq-mongo-tc_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mongo' of Deployment 'mongo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pxbbq-mongo-tc_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mongo' of Deployment 'mongo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pxbbq-mongo-tc_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mongo' of Deployment 'mongo' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pxbbq-mongo-tc_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mongo' of Deployment 'mongo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pxbbq-mongo-tc_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mongo' of Deployment 'mongo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pxbbq-mongo-tc_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mongo' of Deployment 'mongo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pxbbq-mongo-tc_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mongo' of Deployment 'mongo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pxbbq-mongo-tc_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pxbbq-mongo-tc_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mongo" of deployment "mongo" in "trashcan" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pxbbq-mongo-tc_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pxbbq-mongo-tc_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mongo in trashcan namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxbbq-mongo-tc_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mongo in trashcan namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxbbq-mongo-tc_1.yaml:21-44
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 └         args:
  ..   
────────────────────────────────────────



pxbbq-mongo_1.yaml (kubernetes)
===============================
Tests: 109 (SUCCESSES: 94, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mongo' of Deployment 'mongo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pxbbq-mongo_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mongo' of Deployment 'mongo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pxbbq-mongo_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mongo' of 'deployment' 'mongo' in 'pxbbq' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pxbbq-mongo_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mongo' of Deployment 'mongo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pxbbq-mongo_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mongo' of Deployment 'mongo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pxbbq-mongo_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mongo' of Deployment 'mongo' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pxbbq-mongo_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mongo' of Deployment 'mongo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pxbbq-mongo_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mongo' of Deployment 'mongo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pxbbq-mongo_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mongo' of Deployment 'mongo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pxbbq-mongo_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mongo' of Deployment 'mongo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pxbbq-mongo_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pxbbq-mongo_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mongo" of deployment "mongo" in "pxbbq" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pxbbq-mongo_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pxbbq-mongo_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mongo in pxbbq namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxbbq-mongo_1.yaml:22-40
────────────────────────────────────────
  22 ┌       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 │         args:
  30 └         - --bind_ip
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mongo in pxbbq namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxbbq-mongo_1.yaml:21-44
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: mongo
  23 │         image: mongo
  24 │         env:
  25 │         - name: MONGO_INITDB_ROOT_USERNAME
  26 │           value: porxie
  27 │         - name: MONGO_INITDB_ROOT_PASSWORD
  28 │           value: porxie
  29 └         args:
  ..   
────────────────────────────────────────



pxc-node11_1.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pxc-node11_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pxc-node1' of ReplicationController 'pxc-node1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pxc-node11_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pxc-node1' of 'replicationcontroller' 'pxc-node1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pxc-node11_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pxc-node11_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pxc-node11_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pxc-node11_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pxc-node11_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pxc-node11_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pxc-node11_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pxc-node11_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pxc-node11_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pxc-node1" of replicationcontroller "pxc-node1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pxc-node11_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pxc-node11_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller pxc-node1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pxc-node11_1.yaml:4
────────────────────────────────────────
   4 [   name: pxc-node1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pxc-node1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxc-node11_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller pxc-node1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxc-node11_1.yaml:13-38
────────────────────────────────────────
  13 ┌       containers:
  14 │       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 └         - containerPort: 4444
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pxc-node1 in replicationcontroller pxc-node1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pxc-node11_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────



pxc-node12_1.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pxc-node12_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pxc-node1' of ReplicationController 'pxc-node1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pxc-node12_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pxc-node1' of 'replicationcontroller' 'pxc-node1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pxc-node12_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pxc-node12_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pxc-node12_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pxc-node12_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pxc-node12_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pxc-node12_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pxc-node12_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pxc-node12_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pxc-node12_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pxc-node1" of replicationcontroller "pxc-node1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pxc-node12_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pxc-node12_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller pxc-node1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pxc-node12_1.yaml:4
────────────────────────────────────────
   4 [   name: pxc-node1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pxc-node1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxc-node12_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller pxc-node1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxc-node12_1.yaml:13-38
────────────────────────────────────────
  13 ┌       containers:
  14 │       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 └         - containerPort: 4444
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pxc-node1 in replicationcontroller pxc-node1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pxc-node12_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────



pxc-node1_1.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pxc-node1_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pxc-node1' of ReplicationController 'pxc-node1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pxc-node1_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pxc-node1' of 'replicationcontroller' 'pxc-node1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pxc-node1_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pxc-node1_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pxc-node1_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pxc-node1_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pxc-node1_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pxc-node1_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pxc-node1_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pxc-node1' of ReplicationController 'pxc-node1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pxc-node1_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pxc-node1_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pxc-node1" of replicationcontroller "pxc-node1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pxc-node1_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pxc-node1_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller pxc-node1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pxc-node1_1.yaml:4
────────────────────────────────────────
   4 [   name: pxc-node1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pxc-node1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxc-node1_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller pxc-node1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxc-node1_1.yaml:13-38
────────────────────────────────────────
  13 ┌       containers:
  14 │       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 └         - containerPort: 4444
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pxc-node1 in replicationcontroller pxc-node1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pxc-node1_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node1
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────



pxc-node21_1.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pxc-node21_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pxc-node2' of ReplicationController 'pxc-node2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pxc-node21_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pxc-node2' of 'replicationcontroller' 'pxc-node2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pxc-node21_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pxc-node21_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pxc-node21_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pxc-node21_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pxc-node21_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pxc-node21_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pxc-node21_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pxc-node21_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pxc-node21_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pxc-node2" of replicationcontroller "pxc-node2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pxc-node21_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pxc-node21_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller pxc-node2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pxc-node21_1.yaml:4
────────────────────────────────────────
   4 [   name: pxc-node2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pxc-node2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxc-node21_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller pxc-node2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxc-node21_1.yaml:13-38
────────────────────────────────────────
  13 ┌       containers:
  14 │       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 └         - containerPort: 4444
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pxc-node2 in replicationcontroller pxc-node2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pxc-node21_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────



pxc-node22_1.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pxc-node22_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pxc-node2' of ReplicationController 'pxc-node2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pxc-node22_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pxc-node2' of 'replicationcontroller' 'pxc-node2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pxc-node22_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pxc-node22_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pxc-node22_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pxc-node22_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pxc-node22_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pxc-node22_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pxc-node22_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pxc-node22_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pxc-node22_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pxc-node2" of replicationcontroller "pxc-node2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pxc-node22_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pxc-node22_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller pxc-node2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pxc-node22_1.yaml:4
────────────────────────────────────────
   4 [   name: pxc-node2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pxc-node2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxc-node22_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller pxc-node2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxc-node22_1.yaml:13-38
────────────────────────────────────────
  13 ┌       containers:
  14 │       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 └         - containerPort: 4444
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pxc-node2 in replicationcontroller pxc-node2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pxc-node22_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────



pxc-node2_1.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pxc-node2_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pxc-node2' of ReplicationController 'pxc-node2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pxc-node2_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pxc-node2' of 'replicationcontroller' 'pxc-node2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pxc-node2_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pxc-node2_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pxc-node2_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pxc-node2_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pxc-node2_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pxc-node2_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pxc-node2_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pxc-node2' of ReplicationController 'pxc-node2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pxc-node2_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pxc-node2_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pxc-node2" of replicationcontroller "pxc-node2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pxc-node2_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pxc-node2_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller pxc-node2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pxc-node2_1.yaml:4
────────────────────────────────────────
   4 [   name: pxc-node2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pxc-node2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxc-node2_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller pxc-node2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxc-node2_1.yaml:13-38
────────────────────────────────────────
  13 ┌       containers:
  14 │       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 └         - containerPort: 4444
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pxc-node2 in replicationcontroller pxc-node2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pxc-node2_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node2
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────



pxc-node31_1.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pxc-node31_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pxc-node3' of ReplicationController 'pxc-node3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pxc-node31_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pxc-node3' of 'replicationcontroller' 'pxc-node3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pxc-node31_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pxc-node31_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pxc-node31_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pxc-node31_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pxc-node31_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pxc-node31_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pxc-node31_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pxc-node31_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pxc-node31_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pxc-node3" of replicationcontroller "pxc-node3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pxc-node31_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pxc-node31_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller pxc-node3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pxc-node31_1.yaml:4
────────────────────────────────────────
   4 [   name: pxc-node3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pxc-node3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxc-node31_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller pxc-node3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxc-node31_1.yaml:13-38
────────────────────────────────────────
  13 ┌       containers:
  14 │       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 └         - containerPort: 4444
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pxc-node3 in replicationcontroller pxc-node3 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pxc-node31_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────



pxc-node32_1.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pxc-node32_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pxc-node3' of ReplicationController 'pxc-node3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pxc-node32_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pxc-node3' of 'replicationcontroller' 'pxc-node3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pxc-node32_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pxc-node32_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pxc-node32_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pxc-node32_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pxc-node32_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pxc-node32_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pxc-node32_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pxc-node32_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pxc-node32_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pxc-node3" of replicationcontroller "pxc-node3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pxc-node32_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pxc-node32_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller pxc-node3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pxc-node32_1.yaml:4
────────────────────────────────────────
   4 [   name: pxc-node3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pxc-node3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxc-node32_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller pxc-node3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxc-node32_1.yaml:13-38
────────────────────────────────────────
  13 ┌       containers:
  14 │       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 └         - containerPort: 4444
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pxc-node3 in replicationcontroller pxc-node3 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pxc-node32_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────



pxc-node3_1.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pxc-node3_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pxc-node3' of ReplicationController 'pxc-node3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pxc-node3_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pxc-node3' of 'replicationcontroller' 'pxc-node3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pxc-node3_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pxc-node3_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pxc-node3_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pxc-node3_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pxc-node3_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pxc-node3_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pxc-node3_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pxc-node3' of ReplicationController 'pxc-node3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pxc-node3_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pxc-node3_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pxc-node3" of replicationcontroller "pxc-node3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pxc-node3_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pxc-node3_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller pxc-node3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pxc-node3_1.yaml:4
────────────────────────────────────────
   4 [   name: pxc-node3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pxc-node3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxc-node3_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller pxc-node3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pxc-node3_1.yaml:13-38
────────────────────────────────────────
  13 ┌       containers:
  14 │       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 └         - containerPort: 4444
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pxc-node3 in replicationcontroller pxc-node3 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pxc-node3_1.yaml:14-38
────────────────────────────────────────
  14 ┌       - resources:
  15 │           limits:
  16 │             cpu: 0.3
  17 │         image: capttofu/percona_xtradb_cluster_5_6:beta
  18 │         name: pxc-node3
  19 │         ports:
  20 │         - containerPort: 3306
  21 │         - containerPort: 4444
  22 └         - containerPort: 4567
  ..   
────────────────────────────────────────



pyaes.yaml (kubernetes)
=======================
Tests: 109 (SUCCESSES: 94, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pyaes' of Deployment 'pyaes' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pyaes.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: pyaes
  18 │         image: 192.168.56.10:5000/pyaes-image
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 256Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pyaes' of Deployment 'pyaes' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pyaes.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: pyaes
  18 │         image: 192.168.56.10:5000/pyaes-image
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 256Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pyaes' of 'deployment' 'pyaes' in 'openfaas-fn' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pyaes.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: pyaes
  18 │         image: 192.168.56.10:5000/pyaes-image
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 256Mi
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pyaes' of Deployment 'pyaes' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pyaes.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: pyaes
  18 │         image: 192.168.56.10:5000/pyaes-image
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 256Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pyaes' of Deployment 'pyaes' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pyaes.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: pyaes
  18 │         image: 192.168.56.10:5000/pyaes-image
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 256Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pyaes' of Deployment 'pyaes' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pyaes.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: pyaes
  18 │         image: 192.168.56.10:5000/pyaes-image
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 256Mi
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pyaes' of Deployment 'pyaes' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pyaes.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: pyaes
  18 │         image: 192.168.56.10:5000/pyaes-image
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 256Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pyaes' of Deployment 'pyaes' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pyaes.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: pyaes
  18 │         image: 192.168.56.10:5000/pyaes-image
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 256Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pyaes' of Deployment 'pyaes' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pyaes.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: pyaes
  18 │         image: 192.168.56.10:5000/pyaes-image
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 256Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pyaes.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: pyaes
  18 │         image: 192.168.56.10:5000/pyaes-image
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 256Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pyaes" of deployment "pyaes" in "openfaas-fn" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pyaes.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: pyaes
  18 │         image: 192.168.56.10:5000/pyaes-image
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 256Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pyaes.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: pyaes
  18 │         image: 192.168.56.10:5000/pyaes-image
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 256Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pyaes in openfaas-fn namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pyaes.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: pyaes
  18 │         image: 192.168.56.10:5000/pyaes-image
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 256Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pyaes in openfaas-fn namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pyaes.yaml:16-25
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: pyaes
  18 │         image: 192.168.56.10:5000/pyaes-image
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 │             memory: 256Mi
  25 └       schedulerName: rl-scheduler
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pyaes in deployment pyaes (namespace: openfaas-fn) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pyaes.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: pyaes
  18 │         image: 192.168.56.10:5000/pyaes-image
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 256Mi
────────────────────────────────────────



pykmip-server.yaml (kubernetes)
===============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pykmip-server' of Deployment 'pykmip-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pykmip-server.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pykmip-server
  18 │         image: localhost:5000/pykmip-server
  19 │         ports:
  20 └         - containerPort: 5696
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pykmip-server' of Deployment 'pykmip-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pykmip-server.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pykmip-server
  18 │         image: localhost:5000/pykmip-server
  19 │         ports:
  20 └         - containerPort: 5696
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pykmip-server' of 'deployment' 'pykmip-server' in 'kmip' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pykmip-server.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pykmip-server
  18 │         image: localhost:5000/pykmip-server
  19 │         ports:
  20 └         - containerPort: 5696
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pykmip-server' of Deployment 'pykmip-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pykmip-server.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pykmip-server
  18 │         image: localhost:5000/pykmip-server
  19 │         ports:
  20 └         - containerPort: 5696
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pykmip-server' of Deployment 'pykmip-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pykmip-server.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pykmip-server
  18 │         image: localhost:5000/pykmip-server
  19 │         ports:
  20 └         - containerPort: 5696
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pykmip-server' of Deployment 'pykmip-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pykmip-server.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pykmip-server
  18 │         image: localhost:5000/pykmip-server
  19 │         ports:
  20 └         - containerPort: 5696
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pykmip-server' of Deployment 'pykmip-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pykmip-server.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pykmip-server
  18 │         image: localhost:5000/pykmip-server
  19 │         ports:
  20 └         - containerPort: 5696
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pykmip-server' of Deployment 'pykmip-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pykmip-server.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pykmip-server
  18 │         image: localhost:5000/pykmip-server
  19 │         ports:
  20 └         - containerPort: 5696
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pykmip-server' of Deployment 'pykmip-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pykmip-server.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pykmip-server
  18 │         image: localhost:5000/pykmip-server
  19 │         ports:
  20 └         - containerPort: 5696
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pykmip-server' of Deployment 'pykmip-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pykmip-server.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pykmip-server
  18 │         image: localhost:5000/pykmip-server
  19 │         ports:
  20 └         - containerPort: 5696
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pykmip-server' of Deployment 'pykmip-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pykmip-server.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pykmip-server
  18 │         image: localhost:5000/pykmip-server
  19 │         ports:
  20 └         - containerPort: 5696
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pykmip-server.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pykmip-server
  18 │         image: localhost:5000/pykmip-server
  19 │         ports:
  20 └         - containerPort: 5696
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pykmip-server" of deployment "pykmip-server" in "kmip" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pykmip-server.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pykmip-server
  18 │         image: localhost:5000/pykmip-server
  19 │         ports:
  20 └         - containerPort: 5696
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pykmip-server.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pykmip-server
  18 │         image: localhost:5000/pykmip-server
  19 │         ports:
  20 └         - containerPort: 5696
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pykmip-server in kmip namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pykmip-server.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pykmip-server
  18 │         image: localhost:5000/pykmip-server
  19 │         ports:
  20 └         - containerPort: 5696
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pykmip-server in kmip namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pykmip-server.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: pykmip-server
  18 │         image: localhost:5000/pykmip-server
  19 │         ports:
  20 └         - containerPort: 5696
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pykmip-server in deployment pykmip-server (namespace: kmip) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pykmip-server.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pykmip-server
  18 │         image: localhost:5000/pykmip-server
  19 │         ports:
  20 └         - containerPort: 5696
────────────────────────────────────────



pyspark-deployment.yaml (kubernetes)
====================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pyspark-notebook' of Deployment 'pyspark-notebook' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pyspark-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pyspark-notebook
  18 │         image: jupyter/pyspark-notebook:latest
  19 │         ports:
  20 │         - containerPort: 8888
  21 │         env:
  22 │         - name: JUPYTER_ENABLE_LAB
  23 │           value: "yes"
  24 │         - name: JUPYTER_TOKEN
  25 └           value: "your_secure_token"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pyspark-notebook' of Deployment 'pyspark-notebook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pyspark-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pyspark-notebook
  18 │         image: jupyter/pyspark-notebook:latest
  19 │         ports:
  20 │         - containerPort: 8888
  21 │         env:
  22 │         - name: JUPYTER_ENABLE_LAB
  23 │           value: "yes"
  24 │         - name: JUPYTER_TOKEN
  25 └           value: "your_secure_token"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pyspark-notebook' of 'deployment' 'pyspark-notebook' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pyspark-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pyspark-notebook
  18 │         image: jupyter/pyspark-notebook:latest
  19 │         ports:
  20 │         - containerPort: 8888
  21 │         env:
  22 │         - name: JUPYTER_ENABLE_LAB
  23 │           value: "yes"
  24 │         - name: JUPYTER_TOKEN
  25 └           value: "your_secure_token"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pyspark-notebook' of Deployment 'pyspark-notebook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pyspark-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pyspark-notebook
  18 │         image: jupyter/pyspark-notebook:latest
  19 │         ports:
  20 │         - containerPort: 8888
  21 │         env:
  22 │         - name: JUPYTER_ENABLE_LAB
  23 │           value: "yes"
  24 │         - name: JUPYTER_TOKEN
  25 └           value: "your_secure_token"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pyspark-notebook' of Deployment 'pyspark-notebook' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pyspark-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pyspark-notebook
  18 │         image: jupyter/pyspark-notebook:latest
  19 │         ports:
  20 │         - containerPort: 8888
  21 │         env:
  22 │         - name: JUPYTER_ENABLE_LAB
  23 │           value: "yes"
  24 │         - name: JUPYTER_TOKEN
  25 └           value: "your_secure_token"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pyspark-notebook' of Deployment 'pyspark-notebook' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pyspark-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pyspark-notebook
  18 │         image: jupyter/pyspark-notebook:latest
  19 │         ports:
  20 │         - containerPort: 8888
  21 │         env:
  22 │         - name: JUPYTER_ENABLE_LAB
  23 │           value: "yes"
  24 │         - name: JUPYTER_TOKEN
  25 └           value: "your_secure_token"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pyspark-notebook' of Deployment 'pyspark-notebook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pyspark-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pyspark-notebook
  18 │         image: jupyter/pyspark-notebook:latest
  19 │         ports:
  20 │         - containerPort: 8888
  21 │         env:
  22 │         - name: JUPYTER_ENABLE_LAB
  23 │           value: "yes"
  24 │         - name: JUPYTER_TOKEN
  25 └           value: "your_secure_token"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pyspark-notebook' of Deployment 'pyspark-notebook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pyspark-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pyspark-notebook
  18 │         image: jupyter/pyspark-notebook:latest
  19 │         ports:
  20 │         - containerPort: 8888
  21 │         env:
  22 │         - name: JUPYTER_ENABLE_LAB
  23 │           value: "yes"
  24 │         - name: JUPYTER_TOKEN
  25 └           value: "your_secure_token"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pyspark-notebook' of Deployment 'pyspark-notebook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pyspark-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pyspark-notebook
  18 │         image: jupyter/pyspark-notebook:latest
  19 │         ports:
  20 │         - containerPort: 8888
  21 │         env:
  22 │         - name: JUPYTER_ENABLE_LAB
  23 │           value: "yes"
  24 │         - name: JUPYTER_TOKEN
  25 └           value: "your_secure_token"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pyspark-notebook' of Deployment 'pyspark-notebook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pyspark-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pyspark-notebook
  18 │         image: jupyter/pyspark-notebook:latest
  19 │         ports:
  20 │         - containerPort: 8888
  21 │         env:
  22 │         - name: JUPYTER_ENABLE_LAB
  23 │           value: "yes"
  24 │         - name: JUPYTER_TOKEN
  25 └           value: "your_secure_token"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pyspark-notebook' of Deployment 'pyspark-notebook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pyspark-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pyspark-notebook
  18 │         image: jupyter/pyspark-notebook:latest
  19 │         ports:
  20 │         - containerPort: 8888
  21 │         env:
  22 │         - name: JUPYTER_ENABLE_LAB
  23 │           value: "yes"
  24 │         - name: JUPYTER_TOKEN
  25 └           value: "your_secure_token"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pyspark-notebook' of Deployment 'pyspark-notebook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pyspark-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pyspark-notebook
  18 │         image: jupyter/pyspark-notebook:latest
  19 │         ports:
  20 │         - containerPort: 8888
  21 │         env:
  22 │         - name: JUPYTER_ENABLE_LAB
  23 │           value: "yes"
  24 │         - name: JUPYTER_TOKEN
  25 └           value: "your_secure_token"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pyspark-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pyspark-notebook
  18 │         image: jupyter/pyspark-notebook:latest
  19 │         ports:
  20 │         - containerPort: 8888
  21 │         env:
  22 │         - name: JUPYTER_ENABLE_LAB
  23 │           value: "yes"
  24 │         - name: JUPYTER_TOKEN
  25 └           value: "your_secure_token"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pyspark-notebook" of deployment "pyspark-notebook" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pyspark-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pyspark-notebook
  18 │         image: jupyter/pyspark-notebook:latest
  19 │         ports:
  20 │         - containerPort: 8888
  21 │         env:
  22 │         - name: JUPYTER_ENABLE_LAB
  23 │           value: "yes"
  24 │         - name: JUPYTER_TOKEN
  25 └           value: "your_secure_token"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pyspark-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pyspark-notebook
  18 │         image: jupyter/pyspark-notebook:latest
  19 │         ports:
  20 │         - containerPort: 8888
  21 │         env:
  22 │         - name: JUPYTER_ENABLE_LAB
  23 │           value: "yes"
  24 │         - name: JUPYTER_TOKEN
  25 └           value: "your_secure_token"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pyspark-notebook in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pyspark-deployment.yaml:4-5
────────────────────────────────────────
   4 ┌   name: pyspark-notebook
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pyspark-notebook in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pyspark-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pyspark-notebook
  18 │         image: jupyter/pyspark-notebook:latest
  19 │         ports:
  20 │         - containerPort: 8888
  21 │         env:
  22 │         - name: JUPYTER_ENABLE_LAB
  23 │           value: "yes"
  24 │         - name: JUPYTER_TOKEN
  25 └           value: "your_secure_token"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pyspark-notebook in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pyspark-deployment.yaml:16-25
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: pyspark-notebook
  18 │         image: jupyter/pyspark-notebook:latest
  19 │         ports:
  20 │         - containerPort: 8888
  21 │         env:
  22 │         - name: JUPYTER_ENABLE_LAB
  23 │           value: "yes"
  24 │         - name: JUPYTER_TOKEN
  25 └           value: "your_secure_token"
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pyspark-notebook in deployment pyspark-notebook (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 pyspark-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌       - name: pyspark-notebook
  18 │         image: jupyter/pyspark-notebook:latest
  19 │         ports:
  20 │         - containerPort: 8888
  21 │         env:
  22 │         - name: JUPYTER_ENABLE_LAB
  23 │           value: "yes"
  24 │         - name: JUPYTER_TOKEN
  25 └           value: "your_secure_token"
────────────────────────────────────────



pyspark-job.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pyspark' of Job 'pyspark-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pyspark-job.yaml:11-14
────────────────────────────────────────
  11 ┌         - name: pyspark
  12 │           image: pyspark
  13 │           command: ["/bin/bash", "-c", "python3 transform.py"]
  14 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pyspark' of Job 'pyspark-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pyspark-job.yaml:11-14
────────────────────────────────────────
  11 ┌         - name: pyspark
  12 │           image: pyspark
  13 │           command: ["/bin/bash", "-c", "python3 transform.py"]
  14 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pyspark' of 'job' 'pyspark-job' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pyspark-job.yaml:11-14
────────────────────────────────────────
  11 ┌         - name: pyspark
  12 │           image: pyspark
  13 │           command: ["/bin/bash", "-c", "python3 transform.py"]
  14 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pyspark' of Job 'pyspark-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pyspark-job.yaml:11-14
────────────────────────────────────────
  11 ┌         - name: pyspark
  12 │           image: pyspark
  13 │           command: ["/bin/bash", "-c", "python3 transform.py"]
  14 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pyspark' of Job 'pyspark-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pyspark-job.yaml:11-14
────────────────────────────────────────
  11 ┌         - name: pyspark
  12 │           image: pyspark
  13 │           command: ["/bin/bash", "-c", "python3 transform.py"]
  14 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pyspark' of Job 'pyspark-job' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pyspark-job.yaml:11-14
────────────────────────────────────────
  11 ┌         - name: pyspark
  12 │           image: pyspark
  13 │           command: ["/bin/bash", "-c", "python3 transform.py"]
  14 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pyspark' of Job 'pyspark-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pyspark-job.yaml:11-14
────────────────────────────────────────
  11 ┌         - name: pyspark
  12 │           image: pyspark
  13 │           command: ["/bin/bash", "-c", "python3 transform.py"]
  14 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pyspark' of Job 'pyspark-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pyspark-job.yaml:11-14
────────────────────────────────────────
  11 ┌         - name: pyspark
  12 │           image: pyspark
  13 │           command: ["/bin/bash", "-c", "python3 transform.py"]
  14 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pyspark' of Job 'pyspark-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pyspark-job.yaml:11-14
────────────────────────────────────────
  11 ┌         - name: pyspark
  12 │           image: pyspark
  13 │           command: ["/bin/bash", "-c", "python3 transform.py"]
  14 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pyspark' of Job 'pyspark-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pyspark-job.yaml:11-14
────────────────────────────────────────
  11 ┌         - name: pyspark
  12 │           image: pyspark
  13 │           command: ["/bin/bash", "-c", "python3 transform.py"]
  14 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pyspark' of Job 'pyspark-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pyspark-job.yaml:11-14
────────────────────────────────────────
  11 ┌         - name: pyspark
  12 │           image: pyspark
  13 │           command: ["/bin/bash", "-c", "python3 transform.py"]
  14 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pyspark' of Job 'pyspark-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pyspark-job.yaml:11-14
────────────────────────────────────────
  11 ┌         - name: pyspark
  12 │           image: pyspark
  13 │           command: ["/bin/bash", "-c", "python3 transform.py"]
  14 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pyspark-job.yaml:11-14
────────────────────────────────────────
  11 ┌         - name: pyspark
  12 │           image: pyspark
  13 │           command: ["/bin/bash", "-c", "python3 transform.py"]
  14 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pyspark" of job "pyspark-job" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pyspark-job.yaml:11-14
────────────────────────────────────────
  11 ┌         - name: pyspark
  12 │           image: pyspark
  13 │           command: ["/bin/bash", "-c", "python3 transform.py"]
  14 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pyspark-job.yaml:11-14
────────────────────────────────────────
  11 ┌         - name: pyspark
  12 │           image: pyspark
  13 │           command: ["/bin/bash", "-c", "python3 transform.py"]
  14 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0110 (LOW): job pyspark-job in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pyspark-job.yaml:4
────────────────────────────────────────
   4 [   name: pyspark-job
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pyspark-job in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pyspark-job.yaml:11-14
────────────────────────────────────────
  11 ┌         - name: pyspark
  12 │           image: pyspark
  13 │           command: ["/bin/bash", "-c", "python3 transform.py"]
  14 └           imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job pyspark-job in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pyspark-job.yaml:10-15
────────────────────────────────────────
  10 ┌       containers:
  11 │         - name: pyspark
  12 │           image: pyspark
  13 │           command: ["/bin/bash", "-c", "python3 transform.py"]
  14 │           imagePullPolicy: Never
  15 └       restartPolicy: Never
────────────────────────────────────────



pyspark.yaml (kubernetes)
=========================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pyspark' of Pod 'pyspark-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 pyspark.yaml:9-12
────────────────────────────────────────
   9 ┌     - name: pyspark
  10 │       image: pyspark
  11 │       command: ["/bin/bash", "-c", "while true; do sleep 30; done;"]
  12 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pyspark' of Pod 'pyspark-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 pyspark.yaml:9-12
────────────────────────────────────────
   9 ┌     - name: pyspark
  10 │       image: pyspark
  11 │       command: ["/bin/bash", "-c", "while true; do sleep 30; done;"]
  12 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pyspark' of 'pod' 'pyspark-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 pyspark.yaml:9-12
────────────────────────────────────────
   9 ┌     - name: pyspark
  10 │       image: pyspark
  11 │       command: ["/bin/bash", "-c", "while true; do sleep 30; done;"]
  12 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pyspark' of Pod 'pyspark-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 pyspark.yaml:9-12
────────────────────────────────────────
   9 ┌     - name: pyspark
  10 │       image: pyspark
  11 │       command: ["/bin/bash", "-c", "while true; do sleep 30; done;"]
  12 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pyspark' of Pod 'pyspark-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 pyspark.yaml:9-12
────────────────────────────────────────
   9 ┌     - name: pyspark
  10 │       image: pyspark
  11 │       command: ["/bin/bash", "-c", "while true; do sleep 30; done;"]
  12 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pyspark' of Pod 'pyspark-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 pyspark.yaml:9-12
────────────────────────────────────────
   9 ┌     - name: pyspark
  10 │       image: pyspark
  11 │       command: ["/bin/bash", "-c", "while true; do sleep 30; done;"]
  12 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pyspark' of Pod 'pyspark-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 pyspark.yaml:9-12
────────────────────────────────────────
   9 ┌     - name: pyspark
  10 │       image: pyspark
  11 │       command: ["/bin/bash", "-c", "while true; do sleep 30; done;"]
  12 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pyspark' of Pod 'pyspark-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 pyspark.yaml:9-12
────────────────────────────────────────
   9 ┌     - name: pyspark
  10 │       image: pyspark
  11 │       command: ["/bin/bash", "-c", "while true; do sleep 30; done;"]
  12 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pyspark' of Pod 'pyspark-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 pyspark.yaml:9-12
────────────────────────────────────────
   9 ┌     - name: pyspark
  10 │       image: pyspark
  11 │       command: ["/bin/bash", "-c", "while true; do sleep 30; done;"]
  12 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pyspark' of Pod 'pyspark-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 pyspark.yaml:9-12
────────────────────────────────────────
   9 ┌     - name: pyspark
  10 │       image: pyspark
  11 │       command: ["/bin/bash", "-c", "while true; do sleep 30; done;"]
  12 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pyspark' of Pod 'pyspark-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 pyspark.yaml:9-12
────────────────────────────────────────
   9 ┌     - name: pyspark
  10 │       image: pyspark
  11 │       command: ["/bin/bash", "-c", "while true; do sleep 30; done;"]
  12 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pyspark' of Pod 'pyspark-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 pyspark.yaml:9-12
────────────────────────────────────────
   9 ┌     - name: pyspark
  10 │       image: pyspark
  11 │       command: ["/bin/bash", "-c", "while true; do sleep 30; done;"]
  12 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 pyspark.yaml:9-12
────────────────────────────────────────
   9 ┌     - name: pyspark
  10 │       image: pyspark
  11 │       command: ["/bin/bash", "-c", "while true; do sleep 30; done;"]
  12 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pyspark" of pod "pyspark-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 pyspark.yaml:9-12
────────────────────────────────────────
   9 ┌     - name: pyspark
  10 │       image: pyspark
  11 │       command: ["/bin/bash", "-c", "while true; do sleep 30; done;"]
  12 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 pyspark.yaml:9-12
────────────────────────────────────────
   9 ┌     - name: pyspark
  10 │       image: pyspark
  11 │       command: ["/bin/bash", "-c", "while true; do sleep 30; done;"]
  12 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pyspark-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 pyspark.yaml:4-6
────────────────────────────────────────
   4 ┌   name: pyspark-pod
   5 │   labels:
   6 └     app: pyspark
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pyspark-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pyspark.yaml:9-12
────────────────────────────────────────
   9 ┌     - name: pyspark
  10 │       image: pyspark
  11 │       command: ["/bin/bash", "-c", "while true; do sleep 30; done;"]
  12 └       imagePullPolicy: Never
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pyspark-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 pyspark.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │     - name: pyspark
  10 │       image: pyspark
  11 │       command: ["/bin/bash", "-c", "while true; do sleep 30; done;"]
  12 └       imagePullPolicy: Never
────────────────────────────────────────



python-app-deployment.yaml (kubernetes)
=======================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'python-app' of Deployment 'python-app-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 python-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: python-app
  17 │         image: vijnasu/python-app:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 python-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: python-app
  17 │         image: vijnasu/python-app:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'python-app' of 'deployment' 'python-app-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 python-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: python-app
  17 │         image: vijnasu/python-app:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 python-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: python-app
  17 │         image: vijnasu/python-app:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'python-app' of Deployment 'python-app-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 python-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: python-app
  17 │         image: vijnasu/python-app:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'python-app' of Deployment 'python-app-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 python-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: python-app
  17 │         image: vijnasu/python-app:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'python-app' of Deployment 'python-app-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 python-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: python-app
  17 │         image: vijnasu/python-app:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 python-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: python-app
  17 │         image: vijnasu/python-app:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 python-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: python-app
  17 │         image: vijnasu/python-app:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 python-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: python-app
  17 │         image: vijnasu/python-app:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 python-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: python-app
  17 │         image: vijnasu/python-app:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 python-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: python-app
  17 │         image: vijnasu/python-app:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 python-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: python-app
  17 │         image: vijnasu/python-app:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "python-app" of deployment "python-app-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 python-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: python-app
  17 │         image: vijnasu/python-app:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 python-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: python-app
  17 │         image: vijnasu/python-app:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment python-app-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 python-app-deployment.yaml:4
────────────────────────────────────────
   4 [   name: python-app-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container python-app-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: python-app
  17 │         image: vijnasu/python-app:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment python-app-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-app-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: python-app
  17 │         image: vijnasu/python-app:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container python-app in deployment python-app-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 python-app-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: python-app
  17 │         image: vijnasu/python-app:latest
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────



python-app.yaml (kubernetes)
============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'python-app' of Deployment 'python-app-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 python-app.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 python-app.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'python-app' of 'deployment' 'python-app-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 python-app.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 python-app.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'python-app' of Deployment 'python-app-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 python-app.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'python-app' of Deployment 'python-app-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 python-app.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'python-app' of Deployment 'python-app-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 python-app.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 python-app.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 python-app.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 python-app.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 python-app.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 python-app.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 python-app.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "python-app" of deployment "python-app-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 python-app.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 python-app.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment python-app-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 python-app.yaml:4-6
────────────────────────────────────────
   4 ┌   name: python-app-deployment
   5 │   labels:
   6 └     app: python-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container python-app-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-app.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment python-app-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-app.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: python-app
  19 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container python-app in deployment python-app-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 python-app.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python-app
  19 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  20 │         ports:
  21 └         - containerPort: 5000
────────────────────────────────────────



python-app1.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'python-app' of Deployment 'python-app-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 python-app1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: python-app
  21 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 python-app1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: python-app
  21 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'python-app' of 'deployment' 'python-app-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 python-app1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: python-app
  21 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 python-app1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: python-app
  21 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'python-app' of Deployment 'python-app-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 python-app1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: python-app
  21 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'python-app' of Deployment 'python-app-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 python-app1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: python-app
  21 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'python-app' of Deployment 'python-app-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 python-app1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: python-app
  21 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 python-app1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: python-app
  21 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 python-app1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: python-app
  21 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 python-app1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: python-app
  21 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 python-app1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: python-app
  21 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'python-app' of Deployment 'python-app-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 python-app1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: python-app
  21 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 python-app1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: python-app
  21 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "python-app" of deployment "python-app-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 python-app1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: python-app
  21 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 python-app1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: python-app
  21 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment python-app-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 python-app1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: python-app-deployment
   5 │   labels:
   6 └     app: python-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container python-app-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-app1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: python-app
  21 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment python-app-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-app1.yaml:19-23
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: python-app
  21 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container python-app in deployment python-app-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 python-app1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: python-app
  21 │         image: ghcr.io/practical-otel/python-app-for-k8s-workshop:latest
  22 │         ports:
  23 └         - containerPort: 5000
────────────────────────────────────────



python-app2.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'python-app' of Deployment 'python-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 python-app2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: python-app
  18 │         image: navabnaeem/python-users-data:v1
  19 │         env:
  20 │         - name: DB_HOST
  21 │           value: mysql.test.svc.cluster.local
  22 │         - name: DB_PORT
  23 │           value: '80'
  24 │         - name: DB_USER
  25 └           value: navab
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'python-app' of Deployment 'python-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 python-app2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: python-app
  18 │         image: navabnaeem/python-users-data:v1
  19 │         env:
  20 │         - name: DB_HOST
  21 │           value: mysql.test.svc.cluster.local
  22 │         - name: DB_PORT
  23 │           value: '80'
  24 │         - name: DB_USER
  25 └           value: navab
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'python-app' of 'deployment' 'python-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 python-app2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: python-app
  18 │         image: navabnaeem/python-users-data:v1
  19 │         env:
  20 │         - name: DB_HOST
  21 │           value: mysql.test.svc.cluster.local
  22 │         - name: DB_PORT
  23 │           value: '80'
  24 │         - name: DB_USER
  25 └           value: navab
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'python-app' of Deployment 'python-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 python-app2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: python-app
  18 │         image: navabnaeem/python-users-data:v1
  19 │         env:
  20 │         - name: DB_HOST
  21 │           value: mysql.test.svc.cluster.local
  22 │         - name: DB_PORT
  23 │           value: '80'
  24 │         - name: DB_USER
  25 └           value: navab
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'python-app' of Deployment 'python-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 python-app2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: python-app
  18 │         image: navabnaeem/python-users-data:v1
  19 │         env:
  20 │         - name: DB_HOST
  21 │           value: mysql.test.svc.cluster.local
  22 │         - name: DB_PORT
  23 │           value: '80'
  24 │         - name: DB_USER
  25 └           value: navab
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'python-app' of Deployment 'python-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 python-app2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: python-app
  18 │         image: navabnaeem/python-users-data:v1
  19 │         env:
  20 │         - name: DB_HOST
  21 │           value: mysql.test.svc.cluster.local
  22 │         - name: DB_PORT
  23 │           value: '80'
  24 │         - name: DB_USER
  25 └           value: navab
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'python-app' of Deployment 'python-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 python-app2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: python-app
  18 │         image: navabnaeem/python-users-data:v1
  19 │         env:
  20 │         - name: DB_HOST
  21 │           value: mysql.test.svc.cluster.local
  22 │         - name: DB_PORT
  23 │           value: '80'
  24 │         - name: DB_USER
  25 └           value: navab
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'python-app' of Deployment 'python-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 python-app2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: python-app
  18 │         image: navabnaeem/python-users-data:v1
  19 │         env:
  20 │         - name: DB_HOST
  21 │           value: mysql.test.svc.cluster.local
  22 │         - name: DB_PORT
  23 │           value: '80'
  24 │         - name: DB_USER
  25 └           value: navab
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'python-app' of Deployment 'python-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 python-app2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: python-app
  18 │         image: navabnaeem/python-users-data:v1
  19 │         env:
  20 │         - name: DB_HOST
  21 │           value: mysql.test.svc.cluster.local
  22 │         - name: DB_PORT
  23 │           value: '80'
  24 │         - name: DB_USER
  25 └           value: navab
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'python-app' of Deployment 'python-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 python-app2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: python-app
  18 │         image: navabnaeem/python-users-data:v1
  19 │         env:
  20 │         - name: DB_HOST
  21 │           value: mysql.test.svc.cluster.local
  22 │         - name: DB_PORT
  23 │           value: '80'
  24 │         - name: DB_USER
  25 └           value: navab
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'python-app' of Deployment 'python-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 python-app2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: python-app
  18 │         image: navabnaeem/python-users-data:v1
  19 │         env:
  20 │         - name: DB_HOST
  21 │           value: mysql.test.svc.cluster.local
  22 │         - name: DB_PORT
  23 │           value: '80'
  24 │         - name: DB_USER
  25 └           value: navab
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 python-app2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: python-app
  18 │         image: navabnaeem/python-users-data:v1
  19 │         env:
  20 │         - name: DB_HOST
  21 │           value: mysql.test.svc.cluster.local
  22 │         - name: DB_PORT
  23 │           value: '80'
  24 │         - name: DB_USER
  25 └           value: navab
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "python-app" of deployment "python-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 python-app2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: python-app
  18 │         image: navabnaeem/python-users-data:v1
  19 │         env:
  20 │         - name: DB_HOST
  21 │           value: mysql.test.svc.cluster.local
  22 │         - name: DB_PORT
  23 │           value: '80'
  24 │         - name: DB_USER
  25 └           value: navab
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 python-app2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: python-app
  18 │         image: navabnaeem/python-users-data:v1
  19 │         env:
  20 │         - name: DB_HOST
  21 │           value: mysql.test.svc.cluster.local
  22 │         - name: DB_PORT
  23 │           value: '80'
  24 │         - name: DB_USER
  25 └           value: navab
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment python-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 python-app2.yaml:4
────────────────────────────────────────
   4 [   name: python-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container python-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-app2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: python-app
  18 │         image: navabnaeem/python-users-data:v1
  19 │         env:
  20 │         - name: DB_HOST
  21 │           value: mysql.test.svc.cluster.local
  22 │         - name: DB_PORT
  23 │           value: '80'
  24 │         - name: DB_USER
  25 └           value: navab
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment python-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-app2.yaml:16-31
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: python-app
  18 │         image: navabnaeem/python-users-data:v1
  19 │         env:
  20 │         - name: DB_HOST
  21 │           value: mysql.test.svc.cluster.local
  22 │         - name: DB_PORT
  23 │           value: '80'
  24 └         - name: DB_USER
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container python-app in deployment python-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 python-app2.yaml:17-31
────────────────────────────────────────
  17 ┌       - name: python-app
  18 │         image: navabnaeem/python-users-data:v1
  19 │         env:
  20 │         - name: DB_HOST
  21 │           value: mysql.test.svc.cluster.local
  22 │         - name: DB_PORT
  23 │           value: '80'
  24 │         - name: DB_USER
  25 └           value: navab
  ..   
────────────────────────────────────────



python-deploy.yaml (kubernetes)
===============================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'python' of Deployment 'python-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 python-deploy.yaml:23-24
────────────────────────────────────────
  23 ┌       - name: python
  24 └         image: jcs7/dfp:v1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'python' of Deployment 'python-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 python-deploy.yaml:23-24
────────────────────────────────────────
  23 ┌       - name: python
  24 └         image: jcs7/dfp:v1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'python' of 'deployment' 'python-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 python-deploy.yaml:23-24
────────────────────────────────────────
  23 ┌       - name: python
  24 └         image: jcs7/dfp:v1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'python' of Deployment 'python-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 python-deploy.yaml:23-24
────────────────────────────────────────
  23 ┌       - name: python
  24 └         image: jcs7/dfp:v1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'python' of Deployment 'python-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 python-deploy.yaml:23-24
────────────────────────────────────────
  23 ┌       - name: python
  24 └         image: jcs7/dfp:v1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'python' of Deployment 'python-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 python-deploy.yaml:23-24
────────────────────────────────────────
  23 ┌       - name: python
  24 └         image: jcs7/dfp:v1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'python' of Deployment 'python-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 python-deploy.yaml:23-24
────────────────────────────────────────
  23 ┌       - name: python
  24 └         image: jcs7/dfp:v1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'python' of Deployment 'python-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 python-deploy.yaml:23-24
────────────────────────────────────────
  23 ┌       - name: python
  24 └         image: jcs7/dfp:v1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'python' of Deployment 'python-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 python-deploy.yaml:23-24
────────────────────────────────────────
  23 ┌       - name: python
  24 └         image: jcs7/dfp:v1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'python' of Deployment 'python-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 python-deploy.yaml:23-24
────────────────────────────────────────
  23 ┌       - name: python
  24 └         image: jcs7/dfp:v1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'python' of Deployment 'python-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 python-deploy.yaml:23-24
────────────────────────────────────────
  23 ┌       - name: python
  24 └         image: jcs7/dfp:v1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 python-deploy.yaml:23-24
────────────────────────────────────────
  23 ┌       - name: python
  24 └         image: jcs7/dfp:v1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "python" of deployment "python-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 python-deploy.yaml:23-24
────────────────────────────────────────
  23 ┌       - name: python
  24 └         image: jcs7/dfp:v1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 python-deploy.yaml:23-24
────────────────────────────────────────
  23 ┌       - name: python
  24 └         image: jcs7/dfp:v1
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment python-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 python-deploy.yaml:5-8
────────────────────────────────────────
   5 ┌   name: python-deploy
   6 │   labels:
   7 │     name: python-deploy
   8 └     app: dfp-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container python-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-deploy.yaml:23-24
────────────────────────────────────────
  23 ┌       - name: python
  24 └         image: jcs7/dfp:v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment python-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-deploy.yaml:22-28
────────────────────────────────────────
  22 ┌       containers:
  23 │       - name: python
  24 │         image: jcs7/dfp:v1
  25 │         # ports:
  26 │         # - containerPort: 80
  27 │       imagePullSecrets:
  28 └         - name: regcred
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container python in deployment python-deploy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 python-deploy.yaml:23-24
────────────────────────────────────────
  23 ┌       - name: python
  24 └         image: jcs7/dfp:v1
────────────────────────────────────────



python-local-deployment.yaml (kubernetes)
=========================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'python-local' of Deployment 'python-local' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 python-local-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: kind-registry:5000/python:rc-buster
  20 │         imagePullPolicy: Always
  21 │         name: python-local
  22 │         command: ['/bin/sleep']
  23 └         args: ['9999999']
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'python-local' of Deployment 'python-local' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 python-local-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: kind-registry:5000/python:rc-buster
  20 │         imagePullPolicy: Always
  21 │         name: python-local
  22 │         command: ['/bin/sleep']
  23 └         args: ['9999999']
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'python-local' of 'deployment' 'python-local' in 'services' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 python-local-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: kind-registry:5000/python:rc-buster
  20 │         imagePullPolicy: Always
  21 │         name: python-local
  22 │         command: ['/bin/sleep']
  23 └         args: ['9999999']
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'python-local' of Deployment 'python-local' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 python-local-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: kind-registry:5000/python:rc-buster
  20 │         imagePullPolicy: Always
  21 │         name: python-local
  22 │         command: ['/bin/sleep']
  23 └         args: ['9999999']
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'python-local' of Deployment 'python-local' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 python-local-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: kind-registry:5000/python:rc-buster
  20 │         imagePullPolicy: Always
  21 │         name: python-local
  22 │         command: ['/bin/sleep']
  23 └         args: ['9999999']
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'python-local' of Deployment 'python-local' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 python-local-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: kind-registry:5000/python:rc-buster
  20 │         imagePullPolicy: Always
  21 │         name: python-local
  22 │         command: ['/bin/sleep']
  23 └         args: ['9999999']
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'python-local' of Deployment 'python-local' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 python-local-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: kind-registry:5000/python:rc-buster
  20 │         imagePullPolicy: Always
  21 │         name: python-local
  22 │         command: ['/bin/sleep']
  23 └         args: ['9999999']
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'python-local' of Deployment 'python-local' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 python-local-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: kind-registry:5000/python:rc-buster
  20 │         imagePullPolicy: Always
  21 │         name: python-local
  22 │         command: ['/bin/sleep']
  23 └         args: ['9999999']
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'python-local' of Deployment 'python-local' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 python-local-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: kind-registry:5000/python:rc-buster
  20 │         imagePullPolicy: Always
  21 │         name: python-local
  22 │         command: ['/bin/sleep']
  23 └         args: ['9999999']
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'python-local' of Deployment 'python-local' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 python-local-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: kind-registry:5000/python:rc-buster
  20 │         imagePullPolicy: Always
  21 │         name: python-local
  22 │         command: ['/bin/sleep']
  23 └         args: ['9999999']
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'python-local' of Deployment 'python-local' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 python-local-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: kind-registry:5000/python:rc-buster
  20 │         imagePullPolicy: Always
  21 │         name: python-local
  22 │         command: ['/bin/sleep']
  23 └         args: ['9999999']
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'python-local' of Deployment 'python-local' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 python-local-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: kind-registry:5000/python:rc-buster
  20 │         imagePullPolicy: Always
  21 │         name: python-local
  22 │         command: ['/bin/sleep']
  23 └         args: ['9999999']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 python-local-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: kind-registry:5000/python:rc-buster
  20 │         imagePullPolicy: Always
  21 │         name: python-local
  22 │         command: ['/bin/sleep']
  23 └         args: ['9999999']
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "python-local" of deployment "python-local" in "services" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 python-local-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: kind-registry:5000/python:rc-buster
  20 │         imagePullPolicy: Always
  21 │         name: python-local
  22 │         command: ['/bin/sleep']
  23 └         args: ['9999999']
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 python-local-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: kind-registry:5000/python:rc-buster
  20 │         imagePullPolicy: Always
  21 │         name: python-local
  22 │         command: ['/bin/sleep']
  23 └         args: ['9999999']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container python-local in services namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-local-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: kind-registry:5000/python:rc-buster
  20 │         imagePullPolicy: Always
  21 │         name: python-local
  22 │         command: ['/bin/sleep']
  23 └         args: ['9999999']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment python-local in services namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-local-deployment.yaml:18-24
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: kind-registry:5000/python:rc-buster
  20 │         imagePullPolicy: Always
  21 │         name: python-local
  22 │         command: ['/bin/sleep']
  23 │         args: ['9999999']
  24 └       securityContext: {}
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container python-local in deployment python-local (namespace: services) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 python-local-deployment.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: kind-registry:5000/python:rc-buster
  20 │         imagePullPolicy: Always
  21 │         name: python-local
  22 │         command: ['/bin/sleep']
  23 └         args: ['9999999']
────────────────────────────────────────



python-pod.yaml (kubernetes)
============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'python-container' of Pod 'python-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 python-pod.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: python-container
  10 │     image: python:3.9-slim
  11 └     command: ["python", "-c", "while True: pass"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'python-container' of Pod 'python-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 python-pod.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: python-container
  10 │     image: python:3.9-slim
  11 └     command: ["python", "-c", "while True: pass"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'python-container' of 'pod' 'python-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 python-pod.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: python-container
  10 │     image: python:3.9-slim
  11 └     command: ["python", "-c", "while True: pass"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'python-container' of Pod 'python-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 python-pod.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: python-container
  10 │     image: python:3.9-slim
  11 └     command: ["python", "-c", "while True: pass"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'python-container' of Pod 'python-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 python-pod.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: python-container
  10 │     image: python:3.9-slim
  11 └     command: ["python", "-c", "while True: pass"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'python-container' of Pod 'python-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 python-pod.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: python-container
  10 │     image: python:3.9-slim
  11 └     command: ["python", "-c", "while True: pass"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'python-container' of Pod 'python-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 python-pod.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: python-container
  10 │     image: python:3.9-slim
  11 └     command: ["python", "-c", "while True: pass"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'python-container' of Pod 'python-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 python-pod.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: python-container
  10 │     image: python:3.9-slim
  11 └     command: ["python", "-c", "while True: pass"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'python-container' of Pod 'python-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 python-pod.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: python-container
  10 │     image: python:3.9-slim
  11 └     command: ["python", "-c", "while True: pass"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'python-container' of Pod 'python-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 python-pod.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: python-container
  10 │     image: python:3.9-slim
  11 └     command: ["python", "-c", "while True: pass"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'python-container' of Pod 'python-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 python-pod.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: python-container
  10 │     image: python:3.9-slim
  11 └     command: ["python", "-c", "while True: pass"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 python-pod.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: python-container
  10 │     image: python:3.9-slim
  11 └     command: ["python", "-c", "while True: pass"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "python-container" of pod "python-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 python-pod.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: python-container
  10 │     image: python:3.9-slim
  11 └     command: ["python", "-c", "while True: pass"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 python-pod.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: python-container
  10 │     image: python:3.9-slim
  11 └     command: ["python", "-c", "while True: pass"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod python-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 python-pod.yaml:4-6
────────────────────────────────────────
   4 ┌   name: python-app
   5 │   labels:
   6 └     app: python-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container python-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-pod.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: python-container
  10 │     image: python:3.9-slim
  11 └     command: ["python", "-c", "while True: pass"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod python-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-pod.yaml:8-11
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: python-container
  10 │     image: python:3.9-slim
  11 └     command: ["python", "-c", "while True: pass"]
────────────────────────────────────────



python-service-deployment.yaml (kubernetes)
===========================================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'python-service' of Deployment 'python-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 python-service-deployment.yaml:27-32
────────────────────────────────────────
  27 ┌         - image: girikgarg/learningdocker-python_service
  28 │           name: python-service
  29 │           ports:
  30 │             - containerPort: 3005
  31 │               hostPort: 3005
  32 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'python-service' of Deployment 'python-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 python-service-deployment.yaml:27-32
────────────────────────────────────────
  27 ┌         - image: girikgarg/learningdocker-python_service
  28 │           name: python-service
  29 │           ports:
  30 │             - containerPort: 3005
  31 │               hostPort: 3005
  32 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'python-service' of 'deployment' 'python-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 python-service-deployment.yaml:27-32
────────────────────────────────────────
  27 ┌         - image: girikgarg/learningdocker-python_service
  28 │           name: python-service
  29 │           ports:
  30 │             - containerPort: 3005
  31 │               hostPort: 3005
  32 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'python-service' of Deployment 'python-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 python-service-deployment.yaml:27-32
────────────────────────────────────────
  27 ┌         - image: girikgarg/learningdocker-python_service
  28 │           name: python-service
  29 │           ports:
  30 │             - containerPort: 3005
  31 │               hostPort: 3005
  32 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'python-service' of Deployment 'python-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 python-service-deployment.yaml:27-32
────────────────────────────────────────
  27 ┌         - image: girikgarg/learningdocker-python_service
  28 │           name: python-service
  29 │           ports:
  30 │             - containerPort: 3005
  31 │               hostPort: 3005
  32 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'python-service' of Deployment 'python-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 python-service-deployment.yaml:27-32
────────────────────────────────────────
  27 ┌         - image: girikgarg/learningdocker-python_service
  28 │           name: python-service
  29 │           ports:
  30 │             - containerPort: 3005
  31 │               hostPort: 3005
  32 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'python-service' of Deployment 'python-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 python-service-deployment.yaml:27-32
────────────────────────────────────────
  27 ┌         - image: girikgarg/learningdocker-python_service
  28 │           name: python-service
  29 │           ports:
  30 │             - containerPort: 3005
  31 │               hostPort: 3005
  32 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'python-service' of Deployment 'python-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 python-service-deployment.yaml:27-32
────────────────────────────────────────
  27 ┌         - image: girikgarg/learningdocker-python_service
  28 │           name: python-service
  29 │           ports:
  30 │             - containerPort: 3005
  31 │               hostPort: 3005
  32 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'python-service' of Deployment 'python-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 python-service-deployment.yaml:27-32
────────────────────────────────────────
  27 ┌         - image: girikgarg/learningdocker-python_service
  28 │           name: python-service
  29 │           ports:
  30 │             - containerPort: 3005
  31 │               hostPort: 3005
  32 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'python-service' of Deployment 'python-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 python-service-deployment.yaml:27-32
────────────────────────────────────────
  27 ┌         - image: girikgarg/learningdocker-python_service
  28 │           name: python-service
  29 │           ports:
  30 │             - containerPort: 3005
  31 │               hostPort: 3005
  32 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'python-service' of Deployment 'python-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 python-service-deployment.yaml:27-32
────────────────────────────────────────
  27 ┌         - image: girikgarg/learningdocker-python_service
  28 │           name: python-service
  29 │           ports:
  30 │             - containerPort: 3005
  31 │               hostPort: 3005
  32 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'python-service' of Deployment 'python-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 python-service-deployment.yaml:27-32
────────────────────────────────────────
  27 ┌         - image: girikgarg/learningdocker-python_service
  28 │           name: python-service
  29 │           ports:
  30 │             - containerPort: 3005
  31 │               hostPort: 3005
  32 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'python-service' of Deployment 'python-service' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 python-service-deployment.yaml:27-32
────────────────────────────────────────
  27 ┌         - image: girikgarg/learningdocker-python_service
  28 │           name: python-service
  29 │           ports:
  30 │             - containerPort: 3005
  31 │               hostPort: 3005
  32 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 python-service-deployment.yaml:27-32
────────────────────────────────────────
  27 ┌         - image: girikgarg/learningdocker-python_service
  28 │           name: python-service
  29 │           ports:
  30 │             - containerPort: 3005
  31 │               hostPort: 3005
  32 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "python-service" of deployment "python-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 python-service-deployment.yaml:27-32
────────────────────────────────────────
  27 ┌         - image: girikgarg/learningdocker-python_service
  28 │           name: python-service
  29 │           ports:
  30 │             - containerPort: 3005
  31 │               hostPort: 3005
  32 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 python-service-deployment.yaml:27-32
────────────────────────────────────────
  27 ┌         - image: girikgarg/learningdocker-python_service
  28 │           name: python-service
  29 │           ports:
  30 │             - containerPort: 3005
  31 │               hostPort: 3005
  32 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment python-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 python-service-deployment.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert -f docker-compose-kubernetes.yml
   6 │     kompose.service.type: LoadBalancer
   7 │     kompose.version: 1.32.0 (HEAD)
   8 │   labels:
   9 │     io.kompose.service: python-service
  10 └   name: python-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container python-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-service-deployment.yaml:27-32
────────────────────────────────────────
  27 ┌         - image: girikgarg/learningdocker-python_service
  28 │           name: python-service
  29 │           ports:
  30 │             - containerPort: 3005
  31 │               hostPort: 3005
  32 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment python-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-service-deployment.yaml:26-33
────────────────────────────────────────
  26 ┌       containers:
  27 │         - image: girikgarg/learningdocker-python_service
  28 │           name: python-service
  29 │           ports:
  30 │             - containerPort: 3005
  31 │               hostPort: 3005
  32 │               protocol: TCP
  33 └       restartPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container python-service in deployment python-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 python-service-deployment.yaml:27-32
────────────────────────────────────────
  27 ┌         - image: girikgarg/learningdocker-python_service
  28 │           name: python-service
  29 │           ports:
  30 │             - containerPort: 3005
  31 │               hostPort: 3005
  32 └               protocol: TCP
────────────────────────────────────────



python-to-do.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 95, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'python-to-do' of Deployment 'python-to-do' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 python-to-do.yaml:24-58
────────────────────────────────────────
  24 ┌       - name: python-to-do
  25 │         image: python-to-do:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         env:
  30 │         - name: DD_AGENT_HOST
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'python-to-do' of Deployment 'python-to-do' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 python-to-do.yaml:24-58
────────────────────────────────────────
  24 ┌       - name: python-to-do
  25 │         image: python-to-do:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         env:
  30 │         - name: DD_AGENT_HOST
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'python-to-do' of 'deployment' 'python-to-do' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 python-to-do.yaml:24-58
────────────────────────────────────────
  24 ┌       - name: python-to-do
  25 │         image: python-to-do:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         env:
  30 │         - name: DD_AGENT_HOST
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'python-to-do' of Deployment 'python-to-do' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 python-to-do.yaml:24-58
────────────────────────────────────────
  24 ┌       - name: python-to-do
  25 │         image: python-to-do:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         env:
  30 │         - name: DD_AGENT_HOST
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'python-to-do' of Deployment 'python-to-do' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 python-to-do.yaml:24-58
────────────────────────────────────────
  24 ┌       - name: python-to-do
  25 │         image: python-to-do:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         env:
  30 │         - name: DD_AGENT_HOST
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'python-to-do' of Deployment 'python-to-do' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 python-to-do.yaml:24-58
────────────────────────────────────────
  24 ┌       - name: python-to-do
  25 │         image: python-to-do:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         env:
  30 │         - name: DD_AGENT_HOST
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'python-to-do' of Deployment 'python-to-do' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 python-to-do.yaml:24-58
────────────────────────────────────────
  24 ┌       - name: python-to-do
  25 │         image: python-to-do:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         env:
  30 │         - name: DD_AGENT_HOST
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'python-to-do' of Deployment 'python-to-do' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 python-to-do.yaml:24-58
────────────────────────────────────────
  24 ┌       - name: python-to-do
  25 │         image: python-to-do:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         env:
  30 │         - name: DD_AGENT_HOST
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 python-to-do.yaml:24-58
────────────────────────────────────────
  24 ┌       - name: python-to-do
  25 │         image: python-to-do:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         env:
  30 │         - name: DD_AGENT_HOST
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "python-to-do" of deployment "python-to-do" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 python-to-do.yaml:24-58
────────────────────────────────────────
  24 ┌       - name: python-to-do
  25 │         image: python-to-do:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         env:
  30 │         - name: DD_AGENT_HOST
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 python-to-do.yaml:24-58
────────────────────────────────────────
  24 ┌       - name: python-to-do
  25 │         image: python-to-do:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         env:
  30 │         - name: DD_AGENT_HOST
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment python-to-do in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 python-to-do.yaml:4-8
────────────────────────────────────────
   4 ┌   name: python-to-do
   5 │   labels:
   6 │     tags.datadoghq.com/env: prd
   7 │     tags.datadoghq.com/service: python-to-do
   8 └     tags.datadoghq.com/version: 1.0.2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container python-to-do in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-to-do.yaml:24-58
────────────────────────────────────────
  24 ┌       - name: python-to-do
  25 │         image: python-to-do:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         env:
  30 │         - name: DD_AGENT_HOST
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment python-to-do in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-to-do.yaml:23-58
────────────────────────────────────────
  23 ┌       containers:
  24 │       - name: python-to-do
  25 │         image: python-to-do:latest
  26 │         imagePullPolicy: IfNotPresent
  27 │         ports:
  28 │         - containerPort: 5000
  29 │         env:
  30 │         - name: DD_AGENT_HOST
  31 └           valueFrom:
  ..   
────────────────────────────────────────



python-todo-app_1.yaml (kubernetes)
===================================
Tests: 124 (SUCCESSES: 90, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'check-db' of Deployment 'todo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 python-todo-app_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: check-db
  19 │         image: busybox
  20 │         command:
  21 │         - /bin/sh
  22 │         args:
  23 │         - -c
  24 └         - until nc -z mysql-normal 3306; do echo waiting for DBservice; sleep 5; done;
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'python-todo' of Deployment 'todo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 python-todo-app_1.yaml:26-51
────────────────────────────────────────
  26 ┌       - name: python-todo
  27 │         image: kunchalavikram/python_todo_app:v2
  28 │         ports:
  29 │         - containerPort: 5000
  30 │         imagePullPolicy: IfNotPresent
  31 │         env:
  32 │         - name: DATABASE_URI
  33 │           value: mysql+pymysql://root:root@mysql-normal.default.svc.cluster.local:3306/todo
  34 └         startupProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'check-db' of Deployment 'todo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 python-todo-app_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: check-db
  19 │         image: busybox
  20 │         command:
  21 │         - /bin/sh
  22 │         args:
  23 │         - -c
  24 └         - until nc -z mysql-normal 3306; do echo waiting for DBservice; sleep 5; done;
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'python-todo' of Deployment 'todo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 python-todo-app_1.yaml:26-51
────────────────────────────────────────
  26 ┌       - name: python-todo
  27 │         image: kunchalavikram/python_todo_app:v2
  28 │         ports:
  29 │         - containerPort: 5000
  30 │         imagePullPolicy: IfNotPresent
  31 │         env:
  32 │         - name: DATABASE_URI
  33 │           value: mysql+pymysql://root:root@mysql-normal.default.svc.cluster.local:3306/todo
  34 └         startupProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'check-db' of 'deployment' 'todo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 python-todo-app_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: check-db
  19 │         image: busybox
  20 │         command:
  21 │         - /bin/sh
  22 │         args:
  23 │         - -c
  24 └         - until nc -z mysql-normal 3306; do echo waiting for DBservice; sleep 5; done;
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'python-todo' of 'deployment' 'todo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 python-todo-app_1.yaml:26-51
────────────────────────────────────────
  26 ┌       - name: python-todo
  27 │         image: kunchalavikram/python_todo_app:v2
  28 │         ports:
  29 │         - containerPort: 5000
  30 │         imagePullPolicy: IfNotPresent
  31 │         env:
  32 │         - name: DATABASE_URI
  33 │           value: mysql+pymysql://root:root@mysql-normal.default.svc.cluster.local:3306/todo
  34 └         startupProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'check-db' of Deployment 'todo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 python-todo-app_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: check-db
  19 │         image: busybox
  20 │         command:
  21 │         - /bin/sh
  22 │         args:
  23 │         - -c
  24 └         - until nc -z mysql-normal 3306; do echo waiting for DBservice; sleep 5; done;
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'python-todo' of Deployment 'todo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 python-todo-app_1.yaml:26-51
────────────────────────────────────────
  26 ┌       - name: python-todo
  27 │         image: kunchalavikram/python_todo_app:v2
  28 │         ports:
  29 │         - containerPort: 5000
  30 │         imagePullPolicy: IfNotPresent
  31 │         env:
  32 │         - name: DATABASE_URI
  33 │           value: mysql+pymysql://root:root@mysql-normal.default.svc.cluster.local:3306/todo
  34 └         startupProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'check-db' of Deployment 'todo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 python-todo-app_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: check-db
  19 │         image: busybox
  20 │         command:
  21 │         - /bin/sh
  22 │         args:
  23 │         - -c
  24 └         - until nc -z mysql-normal 3306; do echo waiting for DBservice; sleep 5; done;
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'python-todo' of Deployment 'todo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 python-todo-app_1.yaml:26-51
────────────────────────────────────────
  26 ┌       - name: python-todo
  27 │         image: kunchalavikram/python_todo_app:v2
  28 │         ports:
  29 │         - containerPort: 5000
  30 │         imagePullPolicy: IfNotPresent
  31 │         env:
  32 │         - name: DATABASE_URI
  33 │           value: mysql+pymysql://root:root@mysql-normal.default.svc.cluster.local:3306/todo
  34 └         startupProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'check-db' of Deployment 'todo' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 python-todo-app_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: check-db
  19 │         image: busybox
  20 │         command:
  21 │         - /bin/sh
  22 │         args:
  23 │         - -c
  24 └         - until nc -z mysql-normal 3306; do echo waiting for DBservice; sleep 5; done;
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'check-db' of Deployment 'todo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 python-todo-app_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: check-db
  19 │         image: busybox
  20 │         command:
  21 │         - /bin/sh
  22 │         args:
  23 │         - -c
  24 └         - until nc -z mysql-normal 3306; do echo waiting for DBservice; sleep 5; done;
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'python-todo' of Deployment 'todo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 python-todo-app_1.yaml:26-51
────────────────────────────────────────
  26 ┌       - name: python-todo
  27 │         image: kunchalavikram/python_todo_app:v2
  28 │         ports:
  29 │         - containerPort: 5000
  30 │         imagePullPolicy: IfNotPresent
  31 │         env:
  32 │         - name: DATABASE_URI
  33 │           value: mysql+pymysql://root:root@mysql-normal.default.svc.cluster.local:3306/todo
  34 └         startupProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'check-db' of Deployment 'todo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 python-todo-app_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: check-db
  19 │         image: busybox
  20 │         command:
  21 │         - /bin/sh
  22 │         args:
  23 │         - -c
  24 └         - until nc -z mysql-normal 3306; do echo waiting for DBservice; sleep 5; done;
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'python-todo' of Deployment 'todo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 python-todo-app_1.yaml:26-51
────────────────────────────────────────
  26 ┌       - name: python-todo
  27 │         image: kunchalavikram/python_todo_app:v2
  28 │         ports:
  29 │         - containerPort: 5000
  30 │         imagePullPolicy: IfNotPresent
  31 │         env:
  32 │         - name: DATABASE_URI
  33 │           value: mysql+pymysql://root:root@mysql-normal.default.svc.cluster.local:3306/todo
  34 └         startupProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'check-db' of Deployment 'todo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 python-todo-app_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: check-db
  19 │         image: busybox
  20 │         command:
  21 │         - /bin/sh
  22 │         args:
  23 │         - -c
  24 └         - until nc -z mysql-normal 3306; do echo waiting for DBservice; sleep 5; done;
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'python-todo' of Deployment 'todo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 python-todo-app_1.yaml:26-51
────────────────────────────────────────
  26 ┌       - name: python-todo
  27 │         image: kunchalavikram/python_todo_app:v2
  28 │         ports:
  29 │         - containerPort: 5000
  30 │         imagePullPolicy: IfNotPresent
  31 │         env:
  32 │         - name: DATABASE_URI
  33 │           value: mysql+pymysql://root:root@mysql-normal.default.svc.cluster.local:3306/todo
  34 └         startupProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'check-db' of Deployment 'todo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 python-todo-app_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: check-db
  19 │         image: busybox
  20 │         command:
  21 │         - /bin/sh
  22 │         args:
  23 │         - -c
  24 └         - until nc -z mysql-normal 3306; do echo waiting for DBservice; sleep 5; done;
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'python-todo' of Deployment 'todo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 python-todo-app_1.yaml:26-51
────────────────────────────────────────
  26 ┌       - name: python-todo
  27 │         image: kunchalavikram/python_todo_app:v2
  28 │         ports:
  29 │         - containerPort: 5000
  30 │         imagePullPolicy: IfNotPresent
  31 │         env:
  32 │         - name: DATABASE_URI
  33 │           value: mysql+pymysql://root:root@mysql-normal.default.svc.cluster.local:3306/todo
  34 └         startupProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'check-db' of Deployment 'todo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 python-todo-app_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: check-db
  19 │         image: busybox
  20 │         command:
  21 │         - /bin/sh
  22 │         args:
  23 │         - -c
  24 └         - until nc -z mysql-normal 3306; do echo waiting for DBservice; sleep 5; done;
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'python-todo' of Deployment 'todo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 python-todo-app_1.yaml:26-51
────────────────────────────────────────
  26 ┌       - name: python-todo
  27 │         image: kunchalavikram/python_todo_app:v2
  28 │         ports:
  29 │         - containerPort: 5000
  30 │         imagePullPolicy: IfNotPresent
  31 │         env:
  32 │         - name: DATABASE_URI
  33 │           value: mysql+pymysql://root:root@mysql-normal.default.svc.cluster.local:3306/todo
  34 └         startupProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'check-db' of Deployment 'todo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 python-todo-app_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: check-db
  19 │         image: busybox
  20 │         command:
  21 │         - /bin/sh
  22 │         args:
  23 │         - -c
  24 └         - until nc -z mysql-normal 3306; do echo waiting for DBservice; sleep 5; done;
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'python-todo' of Deployment 'todo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 python-todo-app_1.yaml:26-51
────────────────────────────────────────
  26 ┌       - name: python-todo
  27 │         image: kunchalavikram/python_todo_app:v2
  28 │         ports:
  29 │         - containerPort: 5000
  30 │         imagePullPolicy: IfNotPresent
  31 │         env:
  32 │         - name: DATABASE_URI
  33 │           value: mysql+pymysql://root:root@mysql-normal.default.svc.cluster.local:3306/todo
  34 └         startupProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 python-todo-app_1.yaml:26-51
────────────────────────────────────────
  26 ┌       - name: python-todo
  27 │         image: kunchalavikram/python_todo_app:v2
  28 │         ports:
  29 │         - containerPort: 5000
  30 │         imagePullPolicy: IfNotPresent
  31 │         env:
  32 │         - name: DATABASE_URI
  33 │           value: mysql+pymysql://root:root@mysql-normal.default.svc.cluster.local:3306/todo
  34 └         startupProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 python-todo-app_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: check-db
  19 │         image: busybox
  20 │         command:
  21 │         - /bin/sh
  22 │         args:
  23 │         - -c
  24 └         - until nc -z mysql-normal 3306; do echo waiting for DBservice; sleep 5; done;
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "check-db" of deployment "todo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 python-todo-app_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: check-db
  19 │         image: busybox
  20 │         command:
  21 │         - /bin/sh
  22 │         args:
  23 │         - -c
  24 └         - until nc -z mysql-normal 3306; do echo waiting for DBservice; sleep 5; done;
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "python-todo" of deployment "todo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 python-todo-app_1.yaml:26-51
────────────────────────────────────────
  26 ┌       - name: python-todo
  27 │         image: kunchalavikram/python_todo_app:v2
  28 │         ports:
  29 │         - containerPort: 5000
  30 │         imagePullPolicy: IfNotPresent
  31 │         env:
  32 │         - name: DATABASE_URI
  33 │           value: mysql+pymysql://root:root@mysql-normal.default.svc.cluster.local:3306/todo
  34 └         startupProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 python-todo-app_1.yaml:26-51
────────────────────────────────────────
  26 ┌       - name: python-todo
  27 │         image: kunchalavikram/python_todo_app:v2
  28 │         ports:
  29 │         - containerPort: 5000
  30 │         imagePullPolicy: IfNotPresent
  31 │         env:
  32 │         - name: DATABASE_URI
  33 │           value: mysql+pymysql://root:root@mysql-normal.default.svc.cluster.local:3306/todo
  34 └         startupProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 python-todo-app_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: check-db
  19 │         image: busybox
  20 │         command:
  21 │         - /bin/sh
  22 │         args:
  23 │         - -c
  24 └         - until nc -z mysql-normal 3306; do echo waiting for DBservice; sleep 5; done;
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment todo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 python-todo-app_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: todo
   5 │   labels:
   6 └     app: todo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-todo-app_1.yaml:26-51
────────────────────────────────────────
  26 ┌       - name: python-todo
  27 │         image: kunchalavikram/python_todo_app:v2
  28 │         ports:
  29 │         - containerPort: 5000
  30 │         imagePullPolicy: IfNotPresent
  31 │         env:
  32 │         - name: DATABASE_URI
  33 │           value: mysql+pymysql://root:root@mysql-normal.default.svc.cluster.local:3306/todo
  34 └         startupProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-todo-app_1.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: check-db
  19 │         image: busybox
  20 │         command:
  21 │         - /bin/sh
  22 │         args:
  23 │         - -c
  24 └         - until nc -z mysql-normal 3306; do echo waiting for DBservice; sleep 5; done;
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python-todo-app_1.yaml:17-51
────────────────────────────────────────
  17 ┌       initContainers:
  18 │       - name: check-db
  19 │         image: busybox
  20 │         command:
  21 │         - /bin/sh
  22 │         args:
  23 │         - -c
  24 │         - until nc -z mysql-normal 3306; do echo waiting for DBservice; sleep 5; done;
  25 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container python-todo in deployment todo (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 python-todo-app_1.yaml:26-51
────────────────────────────────────────
  26 ┌       - name: python-todo
  27 │         image: kunchalavikram/python_todo_app:v2
  28 │         ports:
  29 │         - containerPort: 5000
  30 │         imagePullPolicy: IfNotPresent
  31 │         env:
  32 │         - name: DATABASE_URI
  33 │           value: mysql+pymysql://root:root@mysql-normal.default.svc.cluster.local:3306/todo
  34 └         startupProbe:
  ..   
────────────────────────────────────────



python.yaml (kubernetes)
========================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'python' of Deployment 'python-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 python.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'python' of Deployment 'python-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 python.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'python' of 'deployment' 'python-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 python.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'python' of Deployment 'python-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 python.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'python' of Deployment 'python-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 python.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'python' of Deployment 'python-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 python.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'python' of Deployment 'python-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 python.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'python' of Deployment 'python-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 python.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'python' of Deployment 'python-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 python.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'python' of Deployment 'python-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 python.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'python' of Deployment 'python-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 python.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 python.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "python" of deployment "python-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 python.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 python.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment python-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 python.yaml:4-6
────────────────────────────────────────
   4 ┌   name: python-deployment
   5 │   labels:
   6 └     app: python
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment python-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container python-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment python-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



python1.yaml (kubernetes)
=========================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'python' of Deployment 'python-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 python1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'python' of Deployment 'python-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 python1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'python' of 'deployment' 'python-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 python1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'python' of Deployment 'python-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 python1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'python' of Deployment 'python-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 python1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'python' of Deployment 'python-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 python1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'python' of Deployment 'python-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 python1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'python' of Deployment 'python-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 python1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'python' of Deployment 'python-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 python1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'python' of Deployment 'python-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 python1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'python' of Deployment 'python-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 python1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 python1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "python" of deployment "python-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 python1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 python1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment python-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 python1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: python-deployment
   5 │   labels:
   6 └     app: python
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment python-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container python-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment python-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: python
  19 │         image: python:3.12.1-bullseye
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



python_app_deployment.yaml (kubernetes)
=======================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web-app' of Deployment 'python-web-app-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 python_app_deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: web-app
  19 │         image: raghumn/k8s-notes-python-web-app
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web-app' of Deployment 'python-web-app-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 python_app_deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: web-app
  19 │         image: raghumn/k8s-notes-python-web-app
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web-app' of 'deployment' 'python-web-app-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 python_app_deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: web-app
  19 │         image: raghumn/k8s-notes-python-web-app
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web-app' of Deployment 'python-web-app-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 python_app_deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: web-app
  19 │         image: raghumn/k8s-notes-python-web-app
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web-app' of Deployment 'python-web-app-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 python_app_deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: web-app
  19 │         image: raghumn/k8s-notes-python-web-app
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web-app' of Deployment 'python-web-app-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 python_app_deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: web-app
  19 │         image: raghumn/k8s-notes-python-web-app
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web-app' of Deployment 'python-web-app-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 python_app_deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: web-app
  19 │         image: raghumn/k8s-notes-python-web-app
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web-app' of Deployment 'python-web-app-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 python_app_deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: web-app
  19 │         image: raghumn/k8s-notes-python-web-app
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web-app' of Deployment 'python-web-app-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 python_app_deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: web-app
  19 │         image: raghumn/k8s-notes-python-web-app
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web-app' of Deployment 'python-web-app-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 python_app_deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: web-app
  19 │         image: raghumn/k8s-notes-python-web-app
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web-app' of Deployment 'python-web-app-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 python_app_deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: web-app
  19 │         image: raghumn/k8s-notes-python-web-app
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web-app' of Deployment 'python-web-app-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 python_app_deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: web-app
  19 │         image: raghumn/k8s-notes-python-web-app
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 python_app_deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: web-app
  19 │         image: raghumn/k8s-notes-python-web-app
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web-app" of deployment "python-web-app-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 python_app_deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: web-app
  19 │         image: raghumn/k8s-notes-python-web-app
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 python_app_deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: web-app
  19 │         image: raghumn/k8s-notes-python-web-app
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment python-web-app-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 python_app_deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: python-web-app-deployment
   5 │   labels:
   6 └     app: python-web-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container python-web-app-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python_app_deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: web-app
  19 │         image: raghumn/k8s-notes-python-web-app
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment python-web-app-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python_app_deployment.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: web-app
  19 │         image: raghumn/k8s-notes-python-web-app
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web-app in deployment python-web-app-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 python_app_deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: web-app
  19 │         image: raghumn/k8s-notes-python-web-app
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────



python_deployment.yaml (kubernetes)
===================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pythonapp' of Deployment 'pythonapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 python_deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pythonapp
  18 │         image: andrewlozoya/flask-hello-world:latest
  19 │         ports:
  20 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pythonapp' of Deployment 'pythonapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 python_deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pythonapp
  18 │         image: andrewlozoya/flask-hello-world:latest
  19 │         ports:
  20 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pythonapp' of 'deployment' 'pythonapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 python_deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pythonapp
  18 │         image: andrewlozoya/flask-hello-world:latest
  19 │         ports:
  20 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pythonapp' of Deployment 'pythonapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 python_deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pythonapp
  18 │         image: andrewlozoya/flask-hello-world:latest
  19 │         ports:
  20 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pythonapp' of Deployment 'pythonapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 python_deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pythonapp
  18 │         image: andrewlozoya/flask-hello-world:latest
  19 │         ports:
  20 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pythonapp' of Deployment 'pythonapp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 python_deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pythonapp
  18 │         image: andrewlozoya/flask-hello-world:latest
  19 │         ports:
  20 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pythonapp' of Deployment 'pythonapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 python_deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pythonapp
  18 │         image: andrewlozoya/flask-hello-world:latest
  19 │         ports:
  20 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pythonapp' of Deployment 'pythonapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 python_deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pythonapp
  18 │         image: andrewlozoya/flask-hello-world:latest
  19 │         ports:
  20 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pythonapp' of Deployment 'pythonapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 python_deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pythonapp
  18 │         image: andrewlozoya/flask-hello-world:latest
  19 │         ports:
  20 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pythonapp' of Deployment 'pythonapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 python_deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pythonapp
  18 │         image: andrewlozoya/flask-hello-world:latest
  19 │         ports:
  20 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pythonapp' of Deployment 'pythonapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 python_deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pythonapp
  18 │         image: andrewlozoya/flask-hello-world:latest
  19 │         ports:
  20 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pythonapp' of Deployment 'pythonapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 python_deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pythonapp
  18 │         image: andrewlozoya/flask-hello-world:latest
  19 │         ports:
  20 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 python_deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pythonapp
  18 │         image: andrewlozoya/flask-hello-world:latest
  19 │         ports:
  20 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pythonapp" of deployment "pythonapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 python_deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pythonapp
  18 │         image: andrewlozoya/flask-hello-world:latest
  19 │         ports:
  20 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 python_deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pythonapp
  18 │         image: andrewlozoya/flask-hello-world:latest
  19 │         ports:
  20 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment pythonapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 python_deployment.yaml:4
────────────────────────────────────────
   4 [   name: pythonapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pythonapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python_deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pythonapp
  18 │         image: andrewlozoya/flask-hello-world:latest
  19 │         ports:
  20 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pythonapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 python_deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: pythonapp
  18 │         image: andrewlozoya/flask-hello-world:latest
  19 │         ports:
  20 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pythonapp in deployment pythonapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 python_deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: pythonapp
  18 │         image: andrewlozoya/flask-hello-world:latest
  19 │         ports:
  20 └         - containerPort: 5000
────────────────────────────────────────



q06.yaml (kubernetes)
=====================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-pvc' of Pod 'nginx-pvc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q06.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     name: nginx-pvc
   9 │     ports:
  10 │     - containerPort: 80
  11 │     volumeMounts:
  12 │       - mountPath: "/usr/share/nginx/html"
  13 └         name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-pvc' of Pod 'nginx-pvc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q06.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     name: nginx-pvc
   9 │     ports:
  10 │     - containerPort: 80
  11 │     volumeMounts:
  12 │       - mountPath: "/usr/share/nginx/html"
  13 └         name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-pvc' of 'pod' 'nginx-pvc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q06.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     name: nginx-pvc
   9 │     ports:
  10 │     - containerPort: 80
  11 │     volumeMounts:
  12 │       - mountPath: "/usr/share/nginx/html"
  13 └         name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-pvc' of Pod 'nginx-pvc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q06.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     name: nginx-pvc
   9 │     ports:
  10 │     - containerPort: 80
  11 │     volumeMounts:
  12 │       - mountPath: "/usr/share/nginx/html"
  13 └         name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-pvc' of Pod 'nginx-pvc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q06.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     name: nginx-pvc
   9 │     ports:
  10 │     - containerPort: 80
  11 │     volumeMounts:
  12 │       - mountPath: "/usr/share/nginx/html"
  13 └         name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-pvc' of Pod 'nginx-pvc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 q06.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     name: nginx-pvc
   9 │     ports:
  10 │     - containerPort: 80
  11 │     volumeMounts:
  12 │       - mountPath: "/usr/share/nginx/html"
  13 └         name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-pvc' of Pod 'nginx-pvc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q06.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     name: nginx-pvc
   9 │     ports:
  10 │     - containerPort: 80
  11 │     volumeMounts:
  12 │       - mountPath: "/usr/share/nginx/html"
  13 └         name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-pvc' of Pod 'nginx-pvc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q06.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     name: nginx-pvc
   9 │     ports:
  10 │     - containerPort: 80
  11 │     volumeMounts:
  12 │       - mountPath: "/usr/share/nginx/html"
  13 └         name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-pvc' of Pod 'nginx-pvc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q06.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     name: nginx-pvc
   9 │     ports:
  10 │     - containerPort: 80
  11 │     volumeMounts:
  12 │       - mountPath: "/usr/share/nginx/html"
  13 └         name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-pvc' of Pod 'nginx-pvc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q06.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     name: nginx-pvc
   9 │     ports:
  10 │     - containerPort: 80
  11 │     volumeMounts:
  12 │       - mountPath: "/usr/share/nginx/html"
  13 └         name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-pvc' of Pod 'nginx-pvc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q06.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     name: nginx-pvc
   9 │     ports:
  10 │     - containerPort: 80
  11 │     volumeMounts:
  12 │       - mountPath: "/usr/share/nginx/html"
  13 └         name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-pvc' of Pod 'nginx-pvc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q06.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     name: nginx-pvc
   9 │     ports:
  10 │     - containerPort: 80
  11 │     volumeMounts:
  12 │       - mountPath: "/usr/share/nginx/html"
  13 └         name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q06.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     name: nginx-pvc
   9 │     ports:
  10 │     - containerPort: 80
  11 │     volumeMounts:
  12 │       - mountPath: "/usr/share/nginx/html"
  13 └         name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-pvc" of pod "nginx-pvc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q06.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     name: nginx-pvc
   9 │     ports:
  10 │     - containerPort: 80
  11 │     volumeMounts:
  12 │       - mountPath: "/usr/share/nginx/html"
  13 └         name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q06.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     name: nginx-pvc
   9 │     ports:
  10 │     - containerPort: 80
  11 │     volumeMounts:
  12 │       - mountPath: "/usr/share/nginx/html"
  13 └         name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-pvc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 q06.yaml:4
────────────────────────────────────────
   4 [   name: nginx-pvc
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx-pvc in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-pvc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q06.yaml:7-13
────────────────────────────────────────
   7 ┌   - image: nginx
   8 │     name: nginx-pvc
   9 │     ports:
  10 │     - containerPort: 80
  11 │     volumeMounts:
  12 │       - mountPath: "/usr/share/nginx/html"
  13 └         name: task-pv-storage
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-pvc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q06.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: nginx
   8 │     name: nginx-pvc
   9 │     ports:
  10 │     - containerPort: 80
  11 │     volumeMounts:
  12 │       - mountPath: "/usr/share/nginx/html"
  13 │         name: task-pv-storage
  14 └   volumes:
  ..   
────────────────────────────────────────



q1.yaml (kubernetes)
====================
Tests: 109 (SUCCESSES: 93, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busy-time-container' of Pod 'busy-time' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q1.yaml:12-14
────────────────────────────────────────
  12 ┌     - image: nginx:alpine3.18-slim
  13 │       name: busy-time-container
  14 └       resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busy-time-container' of Pod 'busy-time' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q1.yaml:12-14
────────────────────────────────────────
  12 ┌     - image: nginx:alpine3.18-slim
  13 │       name: busy-time-container
  14 └       resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busy-time-container' of 'pod' 'busy-time' in 'busy' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q1.yaml:12-14
────────────────────────────────────────
  12 ┌     - image: nginx:alpine3.18-slim
  13 │       name: busy-time-container
  14 └       resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busy-time-container' of Pod 'busy-time' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q1.yaml:12-14
────────────────────────────────────────
  12 ┌     - image: nginx:alpine3.18-slim
  13 │       name: busy-time-container
  14 └       resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busy-time-container' of Pod 'busy-time' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q1.yaml:12-14
────────────────────────────────────────
  12 ┌     - image: nginx:alpine3.18-slim
  13 │       name: busy-time-container
  14 └       resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busy-time-container' of Pod 'busy-time' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q1.yaml:12-14
────────────────────────────────────────
  12 ┌     - image: nginx:alpine3.18-slim
  13 │       name: busy-time-container
  14 └       resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busy-time-container' of Pod 'busy-time' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q1.yaml:12-14
────────────────────────────────────────
  12 ┌     - image: nginx:alpine3.18-slim
  13 │       name: busy-time-container
  14 └       resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busy-time-container' of Pod 'busy-time' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q1.yaml:12-14
────────────────────────────────────────
  12 ┌     - image: nginx:alpine3.18-slim
  13 │       name: busy-time-container
  14 └       resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busy-time-container' of Pod 'busy-time' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q1.yaml:12-14
────────────────────────────────────────
  12 ┌     - image: nginx:alpine3.18-slim
  13 │       name: busy-time-container
  14 └       resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busy-time-container' of Pod 'busy-time' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q1.yaml:12-14
────────────────────────────────────────
  12 ┌     - image: nginx:alpine3.18-slim
  13 │       name: busy-time-container
  14 └       resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busy-time-container' of Pod 'busy-time' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q1.yaml:12-14
────────────────────────────────────────
  12 ┌     - image: nginx:alpine3.18-slim
  13 │       name: busy-time-container
  14 └       resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q1.yaml:12-14
────────────────────────────────────────
  12 ┌     - image: nginx:alpine3.18-slim
  13 │       name: busy-time-container
  14 └       resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busy-time-container" of pod "busy-time" in "busy" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q1.yaml:12-14
────────────────────────────────────────
  12 ┌     - image: nginx:alpine3.18-slim
  13 │       name: busy-time-container
  14 └       resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q1.yaml:12-14
────────────────────────────────────────
  12 ┌     - image: nginx:alpine3.18-slim
  13 │       name: busy-time-container
  14 └       resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busy-time in busy namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q1.yaml:12-14
────────────────────────────────────────
  12 ┌     - image: nginx:alpine3.18-slim
  13 │       name: busy-time-container
  14 └       resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod busy-time in busy namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q1.yaml:11-21
────────────────────────────────────────
  11 ┌   containers:
  12 │     - image: nginx:alpine3.18-slim
  13 │       name: busy-time-container
  14 │       resources: {}
  15 │   dnsPolicy: ClusterFirst
  16 │   restartPolicy: Always
  17 │   nodeSelector:
  18 │     node-role.kubernetes.io/control-plane: ""
  19 └   tolerations:
  ..   
────────────────────────────────────────



q10_1.yaml (kubernetes)
=======================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web-server' of Pod 'web-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q10_1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: web-server
  11 │     volumeMounts:
  12 │     - mountPath: /usr/share/nginx/html
  13 └       name: my-volume
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web-server' of Pod 'web-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q10_1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: web-server
  11 │     volumeMounts:
  12 │     - mountPath: /usr/share/nginx/html
  13 └       name: my-volume
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web-server' of 'pod' 'web-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q10_1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: web-server
  11 │     volumeMounts:
  12 │     - mountPath: /usr/share/nginx/html
  13 └       name: my-volume
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web-server' of Pod 'web-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q10_1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: web-server
  11 │     volumeMounts:
  12 │     - mountPath: /usr/share/nginx/html
  13 └       name: my-volume
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web-server' of Pod 'web-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q10_1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: web-server
  11 │     volumeMounts:
  12 │     - mountPath: /usr/share/nginx/html
  13 └       name: my-volume
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'web-server' of Pod 'web-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 q10_1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: web-server
  11 │     volumeMounts:
  12 │     - mountPath: /usr/share/nginx/html
  13 └       name: my-volume
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web-server' of Pod 'web-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q10_1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: web-server
  11 │     volumeMounts:
  12 │     - mountPath: /usr/share/nginx/html
  13 └       name: my-volume
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web-server' of Pod 'web-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q10_1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: web-server
  11 │     volumeMounts:
  12 │     - mountPath: /usr/share/nginx/html
  13 └       name: my-volume
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web-server' of Pod 'web-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q10_1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: web-server
  11 │     volumeMounts:
  12 │     - mountPath: /usr/share/nginx/html
  13 └       name: my-volume
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web-server' of Pod 'web-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q10_1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: web-server
  11 │     volumeMounts:
  12 │     - mountPath: /usr/share/nginx/html
  13 └       name: my-volume
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web-server' of Pod 'web-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q10_1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: web-server
  11 │     volumeMounts:
  12 │     - mountPath: /usr/share/nginx/html
  13 └       name: my-volume
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web-server' of Pod 'web-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q10_1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: web-server
  11 │     volumeMounts:
  12 │     - mountPath: /usr/share/nginx/html
  13 └       name: my-volume
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q10_1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: web-server
  11 │     volumeMounts:
  12 │     - mountPath: /usr/share/nginx/html
  13 └       name: my-volume
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web-server" of pod "web-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q10_1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: web-server
  11 │     volumeMounts:
  12 │     - mountPath: /usr/share/nginx/html
  13 └       name: my-volume
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q10_1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: web-server
  11 │     volumeMounts:
  12 │     - mountPath: /usr/share/nginx/html
  13 └       name: my-volume
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod web-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 q10_1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: web-server
   6 └   name: web-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q10_1.yaml:9-13
────────────────────────────────────────
   9 ┌   - image: nginx
  10 │     name: web-server
  11 │     volumeMounts:
  12 │     - mountPath: /usr/share/nginx/html
  13 └       name: my-volume
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod web-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q10_1.yaml:8-17
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: nginx
  10 │     name: web-server
  11 │     volumeMounts:
  12 │     - mountPath: /usr/share/nginx/html
  13 │       name: my-volume
  14 │   volumes:
  15 │   - name: my-volume
  16 │     persistentVolumeClaim:
  17 └       claimName: pv-volume
────────────────────────────────────────



q11.yaml (kubernetes)
=====================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-web-server' of Pod 'nginx-web-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q11.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-web-server
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-web-server' of Pod 'nginx-web-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q11.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-web-server
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-web-server' of 'pod' 'nginx-web-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q11.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-web-server
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-web-server' of Pod 'nginx-web-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q11.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-web-server
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-web-server' of Pod 'nginx-web-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q11.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-web-server
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-web-server' of Pod 'nginx-web-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 q11.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-web-server
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-web-server' of Pod 'nginx-web-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q11.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-web-server
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-web-server' of Pod 'nginx-web-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q11.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-web-server
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-web-server' of Pod 'nginx-web-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q11.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-web-server
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-web-server' of Pod 'nginx-web-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q11.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-web-server
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-web-server' of Pod 'nginx-web-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q11.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-web-server
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-web-server' of Pod 'nginx-web-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q11.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-web-server
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q11.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-web-server
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-web-server" of pod "nginx-web-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q11.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-web-server
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q11.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-web-server
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-web-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 q11.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     run: nginx-web-server
   7 └   name: nginx-web-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-web-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q11.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx
  11 │     name: nginx-web-server
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-web-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q11.yaml:9-14
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: nginx
  11 │     name: nginx-web-server
  12 │     resources: {}
  13 │   dnsPolicy: ClusterFirst
  14 └   restartPolicy: Always
────────────────────────────────────────



q12.yaml (kubernetes)
=====================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'non-persistent-redis' of Pod 'non-persistent-redis' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q12.yaml:8-12
────────────────────────────────────────
   8 ┌   - image: redis
   9 │     name: non-persistent-redis
  10 │     volumeMounts:
  11 │     - mountPath: /data/redis
  12 └       name: cache-control
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'non-persistent-redis' of Pod 'non-persistent-redis' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q12.yaml:8-12
────────────────────────────────────────
   8 ┌   - image: redis
   9 │     name: non-persistent-redis
  10 │     volumeMounts:
  11 │     - mountPath: /data/redis
  12 └       name: cache-control
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'non-persistent-redis' of 'pod' 'non-persistent-redis' in 'staging' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q12.yaml:8-12
────────────────────────────────────────
   8 ┌   - image: redis
   9 │     name: non-persistent-redis
  10 │     volumeMounts:
  11 │     - mountPath: /data/redis
  12 └       name: cache-control
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'non-persistent-redis' of Pod 'non-persistent-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q12.yaml:8-12
────────────────────────────────────────
   8 ┌   - image: redis
   9 │     name: non-persistent-redis
  10 │     volumeMounts:
  11 │     - mountPath: /data/redis
  12 └       name: cache-control
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'non-persistent-redis' of Pod 'non-persistent-redis' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q12.yaml:8-12
────────────────────────────────────────
   8 ┌   - image: redis
   9 │     name: non-persistent-redis
  10 │     volumeMounts:
  11 │     - mountPath: /data/redis
  12 └       name: cache-control
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'non-persistent-redis' of Pod 'non-persistent-redis' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 q12.yaml:8-12
────────────────────────────────────────
   8 ┌   - image: redis
   9 │     name: non-persistent-redis
  10 │     volumeMounts:
  11 │     - mountPath: /data/redis
  12 └       name: cache-control
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'non-persistent-redis' of Pod 'non-persistent-redis' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q12.yaml:8-12
────────────────────────────────────────
   8 ┌   - image: redis
   9 │     name: non-persistent-redis
  10 │     volumeMounts:
  11 │     - mountPath: /data/redis
  12 └       name: cache-control
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'non-persistent-redis' of Pod 'non-persistent-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q12.yaml:8-12
────────────────────────────────────────
   8 ┌   - image: redis
   9 │     name: non-persistent-redis
  10 │     volumeMounts:
  11 │     - mountPath: /data/redis
  12 └       name: cache-control
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'non-persistent-redis' of Pod 'non-persistent-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q12.yaml:8-12
────────────────────────────────────────
   8 ┌   - image: redis
   9 │     name: non-persistent-redis
  10 │     volumeMounts:
  11 │     - mountPath: /data/redis
  12 └       name: cache-control
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'non-persistent-redis' of Pod 'non-persistent-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q12.yaml:8-12
────────────────────────────────────────
   8 ┌   - image: redis
   9 │     name: non-persistent-redis
  10 │     volumeMounts:
  11 │     - mountPath: /data/redis
  12 └       name: cache-control
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'non-persistent-redis' of Pod 'non-persistent-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q12.yaml:8-12
────────────────────────────────────────
   8 ┌   - image: redis
   9 │     name: non-persistent-redis
  10 │     volumeMounts:
  11 │     - mountPath: /data/redis
  12 └       name: cache-control
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'non-persistent-redis' of Pod 'non-persistent-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q12.yaml:8-12
────────────────────────────────────────
   8 ┌   - image: redis
   9 │     name: non-persistent-redis
  10 │     volumeMounts:
  11 │     - mountPath: /data/redis
  12 └       name: cache-control
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q12.yaml:8-12
────────────────────────────────────────
   8 ┌   - image: redis
   9 │     name: non-persistent-redis
  10 │     volumeMounts:
  11 │     - mountPath: /data/redis
  12 └       name: cache-control
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "non-persistent-redis" of pod "non-persistent-redis" in "staging" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q12.yaml:8-12
────────────────────────────────────────
   8 ┌   - image: redis
   9 │     name: non-persistent-redis
  10 │     volumeMounts:
  11 │     - mountPath: /data/redis
  12 └       name: cache-control
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q12.yaml:8-12
────────────────────────────────────────
   8 ┌   - image: redis
   9 │     name: non-persistent-redis
  10 │     volumeMounts:
  11 │     - mountPath: /data/redis
  12 └       name: cache-control
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container non-persistent-redis in staging namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q12.yaml:8-12
────────────────────────────────────────
   8 ┌   - image: redis
   9 │     name: non-persistent-redis
  10 │     volumeMounts:
  11 │     - mountPath: /data/redis
  12 └       name: cache-control
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod non-persistent-redis in staging namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q12.yaml:7-15
────────────────────────────────────────
   7 ┌   containers:
   8 │   - image: redis
   9 │     name: non-persistent-redis
  10 │     volumeMounts:
  11 │     - mountPath: /data/redis
  12 │       name: cache-control
  13 │   volumes:
  14 │   - name: cache-control
  15 └     emptyDir: {}
────────────────────────────────────────



q19.yaml (kubernetes)
=====================
Tests: 125 (SUCCESSES: 91, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'big-corp-app' of Pod 'big-corp-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q19.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: big-corp-app
   8 │     image: busybox
   9 │     args:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - >
  13 │       i =0;
  14 │       while true:
  15 └       do
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sidecar' of Pod 'big-corp-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q19.yaml:23-28
────────────────────────────────────────
  23 ┌   - name: sidecar
  24 │     image: busybox
  25 │     args: [/bin/sh, -c, 'tail -n+1 -f /var/log/big-corp-app.log']
  26 │     volumeMounts:
  27 │     - name: logs
  28 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'big-corp-app' of Pod 'big-corp-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q19.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: big-corp-app
   8 │     image: busybox
   9 │     args:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - >
  13 │       i =0;
  14 │       while true:
  15 └       do
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sidecar' of Pod 'big-corp-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q19.yaml:23-28
────────────────────────────────────────
  23 ┌   - name: sidecar
  24 │     image: busybox
  25 │     args: [/bin/sh, -c, 'tail -n+1 -f /var/log/big-corp-app.log']
  26 │     volumeMounts:
  27 │     - name: logs
  28 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'big-corp-app' of 'pod' 'big-corp-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q19.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: big-corp-app
   8 │     image: busybox
   9 │     args:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - >
  13 │       i =0;
  14 │       while true:
  15 └       do
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sidecar' of 'pod' 'big-corp-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q19.yaml:23-28
────────────────────────────────────────
  23 ┌   - name: sidecar
  24 │     image: busybox
  25 │     args: [/bin/sh, -c, 'tail -n+1 -f /var/log/big-corp-app.log']
  26 │     volumeMounts:
  27 │     - name: logs
  28 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'big-corp-app' of Pod 'big-corp-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q19.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: big-corp-app
   8 │     image: busybox
   9 │     args:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - >
  13 │       i =0;
  14 │       while true:
  15 └       do
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sidecar' of Pod 'big-corp-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q19.yaml:23-28
────────────────────────────────────────
  23 ┌   - name: sidecar
  24 │     image: busybox
  25 │     args: [/bin/sh, -c, 'tail -n+1 -f /var/log/big-corp-app.log']
  26 │     volumeMounts:
  27 │     - name: logs
  28 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'big-corp-app' of Pod 'big-corp-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q19.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: big-corp-app
   8 │     image: busybox
   9 │     args:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - >
  13 │       i =0;
  14 │       while true:
  15 └       do
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sidecar' of Pod 'big-corp-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q19.yaml:23-28
────────────────────────────────────────
  23 ┌   - name: sidecar
  24 │     image: busybox
  25 │     args: [/bin/sh, -c, 'tail -n+1 -f /var/log/big-corp-app.log']
  26 │     volumeMounts:
  27 │     - name: logs
  28 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'big-corp-app' of Pod 'big-corp-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 q19.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: big-corp-app
   8 │     image: busybox
   9 │     args:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - >
  13 │       i =0;
  14 │       while true:
  15 └       do
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sidecar' of Pod 'big-corp-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 q19.yaml:23-28
────────────────────────────────────────
  23 ┌   - name: sidecar
  24 │     image: busybox
  25 │     args: [/bin/sh, -c, 'tail -n+1 -f /var/log/big-corp-app.log']
  26 │     volumeMounts:
  27 │     - name: logs
  28 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'big-corp-app' of Pod 'big-corp-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q19.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: big-corp-app
   8 │     image: busybox
   9 │     args:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - >
  13 │       i =0;
  14 │       while true:
  15 └       do
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sidecar' of Pod 'big-corp-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q19.yaml:23-28
────────────────────────────────────────
  23 ┌   - name: sidecar
  24 │     image: busybox
  25 │     args: [/bin/sh, -c, 'tail -n+1 -f /var/log/big-corp-app.log']
  26 │     volumeMounts:
  27 │     - name: logs
  28 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'big-corp-app' of Pod 'big-corp-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q19.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: big-corp-app
   8 │     image: busybox
   9 │     args:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - >
  13 │       i =0;
  14 │       while true:
  15 └       do
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sidecar' of Pod 'big-corp-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q19.yaml:23-28
────────────────────────────────────────
  23 ┌   - name: sidecar
  24 │     image: busybox
  25 │     args: [/bin/sh, -c, 'tail -n+1 -f /var/log/big-corp-app.log']
  26 │     volumeMounts:
  27 │     - name: logs
  28 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'big-corp-app' of Pod 'big-corp-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q19.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: big-corp-app
   8 │     image: busybox
   9 │     args:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - >
  13 │       i =0;
  14 │       while true:
  15 └       do
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sidecar' of Pod 'big-corp-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q19.yaml:23-28
────────────────────────────────────────
  23 ┌   - name: sidecar
  24 │     image: busybox
  25 │     args: [/bin/sh, -c, 'tail -n+1 -f /var/log/big-corp-app.log']
  26 │     volumeMounts:
  27 │     - name: logs
  28 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'big-corp-app' of Pod 'big-corp-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q19.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: big-corp-app
   8 │     image: busybox
   9 │     args:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - >
  13 │       i =0;
  14 │       while true:
  15 └       do
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sidecar' of Pod 'big-corp-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q19.yaml:23-28
────────────────────────────────────────
  23 ┌   - name: sidecar
  24 │     image: busybox
  25 │     args: [/bin/sh, -c, 'tail -n+1 -f /var/log/big-corp-app.log']
  26 │     volumeMounts:
  27 │     - name: logs
  28 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'big-corp-app' of Pod 'big-corp-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q19.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: big-corp-app
   8 │     image: busybox
   9 │     args:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - >
  13 │       i =0;
  14 │       while true:
  15 └       do
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sidecar' of Pod 'big-corp-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q19.yaml:23-28
────────────────────────────────────────
  23 ┌   - name: sidecar
  24 │     image: busybox
  25 │     args: [/bin/sh, -c, 'tail -n+1 -f /var/log/big-corp-app.log']
  26 │     volumeMounts:
  27 │     - name: logs
  28 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'big-corp-app' of Pod 'big-corp-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q19.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: big-corp-app
   8 │     image: busybox
   9 │     args:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - >
  13 │       i =0;
  14 │       while true:
  15 └       do
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sidecar' of Pod 'big-corp-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q19.yaml:23-28
────────────────────────────────────────
  23 ┌   - name: sidecar
  24 │     image: busybox
  25 │     args: [/bin/sh, -c, 'tail -n+1 -f /var/log/big-corp-app.log']
  26 │     volumeMounts:
  27 │     - name: logs
  28 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q19.yaml:23-28
────────────────────────────────────────
  23 ┌   - name: sidecar
  24 │     image: busybox
  25 │     args: [/bin/sh, -c, 'tail -n+1 -f /var/log/big-corp-app.log']
  26 │     volumeMounts:
  27 │     - name: logs
  28 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q19.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: big-corp-app
   8 │     image: busybox
   9 │     args:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - >
  13 │       i =0;
  14 │       while true:
  15 └       do
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "big-corp-app" of pod "big-corp-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q19.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: big-corp-app
   8 │     image: busybox
   9 │     args:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - >
  13 │       i =0;
  14 │       while true:
  15 └       do
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sidecar" of pod "big-corp-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q19.yaml:23-28
────────────────────────────────────────
  23 ┌   - name: sidecar
  24 │     image: busybox
  25 │     args: [/bin/sh, -c, 'tail -n+1 -f /var/log/big-corp-app.log']
  26 │     volumeMounts:
  27 │     - name: logs
  28 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q19.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: big-corp-app
   8 │     image: busybox
   9 │     args:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - >
  13 │       i =0;
  14 │       while true:
  15 └       do
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q19.yaml:23-28
────────────────────────────────────────
  23 ┌   - name: sidecar
  24 │     image: busybox
  25 │     args: [/bin/sh, -c, 'tail -n+1 -f /var/log/big-corp-app.log']
  26 │     volumeMounts:
  27 │     - name: logs
  28 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod big-corp-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 q19.yaml:4
────────────────────────────────────────
   4 [   name: big-corp-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container big-corp-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q19.yaml:7-22
────────────────────────────────────────
   7 ┌   - name: big-corp-app
   8 │     image: busybox
   9 │     args:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - >
  13 │       i =0;
  14 │       while true:
  15 └       do
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container big-corp-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q19.yaml:23-28
────────────────────────────────────────
  23 ┌   - name: sidecar
  24 │     image: busybox
  25 │     args: [/bin/sh, -c, 'tail -n+1 -f /var/log/big-corp-app.log']
  26 │     volumeMounts:
  27 │     - name: logs
  28 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod big-corp-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q19.yaml:6-31
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: big-corp-app
   8 │     image: busybox
   9 │     args:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - >
  13 │       i =0;
  14 └       while true:
  ..   
────────────────────────────────────────



q20-2.yaml (kubernetes)
=======================
Tests: 125 (SUCCESSES: 90, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 21, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'multi-container' of Pod 'multi-cont-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q20-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: multi-container
   9 │     command: ['sh', '-c', "while true; do echo 'Hi I am from Main container' >> /var/log/index.html; sleep 5; done"]
  10 │     volumeMounts:
  11 │     - name: varlog
  12 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sidecar-container' of Pod 'multi-cont-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q20-2.yaml:13-19
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: sidecar-container
  15 │     ports:
  16 │     - containerPort: 80
  17 │     volumeMounts:
  18 │     - name: varlog
  19 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'multi-container' of Pod 'multi-cont-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q20-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: multi-container
   9 │     command: ['sh', '-c', "while true; do echo 'Hi I am from Main container' >> /var/log/index.html; sleep 5; done"]
  10 │     volumeMounts:
  11 │     - name: varlog
  12 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sidecar-container' of Pod 'multi-cont-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q20-2.yaml:13-19
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: sidecar-container
  15 │     ports:
  16 │     - containerPort: 80
  17 │     volumeMounts:
  18 │     - name: varlog
  19 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'multi-container' of 'pod' 'multi-cont-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q20-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: multi-container
   9 │     command: ['sh', '-c', "while true; do echo 'Hi I am from Main container' >> /var/log/index.html; sleep 5; done"]
  10 │     volumeMounts:
  11 │     - name: varlog
  12 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sidecar-container' of 'pod' 'multi-cont-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q20-2.yaml:13-19
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: sidecar-container
  15 │     ports:
  16 │     - containerPort: 80
  17 │     volumeMounts:
  18 │     - name: varlog
  19 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'multi-container' of Pod 'multi-cont-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q20-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: multi-container
   9 │     command: ['sh', '-c', "while true; do echo 'Hi I am from Main container' >> /var/log/index.html; sleep 5; done"]
  10 │     volumeMounts:
  11 │     - name: varlog
  12 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sidecar-container' of Pod 'multi-cont-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q20-2.yaml:13-19
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: sidecar-container
  15 │     ports:
  16 │     - containerPort: 80
  17 │     volumeMounts:
  18 │     - name: varlog
  19 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'multi-container' of Pod 'multi-cont-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q20-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: multi-container
   9 │     command: ['sh', '-c', "while true; do echo 'Hi I am from Main container' >> /var/log/index.html; sleep 5; done"]
  10 │     volumeMounts:
  11 │     - name: varlog
  12 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sidecar-container' of Pod 'multi-cont-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q20-2.yaml:13-19
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: sidecar-container
  15 │     ports:
  16 │     - containerPort: 80
  17 │     volumeMounts:
  18 │     - name: varlog
  19 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'multi-container' of Pod 'multi-cont-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 q20-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: multi-container
   9 │     command: ['sh', '-c', "while true; do echo 'Hi I am from Main container' >> /var/log/index.html; sleep 5; done"]
  10 │     volumeMounts:
  11 │     - name: varlog
  12 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sidecar-container' of Pod 'multi-cont-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 q20-2.yaml:13-19
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: sidecar-container
  15 │     ports:
  16 │     - containerPort: 80
  17 │     volumeMounts:
  18 │     - name: varlog
  19 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'multi-container' of Pod 'multi-cont-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q20-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: multi-container
   9 │     command: ['sh', '-c', "while true; do echo 'Hi I am from Main container' >> /var/log/index.html; sleep 5; done"]
  10 │     volumeMounts:
  11 │     - name: varlog
  12 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sidecar-container' of Pod 'multi-cont-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q20-2.yaml:13-19
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: sidecar-container
  15 │     ports:
  16 │     - containerPort: 80
  17 │     volumeMounts:
  18 │     - name: varlog
  19 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'multi-container' of Pod 'multi-cont-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q20-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: multi-container
   9 │     command: ['sh', '-c', "while true; do echo 'Hi I am from Main container' >> /var/log/index.html; sleep 5; done"]
  10 │     volumeMounts:
  11 │     - name: varlog
  12 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sidecar-container' of Pod 'multi-cont-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q20-2.yaml:13-19
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: sidecar-container
  15 │     ports:
  16 │     - containerPort: 80
  17 │     volumeMounts:
  18 │     - name: varlog
  19 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'multi-container' of Pod 'multi-cont-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q20-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: multi-container
   9 │     command: ['sh', '-c', "while true; do echo 'Hi I am from Main container' >> /var/log/index.html; sleep 5; done"]
  10 │     volumeMounts:
  11 │     - name: varlog
  12 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sidecar-container' of Pod 'multi-cont-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q20-2.yaml:13-19
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: sidecar-container
  15 │     ports:
  16 │     - containerPort: 80
  17 │     volumeMounts:
  18 │     - name: varlog
  19 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'multi-container' of Pod 'multi-cont-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q20-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: multi-container
   9 │     command: ['sh', '-c', "while true; do echo 'Hi I am from Main container' >> /var/log/index.html; sleep 5; done"]
  10 │     volumeMounts:
  11 │     - name: varlog
  12 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sidecar-container' of Pod 'multi-cont-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q20-2.yaml:13-19
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: sidecar-container
  15 │     ports:
  16 │     - containerPort: 80
  17 │     volumeMounts:
  18 │     - name: varlog
  19 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'multi-container' of Pod 'multi-cont-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q20-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: multi-container
   9 │     command: ['sh', '-c', "while true; do echo 'Hi I am from Main container' >> /var/log/index.html; sleep 5; done"]
  10 │     volumeMounts:
  11 │     - name: varlog
  12 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sidecar-container' of Pod 'multi-cont-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q20-2.yaml:13-19
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: sidecar-container
  15 │     ports:
  16 │     - containerPort: 80
  17 │     volumeMounts:
  18 │     - name: varlog
  19 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'multi-container' of Pod 'multi-cont-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q20-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: multi-container
   9 │     command: ['sh', '-c', "while true; do echo 'Hi I am from Main container' >> /var/log/index.html; sleep 5; done"]
  10 │     volumeMounts:
  11 │     - name: varlog
  12 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sidecar-container' of Pod 'multi-cont-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q20-2.yaml:13-19
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: sidecar-container
  15 │     ports:
  16 │     - containerPort: 80
  17 │     volumeMounts:
  18 │     - name: varlog
  19 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q20-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: multi-container
   9 │     command: ['sh', '-c', "while true; do echo 'Hi I am from Main container' >> /var/log/index.html; sleep 5; done"]
  10 │     volumeMounts:
  11 │     - name: varlog
  12 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q20-2.yaml:13-19
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: sidecar-container
  15 │     ports:
  16 │     - containerPort: 80
  17 │     volumeMounts:
  18 │     - name: varlog
  19 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "multi-container" of pod "multi-cont-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q20-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: multi-container
   9 │     command: ['sh', '-c', "while true; do echo 'Hi I am from Main container' >> /var/log/index.html; sleep 5; done"]
  10 │     volumeMounts:
  11 │     - name: varlog
  12 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sidecar-container" of pod "multi-cont-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q20-2.yaml:13-19
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: sidecar-container
  15 │     ports:
  16 │     - containerPort: 80
  17 │     volumeMounts:
  18 │     - name: varlog
  19 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q20-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: multi-container
   9 │     command: ['sh', '-c', "while true; do echo 'Hi I am from Main container' >> /var/log/index.html; sleep 5; done"]
  10 │     volumeMounts:
  11 │     - name: varlog
  12 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q20-2.yaml:13-19
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: sidecar-container
  15 │     ports:
  16 │     - containerPort: 80
  17 │     volumeMounts:
  18 │     - name: varlog
  19 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod multi-cont-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 q20-2.yaml:4
────────────────────────────────────────
   4 [   name: multi-cont-pod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod multi-cont-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container multi-cont-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q20-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     name: multi-container
   9 │     command: ['sh', '-c', "while true; do echo 'Hi I am from Main container' >> /var/log/index.html; sleep 5; done"]
  10 │     volumeMounts:
  11 │     - name: varlog
  12 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container multi-cont-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q20-2.yaml:13-19
────────────────────────────────────────
  13 ┌   - image: nginx
  14 │     name: sidecar-container
  15 │     ports:
  16 │     - containerPort: 80
  17 │     volumeMounts:
  18 │     - name: varlog
  19 └       mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod multi-cont-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q20-2.yaml:6-23
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: busybox
   8 │     name: multi-container
   9 │     command: ['sh', '-c', "while true; do echo 'Hi I am from Main container' >> /var/log/index.html; sleep 5; done"]
  10 │     volumeMounts:
  11 │     - name: varlog
  12 │       mountPath: /var/log
  13 │   - image: nginx
  14 └     name: sidecar-container
  ..   
────────────────────────────────────────



q20.yaml (kubernetes)
=====================
Tests: 141 (SUCCESSES: 91, FAILURES: 50)
Failures: 50 (UNKNOWN: 0, LOW: 31, MEDIUM: 12, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox-container1' of Pod 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q20.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: busybox-container1
  11 │     command: ['sh', '-c', 'ls; sleep 3600']
  12 │     volumeMounts:
  13 │     - name: echolog
  14 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'busybox-container2' of Pod 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q20.yaml:15-20
────────────────────────────────────────
  15 ┌   - image: busybox
  16 │     name: busybox-container2
  17 │     command: ['sh', '-c', 'echo Hello World; sleep 3600;']
  18 │     volumeMounts:
  19 │     - name: echolog
  20 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'busybox-container3' of Pod 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q20.yaml:21-26
────────────────────────────────────────
  21 ┌   - image: busybox
  22 │     name: busybox-container3
  23 │     command: ['sh', '-c', 'echo this is the third container; sleep 3600']
  24 │     volumeMounts:
  25 │     - name: echolog
  26 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox-container1' of Pod 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q20.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: busybox-container1
  11 │     command: ['sh', '-c', 'ls; sleep 3600']
  12 │     volumeMounts:
  13 │     - name: echolog
  14 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox-container2' of Pod 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q20.yaml:15-20
────────────────────────────────────────
  15 ┌   - image: busybox
  16 │     name: busybox-container2
  17 │     command: ['sh', '-c', 'echo Hello World; sleep 3600;']
  18 │     volumeMounts:
  19 │     - name: echolog
  20 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox-container3' of Pod 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q20.yaml:21-26
────────────────────────────────────────
  21 ┌   - image: busybox
  22 │     name: busybox-container3
  23 │     command: ['sh', '-c', 'echo this is the third container; sleep 3600']
  24 │     volumeMounts:
  25 │     - name: echolog
  26 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox-container1' of 'pod' 'busybox' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q20.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: busybox-container1
  11 │     command: ['sh', '-c', 'ls; sleep 3600']
  12 │     volumeMounts:
  13 │     - name: echolog
  14 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox-container2' of 'pod' 'busybox' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q20.yaml:15-20
────────────────────────────────────────
  15 ┌   - image: busybox
  16 │     name: busybox-container2
  17 │     command: ['sh', '-c', 'echo Hello World; sleep 3600;']
  18 │     volumeMounts:
  19 │     - name: echolog
  20 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox-container3' of 'pod' 'busybox' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q20.yaml:21-26
────────────────────────────────────────
  21 ┌   - image: busybox
  22 │     name: busybox-container3
  23 │     command: ['sh', '-c', 'echo this is the third container; sleep 3600']
  24 │     volumeMounts:
  25 │     - name: echolog
  26 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox-container1' of Pod 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q20.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: busybox-container1
  11 │     command: ['sh', '-c', 'ls; sleep 3600']
  12 │     volumeMounts:
  13 │     - name: echolog
  14 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox-container2' of Pod 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q20.yaml:15-20
────────────────────────────────────────
  15 ┌   - image: busybox
  16 │     name: busybox-container2
  17 │     command: ['sh', '-c', 'echo Hello World; sleep 3600;']
  18 │     volumeMounts:
  19 │     - name: echolog
  20 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox-container3' of Pod 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q20.yaml:21-26
────────────────────────────────────────
  21 ┌   - image: busybox
  22 │     name: busybox-container3
  23 │     command: ['sh', '-c', 'echo this is the third container; sleep 3600']
  24 │     volumeMounts:
  25 │     - name: echolog
  26 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox-container1' of Pod 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q20.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: busybox-container1
  11 │     command: ['sh', '-c', 'ls; sleep 3600']
  12 │     volumeMounts:
  13 │     - name: echolog
  14 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox-container2' of Pod 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q20.yaml:15-20
────────────────────────────────────────
  15 ┌   - image: busybox
  16 │     name: busybox-container2
  17 │     command: ['sh', '-c', 'echo Hello World; sleep 3600;']
  18 │     volumeMounts:
  19 │     - name: echolog
  20 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox-container3' of Pod 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q20.yaml:21-26
────────────────────────────────────────
  21 ┌   - image: busybox
  22 │     name: busybox-container3
  23 │     command: ['sh', '-c', 'echo this is the third container; sleep 3600']
  24 │     volumeMounts:
  25 │     - name: echolog
  26 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox-container1' of Pod 'busybox' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 q20.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: busybox-container1
  11 │     command: ['sh', '-c', 'ls; sleep 3600']
  12 │     volumeMounts:
  13 │     - name: echolog
  14 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox-container2' of Pod 'busybox' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 q20.yaml:15-20
────────────────────────────────────────
  15 ┌   - image: busybox
  16 │     name: busybox-container2
  17 │     command: ['sh', '-c', 'echo Hello World; sleep 3600;']
  18 │     volumeMounts:
  19 │     - name: echolog
  20 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox-container3' of Pod 'busybox' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 q20.yaml:21-26
────────────────────────────────────────
  21 ┌   - image: busybox
  22 │     name: busybox-container3
  23 │     command: ['sh', '-c', 'echo this is the third container; sleep 3600']
  24 │     volumeMounts:
  25 │     - name: echolog
  26 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox-container1' of Pod 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q20.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: busybox-container1
  11 │     command: ['sh', '-c', 'ls; sleep 3600']
  12 │     volumeMounts:
  13 │     - name: echolog
  14 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox-container2' of Pod 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q20.yaml:15-20
────────────────────────────────────────
  15 ┌   - image: busybox
  16 │     name: busybox-container2
  17 │     command: ['sh', '-c', 'echo Hello World; sleep 3600;']
  18 │     volumeMounts:
  19 │     - name: echolog
  20 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox-container3' of Pod 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q20.yaml:21-26
────────────────────────────────────────
  21 ┌   - image: busybox
  22 │     name: busybox-container3
  23 │     command: ['sh', '-c', 'echo this is the third container; sleep 3600']
  24 │     volumeMounts:
  25 │     - name: echolog
  26 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox-container1' of Pod 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q20.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: busybox-container1
  11 │     command: ['sh', '-c', 'ls; sleep 3600']
  12 │     volumeMounts:
  13 │     - name: echolog
  14 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox-container2' of Pod 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q20.yaml:15-20
────────────────────────────────────────
  15 ┌   - image: busybox
  16 │     name: busybox-container2
  17 │     command: ['sh', '-c', 'echo Hello World; sleep 3600;']
  18 │     volumeMounts:
  19 │     - name: echolog
  20 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox-container3' of Pod 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q20.yaml:21-26
────────────────────────────────────────
  21 ┌   - image: busybox
  22 │     name: busybox-container3
  23 │     command: ['sh', '-c', 'echo this is the third container; sleep 3600']
  24 │     volumeMounts:
  25 │     - name: echolog
  26 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox-container1' of Pod 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q20.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: busybox-container1
  11 │     command: ['sh', '-c', 'ls; sleep 3600']
  12 │     volumeMounts:
  13 │     - name: echolog
  14 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox-container2' of Pod 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q20.yaml:15-20
────────────────────────────────────────
  15 ┌   - image: busybox
  16 │     name: busybox-container2
  17 │     command: ['sh', '-c', 'echo Hello World; sleep 3600;']
  18 │     volumeMounts:
  19 │     - name: echolog
  20 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox-container3' of Pod 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q20.yaml:21-26
────────────────────────────────────────
  21 ┌   - image: busybox
  22 │     name: busybox-container3
  23 │     command: ['sh', '-c', 'echo this is the third container; sleep 3600']
  24 │     volumeMounts:
  25 │     - name: echolog
  26 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox-container1' of Pod 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q20.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: busybox-container1
  11 │     command: ['sh', '-c', 'ls; sleep 3600']
  12 │     volumeMounts:
  13 │     - name: echolog
  14 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox-container2' of Pod 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q20.yaml:15-20
────────────────────────────────────────
  15 ┌   - image: busybox
  16 │     name: busybox-container2
  17 │     command: ['sh', '-c', 'echo Hello World; sleep 3600;']
  18 │     volumeMounts:
  19 │     - name: echolog
  20 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox-container3' of Pod 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q20.yaml:21-26
────────────────────────────────────────
  21 ┌   - image: busybox
  22 │     name: busybox-container3
  23 │     command: ['sh', '-c', 'echo this is the third container; sleep 3600']
  24 │     volumeMounts:
  25 │     - name: echolog
  26 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox-container1' of Pod 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q20.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: busybox-container1
  11 │     command: ['sh', '-c', 'ls; sleep 3600']
  12 │     volumeMounts:
  13 │     - name: echolog
  14 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox-container2' of Pod 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q20.yaml:15-20
────────────────────────────────────────
  15 ┌   - image: busybox
  16 │     name: busybox-container2
  17 │     command: ['sh', '-c', 'echo Hello World; sleep 3600;']
  18 │     volumeMounts:
  19 │     - name: echolog
  20 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox-container3' of Pod 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q20.yaml:21-26
────────────────────────────────────────
  21 ┌   - image: busybox
  22 │     name: busybox-container3
  23 │     command: ['sh', '-c', 'echo this is the third container; sleep 3600']
  24 │     volumeMounts:
  25 │     - name: echolog
  26 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox-container1' of Pod 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q20.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: busybox-container1
  11 │     command: ['sh', '-c', 'ls; sleep 3600']
  12 │     volumeMounts:
  13 │     - name: echolog
  14 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox-container2' of Pod 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q20.yaml:15-20
────────────────────────────────────────
  15 ┌   - image: busybox
  16 │     name: busybox-container2
  17 │     command: ['sh', '-c', 'echo Hello World; sleep 3600;']
  18 │     volumeMounts:
  19 │     - name: echolog
  20 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox-container3' of Pod 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q20.yaml:21-26
────────────────────────────────────────
  21 ┌   - image: busybox
  22 │     name: busybox-container3
  23 │     command: ['sh', '-c', 'echo this is the third container; sleep 3600']
  24 │     volumeMounts:
  25 │     - name: echolog
  26 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q20.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: busybox-container1
  11 │     command: ['sh', '-c', 'ls; sleep 3600']
  12 │     volumeMounts:
  13 │     - name: echolog
  14 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q20.yaml:15-20
────────────────────────────────────────
  15 ┌   - image: busybox
  16 │     name: busybox-container2
  17 │     command: ['sh', '-c', 'echo Hello World; sleep 3600;']
  18 │     volumeMounts:
  19 │     - name: echolog
  20 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q20.yaml:21-26
────────────────────────────────────────
  21 ┌   - image: busybox
  22 │     name: busybox-container3
  23 │     command: ['sh', '-c', 'echo this is the third container; sleep 3600']
  24 │     volumeMounts:
  25 │     - name: echolog
  26 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox-container1" of pod "busybox" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q20.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: busybox-container1
  11 │     command: ['sh', '-c', 'ls; sleep 3600']
  12 │     volumeMounts:
  13 │     - name: echolog
  14 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox-container2" of pod "busybox" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q20.yaml:15-20
────────────────────────────────────────
  15 ┌   - image: busybox
  16 │     name: busybox-container2
  17 │     command: ['sh', '-c', 'echo Hello World; sleep 3600;']
  18 │     volumeMounts:
  19 │     - name: echolog
  20 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox-container3" of pod "busybox" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q20.yaml:21-26
────────────────────────────────────────
  21 ┌   - image: busybox
  22 │     name: busybox-container3
  23 │     command: ['sh', '-c', 'echo this is the third container; sleep 3600']
  24 │     volumeMounts:
  25 │     - name: echolog
  26 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q20.yaml:15-20
────────────────────────────────────────
  15 ┌   - image: busybox
  16 │     name: busybox-container2
  17 │     command: ['sh', '-c', 'echo Hello World; sleep 3600;']
  18 │     volumeMounts:
  19 │     - name: echolog
  20 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q20.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: busybox-container1
  11 │     command: ['sh', '-c', 'ls; sleep 3600']
  12 │     volumeMounts:
  13 │     - name: echolog
  14 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q20.yaml:21-26
────────────────────────────────────────
  21 ┌   - image: busybox
  22 │     name: busybox-container3
  23 │     command: ['sh', '-c', 'echo this is the third container; sleep 3600']
  24 │     volumeMounts:
  25 │     - name: echolog
  26 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod busybox in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 q20.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: busybox
   6 └   name: busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q20.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: busybox
  10 │     name: busybox-container1
  11 │     command: ['sh', '-c', 'ls; sleep 3600']
  12 │     volumeMounts:
  13 │     - name: echolog
  14 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q20.yaml:15-20
────────────────────────────────────────
  15 ┌   - image: busybox
  16 │     name: busybox-container2
  17 │     command: ['sh', '-c', 'echo Hello World; sleep 3600;']
  18 │     volumeMounts:
  19 │     - name: echolog
  20 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q20.yaml:21-26
────────────────────────────────────────
  21 ┌   - image: busybox
  22 │     name: busybox-container3
  23 │     command: ['sh', '-c', 'echo this is the third container; sleep 3600']
  24 │     volumeMounts:
  25 │     - name: echolog
  26 └       mountPath: /var/log
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod busybox in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q20.yaml:8-30
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: busybox
  10 │     name: busybox-container1
  11 │     command: ['sh', '-c', 'ls; sleep 3600']
  12 │     volumeMounts:
  13 │     - name: echolog
  14 │       mountPath: /var/log
  15 │   - image: busybox
  16 └     name: busybox-container2
  ..   
────────────────────────────────────────



q25.yaml (kubernetes)
=====================
Tests: 141 (SUCCESSES: 91, FAILURES: 50)
Failures: 50 (UNKNOWN: 0, LOW: 31, MEDIUM: 12, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'memcached' of Pod 'kucc8' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q25.yaml:13-14
────────────────────────────────────────
  13 ┌   - image : memcached
  14 └     name: memcached
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'kucc8' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q25.yaml:9-10
────────────────────────────────────────
   9 ┌   - image: nginx
  10 └     name: nginx
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'redis' of Pod 'kucc8' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q25.yaml:11-12
────────────────────────────────────────
  11 ┌   - image: redis
  12 └     name: redis
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'memcached' of Pod 'kucc8' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q25.yaml:13-14
────────────────────────────────────────
  13 ┌   - image : memcached
  14 └     name: memcached
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'kucc8' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q25.yaml:9-10
────────────────────────────────────────
   9 ┌   - image: nginx
  10 └     name: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Pod 'kucc8' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q25.yaml:11-12
────────────────────────────────────────
  11 ┌   - image: redis
  12 └     name: redis
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'memcached' of 'pod' 'kucc8' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q25.yaml:13-14
────────────────────────────────────────
  13 ┌   - image : memcached
  14 └     name: memcached
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'kucc8' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q25.yaml:9-10
────────────────────────────────────────
   9 ┌   - image: nginx
  10 └     name: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'pod' 'kucc8' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q25.yaml:11-12
────────────────────────────────────────
  11 ┌   - image: redis
  12 └     name: redis
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'memcached' of Pod 'kucc8' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q25.yaml:13-14
────────────────────────────────────────
  13 ┌   - image : memcached
  14 └     name: memcached
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'kucc8' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q25.yaml:9-10
────────────────────────────────────────
   9 ┌   - image: nginx
  10 └     name: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'redis' of Pod 'kucc8' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q25.yaml:11-12
────────────────────────────────────────
  11 ┌   - image: redis
  12 └     name: redis
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'memcached' of Pod 'kucc8' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q25.yaml:13-14
────────────────────────────────────────
  13 ┌   - image : memcached
  14 └     name: memcached
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'kucc8' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q25.yaml:9-10
────────────────────────────────────────
   9 ┌   - image: nginx
  10 └     name: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Pod 'kucc8' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q25.yaml:11-12
────────────────────────────────────────
  11 ┌   - image: redis
  12 └     name: redis
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'memcached' of Pod 'kucc8' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 q25.yaml:13-14
────────────────────────────────────────
  13 ┌   - image : memcached
  14 └     name: memcached
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'kucc8' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 q25.yaml:9-10
────────────────────────────────────────
   9 ┌   - image: nginx
  10 └     name: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'redis' of Pod 'kucc8' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 q25.yaml:11-12
────────────────────────────────────────
  11 ┌   - image: redis
  12 └     name: redis
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'memcached' of Pod 'kucc8' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q25.yaml:13-14
────────────────────────────────────────
  13 ┌   - image : memcached
  14 └     name: memcached
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'kucc8' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q25.yaml:9-10
────────────────────────────────────────
   9 ┌   - image: nginx
  10 └     name: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Pod 'kucc8' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q25.yaml:11-12
────────────────────────────────────────
  11 ┌   - image: redis
  12 └     name: redis
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'memcached' of Pod 'kucc8' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q25.yaml:13-14
────────────────────────────────────────
  13 ┌   - image : memcached
  14 └     name: memcached
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'kucc8' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q25.yaml:9-10
────────────────────────────────────────
   9 ┌   - image: nginx
  10 └     name: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Pod 'kucc8' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q25.yaml:11-12
────────────────────────────────────────
  11 ┌   - image: redis
  12 └     name: redis
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'memcached' of Pod 'kucc8' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q25.yaml:13-14
────────────────────────────────────────
  13 ┌   - image : memcached
  14 └     name: memcached
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'kucc8' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q25.yaml:9-10
────────────────────────────────────────
   9 ┌   - image: nginx
  10 └     name: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Pod 'kucc8' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q25.yaml:11-12
────────────────────────────────────────
  11 ┌   - image: redis
  12 └     name: redis
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'memcached' of Pod 'kucc8' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q25.yaml:13-14
────────────────────────────────────────
  13 ┌   - image : memcached
  14 └     name: memcached
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'kucc8' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q25.yaml:9-10
────────────────────────────────────────
   9 ┌   - image: nginx
  10 └     name: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Pod 'kucc8' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q25.yaml:11-12
────────────────────────────────────────
  11 ┌   - image: redis
  12 └     name: redis
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'memcached' of Pod 'kucc8' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q25.yaml:13-14
────────────────────────────────────────
  13 ┌   - image : memcached
  14 └     name: memcached
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'kucc8' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q25.yaml:9-10
────────────────────────────────────────
   9 ┌   - image: nginx
  10 └     name: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Pod 'kucc8' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q25.yaml:11-12
────────────────────────────────────────
  11 ┌   - image: redis
  12 └     name: redis
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'memcached' of Pod 'kucc8' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q25.yaml:13-14
────────────────────────────────────────
  13 ┌   - image : memcached
  14 └     name: memcached
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'kucc8' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q25.yaml:9-10
────────────────────────────────────────
   9 ┌   - image: nginx
  10 └     name: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Pod 'kucc8' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q25.yaml:11-12
────────────────────────────────────────
  11 ┌   - image: redis
  12 └     name: redis
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q25.yaml:9-10
────────────────────────────────────────
   9 ┌   - image: nginx
  10 └     name: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q25.yaml:11-12
────────────────────────────────────────
  11 ┌   - image: redis
  12 └     name: redis
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q25.yaml:13-14
────────────────────────────────────────
  13 ┌   - image : memcached
  14 └     name: memcached
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "memcached" of pod "kucc8" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q25.yaml:13-14
────────────────────────────────────────
  13 ┌   - image : memcached
  14 └     name: memcached
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "kucc8" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q25.yaml:9-10
────────────────────────────────────────
   9 ┌   - image: nginx
  10 └     name: nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of pod "kucc8" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q25.yaml:11-12
────────────────────────────────────────
  11 ┌   - image: redis
  12 └     name: redis
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q25.yaml:11-12
────────────────────────────────────────
  11 ┌   - image: redis
  12 └     name: redis
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q25.yaml:9-10
────────────────────────────────────────
   9 ┌   - image: nginx
  10 └     name: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q25.yaml:13-14
────────────────────────────────────────
  13 ┌   - image : memcached
  14 └     name: memcached
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod kucc8 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 q25.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     run: kucc8
   6 └   name: kucc8
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kucc8 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q25.yaml:11-12
────────────────────────────────────────
  11 ┌   - image: redis
  12 └     name: redis
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kucc8 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q25.yaml:9-10
────────────────────────────────────────
   9 ┌   - image: nginx
  10 └     name: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kucc8 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q25.yaml:13-14
────────────────────────────────────────
  13 ┌   - image : memcached
  14 └     name: memcached
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod kucc8 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q25.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: nginx
  10 │     name: nginx
  11 │   - image: redis
  12 │     name: redis
  13 │   - image : memcached
  14 └     name: memcached
────────────────────────────────────────



q26.yaml (kubernetes)
=====================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'kual00201' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q26.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'kual00201' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q26.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'kual00201' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q26.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'kual00201' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q26.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'kual00201' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q26.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'kual00201' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 q26.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'kual00201' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q26.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'kual00201' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q26.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'kual00201' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q26.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'kual00201' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q26.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'kual00201' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q26.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'kual00201' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q26.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q26.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "kual00201" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q26.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q26.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment kual00201 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 q26.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app_runtime_stage: dev
   6 └   name: kual00201
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kual00201 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q26.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: nginx
  20 └         name: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kual00201 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q26.yaml:18-20
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: nginx
  20 └         name: nginx
────────────────────────────────────────



q31.yaml (kubernetes)
=====================
Tests: 109 (SUCCESSES: 93, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'neb-new-job-container' of Job 'neb-new-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q31.yaml:33-45
────────────────────────────────────────
  33 ┌       - command:
  34 │ 
  35 │         - sh
  36 │ 
  37 │         - -c
  38 │ 
  39 │         - sleep 2 && echo done
  40 │ 
  41 └         image: busybox:1.31.0
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'neb-new-job-container' of Job 'neb-new-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q31.yaml:33-45
────────────────────────────────────────
  33 ┌       - command:
  34 │ 
  35 │         - sh
  36 │ 
  37 │         - -c
  38 │ 
  39 │         - sleep 2 && echo done
  40 │ 
  41 └         image: busybox:1.31.0
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'neb-new-job-container' of 'job' 'neb-new-job' in 'ckad-practice' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q31.yaml:33-45
────────────────────────────────────────
  33 ┌       - command:
  34 │ 
  35 │         - sh
  36 │ 
  37 │         - -c
  38 │ 
  39 │         - sleep 2 && echo done
  40 │ 
  41 └         image: busybox:1.31.0
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'neb-new-job-container' of Job 'neb-new-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q31.yaml:33-45
────────────────────────────────────────
  33 ┌       - command:
  34 │ 
  35 │         - sh
  36 │ 
  37 │         - -c
  38 │ 
  39 │         - sleep 2 && echo done
  40 │ 
  41 └         image: busybox:1.31.0
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'neb-new-job-container' of Job 'neb-new-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q31.yaml:33-45
────────────────────────────────────────
  33 ┌       - command:
  34 │ 
  35 │         - sh
  36 │ 
  37 │         - -c
  38 │ 
  39 │         - sleep 2 && echo done
  40 │ 
  41 └         image: busybox:1.31.0
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'neb-new-job-container' of Job 'neb-new-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q31.yaml:33-45
────────────────────────────────────────
  33 ┌       - command:
  34 │ 
  35 │         - sh
  36 │ 
  37 │         - -c
  38 │ 
  39 │         - sleep 2 && echo done
  40 │ 
  41 └         image: busybox:1.31.0
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'neb-new-job-container' of Job 'neb-new-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q31.yaml:33-45
────────────────────────────────────────
  33 ┌       - command:
  34 │ 
  35 │         - sh
  36 │ 
  37 │         - -c
  38 │ 
  39 │         - sleep 2 && echo done
  40 │ 
  41 └         image: busybox:1.31.0
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'neb-new-job-container' of Job 'neb-new-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q31.yaml:33-45
────────────────────────────────────────
  33 ┌       - command:
  34 │ 
  35 │         - sh
  36 │ 
  37 │         - -c
  38 │ 
  39 │         - sleep 2 && echo done
  40 │ 
  41 └         image: busybox:1.31.0
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'neb-new-job-container' of Job 'neb-new-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q31.yaml:33-45
────────────────────────────────────────
  33 ┌       - command:
  34 │ 
  35 │         - sh
  36 │ 
  37 │         - -c
  38 │ 
  39 │         - sleep 2 && echo done
  40 │ 
  41 └         image: busybox:1.31.0
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'neb-new-job-container' of Job 'neb-new-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q31.yaml:33-45
────────────────────────────────────────
  33 ┌       - command:
  34 │ 
  35 │         - sh
  36 │ 
  37 │         - -c
  38 │ 
  39 │         - sleep 2 && echo done
  40 │ 
  41 └         image: busybox:1.31.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'neb-new-job-container' of Job 'neb-new-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q31.yaml:33-45
────────────────────────────────────────
  33 ┌       - command:
  34 │ 
  35 │         - sh
  36 │ 
  37 │         - -c
  38 │ 
  39 │         - sleep 2 && echo done
  40 │ 
  41 └         image: busybox:1.31.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q31.yaml:33-45
────────────────────────────────────────
  33 ┌       - command:
  34 │ 
  35 │         - sh
  36 │ 
  37 │         - -c
  38 │ 
  39 │         - sleep 2 && echo done
  40 │ 
  41 └         image: busybox:1.31.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "neb-new-job-container" of job "neb-new-job" in "ckad-practice" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q31.yaml:33-45
────────────────────────────────────────
  33 ┌       - command:
  34 │ 
  35 │         - sh
  36 │ 
  37 │         - -c
  38 │ 
  39 │         - sleep 2 && echo done
  40 │ 
  41 └         image: busybox:1.31.0
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q31.yaml:33-45
────────────────────────────────────────
  33 ┌       - command:
  34 │ 
  35 │         - sh
  36 │ 
  37 │         - -c
  38 │ 
  39 │         - sleep 2 && echo done
  40 │ 
  41 └         image: busybox:1.31.0
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container neb-new-job in ckad-practice namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q31.yaml:33-45
────────────────────────────────────────
  33 ┌       - command:
  34 │ 
  35 │         - sh
  36 │ 
  37 │         - -c
  38 │ 
  39 │         - sleep 2 && echo done
  40 │ 
  41 └         image: busybox:1.31.0
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job neb-new-job in ckad-practice namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q31.yaml:31-47
────────────────────────────────────────
  31 ┌       containers:
  32 │ 
  33 │       - command:
  34 │ 
  35 │         - sh
  36 │ 
  37 │         - -c
  38 │ 
  39 └         - sleep 2 && echo done
  ..   
────────────────────────────────────────



q32.yaml (kubernetes)
=====================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-kusc00401' of Pod 'nginx-kusc00401' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q32.yaml:12-14
────────────────────────────────────────
  12 ┌   - image: nginx
  13 │     name: nginx-kusc00401
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-kusc00401' of Pod 'nginx-kusc00401' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q32.yaml:12-14
────────────────────────────────────────
  12 ┌   - image: nginx
  13 │     name: nginx-kusc00401
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-kusc00401' of 'pod' 'nginx-kusc00401' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q32.yaml:12-14
────────────────────────────────────────
  12 ┌   - image: nginx
  13 │     name: nginx-kusc00401
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-kusc00401' of Pod 'nginx-kusc00401' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q32.yaml:12-14
────────────────────────────────────────
  12 ┌   - image: nginx
  13 │     name: nginx-kusc00401
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-kusc00401' of Pod 'nginx-kusc00401' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q32.yaml:12-14
────────────────────────────────────────
  12 ┌   - image: nginx
  13 │     name: nginx-kusc00401
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-kusc00401' of Pod 'nginx-kusc00401' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 q32.yaml:12-14
────────────────────────────────────────
  12 ┌   - image: nginx
  13 │     name: nginx-kusc00401
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-kusc00401' of Pod 'nginx-kusc00401' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q32.yaml:12-14
────────────────────────────────────────
  12 ┌   - image: nginx
  13 │     name: nginx-kusc00401
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-kusc00401' of Pod 'nginx-kusc00401' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q32.yaml:12-14
────────────────────────────────────────
  12 ┌   - image: nginx
  13 │     name: nginx-kusc00401
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-kusc00401' of Pod 'nginx-kusc00401' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q32.yaml:12-14
────────────────────────────────────────
  12 ┌   - image: nginx
  13 │     name: nginx-kusc00401
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-kusc00401' of Pod 'nginx-kusc00401' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q32.yaml:12-14
────────────────────────────────────────
  12 ┌   - image: nginx
  13 │     name: nginx-kusc00401
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-kusc00401' of Pod 'nginx-kusc00401' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q32.yaml:12-14
────────────────────────────────────────
  12 ┌   - image: nginx
  13 │     name: nginx-kusc00401
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-kusc00401' of Pod 'nginx-kusc00401' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q32.yaml:12-14
────────────────────────────────────────
  12 ┌   - image: nginx
  13 │     name: nginx-kusc00401
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q32.yaml:12-14
────────────────────────────────────────
  12 ┌   - image: nginx
  13 │     name: nginx-kusc00401
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-kusc00401" of pod "nginx-kusc00401" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q32.yaml:12-14
────────────────────────────────────────
  12 ┌   - image: nginx
  13 │     name: nginx-kusc00401
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q32.yaml:12-14
────────────────────────────────────────
  12 ┌   - image: nginx
  13 │     name: nginx-kusc00401
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-kusc00401 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 q32.yaml:4-7
────────────────────────────────────────
   4 ┌   creationTimestamp: null
   5 │   labels:
   6 │     run: nginx-kusc00401
   7 └   name: nginx-kusc00401
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-kusc00401 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q32.yaml:12-14
────────────────────────────────────────
  12 ┌   - image: nginx
  13 │     name: nginx-kusc00401
  14 └     resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-kusc00401 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q32.yaml:9-16
────────────────────────────────────────
   9 ┌   nodeSelector: 
  10 │     disk: spinning
  11 │   containers:
  12 │   - image: nginx
  13 │     name: nginx-kusc00401
  14 │     resources: {}
  15 │   dnsPolicy: ClusterFirst
  16 └   restartPolicy: Always
────────────────────────────────────────



q50-1.yaml (kubernetes)
=======================
Tests: 125 (SUCCESSES: 91, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'checker' of Pod 'hungry-bear' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q50-1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: alpine
  10 │     name: checker
  11 │     command: ['sh', '-c', 'echo "The app is running!" > /workdir/calm.txt && sleep 3']
  12 │     volumeMounts:
  13 │     - name: workdir
  14 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'create' of Pod 'hungry-bear' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q50-1.yaml:16-21
────────────────────────────────────────
  16 ┌   - name: create
  17 │     image: alpine
  18 │     command: ['sh', '-c', '/workdir/calm.txt']
  19 │     volumeMounts:
  20 │     - name: workdir
  21 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'checker' of Pod 'hungry-bear' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q50-1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: alpine
  10 │     name: checker
  11 │     command: ['sh', '-c', 'echo "The app is running!" > /workdir/calm.txt && sleep 3']
  12 │     volumeMounts:
  13 │     - name: workdir
  14 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'create' of Pod 'hungry-bear' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q50-1.yaml:16-21
────────────────────────────────────────
  16 ┌   - name: create
  17 │     image: alpine
  18 │     command: ['sh', '-c', '/workdir/calm.txt']
  19 │     volumeMounts:
  20 │     - name: workdir
  21 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'checker' of 'pod' 'hungry-bear' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q50-1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: alpine
  10 │     name: checker
  11 │     command: ['sh', '-c', 'echo "The app is running!" > /workdir/calm.txt && sleep 3']
  12 │     volumeMounts:
  13 │     - name: workdir
  14 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'pod' 'hungry-bear' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q50-1.yaml:16-21
────────────────────────────────────────
  16 ┌   - name: create
  17 │     image: alpine
  18 │     command: ['sh', '-c', '/workdir/calm.txt']
  19 │     volumeMounts:
  20 │     - name: workdir
  21 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'checker' of Pod 'hungry-bear' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q50-1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: alpine
  10 │     name: checker
  11 │     command: ['sh', '-c', 'echo "The app is running!" > /workdir/calm.txt && sleep 3']
  12 │     volumeMounts:
  13 │     - name: workdir
  14 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Pod 'hungry-bear' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q50-1.yaml:16-21
────────────────────────────────────────
  16 ┌   - name: create
  17 │     image: alpine
  18 │     command: ['sh', '-c', '/workdir/calm.txt']
  19 │     volumeMounts:
  20 │     - name: workdir
  21 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'checker' of Pod 'hungry-bear' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q50-1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: alpine
  10 │     name: checker
  11 │     command: ['sh', '-c', 'echo "The app is running!" > /workdir/calm.txt && sleep 3']
  12 │     volumeMounts:
  13 │     - name: workdir
  14 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'create' of Pod 'hungry-bear' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q50-1.yaml:16-21
────────────────────────────────────────
  16 ┌   - name: create
  17 │     image: alpine
  18 │     command: ['sh', '-c', '/workdir/calm.txt']
  19 │     volumeMounts:
  20 │     - name: workdir
  21 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'checker' of Pod 'hungry-bear' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 q50-1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: alpine
  10 │     name: checker
  11 │     command: ['sh', '-c', 'echo "The app is running!" > /workdir/calm.txt && sleep 3']
  12 │     volumeMounts:
  13 │     - name: workdir
  14 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'create' of Pod 'hungry-bear' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 q50-1.yaml:16-21
────────────────────────────────────────
  16 ┌   - name: create
  17 │     image: alpine
  18 │     command: ['sh', '-c', '/workdir/calm.txt']
  19 │     volumeMounts:
  20 │     - name: workdir
  21 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'checker' of Pod 'hungry-bear' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q50-1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: alpine
  10 │     name: checker
  11 │     command: ['sh', '-c', 'echo "The app is running!" > /workdir/calm.txt && sleep 3']
  12 │     volumeMounts:
  13 │     - name: workdir
  14 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Pod 'hungry-bear' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q50-1.yaml:16-21
────────────────────────────────────────
  16 ┌   - name: create
  17 │     image: alpine
  18 │     command: ['sh', '-c', '/workdir/calm.txt']
  19 │     volumeMounts:
  20 │     - name: workdir
  21 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'checker' of Pod 'hungry-bear' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q50-1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: alpine
  10 │     name: checker
  11 │     command: ['sh', '-c', 'echo "The app is running!" > /workdir/calm.txt && sleep 3']
  12 │     volumeMounts:
  13 │     - name: workdir
  14 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Pod 'hungry-bear' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q50-1.yaml:16-21
────────────────────────────────────────
  16 ┌   - name: create
  17 │     image: alpine
  18 │     command: ['sh', '-c', '/workdir/calm.txt']
  19 │     volumeMounts:
  20 │     - name: workdir
  21 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'checker' of Pod 'hungry-bear' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q50-1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: alpine
  10 │     name: checker
  11 │     command: ['sh', '-c', 'echo "The app is running!" > /workdir/calm.txt && sleep 3']
  12 │     volumeMounts:
  13 │     - name: workdir
  14 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Pod 'hungry-bear' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q50-1.yaml:16-21
────────────────────────────────────────
  16 ┌   - name: create
  17 │     image: alpine
  18 │     command: ['sh', '-c', '/workdir/calm.txt']
  19 │     volumeMounts:
  20 │     - name: workdir
  21 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'checker' of Pod 'hungry-bear' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q50-1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: alpine
  10 │     name: checker
  11 │     command: ['sh', '-c', 'echo "The app is running!" > /workdir/calm.txt && sleep 3']
  12 │     volumeMounts:
  13 │     - name: workdir
  14 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Pod 'hungry-bear' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q50-1.yaml:16-21
────────────────────────────────────────
  16 ┌   - name: create
  17 │     image: alpine
  18 │     command: ['sh', '-c', '/workdir/calm.txt']
  19 │     volumeMounts:
  20 │     - name: workdir
  21 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'checker' of Pod 'hungry-bear' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q50-1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: alpine
  10 │     name: checker
  11 │     command: ['sh', '-c', 'echo "The app is running!" > /workdir/calm.txt && sleep 3']
  12 │     volumeMounts:
  13 │     - name: workdir
  14 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Pod 'hungry-bear' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q50-1.yaml:16-21
────────────────────────────────────────
  16 ┌   - name: create
  17 │     image: alpine
  18 │     command: ['sh', '-c', '/workdir/calm.txt']
  19 │     volumeMounts:
  20 │     - name: workdir
  21 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'checker' of Pod 'hungry-bear' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q50-1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: alpine
  10 │     name: checker
  11 │     command: ['sh', '-c', 'echo "The app is running!" > /workdir/calm.txt && sleep 3']
  12 │     volumeMounts:
  13 │     - name: workdir
  14 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Pod 'hungry-bear' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q50-1.yaml:16-21
────────────────────────────────────────
  16 ┌   - name: create
  17 │     image: alpine
  18 │     command: ['sh', '-c', '/workdir/calm.txt']
  19 │     volumeMounts:
  20 │     - name: workdir
  21 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q50-1.yaml:16-21
────────────────────────────────────────
  16 ┌   - name: create
  17 │     image: alpine
  18 │     command: ['sh', '-c', '/workdir/calm.txt']
  19 │     volumeMounts:
  20 │     - name: workdir
  21 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q50-1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: alpine
  10 │     name: checker
  11 │     command: ['sh', '-c', 'echo "The app is running!" > /workdir/calm.txt && sleep 3']
  12 │     volumeMounts:
  13 │     - name: workdir
  14 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "checker" of pod "hungry-bear" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q50-1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: alpine
  10 │     name: checker
  11 │     command: ['sh', '-c', 'echo "The app is running!" > /workdir/calm.txt && sleep 3']
  12 │     volumeMounts:
  13 │     - name: workdir
  14 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of pod "hungry-bear" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q50-1.yaml:16-21
────────────────────────────────────────
  16 ┌   - name: create
  17 │     image: alpine
  18 │     command: ['sh', '-c', '/workdir/calm.txt']
  19 │     volumeMounts:
  20 │     - name: workdir
  21 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q50-1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: alpine
  10 │     name: checker
  11 │     command: ['sh', '-c', 'echo "The app is running!" > /workdir/calm.txt && sleep 3']
  12 │     volumeMounts:
  13 │     - name: workdir
  14 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q50-1.yaml:16-21
────────────────────────────────────────
  16 ┌   - name: create
  17 │     image: alpine
  18 │     command: ['sh', '-c', '/workdir/calm.txt']
  19 │     volumeMounts:
  20 │     - name: workdir
  21 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod hungry-bear in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 q50-1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: myapp
   6 └   name: hungry-bear
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hungry-bear in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q50-1.yaml:9-14
────────────────────────────────────────
   9 ┌   - image: alpine
  10 │     name: checker
  11 │     command: ['sh', '-c', 'echo "The app is running!" > /workdir/calm.txt && sleep 3']
  12 │     volumeMounts:
  13 │     - name: workdir
  14 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hungry-bear in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q50-1.yaml:16-21
────────────────────────────────────────
  16 ┌   - name: create
  17 │     image: alpine
  18 │     command: ['sh', '-c', '/workdir/calm.txt']
  19 │     volumeMounts:
  20 │     - name: workdir
  21 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod hungry-bear in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q50-1.yaml:8-24
────────────────────────────────────────
   8 ┌   containers:
   9 │   - image: alpine
  10 │     name: checker
  11 │     command: ['sh', '-c', 'echo "The app is running!" > /workdir/calm.txt && sleep 3']
  12 │     volumeMounts:
  13 │     - name: workdir
  14 │       mountPath: /workdir
  15 │   initContainers:
  16 └   - name: create
  ..   
────────────────────────────────────────



q50-2.yaml (kubernetes)
=======================
Tests: 125 (SUCCESSES: 91, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-container' of Pod 'init-cont-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q50-2.yaml:14-19
────────────────────────────────────────
  14 ┌   - image: alpine
  15 │     name: init-container
  16 │     args: [/bin/sh, -c, 'touch /workdir/test.txt']
  17 │     volumeMounts:
  18 │     - name: initvolume
  19 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'main-container' of Pod 'init-cont-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q50-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     name: main-container
   9 │     args: [/bin/sh, -c, 'if [ -f /workdir/test.txt ]; then echo "the app is running!" > /workdir/test.txt && sleep 9999; fi']
  10 │     volumeMounts:
  11 │     - name: initvolume
  12 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-container' of Pod 'init-cont-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q50-2.yaml:14-19
────────────────────────────────────────
  14 ┌   - image: alpine
  15 │     name: init-container
  16 │     args: [/bin/sh, -c, 'touch /workdir/test.txt']
  17 │     volumeMounts:
  18 │     - name: initvolume
  19 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main-container' of Pod 'init-cont-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q50-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     name: main-container
   9 │     args: [/bin/sh, -c, 'if [ -f /workdir/test.txt ]; then echo "the app is running!" > /workdir/test.txt && sleep 9999; fi']
  10 │     volumeMounts:
  11 │     - name: initvolume
  12 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-container' of 'pod' 'init-cont-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q50-2.yaml:14-19
────────────────────────────────────────
  14 ┌   - image: alpine
  15 │     name: init-container
  16 │     args: [/bin/sh, -c, 'touch /workdir/test.txt']
  17 │     volumeMounts:
  18 │     - name: initvolume
  19 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main-container' of 'pod' 'init-cont-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q50-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     name: main-container
   9 │     args: [/bin/sh, -c, 'if [ -f /workdir/test.txt ]; then echo "the app is running!" > /workdir/test.txt && sleep 9999; fi']
  10 │     volumeMounts:
  11 │     - name: initvolume
  12 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-container' of Pod 'init-cont-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q50-2.yaml:14-19
────────────────────────────────────────
  14 ┌   - image: alpine
  15 │     name: init-container
  16 │     args: [/bin/sh, -c, 'touch /workdir/test.txt']
  17 │     volumeMounts:
  18 │     - name: initvolume
  19 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'main-container' of Pod 'init-cont-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q50-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     name: main-container
   9 │     args: [/bin/sh, -c, 'if [ -f /workdir/test.txt ]; then echo "the app is running!" > /workdir/test.txt && sleep 9999; fi']
  10 │     volumeMounts:
  11 │     - name: initvolume
  12 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init-container' of Pod 'init-cont-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q50-2.yaml:14-19
────────────────────────────────────────
  14 ┌   - image: alpine
  15 │     name: init-container
  16 │     args: [/bin/sh, -c, 'touch /workdir/test.txt']
  17 │     volumeMounts:
  18 │     - name: initvolume
  19 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main-container' of Pod 'init-cont-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q50-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     name: main-container
   9 │     args: [/bin/sh, -c, 'if [ -f /workdir/test.txt ]; then echo "the app is running!" > /workdir/test.txt && sleep 9999; fi']
  10 │     volumeMounts:
  11 │     - name: initvolume
  12 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'init-container' of Pod 'init-cont-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 q50-2.yaml:14-19
────────────────────────────────────────
  14 ┌   - image: alpine
  15 │     name: init-container
  16 │     args: [/bin/sh, -c, 'touch /workdir/test.txt']
  17 │     volumeMounts:
  18 │     - name: initvolume
  19 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main-container' of Pod 'init-cont-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 q50-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     name: main-container
   9 │     args: [/bin/sh, -c, 'if [ -f /workdir/test.txt ]; then echo "the app is running!" > /workdir/test.txt && sleep 9999; fi']
  10 │     volumeMounts:
  11 │     - name: initvolume
  12 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-container' of Pod 'init-cont-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q50-2.yaml:14-19
────────────────────────────────────────
  14 ┌   - image: alpine
  15 │     name: init-container
  16 │     args: [/bin/sh, -c, 'touch /workdir/test.txt']
  17 │     volumeMounts:
  18 │     - name: initvolume
  19 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main-container' of Pod 'init-cont-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q50-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     name: main-container
   9 │     args: [/bin/sh, -c, 'if [ -f /workdir/test.txt ]; then echo "the app is running!" > /workdir/test.txt && sleep 9999; fi']
  10 │     volumeMounts:
  11 │     - name: initvolume
  12 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-container' of Pod 'init-cont-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q50-2.yaml:14-19
────────────────────────────────────────
  14 ┌   - image: alpine
  15 │     name: init-container
  16 │     args: [/bin/sh, -c, 'touch /workdir/test.txt']
  17 │     volumeMounts:
  18 │     - name: initvolume
  19 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'main-container' of Pod 'init-cont-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q50-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     name: main-container
   9 │     args: [/bin/sh, -c, 'if [ -f /workdir/test.txt ]; then echo "the app is running!" > /workdir/test.txt && sleep 9999; fi']
  10 │     volumeMounts:
  11 │     - name: initvolume
  12 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-container' of Pod 'init-cont-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q50-2.yaml:14-19
────────────────────────────────────────
  14 ┌   - image: alpine
  15 │     name: init-container
  16 │     args: [/bin/sh, -c, 'touch /workdir/test.txt']
  17 │     volumeMounts:
  18 │     - name: initvolume
  19 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'main-container' of Pod 'init-cont-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q50-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     name: main-container
   9 │     args: [/bin/sh, -c, 'if [ -f /workdir/test.txt ]; then echo "the app is running!" > /workdir/test.txt && sleep 9999; fi']
  10 │     volumeMounts:
  11 │     - name: initvolume
  12 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-container' of Pod 'init-cont-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q50-2.yaml:14-19
────────────────────────────────────────
  14 ┌   - image: alpine
  15 │     name: init-container
  16 │     args: [/bin/sh, -c, 'touch /workdir/test.txt']
  17 │     volumeMounts:
  18 │     - name: initvolume
  19 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'main-container' of Pod 'init-cont-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q50-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     name: main-container
   9 │     args: [/bin/sh, -c, 'if [ -f /workdir/test.txt ]; then echo "the app is running!" > /workdir/test.txt && sleep 9999; fi']
  10 │     volumeMounts:
  11 │     - name: initvolume
  12 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-container' of Pod 'init-cont-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q50-2.yaml:14-19
────────────────────────────────────────
  14 ┌   - image: alpine
  15 │     name: init-container
  16 │     args: [/bin/sh, -c, 'touch /workdir/test.txt']
  17 │     volumeMounts:
  18 │     - name: initvolume
  19 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main-container' of Pod 'init-cont-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q50-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     name: main-container
   9 │     args: [/bin/sh, -c, 'if [ -f /workdir/test.txt ]; then echo "the app is running!" > /workdir/test.txt && sleep 9999; fi']
  10 │     volumeMounts:
  11 │     - name: initvolume
  12 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-container' of Pod 'init-cont-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q50-2.yaml:14-19
────────────────────────────────────────
  14 ┌   - image: alpine
  15 │     name: init-container
  16 │     args: [/bin/sh, -c, 'touch /workdir/test.txt']
  17 │     volumeMounts:
  18 │     - name: initvolume
  19 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main-container' of Pod 'init-cont-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q50-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     name: main-container
   9 │     args: [/bin/sh, -c, 'if [ -f /workdir/test.txt ]; then echo "the app is running!" > /workdir/test.txt && sleep 9999; fi']
  10 │     volumeMounts:
  11 │     - name: initvolume
  12 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q50-2.yaml:14-19
────────────────────────────────────────
  14 ┌   - image: alpine
  15 │     name: init-container
  16 │     args: [/bin/sh, -c, 'touch /workdir/test.txt']
  17 │     volumeMounts:
  18 │     - name: initvolume
  19 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q50-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     name: main-container
   9 │     args: [/bin/sh, -c, 'if [ -f /workdir/test.txt ]; then echo "the app is running!" > /workdir/test.txt && sleep 9999; fi']
  10 │     volumeMounts:
  11 │     - name: initvolume
  12 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-container" of pod "init-cont-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q50-2.yaml:14-19
────────────────────────────────────────
  14 ┌   - image: alpine
  15 │     name: init-container
  16 │     args: [/bin/sh, -c, 'touch /workdir/test.txt']
  17 │     volumeMounts:
  18 │     - name: initvolume
  19 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main-container" of pod "init-cont-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q50-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     name: main-container
   9 │     args: [/bin/sh, -c, 'if [ -f /workdir/test.txt ]; then echo "the app is running!" > /workdir/test.txt && sleep 9999; fi']
  10 │     volumeMounts:
  11 │     - name: initvolume
  12 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q50-2.yaml:14-19
────────────────────────────────────────
  14 ┌   - image: alpine
  15 │     name: init-container
  16 │     args: [/bin/sh, -c, 'touch /workdir/test.txt']
  17 │     volumeMounts:
  18 │     - name: initvolume
  19 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q50-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     name: main-container
   9 │     args: [/bin/sh, -c, 'if [ -f /workdir/test.txt ]; then echo "the app is running!" > /workdir/test.txt && sleep 9999; fi']
  10 │     volumeMounts:
  11 │     - name: initvolume
  12 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod init-cont-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 q50-2.yaml:4
────────────────────────────────────────
   4 [   name: init-cont-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container init-cont-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q50-2.yaml:14-19
────────────────────────────────────────
  14 ┌   - image: alpine
  15 │     name: init-container
  16 │     args: [/bin/sh, -c, 'touch /workdir/test.txt']
  17 │     volumeMounts:
  18 │     - name: initvolume
  19 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container init-cont-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q50-2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: alpine
   8 │     name: main-container
   9 │     args: [/bin/sh, -c, 'if [ -f /workdir/test.txt ]; then echo "the app is running!" > /workdir/test.txt && sleep 9999; fi']
  10 │     volumeMounts:
  11 │     - name: initvolume
  12 └       mountPath: /workdir
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod init-cont-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q50-2.yaml:6-23
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: alpine
   8 │     name: main-container
   9 │     args: [/bin/sh, -c, 'if [ -f /workdir/test.txt ]; then echo "the app is running!" > /workdir/test.txt && sleep 9999; fi']
  10 │     volumeMounts:
  11 │     - name: initvolume
  12 │       mountPath: /workdir
  13 │   initContainers:
  14 └   - image: alpine
  ..   
────────────────────────────────────────



q50-3.yaml (kubernetes)
=======================
Tests: 124 (SUCCESSES: 92, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 21, MEDIUM: 6, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-myservice' of Pod 'myapp-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q50-3.yaml:13-15
────────────────────────────────────────
  13 ┌   - name: init-myservice
  14 │     image: busybox:1.28
  15 └     command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'myapp-container' of Pod 'myapp-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 q50-3.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: myapp-container
  10 │     image: busybox:1.28
  11 └     command: ['sh', '-c', 'echo The app is running! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-myservice' of Pod 'myapp-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q50-3.yaml:13-15
────────────────────────────────────────
  13 ┌   - name: init-myservice
  14 │     image: busybox:1.28
  15 └     command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp-container' of Pod 'myapp-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 q50-3.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: myapp-container
  10 │     image: busybox:1.28
  11 └     command: ['sh', '-c', 'echo The app is running! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-myservice' of 'pod' 'myapp-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q50-3.yaml:13-15
────────────────────────────────────────
  13 ┌   - name: init-myservice
  14 │     image: busybox:1.28
  15 └     command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp-container' of 'pod' 'myapp-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 q50-3.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: myapp-container
  10 │     image: busybox:1.28
  11 └     command: ['sh', '-c', 'echo The app is running! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-myservice' of Pod 'myapp-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q50-3.yaml:13-15
────────────────────────────────────────
  13 ┌   - name: init-myservice
  14 │     image: busybox:1.28
  15 └     command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'myapp-container' of Pod 'myapp-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 q50-3.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: myapp-container
  10 │     image: busybox:1.28
  11 └     command: ['sh', '-c', 'echo The app is running! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init-myservice' of Pod 'myapp-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q50-3.yaml:13-15
────────────────────────────────────────
  13 ┌   - name: init-myservice
  14 │     image: busybox:1.28
  15 └     command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp-container' of Pod 'myapp-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 q50-3.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: myapp-container
  10 │     image: busybox:1.28
  11 └     command: ['sh', '-c', 'echo The app is running! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-myservice' of Pod 'myapp-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q50-3.yaml:13-15
────────────────────────────────────────
  13 ┌   - name: init-myservice
  14 │     image: busybox:1.28
  15 └     command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp-container' of Pod 'myapp-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 q50-3.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: myapp-container
  10 │     image: busybox:1.28
  11 └     command: ['sh', '-c', 'echo The app is running! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-myservice' of Pod 'myapp-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q50-3.yaml:13-15
────────────────────────────────────────
  13 ┌   - name: init-myservice
  14 │     image: busybox:1.28
  15 └     command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp-container' of Pod 'myapp-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 q50-3.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: myapp-container
  10 │     image: busybox:1.28
  11 └     command: ['sh', '-c', 'echo The app is running! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-myservice' of Pod 'myapp-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q50-3.yaml:13-15
────────────────────────────────────────
  13 ┌   - name: init-myservice
  14 │     image: busybox:1.28
  15 └     command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp-container' of Pod 'myapp-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 q50-3.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: myapp-container
  10 │     image: busybox:1.28
  11 └     command: ['sh', '-c', 'echo The app is running! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-myservice' of Pod 'myapp-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q50-3.yaml:13-15
────────────────────────────────────────
  13 ┌   - name: init-myservice
  14 │     image: busybox:1.28
  15 └     command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'myapp-container' of Pod 'myapp-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 q50-3.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: myapp-container
  10 │     image: busybox:1.28
  11 └     command: ['sh', '-c', 'echo The app is running! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-myservice' of Pod 'myapp-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q50-3.yaml:13-15
────────────────────────────────────────
  13 ┌   - name: init-myservice
  14 │     image: busybox:1.28
  15 └     command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp-container' of Pod 'myapp-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 q50-3.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: myapp-container
  10 │     image: busybox:1.28
  11 └     command: ['sh', '-c', 'echo The app is running! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-myservice' of Pod 'myapp-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q50-3.yaml:13-15
────────────────────────────────────────
  13 ┌   - name: init-myservice
  14 │     image: busybox:1.28
  15 └     command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp-container' of Pod 'myapp-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 q50-3.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: myapp-container
  10 │     image: busybox:1.28
  11 └     command: ['sh', '-c', 'echo The app is running! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q50-3.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: myapp-container
  10 │     image: busybox:1.28
  11 └     command: ['sh', '-c', 'echo The app is running! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 q50-3.yaml:13-15
────────────────────────────────────────
  13 ┌   - name: init-myservice
  14 │     image: busybox:1.28
  15 └     command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-myservice" of pod "myapp-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q50-3.yaml:13-15
────────────────────────────────────────
  13 ┌   - name: init-myservice
  14 │     image: busybox:1.28
  15 └     command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp-container" of pod "myapp-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 q50-3.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: myapp-container
  10 │     image: busybox:1.28
  11 └     command: ['sh', '-c', 'echo The app is running! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q50-3.yaml:13-15
────────────────────────────────────────
  13 ┌   - name: init-myservice
  14 │     image: busybox:1.28
  15 └     command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 q50-3.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: myapp-container
  10 │     image: busybox:1.28
  11 └     command: ['sh', '-c', 'echo The app is running! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 q50-3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: myapp-pod
   5 │   labels:
   6 └     app.kubernetes.io/name: MyApp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q50-3.yaml:9-11
────────────────────────────────────────
   9 ┌   - name: myapp-container
  10 │     image: busybox:1.28
  11 └     command: ['sh', '-c', 'echo The app is running! && sleep 3600']
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q50-3.yaml:13-15
────────────────────────────────────────
  13 ┌   - name: init-myservice
  14 │     image: busybox:1.28
  15 └     command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 q50-3.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: myapp-container
  10 │     image: busybox:1.28
  11 │     command: ['sh', '-c', 'echo The app is running! && sleep 3600']
  12 │   initContainers:
  13 │   - name: init-myservice
  14 │     image: busybox:1.28
  15 └     command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
────────────────────────────────────────



qa-api-database-migration-job.yaml (kubernetes)
===============================================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'qa-api-database-migrations' of Job 'qa-api-database-migration-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qa-api-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: qa-api-database-migrations
  12 │           image: qa-api-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER_DB_CLUSTER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: qa-api-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'qa-api-database-migrations' of Job 'qa-api-database-migration-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qa-api-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: qa-api-database-migrations
  12 │           image: qa-api-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER_DB_CLUSTER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: qa-api-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'qa-api-database-migrations' of 'job' 'qa-api-database-migration-job' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qa-api-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: qa-api-database-migrations
  12 │           image: qa-api-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER_DB_CLUSTER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: qa-api-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'qa-api-database-migrations' of Job 'qa-api-database-migration-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qa-api-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: qa-api-database-migrations
  12 │           image: qa-api-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER_DB_CLUSTER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: qa-api-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'qa-api-database-migrations' of Job 'qa-api-database-migration-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qa-api-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: qa-api-database-migrations
  12 │           image: qa-api-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER_DB_CLUSTER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: qa-api-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'qa-api-database-migrations' of Job 'qa-api-database-migration-job' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qa-api-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: qa-api-database-migrations
  12 │           image: qa-api-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER_DB_CLUSTER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: qa-api-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'qa-api-database-migrations' of Job 'qa-api-database-migration-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qa-api-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: qa-api-database-migrations
  12 │           image: qa-api-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER_DB_CLUSTER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: qa-api-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'qa-api-database-migrations' of Job 'qa-api-database-migration-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qa-api-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: qa-api-database-migrations
  12 │           image: qa-api-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER_DB_CLUSTER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: qa-api-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'qa-api-database-migrations' of Job 'qa-api-database-migration-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qa-api-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: qa-api-database-migrations
  12 │           image: qa-api-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER_DB_CLUSTER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: qa-api-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'qa-api-database-migrations' of Job 'qa-api-database-migration-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qa-api-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: qa-api-database-migrations
  12 │           image: qa-api-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER_DB_CLUSTER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: qa-api-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'qa-api-database-migrations' of Job 'qa-api-database-migration-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qa-api-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: qa-api-database-migrations
  12 │           image: qa-api-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER_DB_CLUSTER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: qa-api-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'qa-api-database-migrations' of Job 'qa-api-database-migration-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qa-api-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: qa-api-database-migrations
  12 │           image: qa-api-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER_DB_CLUSTER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: qa-api-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qa-api-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: qa-api-database-migrations
  12 │           image: qa-api-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER_DB_CLUSTER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: qa-api-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "qa-api-database-migrations" of job "qa-api-database-migration-job" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qa-api-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: qa-api-database-migrations
  12 │           image: qa-api-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER_DB_CLUSTER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: qa-api-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qa-api-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: qa-api-database-migrations
  12 │           image: qa-api-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER_DB_CLUSTER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: qa-api-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job qa-api-database-migration-job in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 qa-api-database-migration-job.yaml:4
────────────────────────────────────────
   4 [   name: qa-api-database-migration-job
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qa-api-database-migration-job in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qa-api-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: qa-api-database-migrations
  12 │           image: qa-api-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER_DB_CLUSTER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: qa-api-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job qa-api-database-migration-job in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qa-api-database-migration-job.yaml:10-27
────────────────────────────────────────
  10 ┌       containers:
  11 │         - name: qa-api-database-migrations
  12 │           image: qa-api-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER_DB_CLUSTER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 └                   name: qa-api-database-cluster-app
  ..   
────────────────────────────────────────



qa-api-deployment.yaml (kubernetes)
===================================
Tests: 109 (SUCCESSES: 93, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'qa-api' of Deployment 'qa-api-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qa-api-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: qa-api
  18 │           image: qa-api:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'qa-api' of Deployment 'qa-api-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qa-api-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: qa-api
  18 │           image: qa-api:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'qa-api' of 'deployment' 'qa-api-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qa-api-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: qa-api
  18 │           image: qa-api:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'qa-api' of Deployment 'qa-api-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qa-api-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: qa-api
  18 │           image: qa-api:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'qa-api' of Deployment 'qa-api-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qa-api-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: qa-api
  18 │           image: qa-api:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'qa-api' of Deployment 'qa-api-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qa-api-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: qa-api
  18 │           image: qa-api:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'qa-api' of Deployment 'qa-api-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qa-api-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: qa-api
  18 │           image: qa-api:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'qa-api' of Deployment 'qa-api-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qa-api-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: qa-api
  18 │           image: qa-api:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'qa-api' of Deployment 'qa-api-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qa-api-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: qa-api
  18 │           image: qa-api:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'qa-api' of Deployment 'qa-api-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qa-api-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: qa-api
  18 │           image: qa-api:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qa-api-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: qa-api
  18 │           image: qa-api:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "qa-api" of deployment "qa-api-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qa-api-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: qa-api
  18 │           image: qa-api:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qa-api-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: qa-api
  18 │           image: qa-api:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment qa-api-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 qa-api-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: qa-api-deployment
   5 │   labels:
   6 └     app: qa-api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qa-api-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qa-api-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: qa-api
  18 │           image: qa-api:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment qa-api-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qa-api-deployment.yaml:16-33
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: qa-api
  18 │           image: qa-api:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 └               cpu: 100m
  ..   
────────────────────────────────────────



qa-ui-deployment.yaml (kubernetes)
==================================
Tests: 109 (SUCCESSES: 93, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'qa-ui' of Deployment 'qa-ui-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qa-ui-deployment.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: qa-ui
  18 │           image: qa-ui:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7000
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 │             limits:
  26 └               cpu: 200m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'qa-ui' of Deployment 'qa-ui-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qa-ui-deployment.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: qa-ui
  18 │           image: qa-ui:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7000
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 │             limits:
  26 └               cpu: 200m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'qa-ui' of 'deployment' 'qa-ui-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qa-ui-deployment.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: qa-ui
  18 │           image: qa-ui:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7000
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 │             limits:
  26 └               cpu: 200m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'qa-ui' of Deployment 'qa-ui-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qa-ui-deployment.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: qa-ui
  18 │           image: qa-ui:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7000
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 │             limits:
  26 └               cpu: 200m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'qa-ui' of Deployment 'qa-ui-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qa-ui-deployment.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: qa-ui
  18 │           image: qa-ui:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7000
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 │             limits:
  26 └               cpu: 200m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'qa-ui' of Deployment 'qa-ui-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qa-ui-deployment.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: qa-ui
  18 │           image: qa-ui:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7000
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 │             limits:
  26 └               cpu: 200m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'qa-ui' of Deployment 'qa-ui-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qa-ui-deployment.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: qa-ui
  18 │           image: qa-ui:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7000
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 │             limits:
  26 └               cpu: 200m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'qa-ui' of Deployment 'qa-ui-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qa-ui-deployment.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: qa-ui
  18 │           image: qa-ui:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7000
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 │             limits:
  26 └               cpu: 200m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'qa-ui' of Deployment 'qa-ui-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qa-ui-deployment.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: qa-ui
  18 │           image: qa-ui:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7000
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 │             limits:
  26 └               cpu: 200m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'qa-ui' of Deployment 'qa-ui-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qa-ui-deployment.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: qa-ui
  18 │           image: qa-ui:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7000
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 │             limits:
  26 └               cpu: 200m
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qa-ui-deployment.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: qa-ui
  18 │           image: qa-ui:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7000
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 │             limits:
  26 └               cpu: 200m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "qa-ui" of deployment "qa-ui-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qa-ui-deployment.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: qa-ui
  18 │           image: qa-ui:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7000
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 │             limits:
  26 └               cpu: 200m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qa-ui-deployment.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: qa-ui
  18 │           image: qa-ui:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7000
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 │             limits:
  26 └               cpu: 200m
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment qa-ui-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 qa-ui-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: qa-ui-deployment
   5 │   labels:
   6 └     app: qa-ui
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qa-ui-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qa-ui-deployment.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: qa-ui
  18 │           image: qa-ui:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7000
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 │             limits:
  26 └               cpu: 200m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment qa-ui-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qa-ui-deployment.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: qa-ui
  18 │           image: qa-ui:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7000
  22 │           resources:
  23 │             requests:
  24 └               cpu: 100m
  ..   
────────────────────────────────────────



qa5_1.yaml (kubernetes)
=======================
Tests: 109 (SUCCESSES: 94, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'react-ui' of Deployment 'react-ui-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qa5_1.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: react-ui
  21 │         image: thiernos/ui
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 0.5
  26 │             memory: 1Gi
  27 │           requests:
  28 │             cpu: 0.5
  29 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'react-ui' of Deployment 'react-ui-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qa5_1.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: react-ui
  21 │         image: thiernos/ui
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 0.5
  26 │             memory: 1Gi
  27 │           requests:
  28 │             cpu: 0.5
  29 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'react-ui' of 'deployment' 'react-ui-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qa5_1.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: react-ui
  21 │         image: thiernos/ui
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 0.5
  26 │             memory: 1Gi
  27 │           requests:
  28 │             cpu: 0.5
  29 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'react-ui' of Deployment 'react-ui-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qa5_1.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: react-ui
  21 │         image: thiernos/ui
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 0.5
  26 │             memory: 1Gi
  27 │           requests:
  28 │             cpu: 0.5
  29 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'react-ui' of Deployment 'react-ui-dep' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qa5_1.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: react-ui
  21 │         image: thiernos/ui
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 0.5
  26 │             memory: 1Gi
  27 │           requests:
  28 │             cpu: 0.5
  29 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'react-ui' of Deployment 'react-ui-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qa5_1.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: react-ui
  21 │         image: thiernos/ui
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 0.5
  26 │             memory: 1Gi
  27 │           requests:
  28 │             cpu: 0.5
  29 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'react-ui' of Deployment 'react-ui-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qa5_1.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: react-ui
  21 │         image: thiernos/ui
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 0.5
  26 │             memory: 1Gi
  27 │           requests:
  28 │             cpu: 0.5
  29 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'react-ui' of Deployment 'react-ui-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qa5_1.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: react-ui
  21 │         image: thiernos/ui
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 0.5
  26 │             memory: 1Gi
  27 │           requests:
  28 │             cpu: 0.5
  29 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qa5_1.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: react-ui
  21 │         image: thiernos/ui
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 0.5
  26 │             memory: 1Gi
  27 │           requests:
  28 │             cpu: 0.5
  29 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "react-ui" of deployment "react-ui-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qa5_1.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: react-ui
  21 │         image: thiernos/ui
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 0.5
  26 │             memory: 1Gi
  27 │           requests:
  28 │             cpu: 0.5
  29 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qa5_1.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: react-ui
  21 │         image: thiernos/ui
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 0.5
  26 │             memory: 1Gi
  27 │           requests:
  28 │             cpu: 0.5
  29 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment react-ui-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 qa5_1.yaml:4-7
────────────────────────────────────────
   4 ┌   name: react-ui-dep
   5 │   labels:
   6 │     app: react-ui
   7 └     env: qa
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container react-ui-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qa5_1.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: react-ui
  21 │         image: thiernos/ui
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 0.5
  26 │             memory: 1Gi
  27 │           requests:
  28 │             cpu: 0.5
  29 └             memory: 1Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment react-ui-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qa5_1.yaml:19-29
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: react-ui
  21 │         image: thiernos/ui
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 0.5
  26 │             memory: 1Gi
  27 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container react-ui in deployment react-ui-dep (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 qa5_1.yaml:20-29
────────────────────────────────────────
  20 ┌       - name: react-ui
  21 │         image: thiernos/ui
  22 │         imagePullPolicy: IfNotPresent
  23 │         resources:
  24 │           limits:
  25 │             cpu: 0.5
  26 │             memory: 1Gi
  27 │           requests:
  28 │             cpu: 0.5
  29 └             memory: 1Gi
────────────────────────────────────────



qbittorrent-configmap.yaml (kubernetes)
=======================================
Tests: 108 (SUCCESSES: 107, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'qbittorent-env' in 'media' namespace stores sensitive contents in key(s) or value(s) '{"PGID", "PUID", "TORRENTING_PORT", "WEBUI_PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 qbittorrent-configmap.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



qbittorrent-deployment.yaml (kubernetes)
========================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'qbittorrent' of Deployment 'qbittorrent' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qbittorrent-deployment.yaml:28-48
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PGID
  30 │               value: "1000"
  31 │             - name: PUID
  32 │               value: "1000"
  33 │             - name: TZ
  34 │               value: America/New_York
  35 │             - name: WEBUI_PORT
  36 └               value: "9090"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qbittorrent-deployment.yaml:28-48
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PGID
  30 │               value: "1000"
  31 │             - name: PUID
  32 │               value: "1000"
  33 │             - name: TZ
  34 │               value: America/New_York
  35 │             - name: WEBUI_PORT
  36 └               value: "9090"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'qbittorrent' of 'deployment' 'qbittorrent' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qbittorrent-deployment.yaml:28-48
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PGID
  30 │               value: "1000"
  31 │             - name: PUID
  32 │               value: "1000"
  33 │             - name: TZ
  34 │               value: America/New_York
  35 │             - name: WEBUI_PORT
  36 └               value: "9090"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qbittorrent-deployment.yaml:28-48
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PGID
  30 │               value: "1000"
  31 │             - name: PUID
  32 │               value: "1000"
  33 │             - name: TZ
  34 │               value: America/New_York
  35 │             - name: WEBUI_PORT
  36 └               value: "9090"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'qbittorrent' of Deployment 'qbittorrent' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qbittorrent-deployment.yaml:28-48
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PGID
  30 │               value: "1000"
  31 │             - name: PUID
  32 │               value: "1000"
  33 │             - name: TZ
  34 │               value: America/New_York
  35 │             - name: WEBUI_PORT
  36 └               value: "9090"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'qbittorrent' of Deployment 'qbittorrent' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qbittorrent-deployment.yaml:28-48
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PGID
  30 │               value: "1000"
  31 │             - name: PUID
  32 │               value: "1000"
  33 │             - name: TZ
  34 │               value: America/New_York
  35 │             - name: WEBUI_PORT
  36 └               value: "9090"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qbittorrent-deployment.yaml:28-48
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PGID
  30 │               value: "1000"
  31 │             - name: PUID
  32 │               value: "1000"
  33 │             - name: TZ
  34 │               value: America/New_York
  35 │             - name: WEBUI_PORT
  36 └               value: "9090"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qbittorrent-deployment.yaml:28-48
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PGID
  30 │               value: "1000"
  31 │             - name: PUID
  32 │               value: "1000"
  33 │             - name: TZ
  34 │               value: America/New_York
  35 │             - name: WEBUI_PORT
  36 └               value: "9090"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qbittorrent-deployment.yaml:28-48
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PGID
  30 │               value: "1000"
  31 │             - name: PUID
  32 │               value: "1000"
  33 │             - name: TZ
  34 │               value: America/New_York
  35 │             - name: WEBUI_PORT
  36 └               value: "9090"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qbittorrent-deployment.yaml:28-48
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PGID
  30 │               value: "1000"
  31 │             - name: PUID
  32 │               value: "1000"
  33 │             - name: TZ
  34 │               value: America/New_York
  35 │             - name: WEBUI_PORT
  36 └               value: "9090"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qbittorrent-deployment.yaml:28-48
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PGID
  30 │               value: "1000"
  31 │             - name: PUID
  32 │               value: "1000"
  33 │             - name: TZ
  34 │               value: America/New_York
  35 │             - name: WEBUI_PORT
  36 └               value: "9090"
  ..   
────────────────────────────────────────


AVD-KSV-0028 (LOW): Deployment 'qbittorrent' should set 'spec.volumes[*]' to an allowed volume type
════════════════════════════════════════
According to pod security standard 'Volume types', non-core volume types must not be used.

See https://avd.aquasec.com/misconfig/ksv028
────────────────────────────────────────
 qbittorrent-deployment.yaml:12-60
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       io.kompose.service: qbittorrent
  16 │   strategy:
  17 │     type: Recreate
  18 │   template:
  19 │     metadata:
  20 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qbittorrent-deployment.yaml:28-48
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PGID
  30 │               value: "1000"
  31 │             - name: PUID
  32 │               value: "1000"
  33 │             - name: TZ
  34 │               value: America/New_York
  35 │             - name: WEBUI_PORT
  36 └               value: "9090"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "qbittorrent" of deployment "qbittorrent" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qbittorrent-deployment.yaml:28-48
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PGID
  30 │               value: "1000"
  31 │             - name: PUID
  32 │               value: "1000"
  33 │             - name: TZ
  34 │               value: America/New_York
  35 │             - name: WEBUI_PORT
  36 └               value: "9090"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qbittorrent-deployment.yaml:28-48
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PGID
  30 │               value: "1000"
  31 │             - name: PUID
  32 │               value: "1000"
  33 │             - name: TZ
  34 │               value: America/New_York
  35 │             - name: WEBUI_PORT
  36 └               value: "9090"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment qbittorrent in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 qbittorrent-deployment.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert
   6 │     kompose.version: 1.26.0 (40646f47)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: qbittorrent
  10 └   name: qbittorrent
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qbittorrent in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qbittorrent-deployment.yaml:28-48
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PGID
  30 │               value: "1000"
  31 │             - name: PUID
  32 │               value: "1000"
  33 │             - name: TZ
  34 │               value: America/New_York
  35 │             - name: WEBUI_PORT
  36 └               value: "9090"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment qbittorrent in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qbittorrent-deployment.yaml:27-60
────────────────────────────────────────
  27 ┌       containers:
  28 │         - env:
  29 │             - name: PGID
  30 │               value: "1000"
  31 │             - name: PUID
  32 │               value: "1000"
  33 │             - name: TZ
  34 │               value: America/New_York
  35 └             - name: WEBUI_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container qbittorrent in deployment qbittorrent (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 qbittorrent-deployment.yaml:28-48
────────────────────────────────────────
  28 ┌         - env:
  29 │             - name: PGID
  30 │               value: "1000"
  31 │             - name: PUID
  32 │               value: "1000"
  33 │             - name: TZ
  34 │               value: America/New_York
  35 │             - name: WEBUI_PORT
  36 └               value: "9090"
  ..   
────────────────────────────────────────



qbittorrent-deployment1.yaml (kubernetes)
=========================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'qbittorrent' of Deployment 'qbittorrent' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qbittorrent-deployment1.yaml:43-73
────────────────────────────────────────
  43 ┌         - env:
  44 │             - name: PGID
  45 │               value: "1000"
  46 │             - name: PUID
  47 │               value: "1000"
  48 │             - name: UMASK_SET
  49 │               value: "022"
  50 │             - name: WEBUI_PORT
  51 └               value: "8093"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qbittorrent-deployment1.yaml:43-73
────────────────────────────────────────
  43 ┌         - env:
  44 │             - name: PGID
  45 │               value: "1000"
  46 │             - name: PUID
  47 │               value: "1000"
  48 │             - name: UMASK_SET
  49 │               value: "022"
  50 │             - name: WEBUI_PORT
  51 └               value: "8093"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'qbittorrent' of 'deployment' 'qbittorrent' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qbittorrent-deployment1.yaml:43-73
────────────────────────────────────────
  43 ┌         - env:
  44 │             - name: PGID
  45 │               value: "1000"
  46 │             - name: PUID
  47 │               value: "1000"
  48 │             - name: UMASK_SET
  49 │               value: "022"
  50 │             - name: WEBUI_PORT
  51 └               value: "8093"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qbittorrent-deployment1.yaml:43-73
────────────────────────────────────────
  43 ┌         - env:
  44 │             - name: PGID
  45 │               value: "1000"
  46 │             - name: PUID
  47 │               value: "1000"
  48 │             - name: UMASK_SET
  49 │               value: "022"
  50 │             - name: WEBUI_PORT
  51 └               value: "8093"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'qbittorrent' of Deployment 'qbittorrent' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qbittorrent-deployment1.yaml:43-73
────────────────────────────────────────
  43 ┌         - env:
  44 │             - name: PGID
  45 │               value: "1000"
  46 │             - name: PUID
  47 │               value: "1000"
  48 │             - name: UMASK_SET
  49 │               value: "022"
  50 │             - name: WEBUI_PORT
  51 └               value: "8093"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'qbittorrent' of Deployment 'qbittorrent' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qbittorrent-deployment1.yaml:43-73
────────────────────────────────────────
  43 ┌         - env:
  44 │             - name: PGID
  45 │               value: "1000"
  46 │             - name: PUID
  47 │               value: "1000"
  48 │             - name: UMASK_SET
  49 │               value: "022"
  50 │             - name: WEBUI_PORT
  51 └               value: "8093"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'qbittorrent' of Deployment 'qbittorrent' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qbittorrent-deployment1.yaml:43-73
────────────────────────────────────────
  43 ┌         - env:
  44 │             - name: PGID
  45 │               value: "1000"
  46 │             - name: PUID
  47 │               value: "1000"
  48 │             - name: UMASK_SET
  49 │               value: "022"
  50 │             - name: WEBUI_PORT
  51 └               value: "8093"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qbittorrent-deployment1.yaml:43-73
────────────────────────────────────────
  43 ┌         - env:
  44 │             - name: PGID
  45 │               value: "1000"
  46 │             - name: PUID
  47 │               value: "1000"
  48 │             - name: UMASK_SET
  49 │               value: "022"
  50 │             - name: WEBUI_PORT
  51 └               value: "8093"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qbittorrent-deployment1.yaml:43-73
────────────────────────────────────────
  43 ┌         - env:
  44 │             - name: PGID
  45 │               value: "1000"
  46 │             - name: PUID
  47 │               value: "1000"
  48 │             - name: UMASK_SET
  49 │               value: "022"
  50 │             - name: WEBUI_PORT
  51 └               value: "8093"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qbittorrent-deployment1.yaml:43-73
────────────────────────────────────────
  43 ┌         - env:
  44 │             - name: PGID
  45 │               value: "1000"
  46 │             - name: PUID
  47 │               value: "1000"
  48 │             - name: UMASK_SET
  49 │               value: "022"
  50 │             - name: WEBUI_PORT
  51 └               value: "8093"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qbittorrent-deployment1.yaml:43-73
────────────────────────────────────────
  43 ┌         - env:
  44 │             - name: PGID
  45 │               value: "1000"
  46 │             - name: PUID
  47 │               value: "1000"
  48 │             - name: UMASK_SET
  49 │               value: "022"
  50 │             - name: WEBUI_PORT
  51 └               value: "8093"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qbittorrent-deployment1.yaml:43-73
────────────────────────────────────────
  43 ┌         - env:
  44 │             - name: PGID
  45 │               value: "1000"
  46 │             - name: PUID
  47 │               value: "1000"
  48 │             - name: UMASK_SET
  49 │               value: "022"
  50 │             - name: WEBUI_PORT
  51 └               value: "8093"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qbittorrent-deployment1.yaml:43-73
────────────────────────────────────────
  43 ┌         - env:
  44 │             - name: PGID
  45 │               value: "1000"
  46 │             - name: PUID
  47 │               value: "1000"
  48 │             - name: UMASK_SET
  49 │               value: "022"
  50 │             - name: WEBUI_PORT
  51 └               value: "8093"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "qbittorrent" of deployment "qbittorrent" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qbittorrent-deployment1.yaml:43-73
────────────────────────────────────────
  43 ┌         - env:
  44 │             - name: PGID
  45 │               value: "1000"
  46 │             - name: PUID
  47 │               value: "1000"
  48 │             - name: UMASK_SET
  49 │               value: "022"
  50 │             - name: WEBUI_PORT
  51 └               value: "8093"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qbittorrent-deployment1.yaml:43-73
────────────────────────────────────────
  43 ┌         - env:
  44 │             - name: PGID
  45 │               value: "1000"
  46 │             - name: PUID
  47 │               value: "1000"
  48 │             - name: UMASK_SET
  49 │               value: "022"
  50 │             - name: WEBUI_PORT
  51 └               value: "8093"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment qbittorrent in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 qbittorrent-deployment1.yaml:4-17
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert
   6 │     kompose.version: 1.22.0 (955b78124)
   7 │     traefik.enable: "true"
   8 │     traefik.http.routers.bt.entrypoints: websecure
   9 │     traefik.http.routers.bt.middlewares: ratelimit@file, security-headers@file, error-pages-middleware, geoblock@file, auth@file
  10 │     traefik.http.routers.bt.rule: Host(`qbit.`)
  11 │     traefik.http.routers.bt.tls.certresolver: leresolver
  12 └     traefik.http.services.bt.loadbalancer.passhostheader: "false"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qbittorrent in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qbittorrent-deployment1.yaml:43-73
────────────────────────────────────────
  43 ┌         - env:
  44 │             - name: PGID
  45 │               value: "1000"
  46 │             - name: PUID
  47 │               value: "1000"
  48 │             - name: UMASK_SET
  49 │               value: "022"
  50 │             - name: WEBUI_PORT
  51 └               value: "8093"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment qbittorrent in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qbittorrent-deployment1.yaml:42-93
────────────────────────────────────────
  42 ┌       containers:
  43 │         - env:
  44 │             - name: PGID
  45 │               value: "1000"
  46 │             - name: PUID
  47 │               value: "1000"
  48 │             - name: UMASK_SET
  49 │               value: "022"
  50 └             - name: WEBUI_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container qbittorrent in deployment qbittorrent (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 qbittorrent-deployment1.yaml:43-73
────────────────────────────────────────
  43 ┌         - env:
  44 │             - name: PGID
  45 │               value: "1000"
  46 │             - name: PUID
  47 │               value: "1000"
  48 │             - name: UMASK_SET
  49 │               value: "022"
  50 │             - name: WEBUI_PORT
  51 └               value: "8093"
  ..   
────────────────────────────────────────



qbittorrent-deployment2.yaml (kubernetes)
=========================================
Tests: 165 (SUCCESSES: 88, FAILURES: 77)
Failures: 77 (UNKNOWN: 0, LOW: 40, MEDIUM: 21, HIGH: 16, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'curl-container' of Deployment 'qbittorrent-vpn' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qbittorrent-deployment2.yaml:49-52
────────────────────────────────────────
  49 ┌         - name: curl-container
  50 │           image: quay.io/curl/curl:latest
  51 │           command: ["sleep", "infinity"]
  52 └           resources: {}
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'gluetun' of Deployment 'qbittorrent-vpn' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qbittorrent-deployment2.yaml:53-92
────────────────────────────────────────
  53 ┌         - image: qmcgaw/gluetun
  54 │           name: gluetun
  55 │           securityContext:
  56 │             capabilities:
  57 │               add: ["NET_ADMIN"]
  58 │           ports:
  59 │             - containerPort: 8000
  60 │               hostPort: 8000
  61 └               name: api
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'gluetun-sync' of Deployment 'qbittorrent-vpn' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qbittorrent-deployment2.yaml:31-48
────────────────────────────────────────
  31 ┌         - name: gluetun-sync
  32 │           image: harbor.local.abbottland.io/library/gluetun-sync:0.0.10 # {"$imagepolicy": "flux-system:gluetun-sync"}
  33 │           imagePullPolicy: Always
  34 │           resources: {}
  35 │           ports:
  36 │             - containerPort: 4000
  37 │               hostPort: 4000
  38 │               name: sync-api
  39 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'qbittorrent' of Deployment 'qbittorrent-vpn' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qbittorrent-deployment2.yaml:93-106
────────────────────────────────────────
  93 ┌         - image: lscr.io/linuxserver/qbittorrent:latest
  94 │           name: qbittorrent
  95 │           ports:
  96 │             - containerPort: 8080
  97 │               name: web
  98 │           envFrom:
  99 │             - configMapRef:
 100 │                 name: qbittorent-env
 101 └           volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'curl-container' of Deployment 'qbittorrent-vpn' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qbittorrent-deployment2.yaml:49-52
────────────────────────────────────────
  49 ┌         - name: curl-container
  50 │           image: quay.io/curl/curl:latest
  51 │           command: ["sleep", "infinity"]
  52 └           resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gluetun' of Deployment 'qbittorrent-vpn' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qbittorrent-deployment2.yaml:53-92
────────────────────────────────────────
  53 ┌         - image: qmcgaw/gluetun
  54 │           name: gluetun
  55 │           securityContext:
  56 │             capabilities:
  57 │               add: ["NET_ADMIN"]
  58 │           ports:
  59 │             - containerPort: 8000
  60 │               hostPort: 8000
  61 └               name: api
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gluetun-sync' of Deployment 'qbittorrent-vpn' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qbittorrent-deployment2.yaml:31-48
────────────────────────────────────────
  31 ┌         - name: gluetun-sync
  32 │           image: harbor.local.abbottland.io/library/gluetun-sync:0.0.10 # {"$imagepolicy": "flux-system:gluetun-sync"}
  33 │           imagePullPolicy: Always
  34 │           resources: {}
  35 │           ports:
  36 │             - containerPort: 4000
  37 │               hostPort: 4000
  38 │               name: sync-api
  39 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent-vpn' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qbittorrent-deployment2.yaml:93-106
────────────────────────────────────────
  93 ┌         - image: lscr.io/linuxserver/qbittorrent:latest
  94 │           name: qbittorrent
  95 │           ports:
  96 │             - containerPort: 8080
  97 │               name: web
  98 │           envFrom:
  99 │             - configMapRef:
 100 │                 name: qbittorent-env
 101 └           volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'curl-container' of 'deployment' 'qbittorrent-vpn' in 'media' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qbittorrent-deployment2.yaml:49-52
────────────────────────────────────────
  49 ┌         - name: curl-container
  50 │           image: quay.io/curl/curl:latest
  51 │           command: ["sleep", "infinity"]
  52 └           resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gluetun' of 'deployment' 'qbittorrent-vpn' in 'media' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qbittorrent-deployment2.yaml:53-92
────────────────────────────────────────
  53 ┌         - image: qmcgaw/gluetun
  54 │           name: gluetun
  55 │           securityContext:
  56 │             capabilities:
  57 │               add: ["NET_ADMIN"]
  58 │           ports:
  59 │             - containerPort: 8000
  60 │               hostPort: 8000
  61 └               name: api
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gluetun-sync' of 'deployment' 'qbittorrent-vpn' in 'media' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qbittorrent-deployment2.yaml:31-48
────────────────────────────────────────
  31 ┌         - name: gluetun-sync
  32 │           image: harbor.local.abbottland.io/library/gluetun-sync:0.0.10 # {"$imagepolicy": "flux-system:gluetun-sync"}
  33 │           imagePullPolicy: Always
  34 │           resources: {}
  35 │           ports:
  36 │             - containerPort: 4000
  37 │               hostPort: 4000
  38 │               name: sync-api
  39 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'qbittorrent' of 'deployment' 'qbittorrent-vpn' in 'media' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qbittorrent-deployment2.yaml:93-106
────────────────────────────────────────
  93 ┌         - image: lscr.io/linuxserver/qbittorrent:latest
  94 │           name: qbittorrent
  95 │           ports:
  96 │             - containerPort: 8080
  97 │               name: web
  98 │           envFrom:
  99 │             - configMapRef:
 100 │                 name: qbittorent-env
 101 └           volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'curl-container' of Deployment 'qbittorrent-vpn' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qbittorrent-deployment2.yaml:49-52
────────────────────────────────────────
  49 ┌         - name: curl-container
  50 │           image: quay.io/curl/curl:latest
  51 │           command: ["sleep", "infinity"]
  52 └           resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gluetun' of Deployment 'qbittorrent-vpn' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qbittorrent-deployment2.yaml:53-92
────────────────────────────────────────
  53 ┌         - image: qmcgaw/gluetun
  54 │           name: gluetun
  55 │           securityContext:
  56 │             capabilities:
  57 │               add: ["NET_ADMIN"]
  58 │           ports:
  59 │             - containerPort: 8000
  60 │               hostPort: 8000
  61 └               name: api
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gluetun-sync' of Deployment 'qbittorrent-vpn' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qbittorrent-deployment2.yaml:31-48
────────────────────────────────────────
  31 ┌         - name: gluetun-sync
  32 │           image: harbor.local.abbottland.io/library/gluetun-sync:0.0.10 # {"$imagepolicy": "flux-system:gluetun-sync"}
  33 │           imagePullPolicy: Always
  34 │           resources: {}
  35 │           ports:
  36 │             - containerPort: 4000
  37 │               hostPort: 4000
  38 │               name: sync-api
  39 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent-vpn' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qbittorrent-deployment2.yaml:93-106
────────────────────────────────────────
  93 ┌         - image: lscr.io/linuxserver/qbittorrent:latest
  94 │           name: qbittorrent
  95 │           ports:
  96 │             - containerPort: 8080
  97 │               name: web
  98 │           envFrom:
  99 │             - configMapRef:
 100 │                 name: qbittorent-env
 101 └           volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'curl-container' of Deployment 'qbittorrent-vpn' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qbittorrent-deployment2.yaml:49-52
────────────────────────────────────────
  49 ┌         - name: curl-container
  50 │           image: quay.io/curl/curl:latest
  51 │           command: ["sleep", "infinity"]
  52 └           resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gluetun' of Deployment 'qbittorrent-vpn' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qbittorrent-deployment2.yaml:53-92
────────────────────────────────────────
  53 ┌         - image: qmcgaw/gluetun
  54 │           name: gluetun
  55 │           securityContext:
  56 │             capabilities:
  57 │               add: ["NET_ADMIN"]
  58 │           ports:
  59 │             - containerPort: 8000
  60 │               hostPort: 8000
  61 └               name: api
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gluetun-sync' of Deployment 'qbittorrent-vpn' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qbittorrent-deployment2.yaml:31-48
────────────────────────────────────────
  31 ┌         - name: gluetun-sync
  32 │           image: harbor.local.abbottland.io/library/gluetun-sync:0.0.10 # {"$imagepolicy": "flux-system:gluetun-sync"}
  33 │           imagePullPolicy: Always
  34 │           resources: {}
  35 │           ports:
  36 │             - containerPort: 4000
  37 │               hostPort: 4000
  38 │               name: sync-api
  39 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'qbittorrent' of Deployment 'qbittorrent-vpn' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qbittorrent-deployment2.yaml:93-106
────────────────────────────────────────
  93 ┌         - image: lscr.io/linuxserver/qbittorrent:latest
  94 │           name: qbittorrent
  95 │           ports:
  96 │             - containerPort: 8080
  97 │               name: web
  98 │           envFrom:
  99 │             - configMapRef:
 100 │                 name: qbittorent-env
 101 └           volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'curl-container' of Deployment 'qbittorrent-vpn' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qbittorrent-deployment2.yaml:49-52
────────────────────────────────────────
  49 ┌         - name: curl-container
  50 │           image: quay.io/curl/curl:latest
  51 │           command: ["sleep", "infinity"]
  52 └           resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'gluetun' of Deployment 'qbittorrent-vpn' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qbittorrent-deployment2.yaml:53-92
────────────────────────────────────────
  53 ┌         - image: qmcgaw/gluetun
  54 │           name: gluetun
  55 │           securityContext:
  56 │             capabilities:
  57 │               add: ["NET_ADMIN"]
  58 │           ports:
  59 │             - containerPort: 8000
  60 │               hostPort: 8000
  61 └               name: api
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'qbittorrent' of Deployment 'qbittorrent-vpn' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qbittorrent-deployment2.yaml:93-106
────────────────────────────────────────
  93 ┌         - image: lscr.io/linuxserver/qbittorrent:latest
  94 │           name: qbittorrent
  95 │           ports:
  96 │             - containerPort: 8080
  97 │               name: web
  98 │           envFrom:
  99 │             - configMapRef:
 100 │                 name: qbittorent-env
 101 └           volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'curl-container' of Deployment 'qbittorrent-vpn' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qbittorrent-deployment2.yaml:49-52
────────────────────────────────────────
  49 ┌         - name: curl-container
  50 │           image: quay.io/curl/curl:latest
  51 │           command: ["sleep", "infinity"]
  52 └           resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gluetun' of Deployment 'qbittorrent-vpn' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qbittorrent-deployment2.yaml:53-92
────────────────────────────────────────
  53 ┌         - image: qmcgaw/gluetun
  54 │           name: gluetun
  55 │           securityContext:
  56 │             capabilities:
  57 │               add: ["NET_ADMIN"]
  58 │           ports:
  59 │             - containerPort: 8000
  60 │               hostPort: 8000
  61 └               name: api
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gluetun-sync' of Deployment 'qbittorrent-vpn' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qbittorrent-deployment2.yaml:31-48
────────────────────────────────────────
  31 ┌         - name: gluetun-sync
  32 │           image: harbor.local.abbottland.io/library/gluetun-sync:0.0.10 # {"$imagepolicy": "flux-system:gluetun-sync"}
  33 │           imagePullPolicy: Always
  34 │           resources: {}
  35 │           ports:
  36 │             - containerPort: 4000
  37 │               hostPort: 4000
  38 │               name: sync-api
  39 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'qbittorrent' of Deployment 'qbittorrent-vpn' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qbittorrent-deployment2.yaml:93-106
────────────────────────────────────────
  93 ┌         - image: lscr.io/linuxserver/qbittorrent:latest
  94 │           name: qbittorrent
  95 │           ports:
  96 │             - containerPort: 8080
  97 │               name: web
  98 │           envFrom:
  99 │             - configMapRef:
 100 │                 name: qbittorent-env
 101 └           volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'curl-container' of Deployment 'qbittorrent-vpn' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qbittorrent-deployment2.yaml:49-52
────────────────────────────────────────
  49 ┌         - name: curl-container
  50 │           image: quay.io/curl/curl:latest
  51 │           command: ["sleep", "infinity"]
  52 └           resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gluetun' of Deployment 'qbittorrent-vpn' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qbittorrent-deployment2.yaml:53-92
────────────────────────────────────────
  53 ┌         - image: qmcgaw/gluetun
  54 │           name: gluetun
  55 │           securityContext:
  56 │             capabilities:
  57 │               add: ["NET_ADMIN"]
  58 │           ports:
  59 │             - containerPort: 8000
  60 │               hostPort: 8000
  61 └               name: api
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gluetun-sync' of Deployment 'qbittorrent-vpn' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qbittorrent-deployment2.yaml:31-48
────────────────────────────────────────
  31 ┌         - name: gluetun-sync
  32 │           image: harbor.local.abbottland.io/library/gluetun-sync:0.0.10 # {"$imagepolicy": "flux-system:gluetun-sync"}
  33 │           imagePullPolicy: Always
  34 │           resources: {}
  35 │           ports:
  36 │             - containerPort: 4000
  37 │               hostPort: 4000
  38 │               name: sync-api
  39 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent-vpn' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qbittorrent-deployment2.yaml:93-106
────────────────────────────────────────
  93 ┌         - image: lscr.io/linuxserver/qbittorrent:latest
  94 │           name: qbittorrent
  95 │           ports:
  96 │             - containerPort: 8080
  97 │               name: web
  98 │           envFrom:
  99 │             - configMapRef:
 100 │                 name: qbittorent-env
 101 └           volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'curl-container' of Deployment 'qbittorrent-vpn' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qbittorrent-deployment2.yaml:49-52
────────────────────────────────────────
  49 ┌         - name: curl-container
  50 │           image: quay.io/curl/curl:latest
  51 │           command: ["sleep", "infinity"]
  52 └           resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gluetun' of Deployment 'qbittorrent-vpn' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qbittorrent-deployment2.yaml:53-92
────────────────────────────────────────
  53 ┌         - image: qmcgaw/gluetun
  54 │           name: gluetun
  55 │           securityContext:
  56 │             capabilities:
  57 │               add: ["NET_ADMIN"]
  58 │           ports:
  59 │             - containerPort: 8000
  60 │               hostPort: 8000
  61 └               name: api
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gluetun-sync' of Deployment 'qbittorrent-vpn' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qbittorrent-deployment2.yaml:31-48
────────────────────────────────────────
  31 ┌         - name: gluetun-sync
  32 │           image: harbor.local.abbottland.io/library/gluetun-sync:0.0.10 # {"$imagepolicy": "flux-system:gluetun-sync"}
  33 │           imagePullPolicy: Always
  34 │           resources: {}
  35 │           ports:
  36 │             - containerPort: 4000
  37 │               hostPort: 4000
  38 │               name: sync-api
  39 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent-vpn' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qbittorrent-deployment2.yaml:93-106
────────────────────────────────────────
  93 ┌         - image: lscr.io/linuxserver/qbittorrent:latest
  94 │           name: qbittorrent
  95 │           ports:
  96 │             - containerPort: 8080
  97 │               name: web
  98 │           envFrom:
  99 │             - configMapRef:
 100 │                 name: qbittorent-env
 101 └           volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'curl-container' of Deployment 'qbittorrent-vpn' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qbittorrent-deployment2.yaml:49-52
────────────────────────────────────────
  49 ┌         - name: curl-container
  50 │           image: quay.io/curl/curl:latest
  51 │           command: ["sleep", "infinity"]
  52 └           resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gluetun' of Deployment 'qbittorrent-vpn' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qbittorrent-deployment2.yaml:53-92
────────────────────────────────────────
  53 ┌         - image: qmcgaw/gluetun
  54 │           name: gluetun
  55 │           securityContext:
  56 │             capabilities:
  57 │               add: ["NET_ADMIN"]
  58 │           ports:
  59 │             - containerPort: 8000
  60 │               hostPort: 8000
  61 └               name: api
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gluetun-sync' of Deployment 'qbittorrent-vpn' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qbittorrent-deployment2.yaml:31-48
────────────────────────────────────────
  31 ┌         - name: gluetun-sync
  32 │           image: harbor.local.abbottland.io/library/gluetun-sync:0.0.10 # {"$imagepolicy": "flux-system:gluetun-sync"}
  33 │           imagePullPolicy: Always
  34 │           resources: {}
  35 │           ports:
  36 │             - containerPort: 4000
  37 │               hostPort: 4000
  38 │               name: sync-api
  39 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent-vpn' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qbittorrent-deployment2.yaml:93-106
────────────────────────────────────────
  93 ┌         - image: lscr.io/linuxserver/qbittorrent:latest
  94 │           name: qbittorrent
  95 │           ports:
  96 │             - containerPort: 8080
  97 │               name: web
  98 │           envFrom:
  99 │             - configMapRef:
 100 │                 name: qbittorent-env
 101 └           volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'curl-container' of Deployment 'qbittorrent-vpn' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qbittorrent-deployment2.yaml:49-52
────────────────────────────────────────
  49 ┌         - name: curl-container
  50 │           image: quay.io/curl/curl:latest
  51 │           command: ["sleep", "infinity"]
  52 └           resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gluetun' of Deployment 'qbittorrent-vpn' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qbittorrent-deployment2.yaml:53-92
────────────────────────────────────────
  53 ┌         - image: qmcgaw/gluetun
  54 │           name: gluetun
  55 │           securityContext:
  56 │             capabilities:
  57 │               add: ["NET_ADMIN"]
  58 │           ports:
  59 │             - containerPort: 8000
  60 │               hostPort: 8000
  61 └               name: api
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gluetun-sync' of Deployment 'qbittorrent-vpn' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qbittorrent-deployment2.yaml:31-48
────────────────────────────────────────
  31 ┌         - name: gluetun-sync
  32 │           image: harbor.local.abbottland.io/library/gluetun-sync:0.0.10 # {"$imagepolicy": "flux-system:gluetun-sync"}
  33 │           imagePullPolicy: Always
  34 │           resources: {}
  35 │           ports:
  36 │             - containerPort: 4000
  37 │               hostPort: 4000
  38 │               name: sync-api
  39 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent-vpn' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qbittorrent-deployment2.yaml:93-106
────────────────────────────────────────
  93 ┌         - image: lscr.io/linuxserver/qbittorrent:latest
  94 │           name: qbittorrent
  95 │           ports:
  96 │             - containerPort: 8080
  97 │               name: web
  98 │           envFrom:
  99 │             - configMapRef:
 100 │                 name: qbittorent-env
 101 └           volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'curl-container' of Deployment 'qbittorrent-vpn' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qbittorrent-deployment2.yaml:49-52
────────────────────────────────────────
  49 ┌         - name: curl-container
  50 │           image: quay.io/curl/curl:latest
  51 │           command: ["sleep", "infinity"]
  52 └           resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gluetun' of Deployment 'qbittorrent-vpn' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qbittorrent-deployment2.yaml:53-92
────────────────────────────────────────
  53 ┌         - image: qmcgaw/gluetun
  54 │           name: gluetun
  55 │           securityContext:
  56 │             capabilities:
  57 │               add: ["NET_ADMIN"]
  58 │           ports:
  59 │             - containerPort: 8000
  60 │               hostPort: 8000
  61 └               name: api
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gluetun-sync' of Deployment 'qbittorrent-vpn' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qbittorrent-deployment2.yaml:31-48
────────────────────────────────────────
  31 ┌         - name: gluetun-sync
  32 │           image: harbor.local.abbottland.io/library/gluetun-sync:0.0.10 # {"$imagepolicy": "flux-system:gluetun-sync"}
  33 │           imagePullPolicy: Always
  34 │           resources: {}
  35 │           ports:
  36 │             - containerPort: 4000
  37 │               hostPort: 4000
  38 │               name: sync-api
  39 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent-vpn' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qbittorrent-deployment2.yaml:93-106
────────────────────────────────────────
  93 ┌         - image: lscr.io/linuxserver/qbittorrent:latest
  94 │           name: qbittorrent
  95 │           ports:
  96 │             - containerPort: 8080
  97 │               name: web
  98 │           envFrom:
  99 │             - configMapRef:
 100 │                 name: qbittorent-env
 101 └           volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'gluetun' of Deployment 'qbittorrent-vpn' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 qbittorrent-deployment2.yaml:53-92
────────────────────────────────────────
  53 ┌         - image: qmcgaw/gluetun
  54 │           name: gluetun
  55 │           securityContext:
  56 │             capabilities:
  57 │               add: ["NET_ADMIN"]
  58 │           ports:
  59 │             - containerPort: 8000
  60 │               hostPort: 8000
  61 └               name: api
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'qbittorrent-vpn' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 qbittorrent-deployment2.yaml:9-119
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: qbittorrent-vpn
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: qbittorrent-vpn
  17 └         api: gluetun
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'gluetun' of Deployment 'qbittorrent-vpn' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 qbittorrent-deployment2.yaml:53-92
────────────────────────────────────────
  53 ┌         - image: qmcgaw/gluetun
  54 │           name: gluetun
  55 │           securityContext:
  56 │             capabilities:
  57 │               add: ["NET_ADMIN"]
  58 │           ports:
  59 │             - containerPort: 8000
  60 │               hostPort: 8000
  61 └               name: api
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'gluetun' of Deployment 'qbittorrent-vpn' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 qbittorrent-deployment2.yaml:93-106
────────────────────────────────────────
  93 ┌         - image: lscr.io/linuxserver/qbittorrent:latest
  94 │           name: qbittorrent
  95 │           ports:
  96 │             - containerPort: 8080
  97 │               name: web
  98 │           envFrom:
  99 │             - configMapRef:
 100 │                 name: qbittorent-env
 101 └           volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'gluetun' of Deployment 'qbittorrent-vpn' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 qbittorrent-deployment2.yaml:49-52
────────────────────────────────────────
  49 ┌         - name: curl-container
  50 │           image: quay.io/curl/curl:latest
  51 │           command: ["sleep", "infinity"]
  52 └           resources: {}
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'gluetun' of Deployment 'qbittorrent-vpn' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 qbittorrent-deployment2.yaml:31-48
────────────────────────────────────────
  31 ┌         - name: gluetun-sync
  32 │           image: harbor.local.abbottland.io/library/gluetun-sync:0.0.10 # {"$imagepolicy": "flux-system:gluetun-sync"}
  33 │           imagePullPolicy: Always
  34 │           resources: {}
  35 │           ports:
  36 │             - containerPort: 4000
  37 │               hostPort: 4000
  38 │               name: sync-api
  39 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'gluetun-sync' of Deployment 'qbittorrent-vpn' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 qbittorrent-deployment2.yaml:49-52
────────────────────────────────────────
  49 ┌         - name: curl-container
  50 │           image: quay.io/curl/curl:latest
  51 │           command: ["sleep", "infinity"]
  52 └           resources: {}
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'gluetun-sync' of Deployment 'qbittorrent-vpn' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 qbittorrent-deployment2.yaml:53-92
────────────────────────────────────────
  53 ┌         - image: qmcgaw/gluetun
  54 │           name: gluetun
  55 │           securityContext:
  56 │             capabilities:
  57 │               add: ["NET_ADMIN"]
  58 │           ports:
  59 │             - containerPort: 8000
  60 │               hostPort: 8000
  61 └               name: api
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'gluetun-sync' of Deployment 'qbittorrent-vpn' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 qbittorrent-deployment2.yaml:93-106
────────────────────────────────────────
  93 ┌         - image: lscr.io/linuxserver/qbittorrent:latest
  94 │           name: qbittorrent
  95 │           ports:
  96 │             - containerPort: 8080
  97 │               name: web
  98 │           envFrom:
  99 │             - configMapRef:
 100 │                 name: qbittorent-env
 101 └           volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'gluetun-sync' of Deployment 'qbittorrent-vpn' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 qbittorrent-deployment2.yaml:31-48
────────────────────────────────────────
  31 ┌         - name: gluetun-sync
  32 │           image: harbor.local.abbottland.io/library/gluetun-sync:0.0.10 # {"$imagepolicy": "flux-system:gluetun-sync"}
  33 │           imagePullPolicy: Always
  34 │           resources: {}
  35 │           ports:
  36 │             - containerPort: 4000
  37 │               hostPort: 4000
  38 │               name: sync-api
  39 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qbittorrent-deployment2.yaml:93-106
────────────────────────────────────────
  93 ┌         - image: lscr.io/linuxserver/qbittorrent:latest
  94 │           name: qbittorrent
  95 │           ports:
  96 │             - containerPort: 8080
  97 │               name: web
  98 │           envFrom:
  99 │             - configMapRef:
 100 │                 name: qbittorent-env
 101 └           volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qbittorrent-deployment2.yaml:53-92
────────────────────────────────────────
  53 ┌         - image: qmcgaw/gluetun
  54 │           name: gluetun
  55 │           securityContext:
  56 │             capabilities:
  57 │               add: ["NET_ADMIN"]
  58 │           ports:
  59 │             - containerPort: 8000
  60 │               hostPort: 8000
  61 └               name: api
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qbittorrent-deployment2.yaml:49-52
────────────────────────────────────────
  49 ┌         - name: curl-container
  50 │           image: quay.io/curl/curl:latest
  51 │           command: ["sleep", "infinity"]
  52 └           resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qbittorrent-deployment2.yaml:31-48
────────────────────────────────────────
  31 ┌         - name: gluetun-sync
  32 │           image: harbor.local.abbottland.io/library/gluetun-sync:0.0.10 # {"$imagepolicy": "flux-system:gluetun-sync"}
  33 │           imagePullPolicy: Always
  34 │           resources: {}
  35 │           ports:
  36 │             - containerPort: 4000
  37 │               hostPort: 4000
  38 │               name: sync-api
  39 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "curl-container" of deployment "qbittorrent-vpn" in "media" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qbittorrent-deployment2.yaml:49-52
────────────────────────────────────────
  49 ┌         - name: curl-container
  50 │           image: quay.io/curl/curl:latest
  51 │           command: ["sleep", "infinity"]
  52 └           resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gluetun" of deployment "qbittorrent-vpn" in "media" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qbittorrent-deployment2.yaml:53-92
────────────────────────────────────────
  53 ┌         - image: qmcgaw/gluetun
  54 │           name: gluetun
  55 │           securityContext:
  56 │             capabilities:
  57 │               add: ["NET_ADMIN"]
  58 │           ports:
  59 │             - containerPort: 8000
  60 │               hostPort: 8000
  61 └               name: api
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gluetun-sync" of deployment "qbittorrent-vpn" in "media" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qbittorrent-deployment2.yaml:31-48
────────────────────────────────────────
  31 ┌         - name: gluetun-sync
  32 │           image: harbor.local.abbottland.io/library/gluetun-sync:0.0.10 # {"$imagepolicy": "flux-system:gluetun-sync"}
  33 │           imagePullPolicy: Always
  34 │           resources: {}
  35 │           ports:
  36 │             - containerPort: 4000
  37 │               hostPort: 4000
  38 │               name: sync-api
  39 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "qbittorrent" of deployment "qbittorrent-vpn" in "media" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qbittorrent-deployment2.yaml:93-106
────────────────────────────────────────
  93 ┌         - image: lscr.io/linuxserver/qbittorrent:latest
  94 │           name: qbittorrent
  95 │           ports:
  96 │             - containerPort: 8080
  97 │               name: web
  98 │           envFrom:
  99 │             - configMapRef:
 100 │                 name: qbittorent-env
 101 └           volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qbittorrent-deployment2.yaml:93-106
────────────────────────────────────────
  93 ┌         - image: lscr.io/linuxserver/qbittorrent:latest
  94 │           name: qbittorrent
  95 │           ports:
  96 │             - containerPort: 8080
  97 │               name: web
  98 │           envFrom:
  99 │             - configMapRef:
 100 │                 name: qbittorent-env
 101 └           volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qbittorrent-deployment2.yaml:31-48
────────────────────────────────────────
  31 ┌         - name: gluetun-sync
  32 │           image: harbor.local.abbottland.io/library/gluetun-sync:0.0.10 # {"$imagepolicy": "flux-system:gluetun-sync"}
  33 │           imagePullPolicy: Always
  34 │           resources: {}
  35 │           ports:
  36 │             - containerPort: 4000
  37 │               hostPort: 4000
  38 │               name: sync-api
  39 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qbittorrent-deployment2.yaml:49-52
────────────────────────────────────────
  49 ┌         - name: curl-container
  50 │           image: quay.io/curl/curl:latest
  51 │           command: ["sleep", "infinity"]
  52 └           resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qbittorrent-deployment2.yaml:53-92
────────────────────────────────────────
  53 ┌         - image: qmcgaw/gluetun
  54 │           name: gluetun
  55 │           securityContext:
  56 │             capabilities:
  57 │               add: ["NET_ADMIN"]
  58 │           ports:
  59 │             - containerPort: 8000
  60 │               hostPort: 8000
  61 └               name: api
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qbittorrent-vpn in media namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qbittorrent-deployment2.yaml:49-52
────────────────────────────────────────
  49 ┌         - name: curl-container
  50 │           image: quay.io/curl/curl:latest
  51 │           command: ["sleep", "infinity"]
  52 └           resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qbittorrent-vpn in media namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qbittorrent-deployment2.yaml:31-48
────────────────────────────────────────
  31 ┌         - name: gluetun-sync
  32 │           image: harbor.local.abbottland.io/library/gluetun-sync:0.0.10 # {"$imagepolicy": "flux-system:gluetun-sync"}
  33 │           imagePullPolicy: Always
  34 │           resources: {}
  35 │           ports:
  36 │             - containerPort: 4000
  37 │               hostPort: 4000
  38 │               name: sync-api
  39 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qbittorrent-vpn in media namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qbittorrent-deployment2.yaml:93-106
────────────────────────────────────────
  93 ┌         - image: lscr.io/linuxserver/qbittorrent:latest
  94 │           name: qbittorrent
  95 │           ports:
  96 │             - containerPort: 8080
  97 │               name: web
  98 │           envFrom:
  99 │             - configMapRef:
 100 │                 name: qbittorent-env
 101 └           volumeMounts:
 ...   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment qbittorrent-vpn in media namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qbittorrent-deployment2.yaml:19-119
────────────────────────────────────────
  19 ┌       imagePullSecrets:
  20 │         - name: regcred
  21 │       affinity:
  22 │         nodeAffinity:
  23 │           requiredDuringSchedulingIgnoredDuringExecution:
  24 │             nodeSelectorTerms:
  25 │               - matchExpressions:
  26 │                   - key: kubernetes.io/arch
  27 └                     operator: NotIn
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container curl-container in deployment qbittorrent-vpn (namespace: media) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 qbittorrent-deployment2.yaml:49-52
────────────────────────────────────────
  49 ┌         - name: curl-container
  50 │           image: quay.io/curl/curl:latest
  51 │           command: ["sleep", "infinity"]
  52 └           resources: {}
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container gluetun in deployment qbittorrent-vpn (namespace: media) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 qbittorrent-deployment2.yaml:53-92
────────────────────────────────────────
  53 ┌         - image: qmcgaw/gluetun
  54 │           name: gluetun
  55 │           securityContext:
  56 │             capabilities:
  57 │               add: ["NET_ADMIN"]
  58 │           ports:
  59 │             - containerPort: 8000
  60 │               hostPort: 8000
  61 └               name: api
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container gluetun-sync in deployment qbittorrent-vpn (namespace: media) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 qbittorrent-deployment2.yaml:31-48
────────────────────────────────────────
  31 ┌         - name: gluetun-sync
  32 │           image: harbor.local.abbottland.io/library/gluetun-sync:0.0.10 # {"$imagepolicy": "flux-system:gluetun-sync"}
  33 │           imagePullPolicy: Always
  34 │           resources: {}
  35 │           ports:
  36 │             - containerPort: 4000
  37 │               hostPort: 4000
  38 │               name: sync-api
  39 └               protocol: TCP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container qbittorrent in deployment qbittorrent-vpn (namespace: media) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 qbittorrent-deployment2.yaml:93-106
────────────────────────────────────────
  93 ┌         - image: lscr.io/linuxserver/qbittorrent:latest
  94 │           name: qbittorrent
  95 │           ports:
  96 │             - containerPort: 8080
  97 │               name: web
  98 │           envFrom:
  99 │             - configMapRef:
 100 │                 name: qbittorent-env
 101 └           volumeMounts:
 ...   
────────────────────────────────────────



qbittorrent.yaml (kubernetes)
=============================
Tests: 124 (SUCCESSES: 90, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 9, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gluetun' of Deployment 'qbittorrent-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qbittorrent.yaml:23-61
────────────────────────────────────────
  23 ┌         - name: gluetun
  24 │           image: ghcr.io/qdm12/gluetun:v3.40.0
  25 │           restartPolicy: Always
  26 │           env:
  27 │             - name: TZ
  28 │               value: "America/Los_Angeles"
  29 │             - name: VPN_TYPE
  30 │               value: "wireguard"
  31 └             - name: VPN_SERVICE_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'qbittorrent' of Deployment 'qbittorrent-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qbittorrent.yaml:63-80
────────────────────────────────────────
  63 ┌         - name: qbittorrent
  64 │           image: lscr.io/linuxserver/qbittorrent:5.0.4
  65 │           env:
  66 │             - name: TZ
  67 │               value: "America/Los_Angeles"
  68 │             - name: PUID
  69 │               value: "1024"
  70 │             - name: PGID
  71 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gluetun' of Deployment 'qbittorrent-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qbittorrent.yaml:23-61
────────────────────────────────────────
  23 ┌         - name: gluetun
  24 │           image: ghcr.io/qdm12/gluetun:v3.40.0
  25 │           restartPolicy: Always
  26 │           env:
  27 │             - name: TZ
  28 │               value: "America/Los_Angeles"
  29 │             - name: VPN_TYPE
  30 │               value: "wireguard"
  31 └             - name: VPN_SERVICE_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qbittorrent.yaml:63-80
────────────────────────────────────────
  63 ┌         - name: qbittorrent
  64 │           image: lscr.io/linuxserver/qbittorrent:5.0.4
  65 │           env:
  66 │             - name: TZ
  67 │               value: "America/Los_Angeles"
  68 │             - name: PUID
  69 │               value: "1024"
  70 │             - name: PGID
  71 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gluetun' of 'deployment' 'qbittorrent-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qbittorrent.yaml:23-61
────────────────────────────────────────
  23 ┌         - name: gluetun
  24 │           image: ghcr.io/qdm12/gluetun:v3.40.0
  25 │           restartPolicy: Always
  26 │           env:
  27 │             - name: TZ
  28 │               value: "America/Los_Angeles"
  29 │             - name: VPN_TYPE
  30 │               value: "wireguard"
  31 └             - name: VPN_SERVICE_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'qbittorrent' of 'deployment' 'qbittorrent-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qbittorrent.yaml:63-80
────────────────────────────────────────
  63 ┌         - name: qbittorrent
  64 │           image: lscr.io/linuxserver/qbittorrent:5.0.4
  65 │           env:
  66 │             - name: TZ
  67 │               value: "America/Los_Angeles"
  68 │             - name: PUID
  69 │               value: "1024"
  70 │             - name: PGID
  71 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gluetun' of Deployment 'qbittorrent-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qbittorrent.yaml:23-61
────────────────────────────────────────
  23 ┌         - name: gluetun
  24 │           image: ghcr.io/qdm12/gluetun:v3.40.0
  25 │           restartPolicy: Always
  26 │           env:
  27 │             - name: TZ
  28 │               value: "America/Los_Angeles"
  29 │             - name: VPN_TYPE
  30 │               value: "wireguard"
  31 └             - name: VPN_SERVICE_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qbittorrent.yaml:63-80
────────────────────────────────────────
  63 ┌         - name: qbittorrent
  64 │           image: lscr.io/linuxserver/qbittorrent:5.0.4
  65 │           env:
  66 │             - name: TZ
  67 │               value: "America/Los_Angeles"
  68 │             - name: PUID
  69 │               value: "1024"
  70 │             - name: PGID
  71 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gluetun' of Deployment 'qbittorrent-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qbittorrent.yaml:23-61
────────────────────────────────────────
  23 ┌         - name: gluetun
  24 │           image: ghcr.io/qdm12/gluetun:v3.40.0
  25 │           restartPolicy: Always
  26 │           env:
  27 │             - name: TZ
  28 │               value: "America/Los_Angeles"
  29 │             - name: VPN_TYPE
  30 │               value: "wireguard"
  31 └             - name: VPN_SERVICE_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'qbittorrent' of Deployment 'qbittorrent-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qbittorrent.yaml:63-80
────────────────────────────────────────
  63 ┌         - name: qbittorrent
  64 │           image: lscr.io/linuxserver/qbittorrent:5.0.4
  65 │           env:
  66 │             - name: TZ
  67 │               value: "America/Los_Angeles"
  68 │             - name: PUID
  69 │               value: "1024"
  70 │             - name: PGID
  71 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gluetun' of Deployment 'qbittorrent-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qbittorrent.yaml:23-61
────────────────────────────────────────
  23 ┌         - name: gluetun
  24 │           image: ghcr.io/qdm12/gluetun:v3.40.0
  25 │           restartPolicy: Always
  26 │           env:
  27 │             - name: TZ
  28 │               value: "America/Los_Angeles"
  29 │             - name: VPN_TYPE
  30 │               value: "wireguard"
  31 └             - name: VPN_SERVICE_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'qbittorrent' of Deployment 'qbittorrent-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qbittorrent.yaml:63-80
────────────────────────────────────────
  63 ┌         - name: qbittorrent
  64 │           image: lscr.io/linuxserver/qbittorrent:5.0.4
  65 │           env:
  66 │             - name: TZ
  67 │               value: "America/Los_Angeles"
  68 │             - name: PUID
  69 │               value: "1024"
  70 │             - name: PGID
  71 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gluetun' of Deployment 'qbittorrent-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qbittorrent.yaml:23-61
────────────────────────────────────────
  23 ┌         - name: gluetun
  24 │           image: ghcr.io/qdm12/gluetun:v3.40.0
  25 │           restartPolicy: Always
  26 │           env:
  27 │             - name: TZ
  28 │               value: "America/Los_Angeles"
  29 │             - name: VPN_TYPE
  30 │               value: "wireguard"
  31 └             - name: VPN_SERVICE_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qbittorrent.yaml:63-80
────────────────────────────────────────
  63 ┌         - name: qbittorrent
  64 │           image: lscr.io/linuxserver/qbittorrent:5.0.4
  65 │           env:
  66 │             - name: TZ
  67 │               value: "America/Los_Angeles"
  68 │             - name: PUID
  69 │               value: "1024"
  70 │             - name: PGID
  71 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gluetun' of Deployment 'qbittorrent-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qbittorrent.yaml:23-61
────────────────────────────────────────
  23 ┌         - name: gluetun
  24 │           image: ghcr.io/qdm12/gluetun:v3.40.0
  25 │           restartPolicy: Always
  26 │           env:
  27 │             - name: TZ
  28 │               value: "America/Los_Angeles"
  29 │             - name: VPN_TYPE
  30 │               value: "wireguard"
  31 └             - name: VPN_SERVICE_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qbittorrent.yaml:63-80
────────────────────────────────────────
  63 ┌         - name: qbittorrent
  64 │           image: lscr.io/linuxserver/qbittorrent:5.0.4
  65 │           env:
  66 │             - name: TZ
  67 │               value: "America/Los_Angeles"
  68 │             - name: PUID
  69 │               value: "1024"
  70 │             - name: PGID
  71 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gluetun' of Deployment 'qbittorrent-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qbittorrent.yaml:23-61
────────────────────────────────────────
  23 ┌         - name: gluetun
  24 │           image: ghcr.io/qdm12/gluetun:v3.40.0
  25 │           restartPolicy: Always
  26 │           env:
  27 │             - name: TZ
  28 │               value: "America/Los_Angeles"
  29 │             - name: VPN_TYPE
  30 │               value: "wireguard"
  31 └             - name: VPN_SERVICE_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qbittorrent.yaml:63-80
────────────────────────────────────────
  63 ┌         - name: qbittorrent
  64 │           image: lscr.io/linuxserver/qbittorrent:5.0.4
  65 │           env:
  66 │             - name: TZ
  67 │               value: "America/Los_Angeles"
  68 │             - name: PUID
  69 │               value: "1024"
  70 │             - name: PGID
  71 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gluetun' of Deployment 'qbittorrent-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qbittorrent.yaml:23-61
────────────────────────────────────────
  23 ┌         - name: gluetun
  24 │           image: ghcr.io/qdm12/gluetun:v3.40.0
  25 │           restartPolicy: Always
  26 │           env:
  27 │             - name: TZ
  28 │               value: "America/Los_Angeles"
  29 │             - name: VPN_TYPE
  30 │               value: "wireguard"
  31 └             - name: VPN_SERVICE_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qbittorrent.yaml:63-80
────────────────────────────────────────
  63 ┌         - name: qbittorrent
  64 │           image: lscr.io/linuxserver/qbittorrent:5.0.4
  65 │           env:
  66 │             - name: TZ
  67 │               value: "America/Los_Angeles"
  68 │             - name: PUID
  69 │               value: "1024"
  70 │             - name: PGID
  71 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gluetun' of Deployment 'qbittorrent-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qbittorrent.yaml:23-61
────────────────────────────────────────
  23 ┌         - name: gluetun
  24 │           image: ghcr.io/qdm12/gluetun:v3.40.0
  25 │           restartPolicy: Always
  26 │           env:
  27 │             - name: TZ
  28 │               value: "America/Los_Angeles"
  29 │             - name: VPN_TYPE
  30 │               value: "wireguard"
  31 └             - name: VPN_SERVICE_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'qbittorrent' of Deployment 'qbittorrent-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qbittorrent.yaml:63-80
────────────────────────────────────────
  63 ┌         - name: qbittorrent
  64 │           image: lscr.io/linuxserver/qbittorrent:5.0.4
  65 │           env:
  66 │             - name: TZ
  67 │               value: "America/Los_Angeles"
  68 │             - name: PUID
  69 │               value: "1024"
  70 │             - name: PGID
  71 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'gluetun' of Deployment 'qbittorrent-deployment' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 qbittorrent.yaml:23-61
────────────────────────────────────────
  23 ┌         - name: gluetun
  24 │           image: ghcr.io/qdm12/gluetun:v3.40.0
  25 │           restartPolicy: Always
  26 │           env:
  27 │             - name: TZ
  28 │               value: "America/Los_Angeles"
  29 │             - name: VPN_TYPE
  30 │               value: "wireguard"
  31 └             - name: VPN_SERVICE_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qbittorrent.yaml:63-80
────────────────────────────────────────
  63 ┌         - name: qbittorrent
  64 │           image: lscr.io/linuxserver/qbittorrent:5.0.4
  65 │           env:
  66 │             - name: TZ
  67 │               value: "America/Los_Angeles"
  68 │             - name: PUID
  69 │               value: "1024"
  70 │             - name: PGID
  71 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qbittorrent.yaml:23-61
────────────────────────────────────────
  23 ┌         - name: gluetun
  24 │           image: ghcr.io/qdm12/gluetun:v3.40.0
  25 │           restartPolicy: Always
  26 │           env:
  27 │             - name: TZ
  28 │               value: "America/Los_Angeles"
  29 │             - name: VPN_TYPE
  30 │               value: "wireguard"
  31 └             - name: VPN_SERVICE_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gluetun" of deployment "qbittorrent-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qbittorrent.yaml:23-61
────────────────────────────────────────
  23 ┌         - name: gluetun
  24 │           image: ghcr.io/qdm12/gluetun:v3.40.0
  25 │           restartPolicy: Always
  26 │           env:
  27 │             - name: TZ
  28 │               value: "America/Los_Angeles"
  29 │             - name: VPN_TYPE
  30 │               value: "wireguard"
  31 └             - name: VPN_SERVICE_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "qbittorrent" of deployment "qbittorrent-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qbittorrent.yaml:63-80
────────────────────────────────────────
  63 ┌         - name: qbittorrent
  64 │           image: lscr.io/linuxserver/qbittorrent:5.0.4
  65 │           env:
  66 │             - name: TZ
  67 │               value: "America/Los_Angeles"
  68 │             - name: PUID
  69 │               value: "1024"
  70 │             - name: PGID
  71 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qbittorrent.yaml:63-80
────────────────────────────────────────
  63 ┌         - name: qbittorrent
  64 │           image: lscr.io/linuxserver/qbittorrent:5.0.4
  65 │           env:
  66 │             - name: TZ
  67 │               value: "America/Los_Angeles"
  68 │             - name: PUID
  69 │               value: "1024"
  70 │             - name: PGID
  71 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qbittorrent.yaml:23-61
────────────────────────────────────────
  23 ┌         - name: gluetun
  24 │           image: ghcr.io/qdm12/gluetun:v3.40.0
  25 │           restartPolicy: Always
  26 │           env:
  27 │             - name: TZ
  28 │               value: "America/Los_Angeles"
  29 │             - name: VPN_TYPE
  30 │               value: "wireguard"
  31 └             - name: VPN_SERVICE_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment qbittorrent-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 qbittorrent.yaml:4
────────────────────────────────────────
   4 [   name: qbittorrent-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qbittorrent-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qbittorrent.yaml:63-80
────────────────────────────────────────
  63 ┌         - name: qbittorrent
  64 │           image: lscr.io/linuxserver/qbittorrent:5.0.4
  65 │           env:
  66 │             - name: TZ
  67 │               value: "America/Los_Angeles"
  68 │             - name: PUID
  69 │               value: "1024"
  70 │             - name: PGID
  71 └               value: "100"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment qbittorrent-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qbittorrent.yaml:15-80
────────────────────────────────────────
  15 ┌       volumes:
  16 │         - name: qbittorrent-config
  17 │           persistentVolumeClaim:
  18 │             claimName: qbittorrent-config-claim
  19 │         - name: qbittorrent-data
  20 │           persistentVolumeClaim:
  21 │             claimName: nfs-claim
  22 │       initContainers:
  23 └         - name: gluetun
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container gluetun in deployment qbittorrent-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 qbittorrent.yaml:23-61
────────────────────────────────────────
  23 ┌         - name: gluetun
  24 │           image: ghcr.io/qdm12/gluetun:v3.40.0
  25 │           restartPolicy: Always
  26 │           env:
  27 │             - name: TZ
  28 │               value: "America/Los_Angeles"
  29 │             - name: VPN_TYPE
  30 │               value: "wireguard"
  31 └             - name: VPN_SERVICE_PROVIDER
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container qbittorrent in deployment qbittorrent-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 qbittorrent.yaml:63-80
────────────────────────────────────────
  63 ┌         - name: qbittorrent
  64 │           image: lscr.io/linuxserver/qbittorrent:5.0.4
  65 │           env:
  66 │             - name: TZ
  67 │               value: "America/Los_Angeles"
  68 │             - name: PUID
  69 │               value: "1024"
  70 │             - name: PGID
  71 └               value: "100"
  ..   
────────────────────────────────────────



qdrant-deployment.yaml (kubernetes)
===================================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'qdrant' of Deployment 'qdrant-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qdrant-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: qdrant
  19 │         image: qdrant/qdrant:latest
  20 │         ports:
  21 └         - containerPort: 6334
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'qdrant' of Deployment 'qdrant-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qdrant-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: qdrant
  19 │         image: qdrant/qdrant:latest
  20 │         ports:
  21 └         - containerPort: 6334
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'qdrant' of 'deployment' 'qdrant-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qdrant-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: qdrant
  19 │         image: qdrant/qdrant:latest
  20 │         ports:
  21 └         - containerPort: 6334
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'qdrant' of Deployment 'qdrant-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qdrant-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: qdrant
  19 │         image: qdrant/qdrant:latest
  20 │         ports:
  21 └         - containerPort: 6334
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'qdrant' of Deployment 'qdrant-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qdrant-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: qdrant
  19 │         image: qdrant/qdrant:latest
  20 │         ports:
  21 └         - containerPort: 6334
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'qdrant' of Deployment 'qdrant-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qdrant-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: qdrant
  19 │         image: qdrant/qdrant:latest
  20 │         ports:
  21 └         - containerPort: 6334
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'qdrant' of Deployment 'qdrant-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qdrant-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: qdrant
  19 │         image: qdrant/qdrant:latest
  20 │         ports:
  21 └         - containerPort: 6334
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'qdrant' of Deployment 'qdrant-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qdrant-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: qdrant
  19 │         image: qdrant/qdrant:latest
  20 │         ports:
  21 └         - containerPort: 6334
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'qdrant' of Deployment 'qdrant-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qdrant-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: qdrant
  19 │         image: qdrant/qdrant:latest
  20 │         ports:
  21 └         - containerPort: 6334
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'qdrant' of Deployment 'qdrant-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qdrant-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: qdrant
  19 │         image: qdrant/qdrant:latest
  20 │         ports:
  21 └         - containerPort: 6334
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'qdrant' of Deployment 'qdrant-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qdrant-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: qdrant
  19 │         image: qdrant/qdrant:latest
  20 │         ports:
  21 └         - containerPort: 6334
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'qdrant' of Deployment 'qdrant-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qdrant-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: qdrant
  19 │         image: qdrant/qdrant:latest
  20 │         ports:
  21 └         - containerPort: 6334
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qdrant-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: qdrant
  19 │         image: qdrant/qdrant:latest
  20 │         ports:
  21 └         - containerPort: 6334
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "qdrant" of deployment "qdrant-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qdrant-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: qdrant
  19 │         image: qdrant/qdrant:latest
  20 │         ports:
  21 └         - containerPort: 6334
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qdrant-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: qdrant
  19 │         image: qdrant/qdrant:latest
  20 │         ports:
  21 └         - containerPort: 6334
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment qdrant-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 qdrant-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: qdrant-deployment
   5 │   labels:
   6 └     app: qdrant
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qdrant-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qdrant-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: qdrant
  19 │         image: qdrant/qdrant:latest
  20 │         ports:
  21 └         - containerPort: 6334
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment qdrant-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qdrant-deployment.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: qdrant
  19 │         image: qdrant/qdrant:latest
  20 │         ports:
  21 └         - containerPort: 6334
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container qdrant in deployment qdrant-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 qdrant-deployment.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: qdrant
  19 │         image: qdrant/qdrant:latest
  20 │         ports:
  21 └         - containerPort: 6334
────────────────────────────────────────



qos-besteffort.yaml (kubernetes)
================================
Tests: 125 (SUCCESSES: 91, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'qos-besteffort' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qos-besteffort.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sidecar' of Pod 'qos-besteffort' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qos-besteffort.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'qos-besteffort' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qos-besteffort.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sidecar' of Pod 'qos-besteffort' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qos-besteffort.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'qos-besteffort' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qos-besteffort.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sidecar' of 'pod' 'qos-besteffort' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qos-besteffort.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'main' of Pod 'qos-besteffort' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qos-besteffort.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sidecar' of Pod 'qos-besteffort' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qos-besteffort.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'qos-besteffort' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qos-besteffort.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sidecar' of Pod 'qos-besteffort' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qos-besteffort.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Pod 'qos-besteffort' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qos-besteffort.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sidecar' of Pod 'qos-besteffort' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qos-besteffort.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'qos-besteffort' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qos-besteffort.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sidecar' of Pod 'qos-besteffort' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qos-besteffort.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'main' of Pod 'qos-besteffort' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qos-besteffort.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sidecar' of Pod 'qos-besteffort' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qos-besteffort.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'main' of Pod 'qos-besteffort' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qos-besteffort.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sidecar' of Pod 'qos-besteffort' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qos-besteffort.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'main' of Pod 'qos-besteffort' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qos-besteffort.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sidecar' of Pod 'qos-besteffort' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qos-besteffort.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'qos-besteffort' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qos-besteffort.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sidecar' of Pod 'qos-besteffort' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qos-besteffort.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'qos-besteffort' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qos-besteffort.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sidecar' of Pod 'qos-besteffort' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qos-besteffort.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qos-besteffort.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qos-besteffort.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "qos-besteffort" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qos-besteffort.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sidecar" of pod "qos-besteffort" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qos-besteffort.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qos-besteffort.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qos-besteffort.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod qos-besteffort in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 qos-besteffort.yaml:4
────────────────────────────────────────
   4 [   name: qos-besteffort
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qos-besteffort in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-besteffort.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qos-besteffort in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-besteffort.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod qos-besteffort in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-besteffort.yaml:6-13
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 │     name: sidecar
  13 └   terminationGracePeriodSeconds: 0
────────────────────────────────────────



qos-besteffort1.yaml (kubernetes)
=================================
Tests: 125 (SUCCESSES: 91, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'qos-besteffort' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qos-besteffort1.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sidecar' of Pod 'qos-besteffort' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qos-besteffort1.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'qos-besteffort' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qos-besteffort1.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sidecar' of Pod 'qos-besteffort' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qos-besteffort1.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'qos-besteffort' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qos-besteffort1.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sidecar' of 'pod' 'qos-besteffort' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qos-besteffort1.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'main' of Pod 'qos-besteffort' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qos-besteffort1.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sidecar' of Pod 'qos-besteffort' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qos-besteffort1.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'qos-besteffort' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qos-besteffort1.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sidecar' of Pod 'qos-besteffort' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qos-besteffort1.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Pod 'qos-besteffort' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qos-besteffort1.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sidecar' of Pod 'qos-besteffort' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qos-besteffort1.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'qos-besteffort' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qos-besteffort1.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sidecar' of Pod 'qos-besteffort' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qos-besteffort1.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'main' of Pod 'qos-besteffort' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qos-besteffort1.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sidecar' of Pod 'qos-besteffort' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qos-besteffort1.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'main' of Pod 'qos-besteffort' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qos-besteffort1.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sidecar' of Pod 'qos-besteffort' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qos-besteffort1.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'main' of Pod 'qos-besteffort' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qos-besteffort1.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sidecar' of Pod 'qos-besteffort' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qos-besteffort1.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'qos-besteffort' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qos-besteffort1.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sidecar' of Pod 'qos-besteffort' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qos-besteffort1.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'qos-besteffort' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qos-besteffort1.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sidecar' of Pod 'qos-besteffort' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qos-besteffort1.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qos-besteffort1.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qos-besteffort1.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "qos-besteffort" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qos-besteffort1.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sidecar" of pod "qos-besteffort" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qos-besteffort1.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qos-besteffort1.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qos-besteffort1.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod qos-besteffort in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 qos-besteffort1.yaml:4
────────────────────────────────────────
   4 [   name: qos-besteffort
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qos-besteffort in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-besteffort1.yaml:7-9
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 └     name: main
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qos-besteffort in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-besteffort1.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod qos-besteffort in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-besteffort1.yaml:6-13
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │   - image: busybox
  11 │     args: ["sleep", "9999999"]
  12 │     name: sidecar
  13 └   terminationGracePeriodSeconds: 0
────────────────────────────────────────



qos-besteffort2.yaml (kubernetes)
=================================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'qos-besteffort' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qos-besteffort2.yaml:10-11
────────────────────────────────────────
  10 ┌     - name: nginx
  11 └       image: nginx   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'qos-besteffort' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qos-besteffort2.yaml:10-11
────────────────────────────────────────
  10 ┌     - name: nginx
  11 └       image: nginx   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'qos-besteffort' in 'qos-example' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qos-besteffort2.yaml:10-11
────────────────────────────────────────
  10 ┌     - name: nginx
  11 └       image: nginx   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'qos-besteffort' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qos-besteffort2.yaml:10-11
────────────────────────────────────────
  10 ┌     - name: nginx
  11 └       image: nginx   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'qos-besteffort' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qos-besteffort2.yaml:10-11
────────────────────────────────────────
  10 ┌     - name: nginx
  11 └       image: nginx   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'qos-besteffort' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qos-besteffort2.yaml:10-11
────────────────────────────────────────
  10 ┌     - name: nginx
  11 └       image: nginx   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'qos-besteffort' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qos-besteffort2.yaml:10-11
────────────────────────────────────────
  10 ┌     - name: nginx
  11 └       image: nginx   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'qos-besteffort' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qos-besteffort2.yaml:10-11
────────────────────────────────────────
  10 ┌     - name: nginx
  11 └       image: nginx   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'qos-besteffort' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qos-besteffort2.yaml:10-11
────────────────────────────────────────
  10 ┌     - name: nginx
  11 └       image: nginx   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'qos-besteffort' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qos-besteffort2.yaml:10-11
────────────────────────────────────────
  10 ┌     - name: nginx
  11 └       image: nginx   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'qos-besteffort' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qos-besteffort2.yaml:10-11
────────────────────────────────────────
  10 ┌     - name: nginx
  11 └       image: nginx   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'qos-besteffort' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qos-besteffort2.yaml:10-11
────────────────────────────────────────
  10 ┌     - name: nginx
  11 └       image: nginx   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qos-besteffort2.yaml:10-11
────────────────────────────────────────
  10 ┌     - name: nginx
  11 └       image: nginx   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "qos-besteffort" in "qos-example" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qos-besteffort2.yaml:10-11
────────────────────────────────────────
  10 ┌     - name: nginx
  11 └       image: nginx   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qos-besteffort2.yaml:10-11
────────────────────────────────────────
  10 ┌     - name: nginx
  11 └       image: nginx   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qos-besteffort in qos-example namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-besteffort2.yaml:10-11
────────────────────────────────────────
  10 ┌     - name: nginx
  11 └       image: nginx   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod qos-besteffort in qos-example namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-besteffort2.yaml:9-11
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: nginx
  11 └       image: nginx   
────────────────────────────────────────



qos-burstable.yaml (kubernetes)
===============================
Tests: 124 (SUCCESSES: 91, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'qos-burstable' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qos-burstable.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sidecar' of Pod 'qos-burstable' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qos-burstable.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'qos-burstable' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qos-burstable.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sidecar' of Pod 'qos-burstable' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qos-burstable.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'qos-burstable' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qos-burstable.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sidecar' of 'pod' 'qos-burstable' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qos-burstable.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'main' of Pod 'qos-burstable' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qos-burstable.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sidecar' of Pod 'qos-burstable' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qos-burstable.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'qos-burstable' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qos-burstable.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sidecar' of Pod 'qos-burstable' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qos-burstable.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Pod 'qos-burstable' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qos-burstable.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sidecar' of Pod 'qos-burstable' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qos-burstable.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'qos-burstable' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qos-burstable.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sidecar' of Pod 'qos-burstable' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qos-burstable.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sidecar' of Pod 'qos-burstable' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qos-burstable.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'main' of Pod 'qos-burstable' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qos-burstable.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sidecar' of Pod 'qos-burstable' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qos-burstable.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'main' of Pod 'qos-burstable' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qos-burstable.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sidecar' of Pod 'qos-burstable' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qos-burstable.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'qos-burstable' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qos-burstable.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sidecar' of Pod 'qos-burstable' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qos-burstable.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'qos-burstable' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qos-burstable.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sidecar' of Pod 'qos-burstable' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qos-burstable.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qos-burstable.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qos-burstable.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "qos-burstable" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qos-burstable.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sidecar" of pod "qos-burstable" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qos-burstable.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qos-burstable.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qos-burstable.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod qos-burstable in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 qos-burstable.yaml:4
────────────────────────────────────────
   4 [   name: qos-burstable
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qos-burstable in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-burstable.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qos-burstable in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-burstable.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod qos-burstable in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-burstable.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │   - image: busybox
  14 └     args: ["sleep", "9999999"]
  ..   
────────────────────────────────────────



qos-burstable1.yaml (kubernetes)
================================
Tests: 124 (SUCCESSES: 91, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'qos-burstable' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qos-burstable1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sidecar' of Pod 'qos-burstable' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qos-burstable1.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'qos-burstable' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qos-burstable1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sidecar' of Pod 'qos-burstable' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qos-burstable1.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'qos-burstable' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qos-burstable1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sidecar' of 'pod' 'qos-burstable' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qos-burstable1.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'main' of Pod 'qos-burstable' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qos-burstable1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sidecar' of Pod 'qos-burstable' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qos-burstable1.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'qos-burstable' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qos-burstable1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sidecar' of Pod 'qos-burstable' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qos-burstable1.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Pod 'qos-burstable' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qos-burstable1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sidecar' of Pod 'qos-burstable' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qos-burstable1.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'qos-burstable' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qos-burstable1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sidecar' of Pod 'qos-burstable' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qos-burstable1.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sidecar' of Pod 'qos-burstable' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qos-burstable1.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'main' of Pod 'qos-burstable' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qos-burstable1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sidecar' of Pod 'qos-burstable' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qos-burstable1.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'main' of Pod 'qos-burstable' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qos-burstable1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sidecar' of Pod 'qos-burstable' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qos-burstable1.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'qos-burstable' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qos-burstable1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sidecar' of Pod 'qos-burstable' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qos-burstable1.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'qos-burstable' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qos-burstable1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sidecar' of Pod 'qos-burstable' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qos-burstable1.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qos-burstable1.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qos-burstable1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "qos-burstable" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qos-burstable1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sidecar" of pod "qos-burstable" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qos-burstable1.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qos-burstable1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qos-burstable1.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod qos-burstable in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 qos-burstable1.yaml:4
────────────────────────────────────────
   4 [   name: qos-burstable
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qos-burstable in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-burstable1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qos-burstable in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-burstable1.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod qos-burstable in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-burstable1.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │   - image: busybox
  14 └     args: ["sleep", "9999999"]
  ..   
────────────────────────────────────────



qos-burstable2.yaml (kubernetes)
================================
Tests: 124 (SUCCESSES: 91, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'qos-burstable2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qos-burstable2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sidecar' of Pod 'qos-burstable2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qos-burstable2.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'qos-burstable2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qos-burstable2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sidecar' of Pod 'qos-burstable2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qos-burstable2.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'qos-burstable2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qos-burstable2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sidecar' of 'pod' 'qos-burstable2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qos-burstable2.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sidecar' of Pod 'qos-burstable2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qos-burstable2.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'qos-burstable2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qos-burstable2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sidecar' of Pod 'qos-burstable2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qos-burstable2.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Pod 'qos-burstable2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qos-burstable2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sidecar' of Pod 'qos-burstable2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qos-burstable2.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'qos-burstable2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qos-burstable2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sidecar' of Pod 'qos-burstable2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qos-burstable2.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'main' of Pod 'qos-burstable2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qos-burstable2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sidecar' of Pod 'qos-burstable2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qos-burstable2.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'main' of Pod 'qos-burstable2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qos-burstable2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sidecar' of Pod 'qos-burstable2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qos-burstable2.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'main' of Pod 'qos-burstable2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qos-burstable2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sidecar' of Pod 'qos-burstable2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qos-burstable2.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'qos-burstable2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qos-burstable2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sidecar' of Pod 'qos-burstable2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qos-burstable2.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'qos-burstable2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qos-burstable2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sidecar' of Pod 'qos-burstable2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qos-burstable2.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qos-burstable2.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qos-burstable2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "qos-burstable2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qos-burstable2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sidecar" of pod "qos-burstable2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qos-burstable2.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qos-burstable2.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qos-burstable2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod qos-burstable2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 qos-burstable2.yaml:4
────────────────────────────────────────
   4 [   name: qos-burstable2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qos-burstable2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-burstable2.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qos-burstable2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-burstable2.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod qos-burstable2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-burstable2.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 │         cpu: 100m
  13 │   - image: busybox
  14 └     args: ["sleep", "9999999"]
  ..   
────────────────────────────────────────



qos-burstable21.yaml (kubernetes)
=================================
Tests: 124 (SUCCESSES: 91, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'qos-burstable2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qos-burstable21.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sidecar' of Pod 'qos-burstable2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qos-burstable21.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'qos-burstable2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qos-burstable21.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sidecar' of Pod 'qos-burstable2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qos-burstable21.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'qos-burstable2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qos-burstable21.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sidecar' of 'pod' 'qos-burstable2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qos-burstable21.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sidecar' of Pod 'qos-burstable2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qos-burstable21.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'qos-burstable2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qos-burstable21.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sidecar' of Pod 'qos-burstable2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qos-burstable21.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Pod 'qos-burstable2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qos-burstable21.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sidecar' of Pod 'qos-burstable2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qos-burstable21.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'qos-burstable2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qos-burstable21.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sidecar' of Pod 'qos-burstable2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qos-burstable21.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'main' of Pod 'qos-burstable2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qos-burstable21.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sidecar' of Pod 'qos-burstable2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qos-burstable21.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'main' of Pod 'qos-burstable2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qos-burstable21.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sidecar' of Pod 'qos-burstable2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qos-burstable21.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'main' of Pod 'qos-burstable2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qos-burstable21.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sidecar' of Pod 'qos-burstable2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qos-burstable21.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'qos-burstable2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qos-burstable21.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sidecar' of Pod 'qos-burstable2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qos-burstable21.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'qos-burstable2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qos-burstable21.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sidecar' of Pod 'qos-burstable2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qos-burstable21.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qos-burstable21.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qos-burstable21.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "qos-burstable2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qos-burstable21.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sidecar" of pod "qos-burstable2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qos-burstable21.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qos-burstable21.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qos-burstable21.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod qos-burstable2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 qos-burstable21.yaml:4
────────────────────────────────────────
   4 [   name: qos-burstable2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qos-burstable2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-burstable21.yaml:13-15
────────────────────────────────────────
  13 ┌   - image: busybox
  14 │     args: ["sleep", "9999999"]
  15 └     name: sidecar
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qos-burstable2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-burstable21.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 └         cpu: 100m
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod qos-burstable2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-burstable21.yaml:6-16
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       limits:
  12 │         cpu: 100m
  13 │   - image: busybox
  14 └     args: ["sleep", "9999999"]
  ..   
────────────────────────────────────────



qos-burstable3.yaml (kubernetes)
================================
Tests: 109 (SUCCESSES: 93, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'qos-burstable' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qos-burstable3.yaml:10-16
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │         requests:
  16 └           memory: "150Mi"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'qos-burstable' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qos-burstable3.yaml:10-16
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │         requests:
  16 └           memory: "150Mi"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'qos-burstable' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qos-burstable3.yaml:10-16
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │         requests:
  16 └           memory: "150Mi"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'qos-burstable' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qos-burstable3.yaml:10-16
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │         requests:
  16 └           memory: "150Mi"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'qos-burstable' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qos-burstable3.yaml:10-16
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │         requests:
  16 └           memory: "150Mi"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'qos-burstable' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qos-burstable3.yaml:10-16
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │         requests:
  16 └           memory: "150Mi"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'qos-burstable' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qos-burstable3.yaml:10-16
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │         requests:
  16 └           memory: "150Mi"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'qos-burstable' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qos-burstable3.yaml:10-16
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │         requests:
  16 └           memory: "150Mi"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'qos-burstable' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qos-burstable3.yaml:10-16
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │         requests:
  16 └           memory: "150Mi"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'qos-burstable' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qos-burstable3.yaml:10-16
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │         requests:
  16 └           memory: "150Mi"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qos-burstable3.yaml:10-16
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │         requests:
  16 └           memory: "150Mi"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "qos-burstable" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qos-burstable3.yaml:10-16
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │         requests:
  16 └           memory: "150Mi"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qos-burstable3.yaml:10-16
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │         requests:
  16 └           memory: "150Mi"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod qos-burstable in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 qos-burstable3.yaml:4-7
────────────────────────────────────────
   4 ┌   name: qos-burstable
   5 │ #  namespace: qos-example
   6 │   labels:
   7 └    app: utrains
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qos-burstable in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-burstable3.yaml:10-16
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │         requests:
  16 └           memory: "150Mi"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod qos-burstable in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-burstable3.yaml:9-16
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │         requests:
  16 └           memory: "150Mi"
────────────────────────────────────────



qos-guaranteed.yaml (kubernetes)
================================
Tests: 121 (SUCCESSES: 95, FAILURES: 26)
Failures: 26 (UNKNOWN: 0, LOW: 13, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'qos-guaranteed' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qos-guaranteed.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sidecar' of Pod 'qos-guaranteed' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qos-guaranteed.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'qos-guaranteed' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qos-guaranteed.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sidecar' of Pod 'qos-guaranteed' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qos-guaranteed.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'qos-guaranteed' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qos-guaranteed.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sidecar' of 'pod' 'qos-guaranteed' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qos-guaranteed.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'qos-guaranteed' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qos-guaranteed.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sidecar' of Pod 'qos-guaranteed' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qos-guaranteed.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Pod 'qos-guaranteed' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qos-guaranteed.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sidecar' of Pod 'qos-guaranteed' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qos-guaranteed.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'qos-guaranteed' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qos-guaranteed.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sidecar' of Pod 'qos-guaranteed' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qos-guaranteed.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'qos-guaranteed' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qos-guaranteed.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sidecar' of Pod 'qos-guaranteed' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qos-guaranteed.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'qos-guaranteed' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qos-guaranteed.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sidecar' of Pod 'qos-guaranteed' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qos-guaranteed.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qos-guaranteed.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qos-guaranteed.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "qos-guaranteed" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qos-guaranteed.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sidecar" of pod "qos-guaranteed" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qos-guaranteed.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qos-guaranteed.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qos-guaranteed.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod qos-guaranteed in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 qos-guaranteed.yaml:4
────────────────────────────────────────
   4 [   name: qos-guaranteed
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qos-guaranteed in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-guaranteed.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qos-guaranteed in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-guaranteed.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod qos-guaranteed in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-guaranteed.yaml:6-27
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 └       limits:
  ..   
────────────────────────────────────────



qos-guaranteed1.yaml (kubernetes)
=================================
Tests: 121 (SUCCESSES: 95, FAILURES: 26)
Failures: 26 (UNKNOWN: 0, LOW: 13, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'qos-guaranteed' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qos-guaranteed1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sidecar' of Pod 'qos-guaranteed' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qos-guaranteed1.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'qos-guaranteed' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qos-guaranteed1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sidecar' of Pod 'qos-guaranteed' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qos-guaranteed1.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'qos-guaranteed' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qos-guaranteed1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sidecar' of 'pod' 'qos-guaranteed' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qos-guaranteed1.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'qos-guaranteed' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qos-guaranteed1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sidecar' of Pod 'qos-guaranteed' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qos-guaranteed1.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'main' of Pod 'qos-guaranteed' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qos-guaranteed1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sidecar' of Pod 'qos-guaranteed' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qos-guaranteed1.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'qos-guaranteed' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qos-guaranteed1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sidecar' of Pod 'qos-guaranteed' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qos-guaranteed1.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'qos-guaranteed' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qos-guaranteed1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sidecar' of Pod 'qos-guaranteed' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qos-guaranteed1.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'qos-guaranteed' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qos-guaranteed1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sidecar' of Pod 'qos-guaranteed' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qos-guaranteed1.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qos-guaranteed1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qos-guaranteed1.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "qos-guaranteed" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qos-guaranteed1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sidecar" of pod "qos-guaranteed" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qos-guaranteed1.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qos-guaranteed1.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qos-guaranteed1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod qos-guaranteed in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 qos-guaranteed1.yaml:4
────────────────────────────────────────
   4 [   name: qos-guaranteed
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qos-guaranteed in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-guaranteed1.yaml:17-26
────────────────────────────────────────
  17 ┌   - image: busybox
  18 │     args: ["sleep", "9999999"]
  19 │     name: sidecar
  20 │     resources:
  21 │       requests:
  22 │         cpu: 200m
  23 │         memory: 20Mi
  24 │       limits:
  25 │         cpu: 200m
  26 └         memory: 20Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qos-guaranteed in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-guaranteed1.yaml:7-16
────────────────────────────────────────
   7 ┌   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 │       limits:
  15 │         cpu: 100m
  16 └         memory: 10Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod qos-guaranteed in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-guaranteed1.yaml:6-27
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: busybox
   8 │     args: ["sleep", "9999999"]
   9 │     name: main
  10 │     resources:
  11 │       requests:
  12 │         cpu: 100m
  13 │         memory: 10Mi
  14 └       limits:
  ..   
────────────────────────────────────────



qos-guaranteed2.yaml (kubernetes)
=================================
Tests: 109 (SUCCESSES: 96, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'qos-guaranteed' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qos-guaranteed2.yaml:10-18
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │           cpu: "400m"
  16 │         requests:
  17 │           memory: "250Mi"
  18 └           cpu: "400m"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'qos-guaranteed' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qos-guaranteed2.yaml:10-18
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │           cpu: "400m"
  16 │         requests:
  17 │           memory: "250Mi"
  18 └           cpu: "400m"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'qos-guaranteed' in 'qos-example' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qos-guaranteed2.yaml:10-18
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │           cpu: "400m"
  16 │         requests:
  17 │           memory: "250Mi"
  18 └           cpu: "400m"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'qos-guaranteed' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qos-guaranteed2.yaml:10-18
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │           cpu: "400m"
  16 │         requests:
  17 │           memory: "250Mi"
  18 └           cpu: "400m"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'qos-guaranteed' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qos-guaranteed2.yaml:10-18
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │           cpu: "400m"
  16 │         requests:
  17 │           memory: "250Mi"
  18 └           cpu: "400m"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'qos-guaranteed' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qos-guaranteed2.yaml:10-18
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │           cpu: "400m"
  16 │         requests:
  17 │           memory: "250Mi"
  18 └           cpu: "400m"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'qos-guaranteed' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qos-guaranteed2.yaml:10-18
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │           cpu: "400m"
  16 │         requests:
  17 │           memory: "250Mi"
  18 └           cpu: "400m"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'qos-guaranteed' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qos-guaranteed2.yaml:10-18
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │           cpu: "400m"
  16 │         requests:
  17 │           memory: "250Mi"
  18 └           cpu: "400m"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qos-guaranteed2.yaml:10-18
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │           cpu: "400m"
  16 │         requests:
  17 │           memory: "250Mi"
  18 └           cpu: "400m"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "qos-guaranteed" in "qos-example" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qos-guaranteed2.yaml:10-18
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │           cpu: "400m"
  16 │         requests:
  17 │           memory: "250Mi"
  18 └           cpu: "400m"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qos-guaranteed2.yaml:10-18
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │           cpu: "400m"
  16 │         requests:
  17 │           memory: "250Mi"
  18 └           cpu: "400m"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qos-guaranteed in qos-example namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-guaranteed2.yaml:10-18
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │           cpu: "400m"
  16 │         requests:
  17 │           memory: "250Mi"
  18 └           cpu: "400m"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod qos-guaranteed in qos-example namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qos-guaranteed2.yaml:9-18
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: nginx
  11 │       image: nginx
  12 │       resources:
  13 │         limits:
  14 │           memory: "250Mi"
  15 │           cpu: "400m"
  16 │         requests:
  17 │           memory: "250Mi"
  18 └           cpu: "400m"
────────────────────────────────────────



qotm.yaml (kubernetes)
======================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'backend' of Deployment 'quote' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qotm.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: docker.io/datawire/quote:0.5.0
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'backend' of Deployment 'quote' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qotm.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: docker.io/datawire/quote:0.5.0
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'backend' of 'deployment' 'quote' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qotm.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: docker.io/datawire/quote:0.5.0
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'backend' of Deployment 'quote' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 qotm.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: docker.io/datawire/quote:0.5.0
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'backend' of Deployment 'quote' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qotm.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: docker.io/datawire/quote:0.5.0
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'backend' of Deployment 'quote' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qotm.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: docker.io/datawire/quote:0.5.0
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'backend' of Deployment 'quote' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qotm.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: docker.io/datawire/quote:0.5.0
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'backend' of Deployment 'quote' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qotm.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: docker.io/datawire/quote:0.5.0
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'backend' of Deployment 'quote' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 qotm.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: docker.io/datawire/quote:0.5.0
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'backend' of Deployment 'quote' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qotm.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: docker.io/datawire/quote:0.5.0
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'backend' of Deployment 'quote' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qotm.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: docker.io/datawire/quote:0.5.0
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qotm.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: docker.io/datawire/quote:0.5.0
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "backend" of deployment "quote" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qotm.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: docker.io/datawire/quote:0.5.0
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qotm.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: docker.io/datawire/quote:0.5.0
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment quote in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 qotm.yaml:4
────────────────────────────────────────
   4 [   name: quote
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container quote in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qotm.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: docker.io/datawire/quote:0.5.0
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment quote in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qotm.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: backend
  19 │         image: docker.io/datawire/quote:0.5.0
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container backend in deployment quote (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 qotm.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: backend
  19 │         image: docker.io/datawire/quote:0.5.0
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 8080
────────────────────────────────────────



qrgen-deploy.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 93, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'qrgen' of Deployment 'qrgen' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 qrgen-deploy.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: qrgen
  20 │           image: qr_generator-web:latest
  21 │           imagePullPolicy: Never
  22 │           ports:
  23 │             - containerPort: 5000
  24 │               protocol: TCP
  25 │           resources:
  26 │             limits:
  27 │               memory: "256Mi"
  28 └               cpu: "500m"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'qrgen' of Deployment 'qrgen' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 qrgen-deploy.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: qrgen
  20 │           image: qr_generator-web:latest
  21 │           imagePullPolicy: Never
  22 │           ports:
  23 │             - containerPort: 5000
  24 │               protocol: TCP
  25 │           resources:
  26 │             limits:
  27 │               memory: "256Mi"
  28 └               cpu: "500m"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'qrgen' of 'deployment' 'qrgen' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 qrgen-deploy.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: qrgen
  20 │           image: qr_generator-web:latest
  21 │           imagePullPolicy: Never
  22 │           ports:
  23 │             - containerPort: 5000
  24 │               protocol: TCP
  25 │           resources:
  26 │             limits:
  27 │               memory: "256Mi"
  28 └               cpu: "500m"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'qrgen' of Deployment 'qrgen' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 qrgen-deploy.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: qrgen
  20 │           image: qr_generator-web:latest
  21 │           imagePullPolicy: Never
  22 │           ports:
  23 │             - containerPort: 5000
  24 │               protocol: TCP
  25 │           resources:
  26 │             limits:
  27 │               memory: "256Mi"
  28 └               cpu: "500m"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'qrgen' of Deployment 'qrgen' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 qrgen-deploy.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: qrgen
  20 │           image: qr_generator-web:latest
  21 │           imagePullPolicy: Never
  22 │           ports:
  23 │             - containerPort: 5000
  24 │               protocol: TCP
  25 │           resources:
  26 │             limits:
  27 │               memory: "256Mi"
  28 └               cpu: "500m"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'qrgen' of Deployment 'qrgen' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 qrgen-deploy.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: qrgen
  20 │           image: qr_generator-web:latest
  21 │           imagePullPolicy: Never
  22 │           ports:
  23 │             - containerPort: 5000
  24 │               protocol: TCP
  25 │           resources:
  26 │             limits:
  27 │               memory: "256Mi"
  28 └               cpu: "500m"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'qrgen' of Deployment 'qrgen' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 qrgen-deploy.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: qrgen
  20 │           image: qr_generator-web:latest
  21 │           imagePullPolicy: Never
  22 │           ports:
  23 │             - containerPort: 5000
  24 │               protocol: TCP
  25 │           resources:
  26 │             limits:
  27 │               memory: "256Mi"
  28 └               cpu: "500m"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'qrgen' of Deployment 'qrgen' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 qrgen-deploy.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: qrgen
  20 │           image: qr_generator-web:latest
  21 │           imagePullPolicy: Never
  22 │           ports:
  23 │             - containerPort: 5000
  24 │               protocol: TCP
  25 │           resources:
  26 │             limits:
  27 │               memory: "256Mi"
  28 └               cpu: "500m"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'qrgen' of Deployment 'qrgen' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 qrgen-deploy.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: qrgen
  20 │           image: qr_generator-web:latest
  21 │           imagePullPolicy: Never
  22 │           ports:
  23 │             - containerPort: 5000
  24 │               protocol: TCP
  25 │           resources:
  26 │             limits:
  27 │               memory: "256Mi"
  28 └               cpu: "500m"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'qrgen' of Deployment 'qrgen' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 qrgen-deploy.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: qrgen
  20 │           image: qr_generator-web:latest
  21 │           imagePullPolicy: Never
  22 │           ports:
  23 │             - containerPort: 5000
  24 │               protocol: TCP
  25 │           resources:
  26 │             limits:
  27 │               memory: "256Mi"
  28 └               cpu: "500m"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 qrgen-deploy.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: qrgen
  20 │           image: qr_generator-web:latest
  21 │           imagePullPolicy: Never
  22 │           ports:
  23 │             - containerPort: 5000
  24 │               protocol: TCP
  25 │           resources:
  26 │             limits:
  27 │               memory: "256Mi"
  28 └               cpu: "500m"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "qrgen" of deployment "qrgen" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 qrgen-deploy.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: qrgen
  20 │           image: qr_generator-web:latest
  21 │           imagePullPolicy: Never
  22 │           ports:
  23 │             - containerPort: 5000
  24 │               protocol: TCP
  25 │           resources:
  26 │             limits:
  27 │               memory: "256Mi"
  28 └               cpu: "500m"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 qrgen-deploy.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: qrgen
  20 │           image: qr_generator-web:latest
  21 │           imagePullPolicy: Never
  22 │           ports:
  23 │             - containerPort: 5000
  24 │               protocol: TCP
  25 │           resources:
  26 │             limits:
  27 │               memory: "256Mi"
  28 └               cpu: "500m"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment qrgen in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 qrgen-deploy.yaml:4-6
────────────────────────────────────────
   4 ┌   name: qrgen
   5 │   labels:
   6 └     app: qrgen
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container qrgen in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qrgen-deploy.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: qrgen
  20 │           image: qr_generator-web:latest
  21 │           imagePullPolicy: Never
  22 │           ports:
  23 │             - containerPort: 5000
  24 │               protocol: TCP
  25 │           resources:
  26 │             limits:
  27 │               memory: "256Mi"
  28 └               cpu: "500m"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment qrgen in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 qrgen-deploy.yaml:18-29
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: qrgen
  20 │           image: qr_generator-web:latest
  21 │           imagePullPolicy: Never
  22 │           ports:
  23 │             - containerPort: 5000
  24 │               protocol: TCP
  25 │           resources:
  26 └             limits:
  ..   
────────────────────────────────────────



quake3.yaml (kubernetes)
========================
Tests: 126 (SUCCESSES: 90, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 21, MEDIUM: 10, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'content-server' of Deployment 'quake' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 quake3.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'quake' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 quake3.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'content-server' of Deployment 'quake' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 quake3.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'quake' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 quake3.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'content-server' of 'deployment' 'quake' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 quake3.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'quake' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 quake3.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'content-server' of Deployment 'quake' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 quake3.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'quake' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 quake3.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'content-server' of Deployment 'quake' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 quake3.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'quake' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 quake3.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'content-server' of Deployment 'quake' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 quake3.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'quake' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 quake3.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'content-server' of Deployment 'quake' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 quake3.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'quake' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 quake3.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'content-server' of Deployment 'quake' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 quake3.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'quake' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 quake3.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'content-server' of Deployment 'quake' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 quake3.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'quake' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 quake3.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'content-server' of Deployment 'quake' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 quake3.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'quake' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 quake3.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'content-server' of Deployment 'quake' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 quake3.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'quake' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 quake3.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'content-server' of Deployment 'quake' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 quake3.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'quake' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 quake3.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 quake3.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 quake3.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "content-server" of deployment "quake" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 quake3.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "quake" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 quake3.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 quake3.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 quake3.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment quake in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 quake3.yaml:4
────────────────────────────────────────
   4 [   name: quake
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container quake in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 quake3.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container quake in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 quake3.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment quake in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 quake3.yaml:18-55
────────────────────────────────────────
  18 ┌       containers:
  19 │       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 └         name: server
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container content-server in deployment quake (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 quake3.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment quake (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 quake3.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────



quake31.yaml (kubernetes)
=========================
Tests: 126 (SUCCESSES: 90, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 21, MEDIUM: 10, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'content-server' of Deployment 'quake' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 quake31.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'quake' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 quake31.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'content-server' of Deployment 'quake' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 quake31.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'quake' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 quake31.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'content-server' of 'deployment' 'quake' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 quake31.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'quake' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 quake31.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'content-server' of Deployment 'quake' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 quake31.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'quake' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 quake31.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'content-server' of Deployment 'quake' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 quake31.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'quake' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 quake31.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'content-server' of Deployment 'quake' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 quake31.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'quake' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 quake31.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'content-server' of Deployment 'quake' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 quake31.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'quake' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 quake31.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'content-server' of Deployment 'quake' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 quake31.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'quake' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 quake31.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'content-server' of Deployment 'quake' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 quake31.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'quake' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 quake31.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'content-server' of Deployment 'quake' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 quake31.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'quake' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 quake31.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'content-server' of Deployment 'quake' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 quake31.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'quake' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 quake31.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'content-server' of Deployment 'quake' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 quake31.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'quake' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 quake31.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 quake31.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 quake31.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "content-server" of deployment "quake" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 quake31.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "quake" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 quake31.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 quake31.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 quake31.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment quake in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 quake31.yaml:4
────────────────────────────────────────
   4 [   name: quake
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container quake in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 quake31.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container quake in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 quake31.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment quake in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 quake31.yaml:18-55
────────────────────────────────────────
  18 ┌       containers:
  19 │       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 └         name: server
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container content-server in deployment quake (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 quake31.yaml:39-49
────────────────────────────────────────
  39 ┌       - command:
  40 │         - q3
  41 │         - content
  42 │         - --seed-content-url=http://content.quakejs.com
  43 │         image: docker.io/criticalstack/quake:latest
  44 │         name: content-server
  45 │         ports:
  46 │         - containerPort: 9090
  47 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment quake (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 quake31.yaml:19-38
────────────────────────────────────────
  19 ┌       - command:
  20 │         - q3
  21 │         - server
  22 │         - --config=/config/config.yaml
  23 │         - --content-server=http://127.0.0.1:9090
  24 │         - --agree-eula
  25 │         image: docker.io/criticalstack/quake:latest
  26 │         name: server
  27 └         ports:
  ..   
────────────────────────────────────────



quake31_2.yaml (kubernetes)
===========================
Tests: 108 (SUCCESSES: 107, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'quake3-server-config' in 'default' namespace stores secrets in key(s) or value(s) '{"  password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



quake3_2.yaml (kubernetes)
==========================
Tests: 108 (SUCCESSES: 107, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'quake3-server-config' in 'default' namespace stores secrets in key(s) or value(s) '{"  password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



quakes-api.yaml (kubernetes)
============================
Tests: 109 (SUCCESSES: 96, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'quakes-api' of Deployment 'quakes-api' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 quakes-api.yaml:16-38
────────────────────────────────────────
  16 ┌         - image: replaceme-acr.azurecr.io/hackfest/quakes-api:1.0
  17 │           imagePullPolicy: Always
  18 │           name: quakes-api
  19 │           resources:
  20 │             requests:
  21 │               memory: "1024Mi"
  22 │               cpu: "1"
  23 │             limits:
  24 └               memory: "2048Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'quakes-api' of Deployment 'quakes-api' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 quakes-api.yaml:16-38
────────────────────────────────────────
  16 ┌         - image: replaceme-acr.azurecr.io/hackfest/quakes-api:1.0
  17 │           imagePullPolicy: Always
  18 │           name: quakes-api
  19 │           resources:
  20 │             requests:
  21 │               memory: "1024Mi"
  22 │               cpu: "1"
  23 │             limits:
  24 └               memory: "2048Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'quakes-api' of 'deployment' 'quakes-api' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 quakes-api.yaml:16-38
────────────────────────────────────────
  16 ┌         - image: replaceme-acr.azurecr.io/hackfest/quakes-api:1.0
  17 │           imagePullPolicy: Always
  18 │           name: quakes-api
  19 │           resources:
  20 │             requests:
  21 │               memory: "1024Mi"
  22 │               cpu: "1"
  23 │             limits:
  24 └               memory: "2048Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'quakes-api' of Deployment 'quakes-api' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 quakes-api.yaml:16-38
────────────────────────────────────────
  16 ┌         - image: replaceme-acr.azurecr.io/hackfest/quakes-api:1.0
  17 │           imagePullPolicy: Always
  18 │           name: quakes-api
  19 │           resources:
  20 │             requests:
  21 │               memory: "1024Mi"
  22 │               cpu: "1"
  23 │             limits:
  24 └               memory: "2048Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'quakes-api' of Deployment 'quakes-api' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 quakes-api.yaml:16-38
────────────────────────────────────────
  16 ┌         - image: replaceme-acr.azurecr.io/hackfest/quakes-api:1.0
  17 │           imagePullPolicy: Always
  18 │           name: quakes-api
  19 │           resources:
  20 │             requests:
  21 │               memory: "1024Mi"
  22 │               cpu: "1"
  23 │             limits:
  24 └               memory: "2048Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'quakes-api' of Deployment 'quakes-api' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 quakes-api.yaml:16-38
────────────────────────────────────────
  16 ┌         - image: replaceme-acr.azurecr.io/hackfest/quakes-api:1.0
  17 │           imagePullPolicy: Always
  18 │           name: quakes-api
  19 │           resources:
  20 │             requests:
  21 │               memory: "1024Mi"
  22 │               cpu: "1"
  23 │             limits:
  24 └               memory: "2048Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'quakes-api' of Deployment 'quakes-api' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 quakes-api.yaml:16-38
────────────────────────────────────────
  16 ┌         - image: replaceme-acr.azurecr.io/hackfest/quakes-api:1.0
  17 │           imagePullPolicy: Always
  18 │           name: quakes-api
  19 │           resources:
  20 │             requests:
  21 │               memory: "1024Mi"
  22 │               cpu: "1"
  23 │             limits:
  24 └               memory: "2048Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 quakes-api.yaml:16-38
────────────────────────────────────────
  16 ┌         - image: replaceme-acr.azurecr.io/hackfest/quakes-api:1.0
  17 │           imagePullPolicy: Always
  18 │           name: quakes-api
  19 │           resources:
  20 │             requests:
  21 │               memory: "1024Mi"
  22 │               cpu: "1"
  23 │             limits:
  24 └               memory: "2048Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "quakes-api" of deployment "quakes-api" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 quakes-api.yaml:16-38
────────────────────────────────────────
  16 ┌         - image: replaceme-acr.azurecr.io/hackfest/quakes-api:1.0
  17 │           imagePullPolicy: Always
  18 │           name: quakes-api
  19 │           resources:
  20 │             requests:
  21 │               memory: "1024Mi"
  22 │               cpu: "1"
  23 │             limits:
  24 └               memory: "2048Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 quakes-api.yaml:16-38
────────────────────────────────────────
  16 ┌         - image: replaceme-acr.azurecr.io/hackfest/quakes-api:1.0
  17 │           imagePullPolicy: Always
  18 │           name: quakes-api
  19 │           resources:
  20 │             requests:
  21 │               memory: "1024Mi"
  22 │               cpu: "1"
  23 │             limits:
  24 └               memory: "2048Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment quakes-api in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 quakes-api.yaml:4
────────────────────────────────────────
   4 [   name: quakes-api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container quakes-api in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 quakes-api.yaml:16-38
────────────────────────────────────────
  16 ┌         - image: replaceme-acr.azurecr.io/hackfest/quakes-api:1.0
  17 │           imagePullPolicy: Always
  18 │           name: quakes-api
  19 │           resources:
  20 │             requests:
  21 │               memory: "1024Mi"
  22 │               cpu: "1"
  23 │             limits:
  24 └               memory: "2048Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment quakes-api in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 quakes-api.yaml:15-39
────────────────────────────────────────
  15 ┌       containers:
  16 │         - image: replaceme-acr.azurecr.io/hackfest/quakes-api:1.0
  17 │           imagePullPolicy: Always
  18 │           name: quakes-api
  19 │           resources:
  20 │             requests:
  21 │               memory: "1024Mi"
  22 │               cpu: "1"
  23 └             limits:
  ..   
────────────────────────────────────────



quality-definition-resizings1.yaml (kubernetes)
===============================================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'sonarr-curl' of CronJob 'sonarr-quality-definitions' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 quality-definition-resizings1.yaml:14-143
────────────────────────────────────────
  14 ┌           - name: sonarr-curl
  15 │             image: curlimages/curl:8.12.1@sha256:94e9e444bcba979c2ea12e27ae39bee4cd10bc7041a472c4727a558e213744e6
  16 │             command: ["/bin/sh", "-c"]
  17 │             args:
  18 │             - |
  19 │               curl --trace-ascii /dev/stdout -X 'PUT' \
  20 │                 "http://sonarr.downloads.svc.cluster.local:8989/api/v3/qualitydefinition/update?apikey=$(SONARR_API_KEY)" \
  21 │                 -H 'accept: */*' \
  22 └                 -H 'Content-Type: application/json' \
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sonarr-curl' of CronJob 'sonarr-quality-definitions' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 quality-definition-resizings1.yaml:14-143
────────────────────────────────────────
  14 ┌           - name: sonarr-curl
  15 │             image: curlimages/curl:8.12.1@sha256:94e9e444bcba979c2ea12e27ae39bee4cd10bc7041a472c4727a558e213744e6
  16 │             command: ["/bin/sh", "-c"]
  17 │             args:
  18 │             - |
  19 │               curl --trace-ascii /dev/stdout -X 'PUT' \
  20 │                 "http://sonarr.downloads.svc.cluster.local:8989/api/v3/qualitydefinition/update?apikey=$(SONARR_API_KEY)" \
  21 │                 -H 'accept: */*' \
  22 └                 -H 'Content-Type: application/json' \
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sonarr-curl' of 'cronjob' 'sonarr-quality-definitions' in 'downloads' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 quality-definition-resizings1.yaml:14-143
────────────────────────────────────────
  14 ┌           - name: sonarr-curl
  15 │             image: curlimages/curl:8.12.1@sha256:94e9e444bcba979c2ea12e27ae39bee4cd10bc7041a472c4727a558e213744e6
  16 │             command: ["/bin/sh", "-c"]
  17 │             args:
  18 │             - |
  19 │               curl --trace-ascii /dev/stdout -X 'PUT' \
  20 │                 "http://sonarr.downloads.svc.cluster.local:8989/api/v3/qualitydefinition/update?apikey=$(SONARR_API_KEY)" \
  21 │                 -H 'accept: */*' \
  22 └                 -H 'Content-Type: application/json' \
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sonarr-curl' of CronJob 'sonarr-quality-definitions' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 quality-definition-resizings1.yaml:14-143
────────────────────────────────────────
  14 ┌           - name: sonarr-curl
  15 │             image: curlimages/curl:8.12.1@sha256:94e9e444bcba979c2ea12e27ae39bee4cd10bc7041a472c4727a558e213744e6
  16 │             command: ["/bin/sh", "-c"]
  17 │             args:
  18 │             - |
  19 │               curl --trace-ascii /dev/stdout -X 'PUT' \
  20 │                 "http://sonarr.downloads.svc.cluster.local:8989/api/v3/qualitydefinition/update?apikey=$(SONARR_API_KEY)" \
  21 │                 -H 'accept: */*' \
  22 └                 -H 'Content-Type: application/json' \
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sonarr-curl' of CronJob 'sonarr-quality-definitions' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 quality-definition-resizings1.yaml:14-143
────────────────────────────────────────
  14 ┌           - name: sonarr-curl
  15 │             image: curlimages/curl:8.12.1@sha256:94e9e444bcba979c2ea12e27ae39bee4cd10bc7041a472c4727a558e213744e6
  16 │             command: ["/bin/sh", "-c"]
  17 │             args:
  18 │             - |
  19 │               curl --trace-ascii /dev/stdout -X 'PUT' \
  20 │                 "http://sonarr.downloads.svc.cluster.local:8989/api/v3/qualitydefinition/update?apikey=$(SONARR_API_KEY)" \
  21 │                 -H 'accept: */*' \
  22 └                 -H 'Content-Type: application/json' \
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sonarr-curl' of CronJob 'sonarr-quality-definitions' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 quality-definition-resizings1.yaml:14-143
────────────────────────────────────────
  14 ┌           - name: sonarr-curl
  15 │             image: curlimages/curl:8.12.1@sha256:94e9e444bcba979c2ea12e27ae39bee4cd10bc7041a472c4727a558e213744e6
  16 │             command: ["/bin/sh", "-c"]
  17 │             args:
  18 │             - |
  19 │               curl --trace-ascii /dev/stdout -X 'PUT' \
  20 │                 "http://sonarr.downloads.svc.cluster.local:8989/api/v3/qualitydefinition/update?apikey=$(SONARR_API_KEY)" \
  21 │                 -H 'accept: */*' \
  22 └                 -H 'Content-Type: application/json' \
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sonarr-curl' of CronJob 'sonarr-quality-definitions' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 quality-definition-resizings1.yaml:14-143
────────────────────────────────────────
  14 ┌           - name: sonarr-curl
  15 │             image: curlimages/curl:8.12.1@sha256:94e9e444bcba979c2ea12e27ae39bee4cd10bc7041a472c4727a558e213744e6
  16 │             command: ["/bin/sh", "-c"]
  17 │             args:
  18 │             - |
  19 │               curl --trace-ascii /dev/stdout -X 'PUT' \
  20 │                 "http://sonarr.downloads.svc.cluster.local:8989/api/v3/qualitydefinition/update?apikey=$(SONARR_API_KEY)" \
  21 │                 -H 'accept: */*' \
  22 └                 -H 'Content-Type: application/json' \
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sonarr-curl' of CronJob 'sonarr-quality-definitions' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 quality-definition-resizings1.yaml:14-143
────────────────────────────────────────
  14 ┌           - name: sonarr-curl
  15 │             image: curlimages/curl:8.12.1@sha256:94e9e444bcba979c2ea12e27ae39bee4cd10bc7041a472c4727a558e213744e6
  16 │             command: ["/bin/sh", "-c"]
  17 │             args:
  18 │             - |
  19 │               curl --trace-ascii /dev/stdout -X 'PUT' \
  20 │                 "http://sonarr.downloads.svc.cluster.local:8989/api/v3/qualitydefinition/update?apikey=$(SONARR_API_KEY)" \
  21 │                 -H 'accept: */*' \
  22 └                 -H 'Content-Type: application/json' \
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sonarr-curl' of CronJob 'sonarr-quality-definitions' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 quality-definition-resizings1.yaml:14-143
────────────────────────────────────────
  14 ┌           - name: sonarr-curl
  15 │             image: curlimages/curl:8.12.1@sha256:94e9e444bcba979c2ea12e27ae39bee4cd10bc7041a472c4727a558e213744e6
  16 │             command: ["/bin/sh", "-c"]
  17 │             args:
  18 │             - |
  19 │               curl --trace-ascii /dev/stdout -X 'PUT' \
  20 │                 "http://sonarr.downloads.svc.cluster.local:8989/api/v3/qualitydefinition/update?apikey=$(SONARR_API_KEY)" \
  21 │                 -H 'accept: */*' \
  22 └                 -H 'Content-Type: application/json' \
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sonarr-curl' of CronJob 'sonarr-quality-definitions' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 quality-definition-resizings1.yaml:14-143
────────────────────────────────────────
  14 ┌           - name: sonarr-curl
  15 │             image: curlimages/curl:8.12.1@sha256:94e9e444bcba979c2ea12e27ae39bee4cd10bc7041a472c4727a558e213744e6
  16 │             command: ["/bin/sh", "-c"]
  17 │             args:
  18 │             - |
  19 │               curl --trace-ascii /dev/stdout -X 'PUT' \
  20 │                 "http://sonarr.downloads.svc.cluster.local:8989/api/v3/qualitydefinition/update?apikey=$(SONARR_API_KEY)" \
  21 │                 -H 'accept: */*' \
  22 └                 -H 'Content-Type: application/json' \
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sonarr-curl' of CronJob 'sonarr-quality-definitions' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 quality-definition-resizings1.yaml:14-143
────────────────────────────────────────
  14 ┌           - name: sonarr-curl
  15 │             image: curlimages/curl:8.12.1@sha256:94e9e444bcba979c2ea12e27ae39bee4cd10bc7041a472c4727a558e213744e6
  16 │             command: ["/bin/sh", "-c"]
  17 │             args:
  18 │             - |
  19 │               curl --trace-ascii /dev/stdout -X 'PUT' \
  20 │                 "http://sonarr.downloads.svc.cluster.local:8989/api/v3/qualitydefinition/update?apikey=$(SONARR_API_KEY)" \
  21 │                 -H 'accept: */*' \
  22 └                 -H 'Content-Type: application/json' \
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 quality-definition-resizings1.yaml:14-143
────────────────────────────────────────
  14 ┌           - name: sonarr-curl
  15 │             image: curlimages/curl:8.12.1@sha256:94e9e444bcba979c2ea12e27ae39bee4cd10bc7041a472c4727a558e213744e6
  16 │             command: ["/bin/sh", "-c"]
  17 │             args:
  18 │             - |
  19 │               curl --trace-ascii /dev/stdout -X 'PUT' \
  20 │                 "http://sonarr.downloads.svc.cluster.local:8989/api/v3/qualitydefinition/update?apikey=$(SONARR_API_KEY)" \
  21 │                 -H 'accept: */*' \
  22 └                 -H 'Content-Type: application/json' \
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sonarr-curl" of cronjob "sonarr-quality-definitions" in "downloads" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 quality-definition-resizings1.yaml:14-143
────────────────────────────────────────
  14 ┌           - name: sonarr-curl
  15 │             image: curlimages/curl:8.12.1@sha256:94e9e444bcba979c2ea12e27ae39bee4cd10bc7041a472c4727a558e213744e6
  16 │             command: ["/bin/sh", "-c"]
  17 │             args:
  18 │             - |
  19 │               curl --trace-ascii /dev/stdout -X 'PUT' \
  20 │                 "http://sonarr.downloads.svc.cluster.local:8989/api/v3/qualitydefinition/update?apikey=$(SONARR_API_KEY)" \
  21 │                 -H 'accept: */*' \
  22 └                 -H 'Content-Type: application/json' \
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 quality-definition-resizings1.yaml:14-143
────────────────────────────────────────
  14 ┌           - name: sonarr-curl
  15 │             image: curlimages/curl:8.12.1@sha256:94e9e444bcba979c2ea12e27ae39bee4cd10bc7041a472c4727a558e213744e6
  16 │             command: ["/bin/sh", "-c"]
  17 │             args:
  18 │             - |
  19 │               curl --trace-ascii /dev/stdout -X 'PUT' \
  20 │                 "http://sonarr.downloads.svc.cluster.local:8989/api/v3/qualitydefinition/update?apikey=$(SONARR_API_KEY)" \
  21 │                 -H 'accept: */*' \
  22 └                 -H 'Content-Type: application/json' \
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sonarr-quality-definitions in downloads namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 quality-definition-resizings1.yaml:14-143
────────────────────────────────────────
  14 ┌           - name: sonarr-curl
  15 │             image: curlimages/curl:8.12.1@sha256:94e9e444bcba979c2ea12e27ae39bee4cd10bc7041a472c4727a558e213744e6
  16 │             command: ["/bin/sh", "-c"]
  17 │             args:
  18 │             - |
  19 │               curl --trace-ascii /dev/stdout -X 'PUT' \
  20 │                 "http://sonarr.downloads.svc.cluster.local:8989/api/v3/qualitydefinition/update?apikey=$(SONARR_API_KEY)" \
  21 │                 -H 'accept: */*' \
  22 └                 -H 'Content-Type: application/json' \
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): cronjob sonarr-quality-definitions in downloads namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 quality-definition-resizings1.yaml:13-144
────────────────────────────────────────
  13 ┌           containers:
  14 │           - name: sonarr-curl
  15 │             image: curlimages/curl:8.12.1@sha256:94e9e444bcba979c2ea12e27ae39bee4cd10bc7041a472c4727a558e213744e6
  16 │             command: ["/bin/sh", "-c"]
  17 │             args:
  18 │             - |
  19 │               curl --trace-ascii /dev/stdout -X 'PUT' \
  20 │                 "http://sonarr.downloads.svc.cluster.local:8989/api/v3/qualitydefinition/update?apikey=$(SONARR_API_KEY)" \
  21 └                 -H 'accept: */*' \
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sonarr-curl in cronjob sonarr-quality-definitions (namespace: downloads) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 quality-definition-resizings1.yaml:14-143
────────────────────────────────────────
  14 ┌           - name: sonarr-curl
  15 │             image: curlimages/curl:8.12.1@sha256:94e9e444bcba979c2ea12e27ae39bee4cd10bc7041a472c4727a558e213744e6
  16 │             command: ["/bin/sh", "-c"]
  17 │             args:
  18 │             - |
  19 │               curl --trace-ascii /dev/stdout -X 'PUT' \
  20 │                 "http://sonarr.downloads.svc.cluster.local:8989/api/v3/qualitydefinition/update?apikey=$(SONARR_API_KEY)" \
  21 │                 -H 'accept: */*' \
  22 └                 -H 'Content-Type: application/json' \
  ..   
────────────────────────────────────────



quarkus-deployment.yaml (kubernetes)
====================================
Tests: 109 (SUCCESSES: 89, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'quarkus' of Deployment 'quarkus' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 quarkus-deployment.yaml:25-34
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: QUARKUS_MONGODB_HOSTS
  27 │               value: mongo:27017
  28 │           image: ghcr.io/woraamy/kubernates-quarkus-example-project/quarkus
  29 │           imagePullPolicy: IfNotPresent
  30 │           name: quarkus
  31 │           ports:
  32 │             - containerPort: 8080
  33 │               hostPort: 8080
  34 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'quarkus' of Deployment 'quarkus' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 quarkus-deployment.yaml:25-34
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: QUARKUS_MONGODB_HOSTS
  27 │               value: mongo:27017
  28 │           image: ghcr.io/woraamy/kubernates-quarkus-example-project/quarkus
  29 │           imagePullPolicy: IfNotPresent
  30 │           name: quarkus
  31 │           ports:
  32 │             - containerPort: 8080
  33 │               hostPort: 8080
  34 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'quarkus' of 'deployment' 'quarkus' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 quarkus-deployment.yaml:25-34
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: QUARKUS_MONGODB_HOSTS
  27 │               value: mongo:27017
  28 │           image: ghcr.io/woraamy/kubernates-quarkus-example-project/quarkus
  29 │           imagePullPolicy: IfNotPresent
  30 │           name: quarkus
  31 │           ports:
  32 │             - containerPort: 8080
  33 │               hostPort: 8080
  34 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'quarkus' of Deployment 'quarkus' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 quarkus-deployment.yaml:25-34
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: QUARKUS_MONGODB_HOSTS
  27 │               value: mongo:27017
  28 │           image: ghcr.io/woraamy/kubernates-quarkus-example-project/quarkus
  29 │           imagePullPolicy: IfNotPresent
  30 │           name: quarkus
  31 │           ports:
  32 │             - containerPort: 8080
  33 │               hostPort: 8080
  34 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'quarkus' of Deployment 'quarkus' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 quarkus-deployment.yaml:25-34
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: QUARKUS_MONGODB_HOSTS
  27 │               value: mongo:27017
  28 │           image: ghcr.io/woraamy/kubernates-quarkus-example-project/quarkus
  29 │           imagePullPolicy: IfNotPresent
  30 │           name: quarkus
  31 │           ports:
  32 │             - containerPort: 8080
  33 │               hostPort: 8080
  34 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'quarkus' of Deployment 'quarkus' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 quarkus-deployment.yaml:25-34
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: QUARKUS_MONGODB_HOSTS
  27 │               value: mongo:27017
  28 │           image: ghcr.io/woraamy/kubernates-quarkus-example-project/quarkus
  29 │           imagePullPolicy: IfNotPresent
  30 │           name: quarkus
  31 │           ports:
  32 │             - containerPort: 8080
  33 │               hostPort: 8080
  34 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'quarkus' of Deployment 'quarkus' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 quarkus-deployment.yaml:25-34
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: QUARKUS_MONGODB_HOSTS
  27 │               value: mongo:27017
  28 │           image: ghcr.io/woraamy/kubernates-quarkus-example-project/quarkus
  29 │           imagePullPolicy: IfNotPresent
  30 │           name: quarkus
  31 │           ports:
  32 │             - containerPort: 8080
  33 │               hostPort: 8080
  34 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'quarkus' of Deployment 'quarkus' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 quarkus-deployment.yaml:25-34
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: QUARKUS_MONGODB_HOSTS
  27 │               value: mongo:27017
  28 │           image: ghcr.io/woraamy/kubernates-quarkus-example-project/quarkus
  29 │           imagePullPolicy: IfNotPresent
  30 │           name: quarkus
  31 │           ports:
  32 │             - containerPort: 8080
  33 │               hostPort: 8080
  34 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'quarkus' of Deployment 'quarkus' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 quarkus-deployment.yaml:25-34
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: QUARKUS_MONGODB_HOSTS
  27 │               value: mongo:27017
  28 │           image: ghcr.io/woraamy/kubernates-quarkus-example-project/quarkus
  29 │           imagePullPolicy: IfNotPresent
  30 │           name: quarkus
  31 │           ports:
  32 │             - containerPort: 8080
  33 │               hostPort: 8080
  34 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'quarkus' of Deployment 'quarkus' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 quarkus-deployment.yaml:25-34
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: QUARKUS_MONGODB_HOSTS
  27 │               value: mongo:27017
  28 │           image: ghcr.io/woraamy/kubernates-quarkus-example-project/quarkus
  29 │           imagePullPolicy: IfNotPresent
  30 │           name: quarkus
  31 │           ports:
  32 │             - containerPort: 8080
  33 │               hostPort: 8080
  34 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'quarkus' of Deployment 'quarkus' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 quarkus-deployment.yaml:25-34
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: QUARKUS_MONGODB_HOSTS
  27 │               value: mongo:27017
  28 │           image: ghcr.io/woraamy/kubernates-quarkus-example-project/quarkus
  29 │           imagePullPolicy: IfNotPresent
  30 │           name: quarkus
  31 │           ports:
  32 │             - containerPort: 8080
  33 │               hostPort: 8080
  34 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'quarkus' of Deployment 'quarkus' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 quarkus-deployment.yaml:25-34
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: QUARKUS_MONGODB_HOSTS
  27 │               value: mongo:27017
  28 │           image: ghcr.io/woraamy/kubernates-quarkus-example-project/quarkus
  29 │           imagePullPolicy: IfNotPresent
  30 │           name: quarkus
  31 │           ports:
  32 │             - containerPort: 8080
  33 │               hostPort: 8080
  34 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'quarkus' of Deployment 'quarkus' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 quarkus-deployment.yaml:25-34
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: QUARKUS_MONGODB_HOSTS
  27 │               value: mongo:27017
  28 │           image: ghcr.io/woraamy/kubernates-quarkus-example-project/quarkus
  29 │           imagePullPolicy: IfNotPresent
  30 │           name: quarkus
  31 │           ports:
  32 │             - containerPort: 8080
  33 │               hostPort: 8080
  34 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 quarkus-deployment.yaml:25-34
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: QUARKUS_MONGODB_HOSTS
  27 │               value: mongo:27017
  28 │           image: ghcr.io/woraamy/kubernates-quarkus-example-project/quarkus
  29 │           imagePullPolicy: IfNotPresent
  30 │           name: quarkus
  31 │           ports:
  32 │             - containerPort: 8080
  33 │               hostPort: 8080
  34 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "quarkus" of deployment "quarkus" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 quarkus-deployment.yaml:25-34
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: QUARKUS_MONGODB_HOSTS
  27 │               value: mongo:27017
  28 │           image: ghcr.io/woraamy/kubernates-quarkus-example-project/quarkus
  29 │           imagePullPolicy: IfNotPresent
  30 │           name: quarkus
  31 │           ports:
  32 │             - containerPort: 8080
  33 │               hostPort: 8080
  34 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 quarkus-deployment.yaml:25-34
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: QUARKUS_MONGODB_HOSTS
  27 │               value: mongo:27017
  28 │           image: ghcr.io/woraamy/kubernates-quarkus-example-project/quarkus
  29 │           imagePullPolicy: IfNotPresent
  30 │           name: quarkus
  31 │           ports:
  32 │             - containerPort: 8080
  33 │               hostPort: 8080
  34 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment quarkus in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 quarkus-deployment.yaml:4-9
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert
   6 │     kompose.version: 1.32.0 (HEAD)
   7 │   labels:
   8 │     io.kompose.service: quarkus
   9 └   name: quarkus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container quarkus in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 quarkus-deployment.yaml:25-34
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: QUARKUS_MONGODB_HOSTS
  27 │               value: mongo:27017
  28 │           image: ghcr.io/woraamy/kubernates-quarkus-example-project/quarkus
  29 │           imagePullPolicy: IfNotPresent
  30 │           name: quarkus
  31 │           ports:
  32 │             - containerPort: 8080
  33 │               hostPort: 8080
  34 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment quarkus in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 quarkus-deployment.yaml:24-35
────────────────────────────────────────
  24 ┌       containers:
  25 │         - env:
  26 │             - name: QUARKUS_MONGODB_HOSTS
  27 │               value: mongo:27017
  28 │           image: ghcr.io/woraamy/kubernates-quarkus-example-project/quarkus
  29 │           imagePullPolicy: IfNotPresent
  30 │           name: quarkus
  31 │           ports:
  32 └             - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container quarkus in deployment quarkus (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 quarkus-deployment.yaml:25-34
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: QUARKUS_MONGODB_HOSTS
  27 │               value: mongo:27017
  28 │           image: ghcr.io/woraamy/kubernates-quarkus-example-project/quarkus
  29 │           imagePullPolicy: IfNotPresent
  30 │           name: quarkus
  31 │           ports:
  32 │             - containerPort: 8080
  33 │               hostPort: 8080
  34 └               protocol: TCP
────────────────────────────────────────



quarkus_1.yaml (kubernetes)
===========================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'quarkus' of Deployment 'quarkusapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 quarkus_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: quarkus
  19 │         image: ndigrazia/quarkus-demo:1.0.0
  20 │         env:
  21 │         - name: GREETING_MESSAGE
  22 │           value: Hallo
  23 │         - name: GREETING_SUFFIX
  24 │           value: '!!!!!!'
  25 │         ports:
  26 │         - containerPort: 8080
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'quarkus' of Deployment 'quarkusapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 quarkus_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: quarkus
  19 │         image: ndigrazia/quarkus-demo:1.0.0
  20 │         env:
  21 │         - name: GREETING_MESSAGE
  22 │           value: Hallo
  23 │         - name: GREETING_SUFFIX
  24 │           value: '!!!!!!'
  25 │         ports:
  26 │         - containerPort: 8080
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'quarkus' of 'deployment' 'quarkusapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 quarkus_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: quarkus
  19 │         image: ndigrazia/quarkus-demo:1.0.0
  20 │         env:
  21 │         - name: GREETING_MESSAGE
  22 │           value: Hallo
  23 │         - name: GREETING_SUFFIX
  24 │           value: '!!!!!!'
  25 │         ports:
  26 │         - containerPort: 8080
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'quarkus' of Deployment 'quarkusapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 quarkus_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: quarkus
  19 │         image: ndigrazia/quarkus-demo:1.0.0
  20 │         env:
  21 │         - name: GREETING_MESSAGE
  22 │           value: Hallo
  23 │         - name: GREETING_SUFFIX
  24 │           value: '!!!!!!'
  25 │         ports:
  26 │         - containerPort: 8080
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'quarkus' of Deployment 'quarkusapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 quarkus_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: quarkus
  19 │         image: ndigrazia/quarkus-demo:1.0.0
  20 │         env:
  21 │         - name: GREETING_MESSAGE
  22 │           value: Hallo
  23 │         - name: GREETING_SUFFIX
  24 │           value: '!!!!!!'
  25 │         ports:
  26 │         - containerPort: 8080
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'quarkus' of Deployment 'quarkusapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 quarkus_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: quarkus
  19 │         image: ndigrazia/quarkus-demo:1.0.0
  20 │         env:
  21 │         - name: GREETING_MESSAGE
  22 │           value: Hallo
  23 │         - name: GREETING_SUFFIX
  24 │           value: '!!!!!!'
  25 │         ports:
  26 │         - containerPort: 8080
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'quarkus' of Deployment 'quarkusapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 quarkus_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: quarkus
  19 │         image: ndigrazia/quarkus-demo:1.0.0
  20 │         env:
  21 │         - name: GREETING_MESSAGE
  22 │           value: Hallo
  23 │         - name: GREETING_SUFFIX
  24 │           value: '!!!!!!'
  25 │         ports:
  26 │         - containerPort: 8080
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'quarkus' of Deployment 'quarkusapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 quarkus_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: quarkus
  19 │         image: ndigrazia/quarkus-demo:1.0.0
  20 │         env:
  21 │         - name: GREETING_MESSAGE
  22 │           value: Hallo
  23 │         - name: GREETING_SUFFIX
  24 │           value: '!!!!!!'
  25 │         ports:
  26 │         - containerPort: 8080
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'quarkus' of Deployment 'quarkusapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 quarkus_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: quarkus
  19 │         image: ndigrazia/quarkus-demo:1.0.0
  20 │         env:
  21 │         - name: GREETING_MESSAGE
  22 │           value: Hallo
  23 │         - name: GREETING_SUFFIX
  24 │           value: '!!!!!!'
  25 │         ports:
  26 │         - containerPort: 8080
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'quarkus' of Deployment 'quarkusapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 quarkus_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: quarkus
  19 │         image: ndigrazia/quarkus-demo:1.0.0
  20 │         env:
  21 │         - name: GREETING_MESSAGE
  22 │           value: Hallo
  23 │         - name: GREETING_SUFFIX
  24 │           value: '!!!!!!'
  25 │         ports:
  26 │         - containerPort: 8080
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'quarkus' of Deployment 'quarkusapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 quarkus_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: quarkus
  19 │         image: ndigrazia/quarkus-demo:1.0.0
  20 │         env:
  21 │         - name: GREETING_MESSAGE
  22 │           value: Hallo
  23 │         - name: GREETING_SUFFIX
  24 │           value: '!!!!!!'
  25 │         ports:
  26 │         - containerPort: 8080
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 quarkus_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: quarkus
  19 │         image: ndigrazia/quarkus-demo:1.0.0
  20 │         env:
  21 │         - name: GREETING_MESSAGE
  22 │           value: Hallo
  23 │         - name: GREETING_SUFFIX
  24 │           value: '!!!!!!'
  25 │         ports:
  26 │         - containerPort: 8080
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "quarkus" of deployment "quarkusapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 quarkus_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: quarkus
  19 │         image: ndigrazia/quarkus-demo:1.0.0
  20 │         env:
  21 │         - name: GREETING_MESSAGE
  22 │           value: Hallo
  23 │         - name: GREETING_SUFFIX
  24 │           value: '!!!!!!'
  25 │         ports:
  26 │         - containerPort: 8080
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 quarkus_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: quarkus
  19 │         image: ndigrazia/quarkus-demo:1.0.0
  20 │         env:
  21 │         - name: GREETING_MESSAGE
  22 │           value: Hallo
  23 │         - name: GREETING_SUFFIX
  24 │           value: '!!!!!!'
  25 │         ports:
  26 │         - containerPort: 8080
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment quarkusapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 quarkus_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: quarkusapp
   5 │   labels:
   6 └     app: quarkus
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container quarkusapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 quarkus_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: quarkus
  19 │         image: ndigrazia/quarkus-demo:1.0.0
  20 │         env:
  21 │         - name: GREETING_MESSAGE
  22 │           value: Hallo
  23 │         - name: GREETING_SUFFIX
  24 │           value: '!!!!!!'
  25 │         ports:
  26 │         - containerPort: 8080
  27 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment quarkusapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 quarkus_1.yaml:17-27
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: quarkus
  19 │         image: ndigrazia/quarkus-demo:1.0.0
  20 │         env:
  21 │         - name: GREETING_MESSAGE
  22 │           value: Hallo
  23 │         - name: GREETING_SUFFIX
  24 │           value: '!!!!!!'
  25 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container quarkus in deployment quarkusapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 quarkus_1.yaml:18-27
────────────────────────────────────────
  18 ┌       - name: quarkus
  19 │         image: ndigrazia/quarkus-demo:1.0.0
  20 │         env:
  21 │         - name: GREETING_MESSAGE
  22 │           value: Hallo
  23 │         - name: GREETING_SUFFIX
  24 │           value: '!!!!!!'
  25 │         ports:
  26 │         - containerPort: 8080
  27 └         imagePullPolicy: Always
────────────────────────────────────────



quartered.yaml (kubernetes)
===========================
Tests: 109 (SUCCESSES: 95, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stress-ng-container' of Job 'quartered-stress' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 quartered.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stress-ng-container' of Job 'quartered-stress' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 quartered.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stress-ng-container' of 'job' 'quartered-stress' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 quartered.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stress-ng-container' of Job 'quartered-stress' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 quartered.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'stress-ng-container' of Job 'quartered-stress' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 quartered.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stress-ng-container' of Job 'quartered-stress' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 quartered.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stress-ng-container' of Job 'quartered-stress' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 quartered.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stress-ng-container' of Job 'quartered-stress' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 quartered.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 quartered.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stress-ng-container" of job "quartered-stress" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 quartered.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 quartered.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job quartered-stress in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 quartered.yaml:4
────────────────────────────────────────
   4 [   name: quartered-stress
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container quartered-stress in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 quartered.yaml:16-27
────────────────────────────────────────
  16 ┌       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 │             cpu: "0.5" # Adjust CPU request as needed
  24 └             memory: "512Mi" # Adjust memory request as needed
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job quartered-stress in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 quartered.yaml:15-28
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: stress-ng-container
  17 │         image: ubuntu:latest
  18 │         command: ["/bin/bash", "-c"]
  19 │         args:
  20 │           - apt-get update && apt-get install -y stress-ng && stress-ng --cpu 1 --timeout 60s --metrics-brief
  21 │         resources:
  22 │           requests:
  23 └             cpu: "0.5" # Adjust CPU request as needed
  ..   
────────────────────────────────────────



quay-io1.yaml (kubernetes)
==========================
Tests: 109 (SUCCESSES: 91, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'busybox-quay-io' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 quay-io1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/quay/busybox:latest
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'busybox-quay-io' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 quay-io1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/quay/busybox:latest
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'busybox-quay-io' in 'delta' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 quay-io1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/quay/busybox:latest
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'busybox-quay-io' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 quay-io1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/quay/busybox:latest
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'busybox-quay-io' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 quay-io1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/quay/busybox:latest
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'busybox-quay-io' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 quay-io1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/quay/busybox:latest
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'busybox-quay-io' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 quay-io1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/quay/busybox:latest
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'busybox-quay-io' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 quay-io1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/quay/busybox:latest
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'busybox-quay-io' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 quay-io1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/quay/busybox:latest
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'busybox-quay-io' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 quay-io1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/quay/busybox:latest
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'busybox-quay-io' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 quay-io1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/quay/busybox:latest
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'busybox-quay-io' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 quay-io1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/quay/busybox:latest
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 quay-io1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/quay/busybox:latest
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "busybox-quay-io" in "delta" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 quay-io1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/quay/busybox:latest
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 quay-io1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/quay/busybox:latest
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox-quay-io in delta namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 quay-io1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/quay/busybox:latest
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod busybox-quay-io in delta namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 quay-io1.yaml:7-15
────────────────────────────────────────
   7 ┌   restartPolicy: OnFailure
   8 │   containers:
   9 │   - name: busybox
  10 │     image: quay.io/quay/busybox:latest
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container busybox in pod busybox-quay-io (namespace: delta) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 quay-io1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/quay/busybox:latest
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────



quay-io1_1.yaml (kubernetes)
============================
Tests: 109 (SUCCESSES: 92, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'kiali-quay-io' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 quay-io1_1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/kiali/kiali:v1.78.0
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'kiali-quay-io' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 quay-io1_1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/kiali/kiali:v1.78.0
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'kiali-quay-io' in 'delta' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 quay-io1_1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/kiali/kiali:v1.78.0
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'kiali-quay-io' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 quay-io1_1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/kiali/kiali:v1.78.0
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'kiali-quay-io' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 quay-io1_1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/kiali/kiali:v1.78.0
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'kiali-quay-io' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 quay-io1_1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/kiali/kiali:v1.78.0
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'kiali-quay-io' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 quay-io1_1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/kiali/kiali:v1.78.0
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'kiali-quay-io' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 quay-io1_1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/kiali/kiali:v1.78.0
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'kiali-quay-io' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 quay-io1_1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/kiali/kiali:v1.78.0
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'kiali-quay-io' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 quay-io1_1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/kiali/kiali:v1.78.0
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'kiali-quay-io' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 quay-io1_1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/kiali/kiali:v1.78.0
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 quay-io1_1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/kiali/kiali:v1.78.0
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "kiali-quay-io" in "delta" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 quay-io1_1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/kiali/kiali:v1.78.0
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 quay-io1_1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/kiali/kiali:v1.78.0
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kiali-quay-io in delta namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 quay-io1_1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/kiali/kiali:v1.78.0
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod kiali-quay-io in delta namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 quay-io1_1.yaml:7-15
────────────────────────────────────────
   7 ┌   restartPolicy: OnFailure
   8 │   containers:
   9 │   - name: busybox
  10 │     image: quay.io/kiali/kiali:v1.78.0
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container busybox in pod kiali-quay-io (namespace: delta) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 quay-io1_1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: quay.io/kiali/kiali:v1.78.0
  11 │     command:
  12 │     - sh
  13 │     - -c
  14 │     - echo "Success!" && sleep 60
  15 └     imagePullPolicy: Always
────────────────────────────────────────



query-depl.yaml (kubernetes)
============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 query-depl.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: boilingsoup/query
  18 │         readinessProbe:
  19 │           exec:
  20 │             command:
  21 │             - echo
  22 │             - starting query service... I should use an init container for this.
  23 └           initialDelaySeconds: 10
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'query' of Deployment 'query-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 query-depl.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: boilingsoup/query
  18 │         readinessProbe:
  19 │           exec:
  20 │             command:
  21 │             - echo
  22 │             - starting query service... I should use an init container for this.
  23 └           initialDelaySeconds: 10
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'query' of 'deployment' 'query-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 query-depl.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: boilingsoup/query
  18 │         readinessProbe:
  19 │           exec:
  20 │             command:
  21 │             - echo
  22 │             - starting query service... I should use an init container for this.
  23 └           initialDelaySeconds: 10
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 query-depl.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: boilingsoup/query
  18 │         readinessProbe:
  19 │           exec:
  20 │             command:
  21 │             - echo
  22 │             - starting query service... I should use an init container for this.
  23 └           initialDelaySeconds: 10
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 query-depl.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: boilingsoup/query
  18 │         readinessProbe:
  19 │           exec:
  20 │             command:
  21 │             - echo
  22 │             - starting query service... I should use an init container for this.
  23 └           initialDelaySeconds: 10
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'query' of Deployment 'query-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 query-depl.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: boilingsoup/query
  18 │         readinessProbe:
  19 │           exec:
  20 │             command:
  21 │             - echo
  22 │             - starting query service... I should use an init container for this.
  23 └           initialDelaySeconds: 10
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'query' of Deployment 'query-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 query-depl.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: boilingsoup/query
  18 │         readinessProbe:
  19 │           exec:
  20 │             command:
  21 │             - echo
  22 │             - starting query service... I should use an init container for this.
  23 └           initialDelaySeconds: 10
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 query-depl.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: boilingsoup/query
  18 │         readinessProbe:
  19 │           exec:
  20 │             command:
  21 │             - echo
  22 │             - starting query service... I should use an init container for this.
  23 └           initialDelaySeconds: 10
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 query-depl.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: boilingsoup/query
  18 │         readinessProbe:
  19 │           exec:
  20 │             command:
  21 │             - echo
  22 │             - starting query service... I should use an init container for this.
  23 └           initialDelaySeconds: 10
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 query-depl.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: boilingsoup/query
  18 │         readinessProbe:
  19 │           exec:
  20 │             command:
  21 │             - echo
  22 │             - starting query service... I should use an init container for this.
  23 └           initialDelaySeconds: 10
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 query-depl.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: boilingsoup/query
  18 │         readinessProbe:
  19 │           exec:
  20 │             command:
  21 │             - echo
  22 │             - starting query service... I should use an init container for this.
  23 └           initialDelaySeconds: 10
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 query-depl.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: boilingsoup/query
  18 │         readinessProbe:
  19 │           exec:
  20 │             command:
  21 │             - echo
  22 │             - starting query service... I should use an init container for this.
  23 └           initialDelaySeconds: 10
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 query-depl.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: boilingsoup/query
  18 │         readinessProbe:
  19 │           exec:
  20 │             command:
  21 │             - echo
  22 │             - starting query service... I should use an init container for this.
  23 └           initialDelaySeconds: 10
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "query" of deployment "query-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 query-depl.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: boilingsoup/query
  18 │         readinessProbe:
  19 │           exec:
  20 │             command:
  21 │             - echo
  22 │             - starting query service... I should use an init container for this.
  23 └           initialDelaySeconds: 10
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 query-depl.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: boilingsoup/query
  18 │         readinessProbe:
  19 │           exec:
  20 │             command:
  21 │             - echo
  22 │             - starting query service... I should use an init container for this.
  23 └           initialDelaySeconds: 10
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment query-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 query-depl.yaml:4
────────────────────────────────────────
   4 [   name: query-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container query-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: boilingsoup/query
  18 │         readinessProbe:
  19 │           exec:
  20 │             command:
  21 │             - echo
  22 │             - starting query service... I should use an init container for this.
  23 └           initialDelaySeconds: 10
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment query-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl.yaml:15-23
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: query
  17 │         image: boilingsoup/query
  18 │         readinessProbe:
  19 │           exec:
  20 │             command:
  21 │             - echo
  22 │             - starting query service... I should use an init container for this.
  23 └           initialDelaySeconds: 10
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container query in deployment query-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 query-depl.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: boilingsoup/query
  18 │         readinessProbe:
  19 │           exec:
  20 │             command:
  21 │             - echo
  22 │             - starting query service... I should use an init container for this.
  23 └           initialDelaySeconds: 10
────────────────────────────────────────



query-depl1.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 query-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: khalil1009/query
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'query' of Deployment 'query-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 query-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: khalil1009/query
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'query' of 'deployment' 'query-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 query-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: khalil1009/query
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 query-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: khalil1009/query
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 query-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: khalil1009/query
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'query' of Deployment 'query-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 query-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: khalil1009/query
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'query' of Deployment 'query-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 query-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: khalil1009/query
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 query-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: khalil1009/query
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 query-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: khalil1009/query
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 query-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: khalil1009/query
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 query-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: khalil1009/query
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 query-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: khalil1009/query
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 query-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: khalil1009/query
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "query" of deployment "query-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 query-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: khalil1009/query
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 query-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: khalil1009/query
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment query-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 query-depl1.yaml:4
────────────────────────────────────────
   4 [   name: query-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container query-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: khalil1009/query
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment query-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl1.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: query
  17 └         image: khalil1009/query
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container query in deployment query-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 query-depl1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: khalil1009/query
────────────────────────────────────────



query-depl10.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 query-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: rallycoding/query-84
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'query' of Deployment 'query-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 query-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: rallycoding/query-84
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'query' of 'deployment' 'query-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 query-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: rallycoding/query-84
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 query-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: rallycoding/query-84
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 query-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: rallycoding/query-84
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'query' of Deployment 'query-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 query-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: rallycoding/query-84
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'query' of Deployment 'query-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 query-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: rallycoding/query-84
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 query-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: rallycoding/query-84
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 query-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: rallycoding/query-84
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 query-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: rallycoding/query-84
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 query-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: rallycoding/query-84
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 query-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: rallycoding/query-84
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 query-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: rallycoding/query-84
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "query" of deployment "query-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 query-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: rallycoding/query-84
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 query-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: rallycoding/query-84
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment query-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 query-depl10.yaml:4
────────────────────────────────────────
   4 [   name: query-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container query-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: rallycoding/query-84
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment query-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl10.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: query
  17 └         image: rallycoding/query-84
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container query in deployment query-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 query-depl10.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: rallycoding/query-84
────────────────────────────────────────



query-depl11.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 query-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: devmatheuus/blog-query-service
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'query' of Deployment 'query-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 query-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: devmatheuus/blog-query-service
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'query' of 'deployment' 'query-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 query-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: devmatheuus/blog-query-service
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 query-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: devmatheuus/blog-query-service
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 query-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: devmatheuus/blog-query-service
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'query' of Deployment 'query-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 query-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: devmatheuus/blog-query-service
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'query' of Deployment 'query-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 query-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: devmatheuus/blog-query-service
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 query-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: devmatheuus/blog-query-service
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 query-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: devmatheuus/blog-query-service
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 query-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: devmatheuus/blog-query-service
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 query-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: devmatheuus/blog-query-service
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 query-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: devmatheuus/blog-query-service
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 query-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: devmatheuus/blog-query-service
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "query" of deployment "query-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 query-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: devmatheuus/blog-query-service
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 query-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: devmatheuus/blog-query-service
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment query-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 query-depl11.yaml:4
────────────────────────────────────────
   4 [   name: query-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container query-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: devmatheuus/blog-query-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment query-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl11.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: query
  17 └         image: devmatheuus/blog-query-service
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container query in deployment query-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 query-depl11.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: devmatheuus/blog-query-service
────────────────────────────────────────



query-depl12.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 query-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: lokeam/query
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'query' of Deployment 'query-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 query-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: lokeam/query
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'query' of 'deployment' 'query-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 query-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: lokeam/query
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 query-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: lokeam/query
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 query-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: lokeam/query
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'query' of Deployment 'query-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 query-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: lokeam/query
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'query' of Deployment 'query-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 query-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: lokeam/query
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 query-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: lokeam/query
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 query-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: lokeam/query
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 query-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: lokeam/query
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 query-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: lokeam/query
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 query-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: lokeam/query
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 query-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: lokeam/query
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "query" of deployment "query-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 query-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: lokeam/query
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 query-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: lokeam/query
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment query-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 query-depl12.yaml:4
────────────────────────────────────────
   4 [   name: query-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container query-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: lokeam/query
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment query-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl12.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: query
  17 └         image: lokeam/query
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container query in deployment query-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 query-depl12.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: lokeam/query
────────────────────────────────────────



query-depl13.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 query-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: mabroukdev/blog-query
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'query' of Deployment 'query-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 query-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: mabroukdev/blog-query
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'query' of 'deployment' 'query-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 query-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: mabroukdev/blog-query
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 query-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: mabroukdev/blog-query
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 query-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: mabroukdev/blog-query
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'query' of Deployment 'query-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 query-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: mabroukdev/blog-query
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'query' of Deployment 'query-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 query-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: mabroukdev/blog-query
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 query-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: mabroukdev/blog-query
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 query-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: mabroukdev/blog-query
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 query-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: mabroukdev/blog-query
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 query-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: mabroukdev/blog-query
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 query-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: mabroukdev/blog-query
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 query-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: mabroukdev/blog-query
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "query" of deployment "query-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 query-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: mabroukdev/blog-query
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 query-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: mabroukdev/blog-query
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment query-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 query-depl13.yaml:4
────────────────────────────────────────
   4 [   name: query-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container query-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: mabroukdev/blog-query
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment query-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl13.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: query
  17 └         image: mabroukdev/blog-query
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container query in deployment query-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 query-depl13.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: mabroukdev/blog-query
────────────────────────────────────────



query-depl14.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 query-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: samtwin2020/query
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'query' of Deployment 'query-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 query-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: samtwin2020/query
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'query' of 'deployment' 'query-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 query-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: samtwin2020/query
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 query-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: samtwin2020/query
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 query-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: samtwin2020/query
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'query' of Deployment 'query-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 query-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: samtwin2020/query
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'query' of Deployment 'query-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 query-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: samtwin2020/query
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 query-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: samtwin2020/query
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 query-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: samtwin2020/query
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 query-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: samtwin2020/query
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 query-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: samtwin2020/query
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 query-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: samtwin2020/query
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 query-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: samtwin2020/query
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "query" of deployment "query-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 query-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: samtwin2020/query
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 query-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: samtwin2020/query
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment query-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 query-depl14.yaml:4
────────────────────────────────────────
   4 [   name: query-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container query-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: samtwin2020/query
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment query-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl14.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: query
  17 └         image: samtwin2020/query
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container query in deployment query-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 query-depl14.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: samtwin2020/query
────────────────────────────────────────



query-depl15.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 query-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: isuruk1/query
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'query' of Deployment 'query-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 query-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: isuruk1/query
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'query' of 'deployment' 'query-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 query-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: isuruk1/query
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 query-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: isuruk1/query
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 query-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: isuruk1/query
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'query' of Deployment 'query-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 query-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: isuruk1/query
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'query' of Deployment 'query-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 query-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: isuruk1/query
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 query-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: isuruk1/query
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 query-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: isuruk1/query
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 query-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: isuruk1/query
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 query-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: isuruk1/query
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 query-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: isuruk1/query
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 query-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: isuruk1/query
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "query" of deployment "query-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 query-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: isuruk1/query
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 query-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: isuruk1/query
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment query-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 query-depl15.yaml:4
────────────────────────────────────────
   4 [   name: query-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container query-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: isuruk1/query
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment query-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl15.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: query
  17 └         image: isuruk1/query
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container query in deployment query-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 query-depl15.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: isuruk1/query
────────────────────────────────────────



query-depl16.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 query-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: ksobitov/query
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'query' of Deployment 'query-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 query-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: ksobitov/query
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'query' of 'deployment' 'query-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 query-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: ksobitov/query
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 query-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: ksobitov/query
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 query-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: ksobitov/query
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'query' of Deployment 'query-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 query-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: ksobitov/query
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'query' of Deployment 'query-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 query-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: ksobitov/query
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 query-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: ksobitov/query
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 query-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: ksobitov/query
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 query-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: ksobitov/query
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 query-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: ksobitov/query
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 query-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: ksobitov/query
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 query-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: ksobitov/query
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "query" of deployment "query-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 query-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: ksobitov/query
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 query-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: ksobitov/query
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment query-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 query-depl16.yaml:4
────────────────────────────────────────
   4 [   name: query-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container query-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: ksobitov/query
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment query-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl16.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: query
  17 └         image: ksobitov/query
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container query in deployment query-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 query-depl16.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: ksobitov/query
────────────────────────────────────────



query-depl17.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 query-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: kliao36/query:latest
  18 │         ports:
  19 └         - containerPort: 4002
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'query' of Deployment 'query-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 query-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: kliao36/query:latest
  18 │         ports:
  19 └         - containerPort: 4002
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'query' of 'deployment' 'query-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 query-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: kliao36/query:latest
  18 │         ports:
  19 └         - containerPort: 4002
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 query-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: kliao36/query:latest
  18 │         ports:
  19 └         - containerPort: 4002
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 query-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: kliao36/query:latest
  18 │         ports:
  19 └         - containerPort: 4002
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'query' of Deployment 'query-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 query-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: kliao36/query:latest
  18 │         ports:
  19 └         - containerPort: 4002
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'query' of Deployment 'query-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 query-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: kliao36/query:latest
  18 │         ports:
  19 └         - containerPort: 4002
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 query-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: kliao36/query:latest
  18 │         ports:
  19 └         - containerPort: 4002
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 query-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: kliao36/query:latest
  18 │         ports:
  19 └         - containerPort: 4002
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 query-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: kliao36/query:latest
  18 │         ports:
  19 └         - containerPort: 4002
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 query-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: kliao36/query:latest
  18 │         ports:
  19 └         - containerPort: 4002
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 query-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: kliao36/query:latest
  18 │         ports:
  19 └         - containerPort: 4002
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 query-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: kliao36/query:latest
  18 │         ports:
  19 └         - containerPort: 4002
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "query" of deployment "query-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 query-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: kliao36/query:latest
  18 │         ports:
  19 └         - containerPort: 4002
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 query-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: kliao36/query:latest
  18 │         ports:
  19 └         - containerPort: 4002
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment query-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 query-depl17.yaml:4
────────────────────────────────────────
   4 [   name: query-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container query-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: kliao36/query:latest
  18 │         ports:
  19 └         - containerPort: 4002
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment query-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl17.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: query
  17 │         image: kliao36/query:latest
  18 │         ports:
  19 └         - containerPort: 4002
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container query in deployment query-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 query-depl17.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: query
  17 │         image: kliao36/query:latest
  18 │         ports:
  19 └         - containerPort: 4002
────────────────────────────────────────



query-depl18.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 query-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: bheshraj13/query
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'query' of Deployment 'query-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 query-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: bheshraj13/query
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'query' of 'deployment' 'query-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 query-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: bheshraj13/query
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 query-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: bheshraj13/query
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 query-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: bheshraj13/query
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'query' of Deployment 'query-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 query-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: bheshraj13/query
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'query' of Deployment 'query-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 query-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: bheshraj13/query
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 query-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: bheshraj13/query
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 query-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: bheshraj13/query
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 query-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: bheshraj13/query
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 query-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: bheshraj13/query
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 query-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: bheshraj13/query
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 query-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: bheshraj13/query
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "query" of deployment "query-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 query-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: bheshraj13/query
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 query-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: bheshraj13/query
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment query-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 query-depl18.yaml:4
────────────────────────────────────────
   4 [   name: query-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container query-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: bheshraj13/query
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment query-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl18.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: query
  17 └         image: bheshraj13/query
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container query in deployment query-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 query-depl18.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: bheshraj13/query
────────────────────────────────────────



query-depl19.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 query-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: jcmontgomery/query
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'query' of Deployment 'query-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 query-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: jcmontgomery/query
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'query' of 'deployment' 'query-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 query-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: jcmontgomery/query
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 query-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: jcmontgomery/query
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 query-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: jcmontgomery/query
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'query' of Deployment 'query-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 query-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: jcmontgomery/query
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'query' of Deployment 'query-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 query-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: jcmontgomery/query
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 query-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: jcmontgomery/query
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 query-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: jcmontgomery/query
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 query-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: jcmontgomery/query
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 query-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: jcmontgomery/query
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 query-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: jcmontgomery/query
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 query-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: jcmontgomery/query
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "query" of deployment "query-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 query-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: jcmontgomery/query
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 query-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: jcmontgomery/query
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment query-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 query-depl19.yaml:4
────────────────────────────────────────
   4 [   name: query-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container query-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: jcmontgomery/query
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment query-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl19.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: query
  17 └         image: jcmontgomery/query
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container query in deployment query-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 query-depl19.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: jcmontgomery/query
────────────────────────────────────────



query-depl2.yaml (kubernetes)
=============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 query-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: manuelextra/query
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'query' of Deployment 'query-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 query-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: manuelextra/query
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'query' of 'deployment' 'query-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 query-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: manuelextra/query
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 query-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: manuelextra/query
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 query-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: manuelextra/query
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'query' of Deployment 'query-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 query-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: manuelextra/query
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'query' of Deployment 'query-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 query-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: manuelextra/query
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 query-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: manuelextra/query
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 query-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: manuelextra/query
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 query-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: manuelextra/query
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 query-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: manuelextra/query
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 query-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: manuelextra/query
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 query-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: manuelextra/query
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "query" of deployment "query-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 query-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: manuelextra/query
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 query-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: manuelextra/query
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment query-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 query-depl2.yaml:4
────────────────────────────────────────
   4 [   name: query-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container query-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: manuelextra/query
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment query-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl2.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: query
  17 └         image: manuelextra/query
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container query in deployment query-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 query-depl2.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: manuelextra/query
────────────────────────────────────────



query-depl20.yaml (kubernetes)
==============================
Tests: 109 (SUCCESSES: 90, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 query-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: abdessalamwizli/query
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'query' of Deployment 'query-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 query-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: abdessalamwizli/query
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'query' of 'deployment' 'query-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 query-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: abdessalamwizli/query
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 query-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: abdessalamwizli/query
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 query-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: abdessalamwizli/query
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'query' of Deployment 'query-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 query-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: abdessalamwizli/query
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'query' of Deployment 'query-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 query-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: abdessalamwizli/query
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 query-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: abdessalamwizli/query
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 query-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: abdessalamwizli/query
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'query' of Deployment 'query-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 query-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: abdessalamwizli/query
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 query-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: abdessalamwizli/query
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'query' of Deployment 'query-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 query-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: abdessalamwizli/query
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 query-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: abdessalamwizli/query
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "query" of deployment "query-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 query-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: abdessalamwizli/query
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 query-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: abdessalamwizli/query
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment query-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 query-depl20.yaml:4
────────────────────────────────────────
   4 [   name: query-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container query-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: abdessalamwizli/query
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment query-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 query-depl20.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: query
  17 └         image: abdessalamwizli/query
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container query in deployment query-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 query-depl20.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: query
  17 └         image: abdessalamwizli/query
────────────────────────────────────────


