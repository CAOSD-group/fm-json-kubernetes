
Report Summary

┌─────────────────────────────────┬────────────┬───────────────────┐
│             Target              │    Type    │ Misconfigurations │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-pods7.yaml                 │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-pods7_1.yaml               │ kubernetes │        33         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-pods7_2.yaml               │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-pods8.yaml                 │ kubernetes │        16         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-pods8_1.yaml               │ kubernetes │        29         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-pods9.yaml                 │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-pods9_1.yaml               │ kubernetes │        36         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-pods9_2.yaml               │ kubernetes │        70         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-pods_1.yaml                │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources.yaml             │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources1.yaml            │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources1_1.yaml          │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources1_2.yaml          │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources1_3.yaml          │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources1_4.yaml          │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources2.yaml            │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources2_1.yaml          │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources2_2.yaml          │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources2_3.yaml          │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources2_4.yaml          │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources3.yaml            │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources3_1.yaml          │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources3_2.yaml          │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources3_3.yaml          │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources3_4.yaml          │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources4.yaml            │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources4_1.yaml          │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources4_2.yaml          │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources4_3.yaml          │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources4_4.yaml          │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources_1.yaml           │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources_2.yaml           │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources_3.yaml           │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-resources_4.yaml           │ kubernetes │        17         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-sa.yaml                    │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-sa1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-sa1_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-sa2.yaml                   │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-sa2_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-sa3.yaml                   │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-sa3_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-sa4.yaml                   │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-sa4_1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-sa_1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-secret.yaml                │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-secret1.yaml               │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-secret2.yaml               │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-secret3.yaml               │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-secret4.yaml               │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-services.yaml              │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-services1.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-services2.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-services2_1.yaml           │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-services3.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-services4.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-services4_1.yaml           │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-services5.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-services6.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-services6_1.yaml           │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-services7.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-services8.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-services8_1.yaml           │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-services9.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-services_1.yaml            │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-svc.yaml                   │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-svc1.yaml                  │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-svc2.yaml                  │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-svc3.yaml                  │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-svc4.yaml                  │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update.yaml                │ kubernetes │         2         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update1.yaml               │ kubernetes │         2         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update1_1.yaml             │ kubernetes │         2         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update1_2.yaml             │ kubernetes │         2         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update1_3.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update1_4.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update1_5.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update1_6.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update1_7.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update2.yaml               │ kubernetes │         2         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update2_1.yaml             │ kubernetes │         2         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update2_2.yaml             │ kubernetes │         2         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update2_3.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update2_4.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update2_5.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update2_6.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update2_7.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update3.yaml               │ kubernetes │         2         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update3_1.yaml             │ kubernetes │         2         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update3_2.yaml             │ kubernetes │         2         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update3_3.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update3_4.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update3_5.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update3_6.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update3_7.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update4.yaml               │ kubernetes │         2         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update4_1.yaml             │ kubernetes │         2         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update4_2.yaml             │ kubernetes │         2         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update4_3.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update4_4.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update4_5.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update4_6.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update4_7.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update_1.yaml              │ kubernetes │         2         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update_2.yaml              │ kubernetes │         2         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update_3.yaml              │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update_4.yaml              │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update_5.yaml              │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update_6.yaml              │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good-update_7.yaml              │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good01.yaml                     │ kubernetes │        19         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good011.yaml                    │ kubernetes │        19         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good012.yaml                    │ kubernetes │        19         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good013.yaml                    │ kubernetes │        19         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good014.yaml                    │ kubernetes │        19         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good02.yaml                     │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good021.yaml                    │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good022.yaml                    │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good023.yaml                    │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good024.yaml                    │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good03.yaml                     │ kubernetes │        19         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good031.yaml                    │ kubernetes │        19         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good032.yaml                    │ kubernetes │        19         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good033.yaml                    │ kubernetes │        19         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good034.yaml                    │ kubernetes │        19         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good10.yaml                     │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good11.yaml                     │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good12.yaml                     │ kubernetes │        20         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good13.yaml                     │ kubernetes │        20         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good14.yaml                     │ kubernetes │        20         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good15.yaml                     │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good15_1.yaml                   │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good15_2.yaml                   │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good17.yaml                     │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good18.yaml                     │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good19.yaml                     │ kubernetes │        20         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good20.yaml                     │ kubernetes │        20         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good21.yaml                     │ kubernetes │        20         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good22.yaml                     │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good22_1.yaml                   │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good22_2.yaml                   │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good24.yaml                     │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good25.yaml                     │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good26.yaml                     │ kubernetes │        20         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good27.yaml                     │ kubernetes │        20         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good28.yaml                     │ kubernetes │        20         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good29.yaml                     │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good29_1.yaml                   │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good29_2.yaml                   │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good3.yaml                      │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good31.yaml                     │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good32.yaml                     │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good33.yaml                     │ kubernetes │        20         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good34.yaml                     │ kubernetes │        20         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good35.yaml                     │ kubernetes │        20         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good36.yaml                     │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good36_1.yaml                   │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good36_2.yaml                   │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good4.yaml                      │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good5.yaml                      │ kubernetes │        20         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good6.yaml                      │ kubernetes │        20         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good7.yaml                      │ kubernetes │        20         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good8.yaml                      │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good8_1.yaml                    │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ good8_2.yaml                    │ kubernetes │        18         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ goodburguer-hpa.yaml            │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ goodburguer-keys.yaml           │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ goodburguer-keys_1.yaml         │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ goodburguer-sv.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ goodburguer.yaml                │ kubernetes │        16         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ goodpod.yaml                    │ kubernetes │        52         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ goodpod1.yaml                   │ kubernetes │        52         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ goodpod2.yaml                   │ kubernetes │        52         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ goodpod3.yaml                   │ kubernetes │        52         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ goodpod4.yaml                   │ kubernetes │        52         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ goods-istio-routing_1.yaml      │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ goods-istio-routing_2.yaml      │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ goods-istio-routing_3.yaml      │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ goods.yaml                      │ kubernetes │        19         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ goods_1.yaml                    │ kubernetes │        19         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ goods_2.yaml                    │ kubernetes │        19         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ goods_3.yaml                    │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gop-file-server-pod.yaml        │ kubernetes │        20         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gop-fs-service.yaml             │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gorm-test-job.yaml              │ kubernetes │        16         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotenberg-deployment.yaml       │ kubernetes │        19         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3.yaml     │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31.yaml    │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_1.yaml  │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_15.yaml │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_16.yaml │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_17.yaml │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_19.yaml │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_2.yaml  │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_20.yaml │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_22.yaml │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_23.yaml │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_27.yaml │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_28.yaml │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_29.yaml │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_3.yaml  │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_30.yaml │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_33.yaml │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_34.yaml │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_36.yaml │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_37.yaml │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_4.yaml  │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_5.yaml  │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_6.yaml  │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_7.yaml  │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_8.yaml  │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.31_9.yaml  │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_1.yaml   │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_15.yaml  │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_16.yaml  │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_17.yaml  │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_19.yaml  │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_2.yaml   │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_20.yaml  │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_22.yaml  │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_23.yaml  │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_27.yaml  │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_28.yaml  │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_29.yaml  │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_3.yaml   │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_30.yaml  │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_33.yaml  │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_34.yaml  │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_36.yaml  │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_37.yaml  │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_4.yaml   │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_5.yaml   │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_6.yaml   │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_7.yaml   │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_8.yaml   │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components-v2.2.3_9.yaml   │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components.yaml            │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1.yaml           │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_33.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_34.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_36.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_37.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components10_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components11_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components12_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components13_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components14_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components15_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components16_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components17_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components18_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components19_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_1.yaml         │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_15.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_16.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_17.yaml        │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_19.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_2.yaml         │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_20.yaml        │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_22.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_23.yaml        │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_27.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_28.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_29.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_3.yaml         │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_30.yaml        │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_33.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_34.yaml        │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_36.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_37.yaml        │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_4.yaml         │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_5.yaml         │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_6.yaml         │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_7.yaml         │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_8.yaml         │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components1_9.yaml         │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2.yaml           │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components21_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_33.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_34.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_36.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_37.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components22_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_33.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_34.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_36.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_37.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components23_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_33.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_34.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_36.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_37.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components24_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_33.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_34.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_36.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_37.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components25_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components26_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components27_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_33.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_34.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_36.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_37.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components28_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components29_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_1.yaml         │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_15.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_16.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_17.yaml        │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_19.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_2.yaml         │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_20.yaml        │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_22.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_23.yaml        │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_27.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_28.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_29.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_3.yaml         │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_30.yaml        │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_33.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_34.yaml        │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_36.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_37.yaml        │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_4.yaml         │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_5.yaml         │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_6.yaml         │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_7.yaml         │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_8.yaml         │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components2_9.yaml         │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components3.yaml           │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components30.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components30_10.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components30_11.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components30_12.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components30_13.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components30_14.yaml       │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components30_15.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components30_16.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components30_17.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components30_18.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components30_19.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components30_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components30_21.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components30_22.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components30_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components30_24.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components30_25.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components30_26.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components31_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components32_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33_22.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33_23.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33_27.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33_28.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33_29.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33_3.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33_30.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33_4.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33_5.yaml        │ kubernetes │         7         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33_6.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33_7.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33_8.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components33_9.yaml        │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components34.yaml          │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components34_1.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components34_15.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components34_16.yaml       │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components34_17.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components34_19.yaml       │ kubernetes │         0         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components34_2.yaml        │ kubernetes │         1         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components34_20.yaml       │ kubernetes │         4         │
├─────────────────────────────────┼────────────┼───────────────────┤
│ gotk-components34_22.yaml       │ kubernetes │         0         │
└─────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


good-pods7.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-pods7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-pods7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'goodpod01' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-pods7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-pods7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-pods7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-pods7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-pods7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-pods7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-pods7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-pods7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-pods7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-pods7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-pods7.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "goodpod01" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-pods7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-pods7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-pods7.yaml:4-6
────────────────────────────────────────
   4 ┌   name: goodpod01
   5 │   labels:
   6 └     app: myapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-pods7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-pods7.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────



good-pods7_1.yaml (kubernetes)
==============================
Tests: 129 (SUCCESSES: 96, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 22, MEDIUM: 6, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-pods7_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'busybox-again' of Pod 'goodpod02' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-pods7_1.yaml:15-20
────────────────────────────────────────
  15 ┌   - name: busybox-again
  16 │     image: busybox:1.35
  17 │     readinessProbe:
  18 │       tcpSocket:
  19 │         port: 8080
  20 └       periodSeconds: 10
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'goodpod02' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-pods7_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox-again' of Pod 'goodpod02' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-pods7_1.yaml:15-20
────────────────────────────────────────
  15 ┌   - name: busybox-again
  16 │     image: busybox:1.35
  17 │     readinessProbe:
  18 │       tcpSocket:
  19 │         port: 8080
  20 └       periodSeconds: 10
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'goodpod02' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-pods7_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox-again' of 'pod' 'goodpod02' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-pods7_1.yaml:15-20
────────────────────────────────────────
  15 ┌   - name: busybox-again
  16 │     image: busybox:1.35
  17 │     readinessProbe:
  18 │       tcpSocket:
  19 │         port: 8080
  20 └       periodSeconds: 10
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-pods7_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox-again' of Pod 'goodpod02' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-pods7_1.yaml:15-20
────────────────────────────────────────
  15 ┌   - name: busybox-again
  16 │     image: busybox:1.35
  17 │     readinessProbe:
  18 │       tcpSocket:
  19 │         port: 8080
  20 └       periodSeconds: 10
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-pods7_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox-again' of Pod 'goodpod02' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-pods7_1.yaml:15-20
────────────────────────────────────────
  15 ┌   - name: busybox-again
  16 │     image: busybox:1.35
  17 │     readinessProbe:
  18 │       tcpSocket:
  19 │         port: 8080
  20 └       periodSeconds: 10
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-pods7_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox-again' of Pod 'goodpod02' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-pods7_1.yaml:15-20
────────────────────────────────────────
  15 ┌   - name: busybox-again
  16 │     image: busybox:1.35
  17 │     readinessProbe:
  18 │       tcpSocket:
  19 │         port: 8080
  20 └       periodSeconds: 10
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-pods7_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox-again' of Pod 'goodpod02' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-pods7_1.yaml:15-20
────────────────────────────────────────
  15 ┌   - name: busybox-again
  16 │     image: busybox:1.35
  17 │     readinessProbe:
  18 │       tcpSocket:
  19 │         port: 8080
  20 └       periodSeconds: 10
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-pods7_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox-again' of Pod 'goodpod02' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-pods7_1.yaml:15-20
────────────────────────────────────────
  15 ┌   - name: busybox-again
  16 │     image: busybox:1.35
  17 │     readinessProbe:
  18 │       tcpSocket:
  19 │         port: 8080
  20 └       periodSeconds: 10
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-pods7_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox-again' of Pod 'goodpod02' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-pods7_1.yaml:15-20
────────────────────────────────────────
  15 ┌   - name: busybox-again
  16 │     image: busybox:1.35
  17 │     readinessProbe:
  18 │       tcpSocket:
  19 │         port: 8080
  20 └       periodSeconds: 10
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-pods7_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox-again' of Pod 'goodpod02' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-pods7_1.yaml:15-20
────────────────────────────────────────
  15 ┌   - name: busybox-again
  16 │     image: busybox:1.35
  17 │     readinessProbe:
  18 │       tcpSocket:
  19 │         port: 8080
  20 └       periodSeconds: 10
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-pods7_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox-again' of Pod 'goodpod02' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-pods7_1.yaml:15-20
────────────────────────────────────────
  15 ┌   - name: busybox-again
  16 │     image: busybox:1.35
  17 │     readinessProbe:
  18 │       tcpSocket:
  19 │         port: 8080
  20 └       periodSeconds: 10
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-pods7_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-pods7_1.yaml:15-20
────────────────────────────────────────
  15 ┌   - name: busybox-again
  16 │     image: busybox:1.35
  17 │     readinessProbe:
  18 │       tcpSocket:
  19 │         port: 8080
  20 └       periodSeconds: 10
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-pods7_1.yaml:8-20
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 │       periodSeconds: 20
  15 │   - name: busybox-again
  16 └     image: busybox:1.35
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "goodpod02" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-pods7_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox-again" of pod "goodpod02" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-pods7_1.yaml:15-20
────────────────────────────────────────
  15 ┌   - name: busybox-again
  16 │     image: busybox:1.35
  17 │     readinessProbe:
  18 │       tcpSocket:
  19 │         port: 8080
  20 └       periodSeconds: 10
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-pods7_1.yaml:15-20
────────────────────────────────────────
  15 ┌   - name: busybox-again
  16 │     image: busybox:1.35
  17 │     readinessProbe:
  18 │       tcpSocket:
  19 │         port: 8080
  20 └       periodSeconds: 10
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-pods7_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod02 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-pods7_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: goodpod02
   5 │   labels:
   6 └     app: myapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod02 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-pods7_1.yaml:15-20
────────────────────────────────────────
  15 ┌   - name: busybox-again
  16 │     image: busybox:1.35
  17 │     readinessProbe:
  18 │       tcpSocket:
  19 │         port: 8080
  20 └       periodSeconds: 10
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod02 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-pods7_1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 └       periodSeconds: 20
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod02 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-pods7_1.yaml:8-20
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: busybox
  10 │     image: busybox:1.35
  11 │     livenessProbe:
  12 │       tcpSocket:
  13 │         port: 7070
  14 │       periodSeconds: 20
  15 │   - name: busybox-again
  16 └     image: busybox:1.35
  ..   
────────────────────────────────────────



good-pods7_2.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'goodpod03' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-pods7_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     startupProbe:
  12 │       grpc:
  13 └         port: 8888
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'goodpod03' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-pods7_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     startupProbe:
  12 │       grpc:
  13 └         port: 8888
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'goodpod03' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-pods7_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     startupProbe:
  12 │       grpc:
  13 └         port: 8888
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'goodpod03' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-pods7_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     startupProbe:
  12 │       grpc:
  13 └         port: 8888
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'goodpod03' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-pods7_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     startupProbe:
  12 │       grpc:
  13 └         port: 8888
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'goodpod03' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-pods7_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     startupProbe:
  12 │       grpc:
  13 └         port: 8888
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'goodpod03' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-pods7_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     startupProbe:
  12 │       grpc:
  13 └         port: 8888
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'goodpod03' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-pods7_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     startupProbe:
  12 │       grpc:
  13 └         port: 8888
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'goodpod03' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-pods7_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     startupProbe:
  12 │       grpc:
  13 └         port: 8888
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'goodpod03' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-pods7_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     startupProbe:
  12 │       grpc:
  13 └         port: 8888
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'goodpod03' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-pods7_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     startupProbe:
  12 │       grpc:
  13 └         port: 8888
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-pods7_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     startupProbe:
  12 │       grpc:
  13 └         port: 8888
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-pods7_2.yaml:8-13
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: busybox
  10 │     image: busybox:1.35
  11 │     startupProbe:
  12 │       grpc:
  13 └         port: 8888
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "goodpod03" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-pods7_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     startupProbe:
  12 │       grpc:
  13 └         port: 8888
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-pods7_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     startupProbe:
  12 │       grpc:
  13 └         port: 8888
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod03 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-pods7_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: goodpod03
   5 │   labels:
   6 └     app: myapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod03 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-pods7_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: busybox
  10 │     image: busybox:1.35
  11 │     startupProbe:
  12 │       grpc:
  13 └         port: 8888
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod03 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-pods7_2.yaml:8-13
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: busybox
  10 │     image: busybox:1.35
  11 │     startupProbe:
  12 │       grpc:
  13 └         port: 8888
────────────────────────────────────────



good-pods8.yaml (kubernetes)
============================
Tests: 113 (SUCCESSES: 97, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'goodpod01-roroot' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-pods8.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'goodpod01-roroot' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-pods8.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'goodpod01-roroot' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-pods8.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'goodpod01-roroot' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-pods8.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'goodpod01-roroot' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-pods8.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'goodpod01-roroot' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-pods8.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'goodpod01-roroot' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-pods8.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'goodpod01-roroot' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-pods8.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'goodpod01-roroot' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-pods8.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'goodpod01-roroot' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-pods8.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-pods8.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-pods8.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "goodpod01-roroot" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-pods8.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-pods8.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod01-roroot in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-pods8.yaml:4
────────────────────────────────────────
   4 [   name: goodpod01-roroot
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01-roroot in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-pods8.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────



good-pods8_1.yaml (kubernetes)
==============================
Tests: 126 (SUCCESSES: 97, FAILURES: 29)
Failures: 29 (UNKNOWN: 0, LOW: 22, MEDIUM: 6, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'goodpod02-roroot' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-pods8_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'busybox-again' of Pod 'goodpod02-roroot' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-pods8_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: busybox-again
  12 │     image: busybox:1.35
  13 │     securityContext:
  14 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'goodpod02-roroot' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-pods8_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox-again' of Pod 'goodpod02-roroot' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-pods8_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: busybox-again
  12 │     image: busybox:1.35
  13 │     securityContext:
  14 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'goodpod02-roroot' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-pods8_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox-again' of 'pod' 'goodpod02-roroot' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-pods8_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: busybox-again
  12 │     image: busybox:1.35
  13 │     securityContext:
  14 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'goodpod02-roroot' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-pods8_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox-again' of Pod 'goodpod02-roroot' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-pods8_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: busybox-again
  12 │     image: busybox:1.35
  13 │     securityContext:
  14 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'goodpod02-roroot' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-pods8_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox-again' of Pod 'goodpod02-roroot' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-pods8_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: busybox-again
  12 │     image: busybox:1.35
  13 │     securityContext:
  14 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'goodpod02-roroot' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-pods8_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox-again' of Pod 'goodpod02-roroot' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-pods8_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: busybox-again
  12 │     image: busybox:1.35
  13 │     securityContext:
  14 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'goodpod02-roroot' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-pods8_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox-again' of Pod 'goodpod02-roroot' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-pods8_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: busybox-again
  12 │     image: busybox:1.35
  13 │     securityContext:
  14 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'goodpod02-roroot' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-pods8_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox-again' of Pod 'goodpod02-roroot' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-pods8_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: busybox-again
  12 │     image: busybox:1.35
  13 │     securityContext:
  14 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'goodpod02-roroot' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-pods8_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox-again' of Pod 'goodpod02-roroot' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-pods8_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: busybox-again
  12 │     image: busybox:1.35
  13 │     securityContext:
  14 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'goodpod02-roroot' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-pods8_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox-again' of Pod 'goodpod02-roroot' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-pods8_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: busybox-again
  12 │     image: busybox:1.35
  13 │     securityContext:
  14 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-pods8_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-pods8_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: busybox-again
  12 │     image: busybox:1.35
  13 │     securityContext:
  14 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-pods8_1.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 │       readOnlyRootFilesystem: true
  11 │   - name: busybox-again
  12 │     image: busybox:1.35
  13 │     securityContext:
  14 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "goodpod02-roroot" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-pods8_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox-again" of pod "goodpod02-roroot" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-pods8_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: busybox-again
  12 │     image: busybox:1.35
  13 │     securityContext:
  14 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-pods8_1.yaml:7-10
────────────────────────────────────────
   7 ┌   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-pods8_1.yaml:11-14
────────────────────────────────────────
  11 ┌   - name: busybox-again
  12 │     image: busybox:1.35
  13 │     securityContext:
  14 └       readOnlyRootFilesystem: true
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod02-roroot in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-pods8_1.yaml:4
────────────────────────────────────────
   4 [   name: goodpod02-roroot
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod02-roroot in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-pods8_1.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: busybox
   8 │     image: busybox:1.35
   9 │     securityContext:
  10 │       readOnlyRootFilesystem: true
  11 │   - name: busybox-again
  12 │     image: busybox:1.35
  13 │     securityContext:
  14 └       readOnlyRootFilesystem: true
────────────────────────────────────────



good-pods9_1.yaml (kubernetes)
==============================
Tests: 131 (SUCCESSES: 95, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 21, MEDIUM: 10, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'k8s-nginx' of Pod 'goodpod01-registry' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-pods9_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: k8s-nginx
  12 └     image: eu.foo.io/nginx
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'k8s-nginx-init' of Pod 'goodpod01-registry' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-pods9_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: k8s-nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'k8s-nginx' of Pod 'goodpod01-registry' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-pods9_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: k8s-nginx
  12 └     image: eu.foo.io/nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'k8s-nginx-init' of Pod 'goodpod01-registry' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-pods9_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: k8s-nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'k8s-nginx' of 'pod' 'goodpod01-registry' in 'ir-pods-namespace' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-pods9_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: k8s-nginx
  12 └     image: eu.foo.io/nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'k8s-nginx-init' of 'pod' 'goodpod01-registry' in 'ir-pods-namespace' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-pods9_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: k8s-nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'k8s-nginx' of Pod 'goodpod01-registry' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-pods9_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: k8s-nginx
  12 └     image: eu.foo.io/nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'k8s-nginx-init' of Pod 'goodpod01-registry' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-pods9_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: k8s-nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'k8s-nginx' of Pod 'goodpod01-registry' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-pods9_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: k8s-nginx
  12 └     image: eu.foo.io/nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'k8s-nginx-init' of Pod 'goodpod01-registry' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-pods9_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: k8s-nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'k8s-nginx' of Pod 'goodpod01-registry' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good-pods9_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: k8s-nginx
  12 └     image: eu.foo.io/nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'k8s-nginx-init' of Pod 'goodpod01-registry' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good-pods9_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: k8s-nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'k8s-nginx' of Pod 'goodpod01-registry' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-pods9_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: k8s-nginx
  12 └     image: eu.foo.io/nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'k8s-nginx-init' of Pod 'goodpod01-registry' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-pods9_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: k8s-nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'k8s-nginx' of Pod 'goodpod01-registry' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-pods9_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: k8s-nginx
  12 └     image: eu.foo.io/nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'k8s-nginx-init' of Pod 'goodpod01-registry' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-pods9_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: k8s-nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'k8s-nginx' of Pod 'goodpod01-registry' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-pods9_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: k8s-nginx
  12 └     image: eu.foo.io/nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'k8s-nginx-init' of Pod 'goodpod01-registry' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-pods9_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: k8s-nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'k8s-nginx' of Pod 'goodpod01-registry' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-pods9_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: k8s-nginx
  12 └     image: eu.foo.io/nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'k8s-nginx-init' of Pod 'goodpod01-registry' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-pods9_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: k8s-nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'k8s-nginx' of Pod 'goodpod01-registry' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-pods9_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: k8s-nginx
  12 └     image: eu.foo.io/nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'k8s-nginx-init' of Pod 'goodpod01-registry' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-pods9_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: k8s-nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'k8s-nginx' of Pod 'goodpod01-registry' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-pods9_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: k8s-nginx
  12 └     image: eu.foo.io/nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'k8s-nginx-init' of Pod 'goodpod01-registry' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-pods9_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: k8s-nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-pods9_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: k8s-nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-pods9_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: k8s-nginx
  12 └     image: eu.foo.io/nginx
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-pods9_1.yaml:7-12
────────────────────────────────────────
   7 ┌   initContainers:
   8 │   - name: k8s-nginx-init
   9 │     image: bar.io/nginx
  10 │   containers:
  11 │   - name: k8s-nginx
  12 └     image: eu.foo.io/nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "k8s-nginx" of pod "goodpod01-registry" in "ir-pods-namespace" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-pods9_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: k8s-nginx
  12 └     image: eu.foo.io/nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "k8s-nginx-init" of pod "goodpod01-registry" in "ir-pods-namespace" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-pods9_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: k8s-nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-pods9_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: k8s-nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-pods9_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: k8s-nginx
  12 └     image: eu.foo.io/nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01-registry in ir-pods-namespace namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-pods9_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: k8s-nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01-registry in ir-pods-namespace namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-pods9_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: k8s-nginx
  12 └     image: eu.foo.io/nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01-registry in ir-pods-namespace namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-pods9_1.yaml:7-12
────────────────────────────────────────
   7 ┌   initContainers:
   8 │   - name: k8s-nginx-init
   9 │     image: bar.io/nginx
  10 │   containers:
  11 │   - name: k8s-nginx
  12 └     image: eu.foo.io/nginx
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container k8s-nginx in pod goodpod01-registry (namespace: ir-pods-namespace) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good-pods9_1.yaml:11-12
────────────────────────────────────────
  11 ┌   - name: k8s-nginx
  12 └     image: eu.foo.io/nginx
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container k8s-nginx-init in pod goodpod01-registry (namespace: ir-pods-namespace) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good-pods9_1.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: k8s-nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────



good-pods9_2.yaml (kubernetes)
==============================
Tests: 165 (SUCCESSES: 95, FAILURES: 70)
Failures: 70 (UNKNOWN: 0, LOW: 41, MEDIUM: 20, HIGH: 9, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'goodpod02-registry' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-pods9_2.yaml:15-16
────────────────────────────────────────
  15 ┌   - name: busybox
  16 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'busybox-init' of Pod 'goodpod02-registry' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-pods9_2.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox-init
  11 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'k8s-nginx' of Pod 'goodpod02-registry' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-pods9_2.yaml:13-14
────────────────────────────────────────
  13 ┌   - name: k8s-nginx
  14 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'nginx-init' of Pod 'goodpod02-registry' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-pods9_2.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'goodpod02-registry' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-pods9_2.yaml:15-16
────────────────────────────────────────
  15 ┌   - name: busybox
  16 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox-init' of Pod 'goodpod02-registry' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-pods9_2.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox-init
  11 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'k8s-nginx' of Pod 'goodpod02-registry' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-pods9_2.yaml:13-14
────────────────────────────────────────
  13 ┌   - name: k8s-nginx
  14 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-init' of Pod 'goodpod02-registry' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-pods9_2.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'goodpod02-registry' in 'ir-pods-namespace' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-pods9_2.yaml:15-16
────────────────────────────────────────
  15 ┌   - name: busybox
  16 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox-init' of 'pod' 'goodpod02-registry' in 'ir-pods-namespace' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-pods9_2.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox-init
  11 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'k8s-nginx' of 'pod' 'goodpod02-registry' in 'ir-pods-namespace' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-pods9_2.yaml:13-14
────────────────────────────────────────
  13 ┌   - name: k8s-nginx
  14 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-init' of 'pod' 'goodpod02-registry' in 'ir-pods-namespace' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-pods9_2.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'goodpod02-registry' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-pods9_2.yaml:15-16
────────────────────────────────────────
  15 ┌   - name: busybox
  16 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox-init' of Pod 'goodpod02-registry' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-pods9_2.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox-init
  11 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'k8s-nginx' of Pod 'goodpod02-registry' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-pods9_2.yaml:13-14
────────────────────────────────────────
  13 ┌   - name: k8s-nginx
  14 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-init' of Pod 'goodpod02-registry' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-pods9_2.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'goodpod02-registry' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-pods9_2.yaml:15-16
────────────────────────────────────────
  15 ┌   - name: busybox
  16 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox-init' of Pod 'goodpod02-registry' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-pods9_2.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox-init
  11 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'k8s-nginx' of Pod 'goodpod02-registry' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-pods9_2.yaml:13-14
────────────────────────────────────────
  13 ┌   - name: k8s-nginx
  14 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-init' of Pod 'goodpod02-registry' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-pods9_2.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox' of Pod 'goodpod02-registry' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good-pods9_2.yaml:15-16
────────────────────────────────────────
  15 ┌   - name: busybox
  16 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'busybox-init' of Pod 'goodpod02-registry' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good-pods9_2.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox-init
  11 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'k8s-nginx' of Pod 'goodpod02-registry' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good-pods9_2.yaml:13-14
────────────────────────────────────────
  13 ┌   - name: k8s-nginx
  14 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-init' of Pod 'goodpod02-registry' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good-pods9_2.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'goodpod02-registry' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-pods9_2.yaml:15-16
────────────────────────────────────────
  15 ┌   - name: busybox
  16 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox-init' of Pod 'goodpod02-registry' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-pods9_2.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox-init
  11 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'k8s-nginx' of Pod 'goodpod02-registry' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-pods9_2.yaml:13-14
────────────────────────────────────────
  13 ┌   - name: k8s-nginx
  14 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-init' of Pod 'goodpod02-registry' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-pods9_2.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'goodpod02-registry' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-pods9_2.yaml:15-16
────────────────────────────────────────
  15 ┌   - name: busybox
  16 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox-init' of Pod 'goodpod02-registry' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-pods9_2.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox-init
  11 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'k8s-nginx' of Pod 'goodpod02-registry' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-pods9_2.yaml:13-14
────────────────────────────────────────
  13 ┌   - name: k8s-nginx
  14 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-init' of Pod 'goodpod02-registry' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-pods9_2.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'goodpod02-registry' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-pods9_2.yaml:15-16
────────────────────────────────────────
  15 ┌   - name: busybox
  16 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox-init' of Pod 'goodpod02-registry' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-pods9_2.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox-init
  11 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'k8s-nginx' of Pod 'goodpod02-registry' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-pods9_2.yaml:13-14
────────────────────────────────────────
  13 ┌   - name: k8s-nginx
  14 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-init' of Pod 'goodpod02-registry' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-pods9_2.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'goodpod02-registry' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-pods9_2.yaml:15-16
────────────────────────────────────────
  15 ┌   - name: busybox
  16 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox-init' of Pod 'goodpod02-registry' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-pods9_2.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox-init
  11 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'k8s-nginx' of Pod 'goodpod02-registry' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-pods9_2.yaml:13-14
────────────────────────────────────────
  13 ┌   - name: k8s-nginx
  14 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-init' of Pod 'goodpod02-registry' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-pods9_2.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'goodpod02-registry' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-pods9_2.yaml:15-16
────────────────────────────────────────
  15 ┌   - name: busybox
  16 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox-init' of Pod 'goodpod02-registry' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-pods9_2.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox-init
  11 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'k8s-nginx' of Pod 'goodpod02-registry' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-pods9_2.yaml:13-14
────────────────────────────────────────
  13 ┌   - name: k8s-nginx
  14 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-init' of Pod 'goodpod02-registry' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-pods9_2.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'goodpod02-registry' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-pods9_2.yaml:15-16
────────────────────────────────────────
  15 ┌   - name: busybox
  16 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox-init' of Pod 'goodpod02-registry' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-pods9_2.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox-init
  11 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'k8s-nginx' of Pod 'goodpod02-registry' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-pods9_2.yaml:13-14
────────────────────────────────────────
  13 ┌   - name: k8s-nginx
  14 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-init' of Pod 'goodpod02-registry' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-pods9_2.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-pods9_2.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-pods9_2.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox-init
  11 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-pods9_2.yaml:13-14
────────────────────────────────────────
  13 ┌   - name: k8s-nginx
  14 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-pods9_2.yaml:15-16
────────────────────────────────────────
  15 ┌   - name: busybox
  16 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-pods9_2.yaml:7-16
────────────────────────────────────────
   7 ┌   initContainers:
   8 │   - name: nginx-init
   9 │     image: bar.io/nginx
  10 │   - name: busybox-init
  11 │     image: eu.foo.io/busybox
  12 │   containers:
  13 │   - name: k8s-nginx
  14 │     image: bar.io/nginx
  15 │   - name: busybox
  16 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "goodpod02-registry" in "ir-pods-namespace" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-pods9_2.yaml:15-16
────────────────────────────────────────
  15 ┌   - name: busybox
  16 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox-init" of pod "goodpod02-registry" in "ir-pods-namespace" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-pods9_2.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox-init
  11 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "k8s-nginx" of pod "goodpod02-registry" in "ir-pods-namespace" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-pods9_2.yaml:13-14
────────────────────────────────────────
  13 ┌   - name: k8s-nginx
  14 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-init" of pod "goodpod02-registry" in "ir-pods-namespace" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-pods9_2.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-pods9_2.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox-init
  11 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-pods9_2.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-pods9_2.yaml:13-14
────────────────────────────────────────
  13 ┌   - name: k8s-nginx
  14 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-pods9_2.yaml:15-16
────────────────────────────────────────
  15 ┌   - name: busybox
  16 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod02-registry in ir-pods-namespace namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-pods9_2.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod02-registry in ir-pods-namespace namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-pods9_2.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox-init
  11 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod02-registry in ir-pods-namespace namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-pods9_2.yaml:13-14
────────────────────────────────────────
  13 ┌   - name: k8s-nginx
  14 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod02-registry in ir-pods-namespace namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-pods9_2.yaml:15-16
────────────────────────────────────────
  15 ┌   - name: busybox
  16 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod02-registry in ir-pods-namespace namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-pods9_2.yaml:7-16
────────────────────────────────────────
   7 ┌   initContainers:
   8 │   - name: nginx-init
   9 │     image: bar.io/nginx
  10 │   - name: busybox-init
  11 │     image: eu.foo.io/busybox
  12 │   containers:
  13 │   - name: k8s-nginx
  14 │     image: bar.io/nginx
  15 │   - name: busybox
  16 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container busybox in pod goodpod02-registry (namespace: ir-pods-namespace) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good-pods9_2.yaml:15-16
────────────────────────────────────────
  15 ┌   - name: busybox
  16 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container busybox-init in pod goodpod02-registry (namespace: ir-pods-namespace) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good-pods9_2.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox-init
  11 └     image: eu.foo.io/busybox
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container k8s-nginx in pod goodpod02-registry (namespace: ir-pods-namespace) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good-pods9_2.yaml:13-14
────────────────────────────────────────
  13 ┌   - name: k8s-nginx
  14 └     image: bar.io/nginx
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx-init in pod goodpod02-registry (namespace: ir-pods-namespace) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good-pods9_2.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: nginx-init
   9 └     image: bar.io/nginx
────────────────────────────────────────



good-pods_1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'goodpod02-label' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-pods_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox
  11 └     image: busybox:1.35
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'goodpod02-label' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-pods_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox
  11 └     image: busybox:1.35
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'goodpod02-label' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-pods_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox
  11 └     image: busybox:1.35
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'goodpod02-label' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-pods_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox
  11 └     image: busybox:1.35
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'goodpod02-label' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-pods_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox
  11 └     image: busybox:1.35
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'goodpod02-label' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-pods_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox
  11 └     image: busybox:1.35
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'goodpod02-label' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-pods_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox
  11 └     image: busybox:1.35
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'goodpod02-label' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-pods_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox
  11 └     image: busybox:1.35
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'goodpod02-label' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-pods_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox
  11 └     image: busybox:1.35
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'goodpod02-label' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-pods_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox
  11 └     image: busybox:1.35
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'goodpod02-label' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-pods_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox
  11 └     image: busybox:1.35
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-pods_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox
  11 └     image: busybox:1.35
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-pods_1.yaml:9-11
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: busybox
  11 └     image: busybox:1.35
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "goodpod02-label" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-pods_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox
  11 └     image: busybox:1.35
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-pods_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox
  11 └     image: busybox:1.35
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod02-label in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-pods_1.yaml:4-7
────────────────────────────────────────
   4 ┌   name: goodpod02-label
   5 │   labels:
   6 │     foo: bar
   7 └     app.kubernetes.io/name: busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod02-label in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-pods_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: busybox
  11 └     image: busybox:1.35
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod02-label in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-pods_1.yaml:9-11
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: busybox
  11 └     image: busybox:1.35
────────────────────────────────────────



good-resources.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'goodpod01' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources.yaml:7-12
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "goodpod01" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources.yaml:7-12
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────



good-resources1.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'goodpod01' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources1.yaml:7-12
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "goodpod01" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources1.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources1.yaml:7-12
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────



good-resources1_1.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Deployment 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources1_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Deployment 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources1_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'deployment' 'busybox' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources1_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Deployment 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources1_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Deployment 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources1_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Deployment 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources1_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Deployment 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources1_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Deployment 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources1_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Deployment 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources1_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Deployment 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources1_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Deployment 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources1_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources1_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources1_1.yaml:9-23
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: busybox
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: busybox
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of deployment "busybox" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources1_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources1_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources1_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment busybox in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources1_1.yaml:18-23
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────



good-resources1_2.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources1_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources1_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'daemonset' 'good-daemonset' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources1_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources1_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources1_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources1_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources1_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources1_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources1_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources1_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources1_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources1_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources1_2.yaml:7-20
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: good-daemonset
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         name: good-daemonset
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of daemonset "good-daemonset" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources1_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources1_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-daemonset in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources1_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset good-daemonset in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources1_2.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────



good-resources1_3.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Job 'good-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources1_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Job 'good-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources1_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'job' 'good-job' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources1_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Job 'good-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources1_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Job 'good-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources1_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Job 'good-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources1_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Job 'good-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources1_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Job 'good-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources1_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Job 'good-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources1_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Job 'good-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources1_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Job 'good-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources1_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources1_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources1_3.yaml:7-15
────────────────────────────────────────
   7 ┌   template:
   8 │     spec:
   9 │       containers:
  10 │       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 │         - '3000'
  15 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of job "good-job" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources1_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources1_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-job in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources1_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job good-job in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources1_3.yaml:9-15
────────────────────────────────────────
   9 ┌       containers:
  10 │       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 │         - '3000'
  15 └       restartPolicy: Never
────────────────────────────────────────



good-resources1_4.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources1_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources1_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'statefulset' 'good-statefulset' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources1_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources1_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources1_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources1_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources1_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources1_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources1_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources1_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources1_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources1_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources1_4.yaml:7-23
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       app: busybox
  10 │   serviceName: busyservice
  11 │   replicas: 1
  12 │   minReadySeconds: 10
  13 │   template:
  14 │     metadata:
  15 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of statefulset "good-statefulset" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources1_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources1_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-statefulset in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources1_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset good-statefulset in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources1_4.yaml:18-23
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────



good-resources2.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'goodpod01' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources2.yaml:7-12
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "goodpod01" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources2.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources2.yaml:7-12
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────



good-resources2_1.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Deployment 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Deployment 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'deployment' 'busybox' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Deployment 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Deployment 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Deployment 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Deployment 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Deployment 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Deployment 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Deployment 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Deployment 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources2_1.yaml:9-23
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: busybox
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: busybox
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of deployment "busybox" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment busybox in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources2_1.yaml:18-23
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────



good-resources2_2.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources2_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources2_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'daemonset' 'good-daemonset' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources2_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources2_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources2_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources2_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources2_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources2_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources2_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources2_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources2_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources2_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources2_2.yaml:7-20
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: good-daemonset
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         name: good-daemonset
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of daemonset "good-daemonset" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources2_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources2_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-daemonset in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources2_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset good-daemonset in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources2_2.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────



good-resources2_3.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Job 'good-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources2_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Job 'good-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources2_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'job' 'good-job' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources2_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Job 'good-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources2_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Job 'good-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources2_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Job 'good-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources2_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Job 'good-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources2_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Job 'good-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources2_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Job 'good-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources2_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Job 'good-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources2_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Job 'good-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources2_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources2_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources2_3.yaml:7-15
────────────────────────────────────────
   7 ┌   template:
   8 │     spec:
   9 │       containers:
  10 │       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 │         - '3000'
  15 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of job "good-job" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources2_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources2_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-job in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources2_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job good-job in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources2_3.yaml:9-15
────────────────────────────────────────
   9 ┌       containers:
  10 │       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 │         - '3000'
  15 └       restartPolicy: Never
────────────────────────────────────────



good-resources2_4.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources2_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources2_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'statefulset' 'good-statefulset' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources2_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources2_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources2_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources2_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources2_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources2_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources2_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources2_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources2_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources2_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources2_4.yaml:7-23
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       app: busybox
  10 │   serviceName: busyservice
  11 │   replicas: 1
  12 │   minReadySeconds: 10
  13 │   template:
  14 │     metadata:
  15 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of statefulset "good-statefulset" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources2_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources2_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-statefulset in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources2_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset good-statefulset in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources2_4.yaml:18-23
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────



good-resources3.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'goodpod01' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources3.yaml:7-12
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "goodpod01" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources3.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources3.yaml:7-12
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────



good-resources3_1.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Deployment 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources3_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Deployment 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources3_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'deployment' 'busybox' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources3_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Deployment 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources3_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Deployment 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources3_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Deployment 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources3_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Deployment 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources3_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Deployment 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources3_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Deployment 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources3_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Deployment 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources3_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Deployment 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources3_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources3_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources3_1.yaml:9-23
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: busybox
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: busybox
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of deployment "busybox" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources3_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources3_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources3_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment busybox in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources3_1.yaml:18-23
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────



good-resources3_2.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources3_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources3_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'daemonset' 'good-daemonset' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources3_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources3_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources3_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources3_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources3_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources3_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources3_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources3_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources3_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources3_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources3_2.yaml:7-20
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: good-daemonset
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         name: good-daemonset
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of daemonset "good-daemonset" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources3_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources3_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-daemonset in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources3_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset good-daemonset in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources3_2.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────



good-resources3_3.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Job 'good-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources3_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Job 'good-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources3_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'job' 'good-job' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources3_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Job 'good-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources3_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Job 'good-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources3_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Job 'good-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources3_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Job 'good-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources3_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Job 'good-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources3_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Job 'good-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources3_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Job 'good-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources3_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Job 'good-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources3_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources3_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources3_3.yaml:7-15
────────────────────────────────────────
   7 ┌   template:
   8 │     spec:
   9 │       containers:
  10 │       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 │         - '3000'
  15 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of job "good-job" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources3_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources3_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-job in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources3_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job good-job in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources3_3.yaml:9-15
────────────────────────────────────────
   9 ┌       containers:
  10 │       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 │         - '3000'
  15 └       restartPolicy: Never
────────────────────────────────────────



good-resources3_4.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources3_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources3_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'statefulset' 'good-statefulset' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources3_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources3_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources3_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources3_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources3_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources3_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources3_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources3_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources3_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources3_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources3_4.yaml:7-23
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       app: busybox
  10 │   serviceName: busyservice
  11 │   replicas: 1
  12 │   minReadySeconds: 10
  13 │   template:
  14 │     metadata:
  15 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of statefulset "good-statefulset" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources3_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources3_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-statefulset in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources3_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset good-statefulset in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources3_4.yaml:18-23
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────



good-resources4.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources4.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources4.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'goodpod01' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources4.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources4.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources4.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources4.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources4.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources4.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources4.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources4.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources4.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources4.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources4.yaml:7-12
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "goodpod01" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources4.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources4.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources4.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources4.yaml:7-12
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: busybox
   9 │     image: busybox:v1.35
  10 │     command:
  11 │     - sleep
  12 └     - '3000'
────────────────────────────────────────



good-resources4_1.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Deployment 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources4_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Deployment 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources4_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'deployment' 'busybox' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources4_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Deployment 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources4_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Deployment 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources4_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Deployment 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources4_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Deployment 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources4_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Deployment 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources4_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Deployment 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources4_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Deployment 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources4_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Deployment 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources4_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources4_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources4_1.yaml:9-23
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: busybox
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: busybox
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of deployment "busybox" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources4_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources4_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources4_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment busybox in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources4_1.yaml:18-23
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────



good-resources4_2.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources4_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources4_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'daemonset' 'good-daemonset' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources4_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources4_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources4_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources4_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources4_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources4_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources4_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources4_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources4_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources4_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources4_2.yaml:7-20
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: good-daemonset
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         name: good-daemonset
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of daemonset "good-daemonset" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources4_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources4_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-daemonset in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources4_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset good-daemonset in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources4_2.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────



good-resources4_3.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Job 'good-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources4_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Job 'good-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources4_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'job' 'good-job' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources4_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Job 'good-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources4_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Job 'good-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources4_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Job 'good-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources4_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Job 'good-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources4_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Job 'good-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources4_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Job 'good-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources4_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Job 'good-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources4_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Job 'good-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources4_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources4_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources4_3.yaml:7-15
────────────────────────────────────────
   7 ┌   template:
   8 │     spec:
   9 │       containers:
  10 │       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 │         - '3000'
  15 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of job "good-job" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources4_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources4_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-job in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources4_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job good-job in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources4_3.yaml:9-15
────────────────────────────────────────
   9 ┌       containers:
  10 │       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 │         - '3000'
  15 └       restartPolicy: Never
────────────────────────────────────────



good-resources4_4.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources4_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources4_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'statefulset' 'good-statefulset' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources4_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources4_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources4_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources4_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources4_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources4_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources4_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources4_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources4_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources4_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources4_4.yaml:7-23
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       app: busybox
  10 │   serviceName: busyservice
  11 │   replicas: 1
  12 │   minReadySeconds: 10
  13 │   template:
  14 │     metadata:
  15 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of statefulset "good-statefulset" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources4_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources4_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-statefulset in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources4_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset good-statefulset in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources4_4.yaml:18-23
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────



good-resources_1.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Deployment 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Deployment 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'deployment' 'busybox' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Deployment 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Deployment 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Deployment 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Deployment 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Deployment 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Deployment 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Deployment 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Deployment 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources_1.yaml:9-23
────────────────────────────────────────
   9 ┌   replicas: 1
  10 │   selector:
  11 │     matchLabels:
  12 │       app: busybox
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: busybox
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of deployment "busybox" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment busybox in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources_1.yaml:18-23
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────



good-resources_2.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'daemonset' 'good-daemonset' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of DaemonSet 'good-daemonset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources_2.yaml:7-20
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       name: good-daemonset
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         name: good-daemonset
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of daemonset "good-daemonset" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-daemonset in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources_2.yaml:16-20
────────────────────────────────────────
  16 ┌       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset good-daemonset in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources_2.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: busybox:v1.35
  17 │         name: busybox
  18 │         command:
  19 │         - sleep
  20 └         - '3000'
────────────────────────────────────────



good-resources_3.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Job 'good-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Job 'good-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'job' 'good-job' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Job 'good-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Job 'good-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Job 'good-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Job 'good-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Job 'good-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Job 'good-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Job 'good-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Job 'good-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources_3.yaml:7-15
────────────────────────────────────────
   7 ┌   template:
   8 │     spec:
   9 │       containers:
  10 │       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 │         - '3000'
  15 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of job "good-job" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-job in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources_3.yaml:10-14
────────────────────────────────────────
  10 ┌       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job good-job in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources_3.yaml:9-15
────────────────────────────────────────
   9 ┌       containers:
  10 │       - image: busybox:v1.35
  11 │         name: busybox
  12 │         command:
  13 │         - sleep
  14 │         - '3000'
  15 └       restartPolicy: Never
────────────────────────────────────────



good-resources_4.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good-resources_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good-resources_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'statefulset' 'good-statefulset' in 'not-default-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good-resources_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good-resources_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good-resources_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good-resources_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good-resources_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good-resources_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good-resources_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good-resources_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of StatefulSet 'good-statefulset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good-resources_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good-resources_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-resources_4.yaml:7-23
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       app: busybox
  10 │   serviceName: busyservice
  11 │   replicas: 1
  12 │   minReadySeconds: 10
  13 │   template:
  14 │     metadata:
  15 └       labels:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of statefulset "good-statefulset" in "not-default-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good-resources_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good-resources_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-statefulset in not-default-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources_4.yaml:19-23
────────────────────────────────────────
  19 ┌       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset good-statefulset in not-default-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-resources_4.yaml:18-23
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: busybox:v1.35
  20 │         name: busybox
  21 │         command:
  22 │         - sleep
  23 └         - '3000'
────────────────────────────────────────



good-services.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-services.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: http
   8 │     port: 80
   9 │     protocol: TCP
  10 │     targetPort: 8080
  11 └   type: ClusterIP
────────────────────────────────────────



good-services1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-services1.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: MyApp
   8 │   ports:
   9 │     - protocol: TCP
  10 │       port: 80
  11 └       targetPort: 9376
────────────────────────────────────────



good-services2.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-services2.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: http
   8 │     port: 80
   9 │     protocol: TCP
  10 │     targetPort: 8080
  11 └   type: ClusterIP
────────────────────────────────────────



good-services2_1.yaml (kubernetes)
==================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-services2_1.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: MyApp
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 │     targetPort: 9376
  12 └   type: LoadBalancer
────────────────────────────────────────



good-services3.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-services3.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: MyApp
   8 │   ports:
   9 │     - protocol: TCP
  10 │       port: 80
  11 └       targetPort: 9376
────────────────────────────────────────



good-services4.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-services4.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: http
   8 │     port: 80
   9 │     protocol: TCP
  10 │     targetPort: 8080
  11 └   type: ClusterIP
────────────────────────────────────────



good-services4_1.yaml (kubernetes)
==================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-services4_1.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: MyApp
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 │     targetPort: 9376
  12 └   type: LoadBalancer
────────────────────────────────────────



good-services5.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-services5.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: MyApp
   8 │   ports:
   9 │     - protocol: TCP
  10 │       port: 80
  11 └       targetPort: 9376
────────────────────────────────────────



good-services6.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-services6.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: http
   8 │     port: 80
   9 │     protocol: TCP
  10 │     targetPort: 8080
  11 └   type: ClusterIP
────────────────────────────────────────



good-services6_1.yaml (kubernetes)
==================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-services6_1.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: MyApp
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 │     targetPort: 9376
  12 └   type: LoadBalancer
────────────────────────────────────────



good-services7.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-services7.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: MyApp
   8 │   ports:
   9 │     - protocol: TCP
  10 │       port: 80
  11 └       targetPort: 9376
────────────────────────────────────────



good-services8.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-services8.yaml:6-11
────────────────────────────────────────
   6 ┌   ports:
   7 │   - name: http
   8 │     port: 80
   9 │     protocol: TCP
  10 │     targetPort: 8080
  11 └   type: ClusterIP
────────────────────────────────────────



good-services8_1.yaml (kubernetes)
==================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-services8_1.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: MyApp
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 │     targetPort: 9376
  12 └   type: LoadBalancer
────────────────────────────────────────



good-services9.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-services9.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: MyApp
   8 │   ports:
   9 │     - protocol: TCP
  10 │       port: 80
  11 └       targetPort: 9376
────────────────────────────────────────



good-services_1.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-services_1.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: MyApp
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 80
  11 │     targetPort: 9376
  12 └   type: LoadBalancer
────────────────────────────────────────



good-svc.yaml (kubernetes)
==========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-svc.yaml:8-14
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 80
  10 │     protocol: TCP
  11 │     targetPort: 80
  12 │   selector:
  13 │     app: bbserver
  14 └   type: ClusterIP
────────────────────────────────────────



good-svc1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-svc1.yaml:8-14
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 80
  10 │     protocol: TCP
  11 │     targetPort: 80
  12 │   selector:
  13 │     app: bbserver
  14 └   type: ClusterIP
────────────────────────────────────────



good-svc2.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-svc2.yaml:8-14
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 80
  10 │     protocol: TCP
  11 │     targetPort: 80
  12 │   selector:
  13 │     app: bbserver
  14 └   type: ClusterIP
────────────────────────────────────────



good-svc3.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-svc3.yaml:8-14
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 80
  10 │     protocol: TCP
  11 │     targetPort: 80
  12 │   selector:
  13 │     app: bbserver
  14 └   type: ClusterIP
────────────────────────────────────────



good-svc4.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good-svc4.yaml:8-14
────────────────────────────────────────
   8 ┌   ports:
   9 │   - port: 80
  10 │     protocol: TCP
  11 │     targetPort: 80
  12 │   selector:
  13 │     app: bbserver
  14 └   type: ClusterIP
────────────────────────────────────────



good-update.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): pod pod01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: pod01
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod01 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-update.yaml:1-6
────────────────────────────────────────
   1 ┌ apiVersion: v1
   2 │ kind: Pod
   3 │ metadata:
   4 │   labels:
   5 │     breakglass: yup
   6 └   name: pod01
────────────────────────────────────────



good-update1.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): pod pod01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: pod01
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod01 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-update1.yaml:1-6
────────────────────────────────────────
   1 ┌ apiVersion: v1
   2 │ kind: Pod
   3 │ metadata:
   4 │   labels:
   5 │     breakglass: yup
   6 └   name: pod01
────────────────────────────────────────



good-update1_1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): pod pod02 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update1_1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: dont
   6 └   name: pod02
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod02 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-update1_1.yaml:1-6
────────────────────────────────────────
   1 ┌ apiVersion: v1
   2 │ kind: Pod
   3 │ metadata:
   4 │   labels:
   5 │     breakglass: dont
   6 └   name: pod02
────────────────────────────────────────



good-update1_2.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): pod pod03 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update1_2.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: dont
   6 └   name: pod03
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod03 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-update1_2.yaml:1-6
────────────────────────────────────────
   1 ┌ apiVersion: v1
   2 │ kind: Pod
   3 │ metadata:
   4 │   labels:
   5 │     breakglass: dont
   6 └   name: pod03
────────────────────────────────────────



good-update1_3.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): deployment deployment01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update1_3.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: null
   6 └   name: deployment01
────────────────────────────────────────



good-update1_4.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): statefulset ss01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update1_4.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: ss01
────────────────────────────────────────



good-update1_5.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): daemonset ds01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update1_5.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: ds01
────────────────────────────────────────



good-update1_6.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): job job01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update1_6.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: job01
────────────────────────────────────────



good-update1_7.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): cronjob cronjob01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update1_7.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: cronjob01
────────────────────────────────────────



good-update2.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): pod pod01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update2.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: pod01
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod01 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-update2.yaml:1-6
────────────────────────────────────────
   1 ┌ apiVersion: v1
   2 │ kind: Pod
   3 │ metadata:
   4 │   labels:
   5 │     breakglass: yup
   6 └   name: pod01
────────────────────────────────────────



good-update2_1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): pod pod02 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update2_1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: dont
   6 └   name: pod02
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod02 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-update2_1.yaml:1-6
────────────────────────────────────────
   1 ┌ apiVersion: v1
   2 │ kind: Pod
   3 │ metadata:
   4 │   labels:
   5 │     breakglass: dont
   6 └   name: pod02
────────────────────────────────────────



good-update2_2.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): pod pod03 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update2_2.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: dont
   6 └   name: pod03
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod03 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-update2_2.yaml:1-6
────────────────────────────────────────
   1 ┌ apiVersion: v1
   2 │ kind: Pod
   3 │ metadata:
   4 │   labels:
   5 │     breakglass: dont
   6 └   name: pod03
────────────────────────────────────────



good-update2_3.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): deployment deployment01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update2_3.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: null
   6 └   name: deployment01
────────────────────────────────────────



good-update2_4.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): statefulset ss01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update2_4.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: ss01
────────────────────────────────────────



good-update2_5.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): daemonset ds01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update2_5.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: ds01
────────────────────────────────────────



good-update2_6.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): job job01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update2_6.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: job01
────────────────────────────────────────



good-update2_7.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): cronjob cronjob01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update2_7.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: cronjob01
────────────────────────────────────────



good-update3.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): pod pod01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update3.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: pod01
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod01 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-update3.yaml:1-6
────────────────────────────────────────
   1 ┌ apiVersion: v1
   2 │ kind: Pod
   3 │ metadata:
   4 │   labels:
   5 │     breakglass: yup
   6 └   name: pod01
────────────────────────────────────────



good-update3_1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): pod pod02 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update3_1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: dont
   6 └   name: pod02
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod02 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-update3_1.yaml:1-6
────────────────────────────────────────
   1 ┌ apiVersion: v1
   2 │ kind: Pod
   3 │ metadata:
   4 │   labels:
   5 │     breakglass: dont
   6 └   name: pod02
────────────────────────────────────────



good-update3_2.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): pod pod03 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update3_2.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: dont
   6 └   name: pod03
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod03 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-update3_2.yaml:1-6
────────────────────────────────────────
   1 ┌ apiVersion: v1
   2 │ kind: Pod
   3 │ metadata:
   4 │   labels:
   5 │     breakglass: dont
   6 └   name: pod03
────────────────────────────────────────



good-update3_3.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): deployment deployment01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update3_3.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: null
   6 └   name: deployment01
────────────────────────────────────────



good-update3_4.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): statefulset ss01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update3_4.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: ss01
────────────────────────────────────────



good-update3_5.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): daemonset ds01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update3_5.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: ds01
────────────────────────────────────────



good-update3_6.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): job job01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update3_6.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: job01
────────────────────────────────────────



good-update3_7.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): cronjob cronjob01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update3_7.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: cronjob01
────────────────────────────────────────



good-update4.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): pod pod01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update4.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: pod01
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod01 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-update4.yaml:1-6
────────────────────────────────────────
   1 ┌ apiVersion: v1
   2 │ kind: Pod
   3 │ metadata:
   4 │   labels:
   5 │     breakglass: yup
   6 └   name: pod01
────────────────────────────────────────



good-update4_1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): pod pod02 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update4_1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: dont
   6 └   name: pod02
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod02 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-update4_1.yaml:1-6
────────────────────────────────────────
   1 ┌ apiVersion: v1
   2 │ kind: Pod
   3 │ metadata:
   4 │   labels:
   5 │     breakglass: dont
   6 └   name: pod02
────────────────────────────────────────



good-update4_2.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): pod pod03 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update4_2.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: dont
   6 └   name: pod03
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod03 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-update4_2.yaml:1-6
────────────────────────────────────────
   1 ┌ apiVersion: v1
   2 │ kind: Pod
   3 │ metadata:
   4 │   labels:
   5 │     breakglass: dont
   6 └   name: pod03
────────────────────────────────────────



good-update4_3.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): deployment deployment01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update4_3.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: null
   6 └   name: deployment01
────────────────────────────────────────



good-update4_4.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): statefulset ss01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update4_4.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: ss01
────────────────────────────────────────



good-update4_5.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): daemonset ds01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update4_5.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: ds01
────────────────────────────────────────



good-update4_6.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): job job01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update4_6.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: job01
────────────────────────────────────────



good-update4_7.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): cronjob cronjob01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update4_7.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: cronjob01
────────────────────────────────────────



good-update_1.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): pod pod02 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update_1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: dont
   6 └   name: pod02
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod02 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-update_1.yaml:1-6
────────────────────────────────────────
   1 ┌ apiVersion: v1
   2 │ kind: Pod
   3 │ metadata:
   4 │   labels:
   5 │     breakglass: dont
   6 └   name: pod02
────────────────────────────────────────



good-update_2.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 111, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): pod pod03 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update_2.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: dont
   6 └   name: pod03
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod03 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good-update_2.yaml:1-6
────────────────────────────────────────
   1 ┌ apiVersion: v1
   2 │ kind: Pod
   3 │ metadata:
   4 │   labels:
   5 │     breakglass: dont
   6 └   name: pod03
────────────────────────────────────────



good-update_3.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): deployment deployment01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update_3.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: null
   6 └   name: deployment01
────────────────────────────────────────



good-update_4.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): statefulset ss01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update_4.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: ss01
────────────────────────────────────────



good-update_5.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): daemonset ds01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update_5.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: ds01
────────────────────────────────────────



good-update_6.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): job job01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update_6.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: job01
────────────────────────────────────────



good-update_7.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): cronjob cronjob01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good-update_7.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     breakglass: yup
   6 └   name: cronjob01
────────────────────────────────────────



good01.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good01.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gpu-example' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good01.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gpu-example' of 'pod' 'goodpod01' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good01.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good01.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good01.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good01.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good01.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good01.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good01.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good01.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good01.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good01.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good01.yaml:6-12
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gpu-example" of pod "goodpod01" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good01.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good01.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good01.yaml:4
────────────────────────────────────────
   4 [   name: goodpod01
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good01.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good01.yaml:6-12
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container gpu-example in pod goodpod01 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good01.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────



good011.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good011.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gpu-example' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good011.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gpu-example' of 'pod' 'goodpod01' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good011.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good011.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good011.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good011.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good011.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good011.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good011.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good011.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good011.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good011.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good011.yaml:6-12
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gpu-example" of pod "goodpod01" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good011.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good011.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good011.yaml:4
────────────────────────────────────────
   4 [   name: goodpod01
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good011.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good011.yaml:6-12
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container gpu-example in pod goodpod01 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good011.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────



good012.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good012.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gpu-example' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good012.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gpu-example' of 'pod' 'goodpod01' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good012.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good012.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good012.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good012.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good012.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good012.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good012.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good012.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good012.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good012.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good012.yaml:6-12
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gpu-example" of pod "goodpod01" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good012.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good012.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good012.yaml:4
────────────────────────────────────────
   4 [   name: goodpod01
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good012.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good012.yaml:6-12
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container gpu-example in pod goodpod01 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good012.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────



good013.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good013.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gpu-example' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good013.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gpu-example' of 'pod' 'goodpod01' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good013.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good013.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good013.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good013.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good013.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good013.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good013.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good013.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good013.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good013.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good013.yaml:6-12
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gpu-example" of pod "goodpod01" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good013.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good013.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good013.yaml:4
────────────────────────────────────────
   4 [   name: goodpod01
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good013.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good013.yaml:6-12
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container gpu-example in pod goodpod01 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good013.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────



good014.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good014.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gpu-example' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good014.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gpu-example' of 'pod' 'goodpod01' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good014.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good014.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good014.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good014.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good014.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good014.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good014.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good014.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gpu-example' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good014.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good014.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good014.yaml:6-12
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gpu-example" of pod "goodpod01" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good014.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good014.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good014.yaml:4
────────────────────────────────────────
   4 [   name: goodpod01
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good014.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good014.yaml:6-12
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container gpu-example in pod goodpod01 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good014.yaml:7-12
────────────────────────────────────────
   7 ┌     - name: gpu-example
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 │       command: ["nvidia-smi"]
  10 │       resources:
  11 │         limits:
  12 └           nvidia.com/gpu: 1
────────────────────────────────────────



good02.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good02.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'goodpod02' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good02.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'goodpod02' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good02.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good02.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good02.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good02.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good02.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good02.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good02.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good02.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good02.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good02.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good02.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "goodpod02" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good02.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good02.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod02 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good02.yaml:4
────────────────────────────────────────
   4 [   name: goodpod02
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod02 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good02.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod02 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good02.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────



good021.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good021.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'goodpod02' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good021.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'goodpod02' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good021.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good021.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good021.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good021.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good021.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good021.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good021.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good021.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good021.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good021.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good021.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "goodpod02" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good021.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good021.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod02 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good021.yaml:4
────────────────────────────────────────
   4 [   name: goodpod02
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod02 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good021.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod02 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good021.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────



good022.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good022.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'goodpod02' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good022.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'goodpod02' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good022.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good022.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good022.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good022.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good022.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good022.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good022.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good022.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good022.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good022.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good022.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "goodpod02" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good022.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good022.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod02 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good022.yaml:4
────────────────────────────────────────
   4 [   name: goodpod02
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod02 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good022.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod02 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good022.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────



good023.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good023.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'goodpod02' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good023.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'goodpod02' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good023.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good023.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good023.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good023.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good023.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good023.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good023.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good023.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good023.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good023.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good023.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "goodpod02" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good023.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good023.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod02 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good023.yaml:4
────────────────────────────────────────
   4 [   name: goodpod02
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod02 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good023.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod02 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good023.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────



good024.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good024.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'goodpod02' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good024.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'goodpod02' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good024.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good024.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good024.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good024.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good024.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good024.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good024.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good024.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'goodpod02' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good024.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good024.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good024.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "goodpod02" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good024.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good024.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod02 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good024.yaml:4
────────────────────────────────────────
   4 [   name: goodpod02
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod02 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good024.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod02 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good024.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: busybox
   8 │       image: busybox:1.28
   9 └       command: ["sleep","9999"]
────────────────────────────────────────



good03.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good03.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good03.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gpu-example-nolimits' of 'pod' 'goodpod03' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good03.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good03.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good03.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good03.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good03.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good03.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good03.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good03.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good03.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good03.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good03.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gpu-example-nolimits" of pod "goodpod03" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good03.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good03.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod03 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good03.yaml:4
────────────────────────────────────────
   4 [   name: goodpod03
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod03 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good03.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod03 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good03.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container gpu-example-nolimits in pod goodpod03 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good03.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────



good031.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good031.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good031.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gpu-example-nolimits' of 'pod' 'goodpod03' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good031.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good031.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good031.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good031.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good031.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good031.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good031.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good031.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good031.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good031.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good031.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gpu-example-nolimits" of pod "goodpod03" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good031.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good031.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod03 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good031.yaml:4
────────────────────────────────────────
   4 [   name: goodpod03
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod03 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good031.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod03 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good031.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container gpu-example-nolimits in pod goodpod03 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good031.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────



good032.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good032.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good032.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gpu-example-nolimits' of 'pod' 'goodpod03' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good032.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good032.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good032.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good032.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good032.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good032.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good032.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good032.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good032.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good032.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good032.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gpu-example-nolimits" of pod "goodpod03" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good032.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good032.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod03 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good032.yaml:4
────────────────────────────────────────
   4 [   name: goodpod03
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod03 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good032.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod03 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good032.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container gpu-example-nolimits in pod goodpod03 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good032.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────



good033.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good033.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good033.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gpu-example-nolimits' of 'pod' 'goodpod03' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good033.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good033.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good033.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good033.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good033.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good033.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good033.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good033.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good033.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good033.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good033.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gpu-example-nolimits" of pod "goodpod03" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good033.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good033.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod03 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good033.yaml:4
────────────────────────────────────────
   4 [   name: goodpod03
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod03 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good033.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod03 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good033.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container gpu-example-nolimits in pod goodpod03 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good033.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────



good034.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good034.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good034.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gpu-example-nolimits' of 'pod' 'goodpod03' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good034.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good034.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good034.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good034.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good034.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good034.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good034.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good034.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gpu-example-nolimits' of Pod 'goodpod03' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good034.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good034.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good034.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gpu-example-nolimits" of pod "goodpod03" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good034.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good034.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod03 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good034.yaml:4
────────────────────────────────────────
   4 [   name: goodpod03
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod03 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good034.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod03 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good034.yaml:6-9
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container gpu-example-nolimits in pod goodpod03 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good034.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: gpu-example-nolimits
   8 │       image: nvidia/cuda:12.2.0-devel-ubi8
   9 └       command: ["nvidia-smi"]
────────────────────────────────────────



good10.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good10.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good10.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'busybox' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good10.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good10.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good10.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good10.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good10.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good10.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good10.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good10.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good10.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good10.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good10.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "busybox" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good10.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good10.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod busybox in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good10.yaml:4
────────────────────────────────────────
   4 [   name: busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good10.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod busybox in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good10.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────



good11.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'small-image' of Pod 'small-image' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good11.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'small-image' of Pod 'small-image' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good11.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'small-image' of 'pod' 'small-image' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good11.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'small-image' of Pod 'small-image' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good11.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'small-image' of Pod 'small-image' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good11.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'small-image' of Pod 'small-image' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good11.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'small-image' of Pod 'small-image' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good11.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'small-image' of Pod 'small-image' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good11.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'small-image' of Pod 'small-image' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good11.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'small-image' of Pod 'small-image' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good11.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'small-image' of Pod 'small-image' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good11.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good11.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good11.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "small-image" of pod "small-image" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good11.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good11.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod small-image in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good11.yaml:4
────────────────────────────────────────
   4 [   name: small-image
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container small-image in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good11.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod small-image in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good11.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────



good12.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Pod 'redis' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good12.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Pod 'redis' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good12.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'pod' 'redis' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good12.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'redis' of Pod 'redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good12.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Pod 'redis' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good12.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'redis' of Pod 'redis' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good12.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Pod 'redis' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good12.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Pod 'redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good12.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Pod 'redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good12.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Pod 'redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good12.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Pod 'redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good12.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Pod 'redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good12.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good12.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good12.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of pod "redis" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good12.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good12.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good12.yaml:4
────────────────────────────────────────
   4 [   name: redis
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good12.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod redis in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good12.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container redis in pod redis (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good12.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────



good13.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good13.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good13.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kyverno' of 'pod' 'pod-with-trusted-registry' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good13.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good13.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good13.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kyverno' of Pod 'pod-with-trusted-registry' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good13.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good13.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good13.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good13.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good13.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good13.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good13.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good13.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good13.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kyverno" of pod "pod-with-trusted-registry" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good13.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good13.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pod-with-trusted-registry in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good13.yaml:5
────────────────────────────────────────
   5 [   name: pod-with-trusted-registry
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-with-trusted-registry in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good13.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod-with-trusted-registry in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good13.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kyverno in pod pod-with-trusted-registry (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good13.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────



good14.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good14.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good14.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test' of 'pod' 'goodpod01' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good14.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good14.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good14.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test' of Pod 'goodpod01' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good14.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good14.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good14.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good14.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good14.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good14.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good14.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good14.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good14.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test" of pod "goodpod01" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good14.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good14.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good14.yaml:4
────────────────────────────────────────
   4 [   name: goodpod01
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good14.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good14.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container test in pod goodpod01 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good14.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────



good15.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container01' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good15.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container01' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good15.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container01' of 'pod' 'goodpod01' in 'restrict-runtimeclassname' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good15.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container01' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good15.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container01' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good15.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container01' of Pod 'goodpod01' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good15.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container01' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good15.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container01' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good15.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container01' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good15.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container01' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good15.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container01' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good15.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container01' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good15.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good15.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good15.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container01" of pod "goodpod01" in "restrict-runtimeclassname" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good15.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good15.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in restrict-runtimeclassname namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good15.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in restrict-runtimeclassname namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good15.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────



good15_1.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container01' of Pod 'goodpod02' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good15_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container01' of Pod 'goodpod02' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good15_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container01' of 'pod' 'goodpod02' in 'restrict-runtimeclassname' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good15_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container01' of Pod 'goodpod02' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good15_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container01' of Pod 'goodpod02' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good15_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container01' of Pod 'goodpod02' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good15_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container01' of Pod 'goodpod02' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good15_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container01' of Pod 'goodpod02' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good15_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container01' of Pod 'goodpod02' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good15_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container01' of Pod 'goodpod02' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good15_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container01' of Pod 'goodpod02' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good15_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container01' of Pod 'goodpod02' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good15_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good15_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good15_1.yaml:7-10
────────────────────────────────────────
   7 ┌   runtimeClassName: expclass
   8 │   containers:
   9 │   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container01" of pod "goodpod02" in "restrict-runtimeclassname" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good15_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good15_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod02 in restrict-runtimeclassname namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good15_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod02 in restrict-runtimeclassname namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good15_1.yaml:7-10
────────────────────────────────────────
   7 ┌   runtimeClassName: expclass
   8 │   containers:
   9 │   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────



good15_2.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container01' of Pod 'goodpod03' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good15_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container01' of Pod 'goodpod03' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good15_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container01' of 'pod' 'goodpod03' in 'restrict-runtimeclassname' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good15_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container01' of Pod 'goodpod03' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good15_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container01' of Pod 'goodpod03' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good15_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container01' of Pod 'goodpod03' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good15_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container01' of Pod 'goodpod03' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good15_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container01' of Pod 'goodpod03' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good15_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container01' of Pod 'goodpod03' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good15_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container01' of Pod 'goodpod03' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good15_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container01' of Pod 'goodpod03' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good15_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container01' of Pod 'goodpod03' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good15_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good15_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good15_2.yaml:7-10
────────────────────────────────────────
   7 ┌   runtimeClassName: prodclass
   8 │   containers:
   9 │   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container01" of pod "goodpod03" in "restrict-runtimeclassname" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good15_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good15_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod03 in restrict-runtimeclassname namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good15_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod03 in restrict-runtimeclassname namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good15_2.yaml:7-10
────────────────────────────────────────
   7 ┌   runtimeClassName: prodclass
   8 │   containers:
   9 │   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────



good17.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good17.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good17.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'busybox' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good17.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good17.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good17.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good17.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good17.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good17.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good17.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good17.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good17.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good17.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good17.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "busybox" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good17.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good17.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod busybox in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good17.yaml:4
────────────────────────────────────────
   4 [   name: busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good17.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod busybox in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good17.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────



good18.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'small-image' of Pod 'small-image' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good18.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'small-image' of Pod 'small-image' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good18.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'small-image' of 'pod' 'small-image' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good18.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'small-image' of Pod 'small-image' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good18.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'small-image' of Pod 'small-image' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good18.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'small-image' of Pod 'small-image' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good18.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'small-image' of Pod 'small-image' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good18.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'small-image' of Pod 'small-image' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good18.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'small-image' of Pod 'small-image' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good18.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'small-image' of Pod 'small-image' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good18.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'small-image' of Pod 'small-image' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good18.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good18.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good18.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "small-image" of pod "small-image" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good18.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good18.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod small-image in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good18.yaml:4
────────────────────────────────────────
   4 [   name: small-image
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container small-image in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good18.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod small-image in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good18.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────



good19.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Pod 'redis' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good19.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Pod 'redis' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good19.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'pod' 'redis' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good19.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'redis' of Pod 'redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good19.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Pod 'redis' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good19.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'redis' of Pod 'redis' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good19.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Pod 'redis' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good19.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Pod 'redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good19.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Pod 'redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good19.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Pod 'redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good19.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Pod 'redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good19.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Pod 'redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good19.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good19.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good19.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of pod "redis" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good19.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good19.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good19.yaml:4
────────────────────────────────────────
   4 [   name: redis
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good19.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod redis in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good19.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container redis in pod redis (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good19.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────



good20.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good20.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good20.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kyverno' of 'pod' 'pod-with-trusted-registry' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good20.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good20.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good20.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kyverno' of Pod 'pod-with-trusted-registry' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good20.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good20.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good20.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good20.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good20.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good20.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good20.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good20.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good20.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kyverno" of pod "pod-with-trusted-registry" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good20.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good20.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pod-with-trusted-registry in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good20.yaml:5
────────────────────────────────────────
   5 [   name: pod-with-trusted-registry
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-with-trusted-registry in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good20.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod-with-trusted-registry in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good20.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kyverno in pod pod-with-trusted-registry (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good20.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────



good21.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good21.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good21.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test' of 'pod' 'goodpod01' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good21.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good21.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good21.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test' of Pod 'goodpod01' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good21.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good21.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good21.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good21.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good21.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good21.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good21.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good21.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good21.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test" of pod "goodpod01" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good21.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good21.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good21.yaml:4
────────────────────────────────────────
   4 [   name: goodpod01
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good21.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good21.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container test in pod goodpod01 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good21.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────



good22.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container01' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good22.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container01' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good22.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container01' of 'pod' 'goodpod01' in 'restrict-runtimeclassname' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good22.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container01' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good22.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container01' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good22.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container01' of Pod 'goodpod01' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good22.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container01' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good22.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container01' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good22.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container01' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good22.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container01' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good22.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container01' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good22.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container01' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good22.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good22.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good22.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container01" of pod "goodpod01" in "restrict-runtimeclassname" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good22.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good22.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in restrict-runtimeclassname namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good22.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in restrict-runtimeclassname namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good22.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────



good22_1.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container01' of Pod 'goodpod02' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good22_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container01' of Pod 'goodpod02' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good22_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container01' of 'pod' 'goodpod02' in 'restrict-runtimeclassname' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good22_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container01' of Pod 'goodpod02' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good22_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container01' of Pod 'goodpod02' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good22_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container01' of Pod 'goodpod02' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good22_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container01' of Pod 'goodpod02' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good22_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container01' of Pod 'goodpod02' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good22_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container01' of Pod 'goodpod02' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good22_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container01' of Pod 'goodpod02' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good22_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container01' of Pod 'goodpod02' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good22_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container01' of Pod 'goodpod02' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good22_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good22_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good22_1.yaml:7-10
────────────────────────────────────────
   7 ┌   runtimeClassName: expclass
   8 │   containers:
   9 │   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container01" of pod "goodpod02" in "restrict-runtimeclassname" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good22_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good22_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod02 in restrict-runtimeclassname namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good22_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod02 in restrict-runtimeclassname namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good22_1.yaml:7-10
────────────────────────────────────────
   7 ┌   runtimeClassName: expclass
   8 │   containers:
   9 │   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────



good22_2.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container01' of Pod 'goodpod03' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good22_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container01' of Pod 'goodpod03' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good22_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container01' of 'pod' 'goodpod03' in 'restrict-runtimeclassname' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good22_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container01' of Pod 'goodpod03' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good22_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container01' of Pod 'goodpod03' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good22_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container01' of Pod 'goodpod03' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good22_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container01' of Pod 'goodpod03' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good22_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container01' of Pod 'goodpod03' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good22_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container01' of Pod 'goodpod03' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good22_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container01' of Pod 'goodpod03' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good22_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container01' of Pod 'goodpod03' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good22_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container01' of Pod 'goodpod03' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good22_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good22_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good22_2.yaml:7-10
────────────────────────────────────────
   7 ┌   runtimeClassName: prodclass
   8 │   containers:
   9 │   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container01" of pod "goodpod03" in "restrict-runtimeclassname" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good22_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good22_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod03 in restrict-runtimeclassname namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good22_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod03 in restrict-runtimeclassname namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good22_2.yaml:7-10
────────────────────────────────────────
   7 ┌   runtimeClassName: prodclass
   8 │   containers:
   9 │   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────



good24.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good24.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good24.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'busybox' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good24.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good24.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good24.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good24.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good24.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good24.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good24.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good24.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good24.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good24.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good24.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "busybox" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good24.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good24.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod busybox in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good24.yaml:4
────────────────────────────────────────
   4 [   name: busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good24.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod busybox in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good24.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────



good25.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'small-image' of Pod 'small-image' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good25.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'small-image' of Pod 'small-image' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good25.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'small-image' of 'pod' 'small-image' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good25.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'small-image' of Pod 'small-image' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good25.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'small-image' of Pod 'small-image' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good25.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'small-image' of Pod 'small-image' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good25.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'small-image' of Pod 'small-image' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good25.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'small-image' of Pod 'small-image' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good25.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'small-image' of Pod 'small-image' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good25.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'small-image' of Pod 'small-image' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good25.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'small-image' of Pod 'small-image' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good25.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good25.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good25.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "small-image" of pod "small-image" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good25.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good25.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod small-image in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good25.yaml:4
────────────────────────────────────────
   4 [   name: small-image
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container small-image in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good25.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod small-image in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good25.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────



good26.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Pod 'redis' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good26.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Pod 'redis' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good26.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'pod' 'redis' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good26.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'redis' of Pod 'redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good26.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Pod 'redis' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good26.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'redis' of Pod 'redis' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good26.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Pod 'redis' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good26.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Pod 'redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good26.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Pod 'redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good26.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Pod 'redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good26.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Pod 'redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good26.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Pod 'redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good26.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good26.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good26.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of pod "redis" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good26.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good26.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good26.yaml:4
────────────────────────────────────────
   4 [   name: redis
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good26.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod redis in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good26.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container redis in pod redis (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good26.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────



good27.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good27.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good27.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kyverno' of 'pod' 'pod-with-trusted-registry' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good27.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good27.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good27.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kyverno' of Pod 'pod-with-trusted-registry' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good27.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good27.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good27.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good27.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good27.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good27.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good27.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good27.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good27.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kyverno" of pod "pod-with-trusted-registry" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good27.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good27.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pod-with-trusted-registry in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good27.yaml:5
────────────────────────────────────────
   5 [   name: pod-with-trusted-registry
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-with-trusted-registry in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good27.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod-with-trusted-registry in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good27.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kyverno in pod pod-with-trusted-registry (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good27.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────



good28.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good28.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good28.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test' of 'pod' 'goodpod01' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good28.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good28.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good28.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test' of Pod 'goodpod01' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good28.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good28.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good28.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good28.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good28.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good28.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good28.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good28.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good28.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test" of pod "goodpod01" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good28.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good28.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good28.yaml:4
────────────────────────────────────────
   4 [   name: goodpod01
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good28.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good28.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container test in pod goodpod01 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good28.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────



good29.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container01' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good29.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container01' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good29.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container01' of 'pod' 'goodpod01' in 'restrict-runtimeclassname' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good29.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container01' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good29.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container01' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good29.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container01' of Pod 'goodpod01' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good29.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container01' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good29.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container01' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good29.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container01' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good29.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container01' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good29.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container01' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good29.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container01' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good29.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good29.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good29.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container01" of pod "goodpod01" in "restrict-runtimeclassname" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good29.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good29.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in restrict-runtimeclassname namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good29.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in restrict-runtimeclassname namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good29.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────



good29_1.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container01' of Pod 'goodpod02' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good29_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container01' of Pod 'goodpod02' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good29_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container01' of 'pod' 'goodpod02' in 'restrict-runtimeclassname' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good29_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container01' of Pod 'goodpod02' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good29_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container01' of Pod 'goodpod02' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good29_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container01' of Pod 'goodpod02' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good29_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container01' of Pod 'goodpod02' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good29_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container01' of Pod 'goodpod02' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good29_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container01' of Pod 'goodpod02' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good29_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container01' of Pod 'goodpod02' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good29_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container01' of Pod 'goodpod02' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good29_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container01' of Pod 'goodpod02' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good29_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good29_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good29_1.yaml:7-10
────────────────────────────────────────
   7 ┌   runtimeClassName: expclass
   8 │   containers:
   9 │   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container01" of pod "goodpod02" in "restrict-runtimeclassname" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good29_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good29_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod02 in restrict-runtimeclassname namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good29_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod02 in restrict-runtimeclassname namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good29_1.yaml:7-10
────────────────────────────────────────
   7 ┌   runtimeClassName: expclass
   8 │   containers:
   9 │   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────



good29_2.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container01' of Pod 'goodpod03' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good29_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container01' of Pod 'goodpod03' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good29_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container01' of 'pod' 'goodpod03' in 'restrict-runtimeclassname' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good29_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container01' of Pod 'goodpod03' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good29_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container01' of Pod 'goodpod03' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good29_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container01' of Pod 'goodpod03' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good29_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container01' of Pod 'goodpod03' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good29_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container01' of Pod 'goodpod03' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good29_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container01' of Pod 'goodpod03' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good29_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container01' of Pod 'goodpod03' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good29_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container01' of Pod 'goodpod03' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good29_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container01' of Pod 'goodpod03' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good29_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good29_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good29_2.yaml:7-10
────────────────────────────────────────
   7 ┌   runtimeClassName: prodclass
   8 │   containers:
   9 │   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container01" of pod "goodpod03" in "restrict-runtimeclassname" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good29_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good29_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod03 in restrict-runtimeclassname namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good29_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod03 in restrict-runtimeclassname namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good29_2.yaml:7-10
────────────────────────────────────────
   7 ┌   runtimeClassName: prodclass
   8 │   containers:
   9 │   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────



good3.yaml (kubernetes)
=======================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'busybox' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good3.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "busybox" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod busybox in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good3.yaml:4
────────────────────────────────────────
   4 [   name: busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod busybox in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good3.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────



good31.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good31.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'busybox' of Pod 'busybox' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good31.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'busybox' of 'pod' 'busybox' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good31.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good31.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good31.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'busybox' of Pod 'busybox' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good31.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good31.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good31.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'busybox' of Pod 'busybox' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good31.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good31.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'busybox' of Pod 'busybox' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good31.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good31.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good31.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "busybox" of pod "busybox" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good31.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good31.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod busybox in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good31.yaml:4
────────────────────────────────────────
   4 [   name: busybox
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container busybox in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good31.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod busybox in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good31.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: busybox
   8 └     image: busybox:1.28
────────────────────────────────────────



good32.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'small-image' of Pod 'small-image' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good32.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'small-image' of Pod 'small-image' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good32.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'small-image' of 'pod' 'small-image' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good32.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'small-image' of Pod 'small-image' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good32.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'small-image' of Pod 'small-image' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good32.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'small-image' of Pod 'small-image' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good32.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'small-image' of Pod 'small-image' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good32.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'small-image' of Pod 'small-image' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good32.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'small-image' of Pod 'small-image' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good32.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'small-image' of Pod 'small-image' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good32.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'small-image' of Pod 'small-image' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good32.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good32.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good32.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "small-image" of pod "small-image" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good32.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good32.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod small-image in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good32.yaml:4
────────────────────────────────────────
   4 [   name: small-image
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container small-image in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good32.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod small-image in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good32.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────



good33.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Pod 'redis' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good33.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Pod 'redis' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good33.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'pod' 'redis' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good33.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'redis' of Pod 'redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good33.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Pod 'redis' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good33.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'redis' of Pod 'redis' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good33.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Pod 'redis' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good33.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Pod 'redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good33.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Pod 'redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good33.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Pod 'redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good33.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Pod 'redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good33.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Pod 'redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good33.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good33.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good33.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of pod "redis" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good33.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good33.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good33.yaml:4
────────────────────────────────────────
   4 [   name: redis
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good33.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod redis in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good33.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container redis in pod redis (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good33.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────



good34.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good34.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good34.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kyverno' of 'pod' 'pod-with-trusted-registry' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good34.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good34.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good34.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kyverno' of Pod 'pod-with-trusted-registry' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good34.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good34.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good34.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good34.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good34.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good34.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good34.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good34.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good34.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kyverno" of pod "pod-with-trusted-registry" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good34.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good34.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pod-with-trusted-registry in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good34.yaml:5
────────────────────────────────────────
   5 [   name: pod-with-trusted-registry
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-with-trusted-registry in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good34.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod-with-trusted-registry in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good34.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kyverno in pod pod-with-trusted-registry (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good34.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────



good35.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good35.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good35.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test' of 'pod' 'goodpod01' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good35.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good35.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good35.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test' of Pod 'goodpod01' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good35.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good35.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good35.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good35.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good35.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good35.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good35.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good35.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good35.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test" of pod "goodpod01" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good35.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good35.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good35.yaml:4
────────────────────────────────────────
   4 [   name: goodpod01
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good35.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good35.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container test in pod goodpod01 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good35.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────



good36.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container01' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good36.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container01' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good36.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container01' of 'pod' 'goodpod01' in 'restrict-runtimeclassname' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good36.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container01' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good36.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container01' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good36.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container01' of Pod 'goodpod01' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good36.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container01' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good36.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container01' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good36.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container01' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good36.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container01' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good36.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container01' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good36.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container01' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good36.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good36.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good36.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container01" of pod "goodpod01" in "restrict-runtimeclassname" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good36.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good36.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in restrict-runtimeclassname namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good36.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in restrict-runtimeclassname namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good36.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────



good36_1.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container01' of Pod 'goodpod02' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good36_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container01' of Pod 'goodpod02' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good36_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container01' of 'pod' 'goodpod02' in 'restrict-runtimeclassname' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good36_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container01' of Pod 'goodpod02' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good36_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container01' of Pod 'goodpod02' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good36_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container01' of Pod 'goodpod02' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good36_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container01' of Pod 'goodpod02' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good36_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container01' of Pod 'goodpod02' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good36_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container01' of Pod 'goodpod02' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good36_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container01' of Pod 'goodpod02' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good36_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container01' of Pod 'goodpod02' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good36_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container01' of Pod 'goodpod02' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good36_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good36_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good36_1.yaml:7-10
────────────────────────────────────────
   7 ┌   runtimeClassName: expclass
   8 │   containers:
   9 │   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container01" of pod "goodpod02" in "restrict-runtimeclassname" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good36_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good36_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod02 in restrict-runtimeclassname namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good36_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod02 in restrict-runtimeclassname namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good36_1.yaml:7-10
────────────────────────────────────────
   7 ┌   runtimeClassName: expclass
   8 │   containers:
   9 │   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────



good36_2.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container01' of Pod 'goodpod03' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good36_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container01' of Pod 'goodpod03' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good36_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container01' of 'pod' 'goodpod03' in 'restrict-runtimeclassname' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good36_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container01' of Pod 'goodpod03' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good36_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container01' of Pod 'goodpod03' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good36_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container01' of Pod 'goodpod03' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good36_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container01' of Pod 'goodpod03' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good36_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container01' of Pod 'goodpod03' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good36_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container01' of Pod 'goodpod03' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good36_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container01' of Pod 'goodpod03' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good36_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container01' of Pod 'goodpod03' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good36_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container01' of Pod 'goodpod03' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good36_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good36_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good36_2.yaml:7-10
────────────────────────────────────────
   7 ┌   runtimeClassName: prodclass
   8 │   containers:
   9 │   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container01" of pod "goodpod03" in "restrict-runtimeclassname" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good36_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good36_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod03 in restrict-runtimeclassname namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good36_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod03 in restrict-runtimeclassname namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good36_2.yaml:7-10
────────────────────────────────────────
   7 ┌   runtimeClassName: prodclass
   8 │   containers:
   9 │   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────



good4.yaml (kubernetes)
=======================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'small-image' of Pod 'small-image' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'small-image' of Pod 'small-image' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'small-image' of 'pod' 'small-image' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'small-image' of Pod 'small-image' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'small-image' of Pod 'small-image' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'small-image' of Pod 'small-image' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'small-image' of Pod 'small-image' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'small-image' of Pod 'small-image' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'small-image' of Pod 'small-image' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'small-image' of Pod 'small-image' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'small-image' of Pod 'small-image' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good4.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "small-image" of pod "small-image" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod small-image in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good4.yaml:4
────────────────────────────────────────
   4 [   name: small-image
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container small-image in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod small-image in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good4.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: small-image
   8 └     image: busybox:1.28
────────────────────────────────────────



good5.yaml (kubernetes)
=======================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'redis' of Pod 'redis' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good5.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'redis' of Pod 'redis' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good5.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'redis' of 'pod' 'redis' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good5.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'redis' of Pod 'redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good5.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'redis' of Pod 'redis' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good5.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'redis' of Pod 'redis' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good5.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'redis' of Pod 'redis' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good5.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Pod 'redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good5.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Pod 'redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good5.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Pod 'redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good5.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Pod 'redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good5.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Pod 'redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good5.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good5.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good5.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "redis" of pod "redis" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good5.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good5.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good5.yaml:4
────────────────────────────────────────
   4 [   name: redis
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container redis in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good5.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod redis in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good5.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container redis in pod redis (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good5.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: redis
   8 └       image: docker.io/redis:latest
────────────────────────────────────────



good6.yaml (kubernetes)
=======================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good6.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good6.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kyverno' of 'pod' 'pod-with-trusted-registry' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good6.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good6.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good6.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kyverno' of Pod 'pod-with-trusted-registry' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good6.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good6.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good6.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good6.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good6.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good6.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kyverno' of Pod 'pod-with-trusted-registry' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good6.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good6.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good6.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kyverno" of pod "pod-with-trusted-registry" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good6.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good6.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pod-with-trusted-registry in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good6.yaml:5
────────────────────────────────────────
   5 [   name: pod-with-trusted-registry
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-with-trusted-registry in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good6.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod-with-trusted-registry in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good6.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kyverno in pod pod-with-trusted-registry (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good6.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: kyverno
   9 └     image: ghcr.io/kyverno/kyverno:latest
────────────────────────────────────────



good7.yaml (kubernetes)
=======================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'test' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good7.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good7.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test' of 'pod' 'goodpod01' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good7.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good7.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good7.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test' of Pod 'goodpod01' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good7.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good7.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good7.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good7.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good7.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good7.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good7.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good7.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good7.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test" of pod "goodpod01" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good7.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good7.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod goodpod01 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 good7.yaml:4
────────────────────────────────────────
   4 [   name: goodpod01
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good7.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good7.yaml:6-8
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container test in pod goodpod01 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 good7.yaml:7-8
────────────────────────────────────────
   7 ┌     - name: test
   8 └       image: ghcr.io/kyverno/kyverno-annotations-example:latest
────────────────────────────────────────



good8.yaml (kubernetes)
=======================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container01' of Pod 'goodpod01' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good8.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container01' of Pod 'goodpod01' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good8.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container01' of 'pod' 'goodpod01' in 'restrict-runtimeclassname' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good8.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container01' of Pod 'goodpod01' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good8.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container01' of Pod 'goodpod01' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good8.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container01' of Pod 'goodpod01' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good8.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container01' of Pod 'goodpod01' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good8.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container01' of Pod 'goodpod01' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good8.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container01' of Pod 'goodpod01' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good8.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container01' of Pod 'goodpod01' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good8.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container01' of Pod 'goodpod01' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good8.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container01' of Pod 'goodpod01' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good8.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good8.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good8.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container01" of pod "goodpod01" in "restrict-runtimeclassname" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good8.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good8.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod01 in restrict-runtimeclassname namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good8.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod01 in restrict-runtimeclassname namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good8.yaml:7-9
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: container01
   9 └     image: dummyimagename
────────────────────────────────────────



good8_1.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container01' of Pod 'goodpod02' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good8_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container01' of Pod 'goodpod02' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good8_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container01' of 'pod' 'goodpod02' in 'restrict-runtimeclassname' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good8_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container01' of Pod 'goodpod02' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good8_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container01' of Pod 'goodpod02' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good8_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container01' of Pod 'goodpod02' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good8_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container01' of Pod 'goodpod02' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good8_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container01' of Pod 'goodpod02' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good8_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container01' of Pod 'goodpod02' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good8_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container01' of Pod 'goodpod02' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good8_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container01' of Pod 'goodpod02' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good8_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container01' of Pod 'goodpod02' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good8_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good8_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good8_1.yaml:7-10
────────────────────────────────────────
   7 ┌   runtimeClassName: expclass
   8 │   containers:
   9 │   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container01" of pod "goodpod02" in "restrict-runtimeclassname" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good8_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good8_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod02 in restrict-runtimeclassname namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good8_1.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod02 in restrict-runtimeclassname namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good8_1.yaml:7-10
────────────────────────────────────────
   7 ┌   runtimeClassName: expclass
   8 │   containers:
   9 │   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────



good8_2.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container01' of Pod 'goodpod03' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 good8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container01' of Pod 'goodpod03' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 good8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container01' of 'pod' 'goodpod03' in 'restrict-runtimeclassname' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 good8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container01' of Pod 'goodpod03' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 good8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container01' of Pod 'goodpod03' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 good8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container01' of Pod 'goodpod03' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 good8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container01' of Pod 'goodpod03' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 good8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container01' of Pod 'goodpod03' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 good8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container01' of Pod 'goodpod03' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 good8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container01' of Pod 'goodpod03' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 good8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container01' of Pod 'goodpod03' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 good8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container01' of Pod 'goodpod03' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 good8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 good8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 good8_2.yaml:7-10
────────────────────────────────────────
   7 ┌   runtimeClassName: prodclass
   8 │   containers:
   9 │   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container01" of pod "goodpod03" in "restrict-runtimeclassname" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 good8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 good8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodpod03 in restrict-runtimeclassname namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod goodpod03 in restrict-runtimeclassname namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 good8_2.yaml:7-10
────────────────────────────────────────
   7 ┌   runtimeClassName: prodclass
   8 │   containers:
   9 │   - name: container01
  10 └     image: dummyimagename
────────────────────────────────────────



goodburguer-hpa.yaml (kubernetes)
=================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 goodburguer-hpa.yaml:6-12
────────────────────────────────────────
   6 ┌   scaleTargetRef:
   7 │     apiVersion: apps/v1
   8 │     kind: Deployment
   9 │     name: goodburguer
  10 │   minReplicas: 1
  11 │   maxReplicas: 5
  12 └   targetCPUUtilizationPercentage: 30
────────────────────────────────────────



goodburguer-keys.yaml (kubernetes)
==================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'mysql-db-config' in 'default' namespace stores secrets in key(s) or value(s) '{"DATABASE_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



goodburguer-sv.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 goodburguer-sv.yaml:8-14
────────────────────────────────────────
   8 ┌   type: LoadBalancer
   9 │   selector:
  10 │     app: goodburguer-app
  11 │   ports:
  12 │     - protocol: TCP
  13 │       port: 8080
  14 └       targetPort: 8080
────────────────────────────────────────



goodburguer.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 98, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'goodburguer' of Deployment 'goodburguer-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 goodburguer.yaml:28-56
────────────────────────────────────────
  28 ┌       - name: goodburguer
  29 │         image: felipecarvalhodesouza/goodburguer:latest
  30 │         resources:
  31 │             requests:
  32 │               cpu: 500m
  33 │               memory: 1024Mi
  34 │             limits:
  35 │               cpu: 2000m
  36 └               memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'goodburguer' of Deployment 'goodburguer-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 goodburguer.yaml:28-56
────────────────────────────────────────
  28 ┌       - name: goodburguer
  29 │         image: felipecarvalhodesouza/goodburguer:latest
  30 │         resources:
  31 │             requests:
  32 │               cpu: 500m
  33 │               memory: 1024Mi
  34 │             limits:
  35 │               cpu: 2000m
  36 └               memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'goodburguer' of 'deployment' 'goodburguer-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 goodburguer.yaml:28-56
────────────────────────────────────────
  28 ┌       - name: goodburguer
  29 │         image: felipecarvalhodesouza/goodburguer:latest
  30 │         resources:
  31 │             requests:
  32 │               cpu: 500m
  33 │               memory: 1024Mi
  34 │             limits:
  35 │               cpu: 2000m
  36 └               memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'goodburguer' of Deployment 'goodburguer-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 goodburguer.yaml:28-56
────────────────────────────────────────
  28 ┌       - name: goodburguer
  29 │         image: felipecarvalhodesouza/goodburguer:latest
  30 │         resources:
  31 │             requests:
  32 │               cpu: 500m
  33 │               memory: 1024Mi
  34 │             limits:
  35 │               cpu: 2000m
  36 └               memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'goodburguer' of Deployment 'goodburguer-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 goodburguer.yaml:28-56
────────────────────────────────────────
  28 ┌       - name: goodburguer
  29 │         image: felipecarvalhodesouza/goodburguer:latest
  30 │         resources:
  31 │             requests:
  32 │               cpu: 500m
  33 │               memory: 1024Mi
  34 │             limits:
  35 │               cpu: 2000m
  36 └               memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'goodburguer' of Deployment 'goodburguer-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 goodburguer.yaml:28-56
────────────────────────────────────────
  28 ┌       - name: goodburguer
  29 │         image: felipecarvalhodesouza/goodburguer:latest
  30 │         resources:
  31 │             requests:
  32 │               cpu: 500m
  33 │               memory: 1024Mi
  34 │             limits:
  35 │               cpu: 2000m
  36 └               memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'goodburguer' of Deployment 'goodburguer-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 goodburguer.yaml:28-56
────────────────────────────────────────
  28 ┌       - name: goodburguer
  29 │         image: felipecarvalhodesouza/goodburguer:latest
  30 │         resources:
  31 │             requests:
  32 │               cpu: 500m
  33 │               memory: 1024Mi
  34 │             limits:
  35 │               cpu: 2000m
  36 └               memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'goodburguer' of Deployment 'goodburguer-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 goodburguer.yaml:28-56
────────────────────────────────────────
  28 ┌       - name: goodburguer
  29 │         image: felipecarvalhodesouza/goodburguer:latest
  30 │         resources:
  31 │             requests:
  32 │               cpu: 500m
  33 │               memory: 1024Mi
  34 │             limits:
  35 │               cpu: 2000m
  36 └               memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 goodburguer.yaml:28-56
────────────────────────────────────────
  28 ┌       - name: goodburguer
  29 │         image: felipecarvalhodesouza/goodburguer:latest
  30 │         resources:
  31 │             requests:
  32 │               cpu: 500m
  33 │               memory: 1024Mi
  34 │             limits:
  35 │               cpu: 2000m
  36 └               memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 goodburguer.yaml:8-56
────────────────────────────────────────
   8 ┌   replicas: 1
   9 │   selector:
  10 │     matchLabels:
  11 │       app: goodburguer-app
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: goodburguer-app
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "goodburguer" of deployment "goodburguer-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 goodburguer.yaml:28-56
────────────────────────────────────────
  28 ┌       - name: goodburguer
  29 │         image: felipecarvalhodesouza/goodburguer:latest
  30 │         resources:
  31 │             requests:
  32 │               cpu: 500m
  33 │               memory: 1024Mi
  34 │             limits:
  35 │               cpu: 2000m
  36 └               memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 goodburguer.yaml:28-56
────────────────────────────────────────
  28 ┌       - name: goodburguer
  29 │         image: felipecarvalhodesouza/goodburguer:latest
  30 │         resources:
  31 │             requests:
  32 │               cpu: 500m
  33 │               memory: 1024Mi
  34 │             limits:
  35 │               cpu: 2000m
  36 └               memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment goodburguer-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 goodburguer.yaml:4-6
────────────────────────────────────────
   4 ┌   name: goodburguer-deployment
   5 │   labels:
   6 └     app: goodburguer-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goodburguer-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodburguer.yaml:28-56
────────────────────────────────────────
  28 ┌       - name: goodburguer
  29 │         image: felipecarvalhodesouza/goodburguer:latest
  30 │         resources:
  31 │             requests:
  32 │               cpu: 500m
  33 │               memory: 1024Mi
  34 │             limits:
  35 │               cpu: 2000m
  36 └               memory: 2048Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment goodburguer-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodburguer.yaml:17-56
────────────────────────────────────────
  17 ┌       affinity:
  18 │         nodeAffinity:
  19 │           requiredDuringSchedulingIgnoredDuringExecution:
  20 │             nodeSelectorTerms:
  21 │             - matchExpressions:
  22 │               - key: kubernetes.io/arch
  23 │                 operator: In
  24 │                 values:
  25 └                 - amd64
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container goodburguer in deployment goodburguer-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 goodburguer.yaml:28-56
────────────────────────────────────────
  28 ┌       - name: goodburguer
  29 │         image: felipecarvalhodesouza/goodburguer:latest
  30 │         resources:
  31 │             requests:
  32 │               cpu: 500m
  33 │               memory: 1024Mi
  34 │             limits:
  35 │               cpu: 2000m
  36 └               memory: 2048Mi
  ..   
────────────────────────────────────────



goodpod.yaml (kubernetes)
=========================
Tests: 146 (SUCCESSES: 94, FAILURES: 52)
Failures: 52 (UNKNOWN: 0, LOW: 32, MEDIUM: 13, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 goodpod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 goodpod.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 goodpod.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 goodpod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 goodpod.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 goodpod.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'inittest-webserver' of 'pod' 'good-pods-all' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 goodpod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-webserver' of 'pod' 'good-pods-all' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 goodpod.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-webserver02' of 'pod' 'good-pods-all' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 goodpod.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 goodpod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 goodpod.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 goodpod.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 goodpod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 goodpod.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 goodpod.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'inittest-webserver' of Pod 'good-pods-all' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 goodpod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-webserver' of Pod 'good-pods-all' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 goodpod.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-webserver02' of Pod 'good-pods-all' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 goodpod.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 goodpod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 goodpod.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 goodpod.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 goodpod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 goodpod.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 goodpod.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 goodpod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 goodpod.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 goodpod.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 goodpod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 goodpod.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 goodpod.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 goodpod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 goodpod.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 goodpod.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 goodpod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 goodpod.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 goodpod.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'good-pods-all' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 goodpod.yaml:6-36
────────────────────────────────────────
   6 ┌   initContainers:
   7 │   - name: inittest-webserver
   8 │     image: asdfeasdfasada:latest
   9 │     # volumeMounts:
  10 │     # - mountPath: /some/dir
  11 │     #   name: bar
  12 │     #   readOnly: true
  13 │   containers:
  14 └   - name: test-webserver
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 goodpod.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 goodpod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 goodpod.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 goodpod.yaml:6-36
────────────────────────────────────────
   6 ┌   initContainers:
   7 │   - name: inittest-webserver
   8 │     image: asdfeasdfasada:latest
   9 │     # volumeMounts:
  10 │     # - mountPath: /some/dir
  11 │     #   name: bar
  12 │     #   readOnly: true
  13 │   containers:
  14 └   - name: test-webserver
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "inittest-webserver" of pod "good-pods-all" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 goodpod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-webserver" of pod "good-pods-all" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 goodpod.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-webserver02" of pod "good-pods-all" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 goodpod.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 goodpod.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 goodpod.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 goodpod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod good-pods-all in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 goodpod.yaml:4
────────────────────────────────────────
   4 [   name: good-pods-all
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-pods-all in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodpod.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-pods-all in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodpod.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-pods-all in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodpod.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod good-pods-all in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodpod.yaml:6-36
────────────────────────────────────────
   6 ┌   initContainers:
   7 │   - name: inittest-webserver
   8 │     image: asdfeasdfasada:latest
   9 │     # volumeMounts:
  10 │     # - mountPath: /some/dir
  11 │     #   name: bar
  12 │     #   readOnly: true
  13 │   containers:
  14 └   - name: test-webserver
  ..   
────────────────────────────────────────



goodpod1.yaml (kubernetes)
==========================
Tests: 146 (SUCCESSES: 94, FAILURES: 52)
Failures: 52 (UNKNOWN: 0, LOW: 32, MEDIUM: 13, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 goodpod1.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 goodpod1.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 goodpod1.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 goodpod1.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 goodpod1.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 goodpod1.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'inittest-webserver' of 'pod' 'good-pods-all' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 goodpod1.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-webserver' of 'pod' 'good-pods-all' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 goodpod1.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-webserver02' of 'pod' 'good-pods-all' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 goodpod1.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 goodpod1.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 goodpod1.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 goodpod1.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 goodpod1.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 goodpod1.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 goodpod1.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'inittest-webserver' of Pod 'good-pods-all' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 goodpod1.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-webserver' of Pod 'good-pods-all' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 goodpod1.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-webserver02' of Pod 'good-pods-all' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 goodpod1.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 goodpod1.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 goodpod1.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 goodpod1.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 goodpod1.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 goodpod1.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 goodpod1.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 goodpod1.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 goodpod1.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 goodpod1.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 goodpod1.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 goodpod1.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 goodpod1.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 goodpod1.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 goodpod1.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 goodpod1.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 goodpod1.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 goodpod1.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 goodpod1.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'good-pods-all' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 goodpod1.yaml:6-36
────────────────────────────────────────
   6 ┌   initContainers:
   7 │   - name: inittest-webserver
   8 │     image: asdfeasdfasada:latest
   9 │     # volumeMounts:
  10 │     # - mountPath: /some/dir
  11 │     #   name: bar
  12 │     #   readOnly: true
  13 │   containers:
  14 └   - name: test-webserver
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 goodpod1.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 goodpod1.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 goodpod1.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 goodpod1.yaml:6-36
────────────────────────────────────────
   6 ┌   initContainers:
   7 │   - name: inittest-webserver
   8 │     image: asdfeasdfasada:latest
   9 │     # volumeMounts:
  10 │     # - mountPath: /some/dir
  11 │     #   name: bar
  12 │     #   readOnly: true
  13 │   containers:
  14 └   - name: test-webserver
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "inittest-webserver" of pod "good-pods-all" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 goodpod1.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-webserver" of pod "good-pods-all" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 goodpod1.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-webserver02" of pod "good-pods-all" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 goodpod1.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 goodpod1.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 goodpod1.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 goodpod1.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod good-pods-all in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 goodpod1.yaml:4
────────────────────────────────────────
   4 [   name: good-pods-all
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-pods-all in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodpod1.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-pods-all in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodpod1.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-pods-all in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodpod1.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod good-pods-all in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodpod1.yaml:6-36
────────────────────────────────────────
   6 ┌   initContainers:
   7 │   - name: inittest-webserver
   8 │     image: asdfeasdfasada:latest
   9 │     # volumeMounts:
  10 │     # - mountPath: /some/dir
  11 │     #   name: bar
  12 │     #   readOnly: true
  13 │   containers:
  14 └   - name: test-webserver
  ..   
────────────────────────────────────────



goodpod2.yaml (kubernetes)
==========================
Tests: 146 (SUCCESSES: 94, FAILURES: 52)
Failures: 52 (UNKNOWN: 0, LOW: 32, MEDIUM: 13, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 goodpod2.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 goodpod2.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 goodpod2.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 goodpod2.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 goodpod2.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 goodpod2.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'inittest-webserver' of 'pod' 'good-pods-all' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 goodpod2.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-webserver' of 'pod' 'good-pods-all' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 goodpod2.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-webserver02' of 'pod' 'good-pods-all' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 goodpod2.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 goodpod2.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 goodpod2.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 goodpod2.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 goodpod2.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 goodpod2.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 goodpod2.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'inittest-webserver' of Pod 'good-pods-all' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 goodpod2.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-webserver' of Pod 'good-pods-all' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 goodpod2.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-webserver02' of Pod 'good-pods-all' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 goodpod2.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 goodpod2.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 goodpod2.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 goodpod2.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 goodpod2.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 goodpod2.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 goodpod2.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 goodpod2.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 goodpod2.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 goodpod2.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 goodpod2.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 goodpod2.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 goodpod2.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 goodpod2.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 goodpod2.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 goodpod2.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 goodpod2.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 goodpod2.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 goodpod2.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'good-pods-all' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 goodpod2.yaml:6-36
────────────────────────────────────────
   6 ┌   initContainers:
   7 │   - name: inittest-webserver
   8 │     image: asdfeasdfasada:latest
   9 │     # volumeMounts:
  10 │     # - mountPath: /some/dir
  11 │     #   name: bar
  12 │     #   readOnly: true
  13 │   containers:
  14 └   - name: test-webserver
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 goodpod2.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 goodpod2.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 goodpod2.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 goodpod2.yaml:6-36
────────────────────────────────────────
   6 ┌   initContainers:
   7 │   - name: inittest-webserver
   8 │     image: asdfeasdfasada:latest
   9 │     # volumeMounts:
  10 │     # - mountPath: /some/dir
  11 │     #   name: bar
  12 │     #   readOnly: true
  13 │   containers:
  14 └   - name: test-webserver
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "inittest-webserver" of pod "good-pods-all" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 goodpod2.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-webserver" of pod "good-pods-all" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 goodpod2.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-webserver02" of pod "good-pods-all" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 goodpod2.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 goodpod2.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 goodpod2.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 goodpod2.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod good-pods-all in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 goodpod2.yaml:4
────────────────────────────────────────
   4 [   name: good-pods-all
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-pods-all in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodpod2.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-pods-all in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodpod2.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-pods-all in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodpod2.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod good-pods-all in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodpod2.yaml:6-36
────────────────────────────────────────
   6 ┌   initContainers:
   7 │   - name: inittest-webserver
   8 │     image: asdfeasdfasada:latest
   9 │     # volumeMounts:
  10 │     # - mountPath: /some/dir
  11 │     #   name: bar
  12 │     #   readOnly: true
  13 │   containers:
  14 └   - name: test-webserver
  ..   
────────────────────────────────────────



goodpod3.yaml (kubernetes)
==========================
Tests: 146 (SUCCESSES: 94, FAILURES: 52)
Failures: 52 (UNKNOWN: 0, LOW: 32, MEDIUM: 13, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 goodpod3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 goodpod3.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 goodpod3.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 goodpod3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 goodpod3.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 goodpod3.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'inittest-webserver' of 'pod' 'good-pods-all' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 goodpod3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-webserver' of 'pod' 'good-pods-all' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 goodpod3.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-webserver02' of 'pod' 'good-pods-all' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 goodpod3.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 goodpod3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 goodpod3.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 goodpod3.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 goodpod3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 goodpod3.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 goodpod3.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'inittest-webserver' of Pod 'good-pods-all' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 goodpod3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-webserver' of Pod 'good-pods-all' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 goodpod3.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-webserver02' of Pod 'good-pods-all' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 goodpod3.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 goodpod3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 goodpod3.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 goodpod3.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 goodpod3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 goodpod3.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 goodpod3.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 goodpod3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 goodpod3.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 goodpod3.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 goodpod3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 goodpod3.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 goodpod3.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 goodpod3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 goodpod3.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 goodpod3.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 goodpod3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 goodpod3.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 goodpod3.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'good-pods-all' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 goodpod3.yaml:6-36
────────────────────────────────────────
   6 ┌   initContainers:
   7 │   - name: inittest-webserver
   8 │     image: asdfeasdfasada:latest
   9 │     # volumeMounts:
  10 │     # - mountPath: /some/dir
  11 │     #   name: bar
  12 │     #   readOnly: true
  13 │   containers:
  14 └   - name: test-webserver
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 goodpod3.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 goodpod3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 goodpod3.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 goodpod3.yaml:6-36
────────────────────────────────────────
   6 ┌   initContainers:
   7 │   - name: inittest-webserver
   8 │     image: asdfeasdfasada:latest
   9 │     # volumeMounts:
  10 │     # - mountPath: /some/dir
  11 │     #   name: bar
  12 │     #   readOnly: true
  13 │   containers:
  14 └   - name: test-webserver
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "inittest-webserver" of pod "good-pods-all" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 goodpod3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-webserver" of pod "good-pods-all" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 goodpod3.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-webserver02" of pod "good-pods-all" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 goodpod3.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 goodpod3.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 goodpod3.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 goodpod3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod good-pods-all in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 goodpod3.yaml:4
────────────────────────────────────────
   4 [   name: good-pods-all
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-pods-all in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodpod3.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-pods-all in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodpod3.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-pods-all in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodpod3.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod good-pods-all in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodpod3.yaml:6-36
────────────────────────────────────────
   6 ┌   initContainers:
   7 │   - name: inittest-webserver
   8 │     image: asdfeasdfasada:latest
   9 │     # volumeMounts:
  10 │     # - mountPath: /some/dir
  11 │     #   name: bar
  12 │     #   readOnly: true
  13 │   containers:
  14 └   - name: test-webserver
  ..   
────────────────────────────────────────



goodpod4.yaml (kubernetes)
==========================
Tests: 146 (SUCCESSES: 94, FAILURES: 52)
Failures: 52 (UNKNOWN: 0, LOW: 32, MEDIUM: 13, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 goodpod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 goodpod4.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 goodpod4.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 goodpod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 goodpod4.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 goodpod4.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'inittest-webserver' of 'pod' 'good-pods-all' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 goodpod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-webserver' of 'pod' 'good-pods-all' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 goodpod4.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'test-webserver02' of 'pod' 'good-pods-all' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 goodpod4.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 goodpod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 goodpod4.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 goodpod4.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 goodpod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 goodpod4.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 goodpod4.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'inittest-webserver' of Pod 'good-pods-all' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 goodpod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-webserver' of Pod 'good-pods-all' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 goodpod4.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'test-webserver02' of Pod 'good-pods-all' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 goodpod4.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 goodpod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 goodpod4.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 goodpod4.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 goodpod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 goodpod4.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 goodpod4.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 goodpod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 goodpod4.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 goodpod4.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 goodpod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 goodpod4.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 goodpod4.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 goodpod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 goodpod4.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 goodpod4.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'inittest-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 goodpod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-webserver' of Pod 'good-pods-all' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 goodpod4.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'test-webserver02' of Pod 'good-pods-all' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 goodpod4.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'good-pods-all' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 goodpod4.yaml:6-36
────────────────────────────────────────
   6 ┌   initContainers:
   7 │   - name: inittest-webserver
   8 │     image: asdfeasdfasada:latest
   9 │     # volumeMounts:
  10 │     # - mountPath: /some/dir
  11 │     #   name: bar
  12 │     #   readOnly: true
  13 │   containers:
  14 └   - name: test-webserver
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 goodpod4.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 goodpod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 goodpod4.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 goodpod4.yaml:6-36
────────────────────────────────────────
   6 ┌   initContainers:
   7 │   - name: inittest-webserver
   8 │     image: asdfeasdfasada:latest
   9 │     # volumeMounts:
  10 │     # - mountPath: /some/dir
  11 │     #   name: bar
  12 │     #   readOnly: true
  13 │   containers:
  14 └   - name: test-webserver
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "inittest-webserver" of pod "good-pods-all" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 goodpod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-webserver" of pod "good-pods-all" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 goodpod4.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "test-webserver02" of pod "good-pods-all" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 goodpod4.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 goodpod4.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 goodpod4.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 goodpod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod good-pods-all in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 goodpod4.yaml:4
────────────────────────────────────────
   4 [   name: good-pods-all
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-pods-all in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodpod4.yaml:20-21
────────────────────────────────────────
  20 ┌   - name: test-webserver02
  21 └     image: sjbonmqopcta:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-pods-all in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodpod4.yaml:14-19
────────────────────────────────────────
  14 ┌   - name: test-webserver
  15 │     image: asdfeasdfasada:latest
  16 │     volumeMounts:
  17 │     - mountPath: /some/dir
  18 │       name: foo
  19 └       readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container good-pods-all in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodpod4.yaml:7-8
────────────────────────────────────────
   7 ┌   - name: inittest-webserver
   8 └     image: asdfeasdfasada:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod good-pods-all in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goodpod4.yaml:6-36
────────────────────────────────────────
   6 ┌   initContainers:
   7 │   - name: inittest-webserver
   8 │     image: asdfeasdfasada:latest
   9 │     # volumeMounts:
  10 │     # - mountPath: /some/dir
  11 │     #   name: bar
  12 │     #   readOnly: true
  13 │   containers:
  14 └   - name: test-webserver
  ..   
────────────────────────────────────────



goods-istio-routing_1.yaml (kubernetes)
=======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 goods-istio-routing_1.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: goods
   8 │     swimlane: main
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 50051
  12 └     targetPort: goods-port
────────────────────────────────────────



goods-istio-routing_2.yaml (kubernetes)
=======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 goods-istio-routing_2.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: goods
   8 │     swimlane: dev-feature1
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 50051
  12 └     targetPort: goods-port
────────────────────────────────────────



goods-istio-routing_3.yaml (kubernetes)
=======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 goods-istio-routing_3.yaml:6-12
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: goods
   8 │     swimlane: dev-feature2
   9 │   ports:
  10 │   - protocol: TCP
  11 │     port: 50051
  12 └     targetPort: goods-port
────────────────────────────────────────



goods.yaml (kubernetes)
=======================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'goods' of Deployment 'goods-deploy-main' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 goods.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'goods' of Deployment 'goods-deploy-main' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 goods.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'goods' of 'deployment' 'goods-deploy-main' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 goods.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'goods' of Deployment 'goods-deploy-main' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 goods.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'goods' of Deployment 'goods-deploy-main' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 goods.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'goods' of Deployment 'goods-deploy-main' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 goods.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'goods' of Deployment 'goods-deploy-main' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 goods.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'goods' of Deployment 'goods-deploy-main' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 goods.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'goods' of Deployment 'goods-deploy-main' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 goods.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'goods' of Deployment 'goods-deploy-main' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 goods.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'goods' of Deployment 'goods-deploy-main' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 goods.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 goods.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 goods.yaml:6-37
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: goods
   9 │       swimlane: main
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: goods
  14 └         swimlane: main
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "goods" of deployment "goods-deploy-main" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 goods.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 goods.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment goods-deploy-main in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 goods.yaml:4
────────────────────────────────────────
   4 [   name: goods-deploy-main
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goods-deploy-main in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goods.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment goods-deploy-main in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goods.yaml:18-37
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container goods in deployment goods-deploy-main (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 goods.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────



goods_1.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'goods' of Deployment 'goods-deploy-dev-feature1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 goods_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'goods' of Deployment 'goods-deploy-dev-feature1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 goods_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'goods' of 'deployment' 'goods-deploy-dev-feature1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 goods_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'goods' of Deployment 'goods-deploy-dev-feature1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 goods_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'goods' of Deployment 'goods-deploy-dev-feature1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 goods_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'goods' of Deployment 'goods-deploy-dev-feature1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 goods_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'goods' of Deployment 'goods-deploy-dev-feature1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 goods_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'goods' of Deployment 'goods-deploy-dev-feature1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 goods_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'goods' of Deployment 'goods-deploy-dev-feature1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 goods_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'goods' of Deployment 'goods-deploy-dev-feature1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 goods_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'goods' of Deployment 'goods-deploy-dev-feature1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 goods_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 goods_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 goods_1.yaml:6-37
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: goods
   9 │       swimlane: dev-feature1
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: goods
  14 └         swimlane: dev-feature1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "goods" of deployment "goods-deploy-dev-feature1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 goods_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 goods_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment goods-deploy-dev-feature1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 goods_1.yaml:4
────────────────────────────────────────
   4 [   name: goods-deploy-dev-feature1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goods-deploy-dev-feature1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goods_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment goods-deploy-dev-feature1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goods_1.yaml:18-37
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container goods in deployment goods-deploy-dev-feature1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 goods_1.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────



goods_2.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'goods' of Deployment 'goods-deploy-dev-feature2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 goods_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'goods' of Deployment 'goods-deploy-dev-feature2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 goods_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'goods' of 'deployment' 'goods-deploy-dev-feature2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 goods_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'goods' of Deployment 'goods-deploy-dev-feature2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 goods_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'goods' of Deployment 'goods-deploy-dev-feature2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 goods_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'goods' of Deployment 'goods-deploy-dev-feature2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 goods_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'goods' of Deployment 'goods-deploy-dev-feature2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 goods_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'goods' of Deployment 'goods-deploy-dev-feature2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 goods_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'goods' of Deployment 'goods-deploy-dev-feature2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 goods_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'goods' of Deployment 'goods-deploy-dev-feature2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 goods_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'goods' of Deployment 'goods-deploy-dev-feature2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 goods_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 goods_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 goods_2.yaml:6-37
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       app: goods
   9 │       swimlane: dev-feature2
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: goods
  14 └         swimlane: dev-feature2
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "goods" of deployment "goods-deploy-dev-feature2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 goods_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 goods_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment goods-deploy-dev-feature2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 goods_2.yaml:4
────────────────────────────────────────
   4 [   name: goods-deploy-dev-feature2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container goods-deploy-dev-feature2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goods_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment goods-deploy-dev-feature2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 goods_2.yaml:18-37
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container goods in deployment goods-deploy-dev-feature2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 goods_2.yaml:19-37
────────────────────────────────────────
  19 ┌       - name: goods
  20 │         image: blue86321/swimlane-demo-goods-otel:1.0.0
  21 │         imagePullPolicy: IfNotPresent
  22 │         env:
  23 │         - name: PRICING_SERVICE
  24 │           value: pricing-service:50052
  25 │         - name: SWIMLANE
  26 │           valueFrom:
  27 └             fieldRef:
  ..   
────────────────────────────────────────



goods_3.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 goods_3.yaml:6-11
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: goods
   8 │   ports:
   9 │   - protocol: TCP
  10 │     port: 50051
  11 └     targetPort: goods-port
────────────────────────────────────────



gop-file-server-pod.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 94, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gop-file-server' of Pod 'gop-file-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 gop-file-server-pod.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: gop-file-server
  10 │     image: kodekloud/fileserver
  11 │     volumeMounts:
  12 │     - name: data-store
  13 └       mountPath: /web
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gop-file-server' of Pod 'gop-file-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 gop-file-server-pod.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: gop-file-server
  10 │     image: kodekloud/fileserver
  11 │     volumeMounts:
  12 │     - name: data-store
  13 └       mountPath: /web
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gop-file-server' of 'pod' 'gop-file-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 gop-file-server-pod.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: gop-file-server
  10 │     image: kodekloud/fileserver
  11 │     volumeMounts:
  12 │     - name: data-store
  13 └       mountPath: /web
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gop-file-server' of Pod 'gop-file-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 gop-file-server-pod.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: gop-file-server
  10 │     image: kodekloud/fileserver
  11 │     volumeMounts:
  12 │     - name: data-store
  13 └       mountPath: /web
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gop-file-server' of Pod 'gop-file-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 gop-file-server-pod.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: gop-file-server
  10 │     image: kodekloud/fileserver
  11 │     volumeMounts:
  12 │     - name: data-store
  13 └       mountPath: /web
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'gop-file-server' of Pod 'gop-file-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 gop-file-server-pod.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: gop-file-server
  10 │     image: kodekloud/fileserver
  11 │     volumeMounts:
  12 │     - name: data-store
  13 └       mountPath: /web
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gop-file-server' of Pod 'gop-file-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 gop-file-server-pod.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: gop-file-server
  10 │     image: kodekloud/fileserver
  11 │     volumeMounts:
  12 │     - name: data-store
  13 └       mountPath: /web
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gop-file-server' of Pod 'gop-file-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 gop-file-server-pod.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: gop-file-server
  10 │     image: kodekloud/fileserver
  11 │     volumeMounts:
  12 │     - name: data-store
  13 └       mountPath: /web
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gop-file-server' of Pod 'gop-file-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 gop-file-server-pod.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: gop-file-server
  10 │     image: kodekloud/fileserver
  11 │     volumeMounts:
  12 │     - name: data-store
  13 └       mountPath: /web
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gop-file-server' of Pod 'gop-file-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 gop-file-server-pod.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: gop-file-server
  10 │     image: kodekloud/fileserver
  11 │     volumeMounts:
  12 │     - name: data-store
  13 └       mountPath: /web
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gop-file-server' of Pod 'gop-file-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gop-file-server-pod.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: gop-file-server
  10 │     image: kodekloud/fileserver
  11 │     volumeMounts:
  12 │     - name: data-store
  13 └       mountPath: /web
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gop-file-server' of Pod 'gop-file-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gop-file-server-pod.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: gop-file-server
  10 │     image: kodekloud/fileserver
  11 │     volumeMounts:
  12 │     - name: data-store
  13 └       mountPath: /web
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 gop-file-server-pod.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: gop-file-server
  10 │     image: kodekloud/fileserver
  11 │     volumeMounts:
  12 │     - name: data-store
  13 └       mountPath: /web
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gop-file-server-pod.yaml:8-17
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: gop-file-server
  10 │     image: kodekloud/fileserver
  11 │     volumeMounts:
  12 │     - name: data-store
  13 │       mountPath: /web
  14 │   volumes:
  15 │     - name: data-store
  16 │       persistentVolumeClaim:
  17 └         claimName: data-pvc
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gop-file-server" of pod "gop-file-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 gop-file-server-pod.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: gop-file-server
  10 │     image: kodekloud/fileserver
  11 │     volumeMounts:
  12 │     - name: data-store
  13 └       mountPath: /web
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 gop-file-server-pod.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: gop-file-server
  10 │     image: kodekloud/fileserver
  11 │     volumeMounts:
  12 │     - name: data-store
  13 └       mountPath: /web
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod gop-file-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 gop-file-server-pod.yaml:4-6
────────────────────────────────────────
   4 ┌   name: gop-file-server
   5 │   labels:
   6 └     run: gop-file-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container gop-file-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 gop-file-server-pod.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: gop-file-server
  10 │     image: kodekloud/fileserver
  11 │     volumeMounts:
  12 │     - name: data-store
  13 └       mountPath: /web
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod gop-file-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 gop-file-server-pod.yaml:8-17
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: gop-file-server
  10 │     image: kodekloud/fileserver
  11 │     volumeMounts:
  12 │     - name: data-store
  13 │       mountPath: /web
  14 │   volumes:
  15 │     - name: data-store
  16 │       persistentVolumeClaim:
  17 └         claimName: data-pvc
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container gop-file-server in pod gop-file-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gop-file-server-pod.yaml:9-13
────────────────────────────────────────
   9 ┌   - name: gop-file-server
  10 │     image: kodekloud/fileserver
  11 │     volumeMounts:
  12 │     - name: data-store
  13 └       mountPath: /web
────────────────────────────────────────



gop-fs-service.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gop-fs-service.yaml:6-12
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   selector:
   8 │     run: gop-fs-service
   9 │   ports:
  10 │   - port: 8080
  11 │     targetPort: 8080
  12 └     nodePort: 31200
────────────────────────────────────────



gorm-test-job.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 98, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gorm-test' of Deployment 'gorm-test-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 gorm-test-job.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: gorm-test
  17 │         image: vd1234/gorm-test # Use the Docker image you built or pushed
  18 │         imagePullPolicy: Always
  19 │         command: ["./main"] # Command to run your application
  20 │         resources: # Define resource requests and limits here
  21 │           limits:
  22 │             cpu: "100m" # Limit CPU to 100 milliCPU
  23 │             memory: "128Mi" # Limit memory to 128 MiB
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gorm-test' of Deployment 'gorm-test-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 gorm-test-job.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: gorm-test
  17 │         image: vd1234/gorm-test # Use the Docker image you built or pushed
  18 │         imagePullPolicy: Always
  19 │         command: ["./main"] # Command to run your application
  20 │         resources: # Define resource requests and limits here
  21 │           limits:
  22 │             cpu: "100m" # Limit CPU to 100 milliCPU
  23 │             memory: "128Mi" # Limit memory to 128 MiB
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gorm-test' of 'deployment' 'gorm-test-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 gorm-test-job.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: gorm-test
  17 │         image: vd1234/gorm-test # Use the Docker image you built or pushed
  18 │         imagePullPolicy: Always
  19 │         command: ["./main"] # Command to run your application
  20 │         resources: # Define resource requests and limits here
  21 │           limits:
  22 │             cpu: "100m" # Limit CPU to 100 milliCPU
  23 │             memory: "128Mi" # Limit memory to 128 MiB
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gorm-test' of Deployment 'gorm-test-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 gorm-test-job.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: gorm-test
  17 │         image: vd1234/gorm-test # Use the Docker image you built or pushed
  18 │         imagePullPolicy: Always
  19 │         command: ["./main"] # Command to run your application
  20 │         resources: # Define resource requests and limits here
  21 │           limits:
  22 │             cpu: "100m" # Limit CPU to 100 milliCPU
  23 │             memory: "128Mi" # Limit memory to 128 MiB
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'gorm-test' of Deployment 'gorm-test-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 gorm-test-job.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: gorm-test
  17 │         image: vd1234/gorm-test # Use the Docker image you built or pushed
  18 │         imagePullPolicy: Always
  19 │         command: ["./main"] # Command to run your application
  20 │         resources: # Define resource requests and limits here
  21 │           limits:
  22 │             cpu: "100m" # Limit CPU to 100 milliCPU
  23 │             memory: "128Mi" # Limit memory to 128 MiB
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gorm-test' of Deployment 'gorm-test-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 gorm-test-job.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: gorm-test
  17 │         image: vd1234/gorm-test # Use the Docker image you built or pushed
  18 │         imagePullPolicy: Always
  19 │         command: ["./main"] # Command to run your application
  20 │         resources: # Define resource requests and limits here
  21 │           limits:
  22 │             cpu: "100m" # Limit CPU to 100 milliCPU
  23 │             memory: "128Mi" # Limit memory to 128 MiB
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gorm-test' of Deployment 'gorm-test-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gorm-test-job.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: gorm-test
  17 │         image: vd1234/gorm-test # Use the Docker image you built or pushed
  18 │         imagePullPolicy: Always
  19 │         command: ["./main"] # Command to run your application
  20 │         resources: # Define resource requests and limits here
  21 │           limits:
  22 │             cpu: "100m" # Limit CPU to 100 milliCPU
  23 │             memory: "128Mi" # Limit memory to 128 MiB
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gorm-test' of Deployment 'gorm-test-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gorm-test-job.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: gorm-test
  17 │         image: vd1234/gorm-test # Use the Docker image you built or pushed
  18 │         imagePullPolicy: Always
  19 │         command: ["./main"] # Command to run your application
  20 │         resources: # Define resource requests and limits here
  21 │           limits:
  22 │             cpu: "100m" # Limit CPU to 100 milliCPU
  23 │             memory: "128Mi" # Limit memory to 128 MiB
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 gorm-test-job.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: gorm-test
  17 │         image: vd1234/gorm-test # Use the Docker image you built or pushed
  18 │         imagePullPolicy: Always
  19 │         command: ["./main"] # Command to run your application
  20 │         resources: # Define resource requests and limits here
  21 │           limits:
  22 │             cpu: "100m" # Limit CPU to 100 milliCPU
  23 │             memory: "128Mi" # Limit memory to 128 MiB
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gorm-test-job.yaml:6-26
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: gorm-test
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: gorm-test
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gorm-test" of deployment "gorm-test-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 gorm-test-job.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: gorm-test
  17 │         image: vd1234/gorm-test # Use the Docker image you built or pushed
  18 │         imagePullPolicy: Always
  19 │         command: ["./main"] # Command to run your application
  20 │         resources: # Define resource requests and limits here
  21 │           limits:
  22 │             cpu: "100m" # Limit CPU to 100 milliCPU
  23 │             memory: "128Mi" # Limit memory to 128 MiB
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 gorm-test-job.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: gorm-test
  17 │         image: vd1234/gorm-test # Use the Docker image you built or pushed
  18 │         imagePullPolicy: Always
  19 │         command: ["./main"] # Command to run your application
  20 │         resources: # Define resource requests and limits here
  21 │           limits:
  22 │             cpu: "100m" # Limit CPU to 100 milliCPU
  23 │             memory: "128Mi" # Limit memory to 128 MiB
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment gorm-test-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 gorm-test-job.yaml:4
────────────────────────────────────────
   4 [   name: gorm-test-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container gorm-test-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 gorm-test-job.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: gorm-test
  17 │         image: vd1234/gorm-test # Use the Docker image you built or pushed
  18 │         imagePullPolicy: Always
  19 │         command: ["./main"] # Command to run your application
  20 │         resources: # Define resource requests and limits here
  21 │           limits:
  22 │             cpu: "100m" # Limit CPU to 100 milliCPU
  23 │             memory: "128Mi" # Limit memory to 128 MiB
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment gorm-test-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 gorm-test-job.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: gorm-test
  17 │         image: vd1234/gorm-test # Use the Docker image you built or pushed
  18 │         imagePullPolicy: Always
  19 │         command: ["./main"] # Command to run your application
  20 │         resources: # Define resource requests and limits here
  21 │           limits:
  22 │             cpu: "100m" # Limit CPU to 100 milliCPU
  23 └             memory: "128Mi" # Limit memory to 128 MiB
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container gorm-test in deployment gorm-test-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gorm-test-job.yaml:16-26
────────────────────────────────────────
  16 ┌       - name: gorm-test
  17 │         image: vd1234/gorm-test # Use the Docker image you built or pushed
  18 │         imagePullPolicy: Always
  19 │         command: ["./main"] # Command to run your application
  20 │         resources: # Define resource requests and limits here
  21 │           limits:
  22 │             cpu: "100m" # Limit CPU to 100 milliCPU
  23 │             memory: "128Mi" # Limit memory to 128 MiB
  24 └           requests:
  ..   
────────────────────────────────────────



gotenberg-deployment.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 95, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'gotenberg' of Deployment 'gotenberg' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 gotenberg-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - args:
  26 │             - gotenberg
  27 │             - --chromium-disable-javascript=true
  28 │             - --chromium-allow-list=file:///tmp/.*
  29 │           image: docker.io/gotenberg/gotenberg:7.10
  30 └           name: gotenberg
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'gotenberg' of Deployment 'gotenberg' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 gotenberg-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - args:
  26 │             - gotenberg
  27 │             - --chromium-disable-javascript=true
  28 │             - --chromium-allow-list=file:///tmp/.*
  29 │           image: docker.io/gotenberg/gotenberg:7.10
  30 └           name: gotenberg
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'gotenberg' of 'deployment' 'gotenberg' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 gotenberg-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - args:
  26 │             - gotenberg
  27 │             - --chromium-disable-javascript=true
  28 │             - --chromium-allow-list=file:///tmp/.*
  29 │           image: docker.io/gotenberg/gotenberg:7.10
  30 └           name: gotenberg
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'gotenberg' of Deployment 'gotenberg' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 gotenberg-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - args:
  26 │             - gotenberg
  27 │             - --chromium-disable-javascript=true
  28 │             - --chromium-allow-list=file:///tmp/.*
  29 │           image: docker.io/gotenberg/gotenberg:7.10
  30 └           name: gotenberg
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'gotenberg' of Deployment 'gotenberg' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 gotenberg-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - args:
  26 │             - gotenberg
  27 │             - --chromium-disable-javascript=true
  28 │             - --chromium-allow-list=file:///tmp/.*
  29 │           image: docker.io/gotenberg/gotenberg:7.10
  30 └           name: gotenberg
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'gotenberg' of Deployment 'gotenberg' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 gotenberg-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - args:
  26 │             - gotenberg
  27 │             - --chromium-disable-javascript=true
  28 │             - --chromium-allow-list=file:///tmp/.*
  29 │           image: docker.io/gotenberg/gotenberg:7.10
  30 └           name: gotenberg
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'gotenberg' of Deployment 'gotenberg' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 gotenberg-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - args:
  26 │             - gotenberg
  27 │             - --chromium-disable-javascript=true
  28 │             - --chromium-allow-list=file:///tmp/.*
  29 │           image: docker.io/gotenberg/gotenberg:7.10
  30 └           name: gotenberg
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'gotenberg' of Deployment 'gotenberg' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 gotenberg-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - args:
  26 │             - gotenberg
  27 │             - --chromium-disable-javascript=true
  28 │             - --chromium-allow-list=file:///tmp/.*
  29 │           image: docker.io/gotenberg/gotenberg:7.10
  30 └           name: gotenberg
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'gotenberg' of Deployment 'gotenberg' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 gotenberg-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - args:
  26 │             - gotenberg
  27 │             - --chromium-disable-javascript=true
  28 │             - --chromium-allow-list=file:///tmp/.*
  29 │           image: docker.io/gotenberg/gotenberg:7.10
  30 └           name: gotenberg
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'gotenberg' of Deployment 'gotenberg' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotenberg-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - args:
  26 │             - gotenberg
  27 │             - --chromium-disable-javascript=true
  28 │             - --chromium-allow-list=file:///tmp/.*
  29 │           image: docker.io/gotenberg/gotenberg:7.10
  30 └           name: gotenberg
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'gotenberg' of Deployment 'gotenberg' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotenberg-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - args:
  26 │             - gotenberg
  27 │             - --chromium-disable-javascript=true
  28 │             - --chromium-allow-list=file:///tmp/.*
  29 │           image: docker.io/gotenberg/gotenberg:7.10
  30 └           name: gotenberg
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 gotenberg-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - args:
  26 │             - gotenberg
  27 │             - --chromium-disable-javascript=true
  28 │             - --chromium-allow-list=file:///tmp/.*
  29 │           image: docker.io/gotenberg/gotenberg:7.10
  30 └           name: gotenberg
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotenberg-deployment.yaml:11-31
────────────────────────────────────────
  11 ┌   replicas: 1
  12 │   selector:
  13 │     matchLabels:
  14 │       io.kompose.service: gotenberg
  15 │   template:
  16 │     metadata:
  17 │       annotations:
  18 │         kompose.cmd: kompose convert -f docker-compose.yaml
  19 └         kompose.version: 1.32.0 (HEAD)
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "gotenberg" of deployment "gotenberg" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 gotenberg-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - args:
  26 │             - gotenberg
  27 │             - --chromium-disable-javascript=true
  28 │             - --chromium-allow-list=file:///tmp/.*
  29 │           image: docker.io/gotenberg/gotenberg:7.10
  30 └           name: gotenberg
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 gotenberg-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - args:
  26 │             - gotenberg
  27 │             - --chromium-disable-javascript=true
  28 │             - --chromium-allow-list=file:///tmp/.*
  29 │           image: docker.io/gotenberg/gotenberg:7.10
  30 └           name: gotenberg
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment gotenberg in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 gotenberg-deployment.yaml:4-9
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert -f docker-compose.yaml
   6 │     kompose.version: 1.32.0 (HEAD)
   7 │   labels:
   8 │     io.kompose.service: gotenberg
   9 └   name: gotenberg
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container gotenberg in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 gotenberg-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - args:
  26 │             - gotenberg
  27 │             - --chromium-disable-javascript=true
  28 │             - --chromium-allow-list=file:///tmp/.*
  29 │           image: docker.io/gotenberg/gotenberg:7.10
  30 └           name: gotenberg
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment gotenberg in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 gotenberg-deployment.yaml:24-31
────────────────────────────────────────
  24 ┌       containers:
  25 │         - args:
  26 │             - gotenberg
  27 │             - --chromium-disable-javascript=true
  28 │             - --chromium-allow-list=file:///tmp/.*
  29 │           image: docker.io/gotenberg/gotenberg:7.10
  30 │           name: gotenberg
  31 └       restartPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container gotenberg in deployment gotenberg (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotenberg-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - args:
  26 │             - gotenberg
  27 │             - --chromium-disable-javascript=true
  28 │             - --chromium-allow-list=file:///tmp/.*
  29 │           image: docker.io/gotenberg/gotenberg:7.10
  30 └           name: gotenberg
────────────────────────────────────────



gotk-components-v2.2.31_1.yaml (kubernetes)
===========================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.31_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components-v2.2.31_16.yaml (kubernetes)
============================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.31_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components-v2.2.31_17.yaml (kubernetes)
============================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components-v2.2.31_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components-v2.2.31_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.31_17.yaml:13-96
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components-v2.2.31_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components-v2.2.31_2.yaml (kubernetes)
===========================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.31_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components-v2.2.31_20.yaml (kubernetes)
============================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components-v2.2.31_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components-v2.2.31_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.31_20.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components-v2.2.31_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components-v2.2.31_23.yaml (kubernetes)
============================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components-v2.2.31_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components-v2.2.31_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.31_23.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components-v2.2.31_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components-v2.2.31_28.yaml (kubernetes)
============================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.31_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components-v2.2.31_29.yaml (kubernetes)
============================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.31_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components-v2.2.31_3.yaml (kubernetes)
===========================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.31_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components-v2.2.31_30.yaml (kubernetes)
============================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components-v2.2.31_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components-v2.2.31_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.31_30.yaml:13-87
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components-v2.2.31_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components-v2.2.31_34.yaml (kubernetes)
============================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'image-reflector-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components-v2.2.31_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'image-reflector-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components-v2.2.31_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.31_34.yaml:13-86
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: image-reflector-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment image-reflector-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components-v2.2.31_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components-v2.2.31_37.yaml (kubernetes)
============================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'image-automation-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components-v2.2.31_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'image-automation-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components-v2.2.31_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.31_37.yaml:13-82
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: image-automation-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment image-automation-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components-v2.2.31_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components-v2.2.31_4.yaml (kubernetes)
===========================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.31_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components-v2.2.31_5.yaml (kubernetes)
===========================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components-v2.2.31_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components-v2.2.31_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components-v2.2.31_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components-v2.2.31_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components-v2.2.31_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components-v2.2.31_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components-v2.2.31_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components-v2.2.31_6.yaml (kubernetes)
===========================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components-v2.2.31_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components-v2.2.31_7.yaml (kubernetes)
===========================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components-v2.2.31_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components-v2.2.31_8.yaml (kubernetes)
===========================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components-v2.2.31_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.2.3
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components-v2.2.3_1.yaml (kubernetes)
==========================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.3_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components-v2.2.3_16.yaml (kubernetes)
===========================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.3_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components-v2.2.3_17.yaml (kubernetes)
===========================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components-v2.2.3_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components-v2.2.3_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.3_17.yaml:13-96
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components-v2.2.3_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components-v2.2.3_2.yaml (kubernetes)
==========================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.3_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components-v2.2.3_20.yaml (kubernetes)
===========================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components-v2.2.3_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components-v2.2.3_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.3_20.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components-v2.2.3_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components-v2.2.3_23.yaml (kubernetes)
===========================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components-v2.2.3_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components-v2.2.3_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.3_23.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components-v2.2.3_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components-v2.2.3_28.yaml (kubernetes)
===========================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.3_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components-v2.2.3_29.yaml (kubernetes)
===========================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.3_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components-v2.2.3_3.yaml (kubernetes)
==========================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.3_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components-v2.2.3_30.yaml (kubernetes)
===========================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components-v2.2.3_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components-v2.2.3_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.3_30.yaml:13-87
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components-v2.2.3_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components-v2.2.3_34.yaml (kubernetes)
===========================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'image-reflector-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components-v2.2.3_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'image-reflector-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components-v2.2.3_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.3_34.yaml:13-86
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: image-reflector-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment image-reflector-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components-v2.2.3_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components-v2.2.3_37.yaml (kubernetes)
===========================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'image-automation-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components-v2.2.3_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'image-automation-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components-v2.2.3_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.3_37.yaml:13-82
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: image-automation-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment image-automation-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components-v2.2.3_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components-v2.2.3_4.yaml (kubernetes)
==========================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components-v2.2.3_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components-v2.2.3_5.yaml (kubernetes)
==========================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components-v2.2.3_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components-v2.2.3_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components-v2.2.3_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components-v2.2.3_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components-v2.2.3_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components-v2.2.3_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components-v2.2.3_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components-v2.2.3_6.yaml (kubernetes)
==========================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components-v2.2.3_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components-v2.2.3_7.yaml (kubernetes)
==========================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components-v2.2.3_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components-v2.2.3_8.yaml (kubernetes)
==========================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components-v2.2.3_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.2.3
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components10_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components10_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components10_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components10_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components10_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components10_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components10_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components10_17.yaml:13-96
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components10_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components10_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components10_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components10_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components10_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components10_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components10_20.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components10_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components10_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components10_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components10_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components10_23.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components10_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components10_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components10_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components10_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components10_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components10_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components10_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components10_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components10_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components10_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components10_30.yaml:13-87
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components10_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components10_34.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'image-reflector-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components10_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'image-reflector-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components10_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components10_34.yaml:13-86
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: image-reflector-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment image-reflector-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components10_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components10_37.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'image-automation-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components10_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'image-automation-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components10_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components10_37.yaml:13-82
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: image-automation-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment image-automation-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components10_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components10_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components10_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components10_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components10_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components10_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components10_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components10_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components10_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components10_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components10_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components10_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components10_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components10_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components10_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components10_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components10_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.1.1
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components11_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components11_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components11_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components11_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components11_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components11_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components11_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components11_17.yaml:13-96
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components11_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components11_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components11_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components11_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components11_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components11_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components11_20.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components11_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components11_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components11_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components11_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components11_23.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components11_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components11_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components11_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components11_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components11_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components11_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components11_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components11_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components11_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components11_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components11_30.yaml:13-87
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components11_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components11_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components11_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components11_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components11_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components11_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components11_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components11_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components11_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components11_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components11_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components11_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components11_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components11_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components11_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components11_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components11_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.2.0
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components12_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components12_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components12_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components12_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components12_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components12_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components12_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components12_17.yaml:13-106
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components12_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components12_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components12_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components12_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components12_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components12_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components12_20.yaml:13-93
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components12_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components12_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components12_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components12_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components12_23.yaml:13-93
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components12_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components12_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components12_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components12_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components12_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components12_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components12_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components12_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components12_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components12_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components12_30.yaml:13-97
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components12_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components12_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components12_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components12_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components12_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components12_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components12_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components12_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components12_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components12_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components12_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components12_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components12_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components12_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components12_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components12_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components12_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.4.0
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components13_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components13_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components13_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components13_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components13_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components13_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components13_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components13_17.yaml:13-106
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components13_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components13_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components13_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components13_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components13_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components13_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components13_20.yaml:13-93
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components13_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components13_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components13_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components13_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components13_23.yaml:13-93
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components13_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components13_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components13_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components13_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components13_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components13_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components13_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components13_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components13_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components13_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components13_30.yaml:13-97
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components13_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components13_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components13_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components13_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components13_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components13_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components13_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components13_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components13_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components13_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components13_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components13_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components13_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components13_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components13_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components13_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components13_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.4.0
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components14_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components14_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components14_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components14_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components14_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components14_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components14_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components14_17.yaml:13-96
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components14_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components14_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components14_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components14_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components14_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components14_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components14_20.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components14_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components14_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components14_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components14_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components14_23.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components14_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components14_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components14_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components14_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components14_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components14_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components14_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components14_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components14_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components14_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components14_30.yaml:13-87
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components14_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components14_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components14_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components14_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components14_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components14_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components14_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components14_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components14_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components14_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components14_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components14_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components14_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components14_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components14_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components14_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components14_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.2.1
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components15_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components15_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components15_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components15_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components15_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components15_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components15_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components15_17.yaml:13-96
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components15_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components15_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components15_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components15_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components15_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components15_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components15_20.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components15_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components15_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components15_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components15_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components15_23.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components15_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components15_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components15_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components15_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components15_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components15_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components15_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components15_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components15_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components15_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components15_30.yaml:13-87
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components15_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components15_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components15_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components15_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components15_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components15_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components15_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components15_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components15_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components15_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components15_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components15_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components15_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components15_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components15_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components15_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components15_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.2.2
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components16_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components16_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components16_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components16_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components16_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components16_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components16_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components16_17.yaml:13-106
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components16_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components16_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components16_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components16_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components16_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components16_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components16_20.yaml:13-93
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components16_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components16_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components16_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components16_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components16_23.yaml:13-93
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components16_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components16_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components16_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components16_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components16_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components16_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components16_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components16_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components16_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components16_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components16_30.yaml:13-97
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components16_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components16_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components16_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components16_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components16_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components16_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components16_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components16_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components16_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components16_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components16_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components16_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components16_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components16_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components16_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components16_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components16_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.5.1
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components17_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components17_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components17_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components17_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components17_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components17_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components17_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components17_17.yaml:13-106
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components17_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components17_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components17_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components17_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components17_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components17_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components17_20.yaml:13-93
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components17_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components17_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components17_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components17_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components17_23.yaml:13-93
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components17_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components17_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components17_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components17_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components17_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components17_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components17_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components17_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components17_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components17_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components17_30.yaml:13-97
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components17_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components17_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components17_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components17_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components17_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components17_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components17_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components17_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components17_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components17_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components17_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components17_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components17_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components17_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components17_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components17_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components17_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.3.0
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components18_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components18_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components18_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components18_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components18_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components18_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components18_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components18_17.yaml:13-96
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components18_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components18_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components18_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components18_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components18_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components18_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components18_20.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components18_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components18_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components18_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components18_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components18_23.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components18_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components18_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components18_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components18_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components18_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components18_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components18_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components18_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components18_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components18_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components18_30.yaml:13-87
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components18_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components18_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components18_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components18_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components18_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components18_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components18_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components18_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components18_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components18_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components18_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components18_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components18_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components18_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components18_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components18_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components18_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.2.3
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components19_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components19_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components19_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components19_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components19_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components19_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components19_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components19_17.yaml:13-96
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components19_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components19_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components19_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components19_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components19_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components19_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components19_20.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components19_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components19_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components19_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components19_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components19_23.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components19_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components19_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components19_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components19_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components19_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components19_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components19_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components19_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components19_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components19_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components19_30.yaml:13-87
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components19_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components19_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components19_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components19_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components19_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components19_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components19_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components19_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components19_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components19_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components19_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components19_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components19_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components19_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components19_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components19_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components19_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.2.3
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components1_1.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components1_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components1_16.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components1_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components1_17.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components1_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components1_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components1_17.yaml:13-106
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components1_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components1_2.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components1_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components1_20.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components1_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components1_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components1_20.yaml:13-93
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components1_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components1_23.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components1_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components1_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components1_23.yaml:13-93
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components1_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components1_28.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components1_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components1_29.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components1_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components1_3.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components1_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components1_30.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components1_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components1_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components1_30.yaml:13-97
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components1_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components1_34.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'image-reflector-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components1_34.yaml:26-85
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'image-reflector-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components1_34.yaml:26-85
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components1_34.yaml:13-96
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: image-reflector-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment image-reflector-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components1_34.yaml:26-85
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components1_37.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'image-automation-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components1_37.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'image-automation-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components1_37.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components1_37.yaml:13-92
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: image-automation-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment image-automation-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components1_37.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components1_4.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components1_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components1_5.yaml (kubernetes)
====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components1_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components1_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components1_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components1_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components1_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components1_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components1_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components1_6.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components1_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components1_7.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components1_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components1_8.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components1_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.5.1
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components21_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components21_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components21_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components21_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components21_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components21_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components21_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components21_17.yaml:13-106
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components21_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components21_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components21_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components21_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components21_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components21_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components21_20.yaml:13-93
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components21_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components21_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components21_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components21_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components21_23.yaml:13-93
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components21_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components21_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components21_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components21_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components21_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components21_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components21_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components21_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components21_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components21_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components21_30.yaml:13-97
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components21_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components21_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components21_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components21_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components21_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components21_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components21_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components21_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components21_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components21_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components21_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components21_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components21_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components21_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components21_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components21_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components21_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.3.0
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components22_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components22_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components22_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components22_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components22_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components22_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components22_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components22_17.yaml:13-96
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components22_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components22_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components22_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components22_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components22_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components22_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components22_20.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components22_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components22_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components22_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components22_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components22_23.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components22_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components22_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components22_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components22_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components22_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components22_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components22_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components22_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components22_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components22_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components22_30.yaml:13-87
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components22_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components22_34.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'image-reflector-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components22_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'image-reflector-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components22_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components22_34.yaml:13-86
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: image-reflector-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment image-reflector-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components22_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components22_37.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'image-automation-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components22_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'image-automation-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components22_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components22_37.yaml:13-82
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: image-automation-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment image-automation-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components22_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components22_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components22_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components22_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components22_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components22_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components22_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components22_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components22_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components22_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components22_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components22_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components22_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components22_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components22_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components22_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components22_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.2.3
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components23_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components23_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components23_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components23_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components23_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components23_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components23_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components23_17.yaml:13-96
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components23_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components23_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components23_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components23_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components23_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components23_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components23_20.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components23_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components23_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components23_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components23_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components23_23.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components23_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components23_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components23_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components23_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components23_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components23_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components23_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components23_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components23_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components23_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components23_30.yaml:13-87
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components23_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components23_34.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'image-reflector-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components23_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'image-reflector-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components23_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components23_34.yaml:13-86
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: image-reflector-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment image-reflector-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components23_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components23_37.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'image-automation-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components23_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'image-automation-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components23_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components23_37.yaml:13-82
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: image-automation-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment image-automation-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components23_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components23_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components23_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components23_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components23_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components23_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components23_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components23_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components23_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components23_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components23_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components23_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components23_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components23_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components23_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components23_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components23_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.2.2
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components24_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components24_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components24_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components24_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components24_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components24_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components24_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components24_17.yaml:13-96
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components24_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components24_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components24_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components24_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components24_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components24_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components24_20.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components24_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components24_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components24_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components24_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components24_23.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components24_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components24_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components24_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components24_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components24_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components24_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components24_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components24_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components24_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components24_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components24_30.yaml:13-87
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components24_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components24_34.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'image-reflector-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components24_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'image-reflector-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components24_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components24_34.yaml:13-86
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: image-reflector-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment image-reflector-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components24_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components24_37.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'image-automation-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components24_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'image-automation-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components24_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components24_37.yaml:13-82
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: image-automation-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment image-automation-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components24_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components24_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components24_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components24_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components24_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components24_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components24_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components24_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components24_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components24_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components24_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components24_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components24_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components24_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components24_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components24_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components24_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.2.2
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components25_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components25_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components25_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components25_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components25_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components25_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components25_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components25_17.yaml:13-96
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components25_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components25_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components25_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components25_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components25_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components25_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components25_20.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components25_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components25_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components25_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components25_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components25_23.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components25_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components25_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components25_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components25_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components25_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components25_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components25_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components25_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components25_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components25_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components25_30.yaml:13-87
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components25_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components25_34.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'image-reflector-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components25_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'image-reflector-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components25_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components25_34.yaml:13-86
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: image-reflector-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment image-reflector-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components25_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components25_37.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'image-automation-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components25_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'image-automation-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components25_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components25_37.yaml:13-82
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: image-automation-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment image-automation-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components25_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components25_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components25_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components25_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components25_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components25_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components25_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components25_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components25_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components25_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components25_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components25_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components25_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components25_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components25_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components25_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components25_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.2.2
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components26_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components26_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components26_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components26_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components26_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components26_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components26_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components26_17.yaml:13-96
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components26_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components26_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components26_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components26_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components26_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components26_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components26_20.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components26_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components26_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components26_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components26_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components26_23.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components26_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components26_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components26_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components26_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components26_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components26_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components26_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components26_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components26_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components26_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components26_30.yaml:13-87
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components26_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components26_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components26_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components26_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components26_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components26_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components26_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components26_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components26_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components26_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components26_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components26_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components26_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components26_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components26_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components26_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components26_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.0.0-rc.5
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components27_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components27_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components27_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components27_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components27_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components27_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components27_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components27_17.yaml:13-96
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components27_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components27_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components27_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components27_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components27_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components27_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components27_20.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components27_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components27_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components27_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components27_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components27_23.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components27_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components27_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components27_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components27_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components27_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components27_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components27_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components27_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components27_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components27_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components27_30.yaml:13-87
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components27_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components27_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components27_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components27_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components27_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components27_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components27_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components27_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components27_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components27_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components27_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components27_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components27_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components27_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components27_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components27_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components27_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.0.0-rc.5
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components28_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components28_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components28_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components28_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components28_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components28_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components28_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components28_17.yaml:13-96
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components28_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components28_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components28_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components28_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components28_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components28_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components28_20.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components28_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components28_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components28_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components28_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components28_23.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components28_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components28_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components28_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components28_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components28_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components28_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components28_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components28_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components28_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components28_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components28_30.yaml:13-87
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components28_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components28_34.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'image-reflector-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components28_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'image-reflector-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components28_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components28_34.yaml:13-86
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: image-reflector-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment image-reflector-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components28_34.yaml:26-75
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components28_37.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'image-automation-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components28_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'image-automation-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components28_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components28_37.yaml:13-82
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: image-automation-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment image-automation-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components28_37.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components28_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components28_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components28_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components28_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components28_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components28_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components28_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components28_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components28_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components28_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components28_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components28_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components28_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components28_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components28_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components28_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.0.0-rc.5
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components29_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components29_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components29_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components29_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components29_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components29_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components29_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components29_17.yaml:13-106
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components29_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components29_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components29_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components29_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components29_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components29_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components29_20.yaml:13-93
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components29_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components29_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components29_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components29_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components29_23.yaml:13-93
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components29_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components29_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components29_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components29_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components29_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components29_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components29_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components29_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components29_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components29_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components29_30.yaml:13-97
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components29_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components29_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components29_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components29_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components29_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components29_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components29_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components29_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components29_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components29_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components29_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components29_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components29_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components29_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components29_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components29_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components29_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.5.1
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components2_1.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components2_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components2_16.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components2_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components2_17.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components2_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components2_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components2_17.yaml:13-106
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components2_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components2_2.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components2_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components2_20.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components2_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components2_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components2_20.yaml:13-93
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components2_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components2_23.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components2_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components2_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components2_23.yaml:13-93
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components2_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components2_28.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components2_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components2_29.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components2_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components2_3.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components2_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components2_30.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components2_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components2_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components2_30.yaml:13-97
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components2_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components2_34.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'image-reflector-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components2_34.yaml:26-85
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'image-reflector-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components2_34.yaml:26-85
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components2_34.yaml:13-96
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: image-reflector-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment image-reflector-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components2_34.yaml:26-85
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components2_37.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'image-automation-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components2_37.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'image-automation-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components2_37.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components2_37.yaml:13-92
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: image-automation-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment image-automation-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components2_37.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components2_4.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components2_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components2_5.yaml (kubernetes)
====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components2_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components2_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components2_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components2_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components2_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components2_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components2_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components2_6.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components2_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components2_7.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components2_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components2_8.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components2_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.5.1
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components30_14.yaml (kubernetes)
======================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components30_14.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components30_14.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components30_14.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components30_14.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components30_14.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components30_14.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components30_14.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components30_15.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components30_15.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v0.31.5
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components30_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components30_17.yaml:12-19
────────────────────────────────────────
  12 ┌   ports:
  13 │   - name: http
  14 │     port: 80
  15 │     protocol: TCP
  16 │     targetPort: http
  17 │   selector:
  18 │     app: notification-controller
  19 └   type: ClusterIP
────────────────────────────────────────



gotk-components30_18.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components30_18.yaml:12-19
────────────────────────────────────────
  12 ┌   ports:
  13 │   - name: http
  14 │     port: 80
  15 │     protocol: TCP
  16 │     targetPort: http
  17 │   selector:
  18 │     app: source-controller
  19 └   type: ClusterIP
────────────────────────────────────────



gotk-components30_19.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components30_19.yaml:12-19
────────────────────────────────────────
  12 ┌   ports:
  13 │   - name: http
  14 │     port: 80
  15 │     protocol: TCP
  16 │     targetPort: http-webhook
  17 │   selector:
  18 │     app: notification-controller
  19 └   type: ClusterIP
────────────────────────────────────────



gotk-components30_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components30_20.yaml:25-72
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components30_20.yaml:25-72
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components30_20.yaml:12-81
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       app: helm-controller
  16 │   template:
  17 │     metadata:
  18 │       annotations:
  19 │         prometheus.io/port: '8080'
  20 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components30_20.yaml:25-72
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components30_21.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components30_21.yaml:25-72
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components30_21.yaml:25-72
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components30_21.yaml:12-81
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       app: kustomize-controller
  16 │   template:
  17 │     metadata:
  18 │       annotations:
  19 │         prometheus.io/port: '8080'
  20 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components30_21.yaml:25-72
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components30_22.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components30_22.yaml:25-77
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --watch-all-namespaces=true
  27 │         - --log-level=info
  28 │         - --log-encoding=json
  29 │         - --enable-leader-election
  30 │         env:
  31 │         - name: RUNTIME_NAMESPACE
  32 │           valueFrom:
  33 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components30_22.yaml:25-77
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --watch-all-namespaces=true
  27 │         - --log-level=info
  28 │         - --log-encoding=json
  29 │         - --enable-leader-election
  30 │         env:
  31 │         - name: RUNTIME_NAMESPACE
  32 │           valueFrom:
  33 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components30_22.yaml:12-86
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       app: notification-controller
  16 │   template:
  17 │     metadata:
  18 │       annotations:
  19 │         prometheus.io/port: '8080'
  20 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components30_22.yaml:25-77
────────────────────────────────────────
  25 ┌       - args:
  26 │         - --watch-all-namespaces=true
  27 │         - --log-level=info
  28 │         - --log-encoding=json
  29 │         - --enable-leader-election
  30 │         env:
  31 │         - name: RUNTIME_NAMESPACE
  32 │           valueFrom:
  33 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components30_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components30_23.yaml:27-81
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  29 │         - --watch-all-namespaces=true
  30 │         - --log-level=info
  31 │         - --log-encoding=json
  32 │         - --enable-leader-election
  33 │         - --storage-path=/data
  34 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  35 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components30_23.yaml:27-81
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  29 │         - --watch-all-namespaces=true
  30 │         - --log-level=info
  31 │         - --log-encoding=json
  32 │         - --enable-leader-election
  33 │         - --storage-path=/data
  34 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  35 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components30_23.yaml:12-92
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       app: source-controller
  16 │   strategy:
  17 │     type: Recreate
  18 │   template:
  19 │     metadata:
  20 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components30_23.yaml:27-81
────────────────────────────────────────
  27 ┌       - args:
  28 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  29 │         - --watch-all-namespaces=true
  30 │         - --log-level=info
  31 │         - --log-encoding=json
  32 │         - --enable-leader-election
  33 │         - --storage-path=/data
  34 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  35 └         env:
  ..   
────────────────────────────────────────



gotk-components30_24.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components30_24.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components30_25.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components30_25.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components30_26.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components30_26.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components31_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components31_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components31_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components31_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components31_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components31_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components31_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components31_17.yaml:13-96
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components31_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components31_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components31_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components31_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components31_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components31_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components31_20.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components31_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components31_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components31_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components31_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components31_23.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components31_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components31_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components31_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components31_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components31_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components31_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components31_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components31_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components31_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components31_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components31_30.yaml:13-87
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components31_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components31_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components31_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components31_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components31_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components31_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components31_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components31_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components31_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components31_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components31_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components31_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components31_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components31_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components31_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components31_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components31_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.2.2
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components32_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components32_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components32_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components32_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components32_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components32_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components32_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components32_17.yaml:13-96
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components32_17.yaml:28-84
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components32_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components32_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components32_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components32_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components32_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components32_20.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components32_20.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components32_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components32_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components32_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components32_23.yaml:13-83
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components32_23.yaml:26-73
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components32_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components32_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components32_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components32_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components32_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components32_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components32_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components32_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components32_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components32_30.yaml:13-87
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components32_30.yaml:26-78
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components32_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components32_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components32_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components32_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components32_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components32_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components32_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components32_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components32_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components32_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components32_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components32_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components32_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components32_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components32_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components32_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.2.2
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components33_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components33_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components33_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components33_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components33_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components33_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components33_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components33_17.yaml:13-106
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components33_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components33_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components33_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components33_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components33_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components33_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components33_20.yaml:13-93
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components33_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components33_23.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components33_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'helm-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components33_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components33_23.yaml:13-93
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: helm-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment helm-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components33_23.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────



gotk-components33_28.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components33_28.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components33_29.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components33_29.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http-webhook
  18 │   selector:
  19 │     app: notification-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components33_3.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components33_3.yaml:11-18
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │   podSelector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   policyTypes:
  18 └   - Ingress
────────────────────────────────────────



gotk-components33_30.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components33_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'notification-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components33_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components33_30.yaml:13-97
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: notification-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment notification-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components33_30.yaml:26-88
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --watch-all-namespaces=true
  28 │         - --log-level=info
  29 │         - --log-encoding=json
  30 │         - --enable-leader-election
  31 │         env:
  32 │         - name: RUNTIME_NAMESPACE
  33 │           valueFrom:
  34 └             fieldRef:
  ..   
────────────────────────────────────────



gotk-components33_4.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components33_4.yaml:12
────────────────────────────────────────
  12 [     pods: '1000'
────────────────────────────────────────



gotk-components33_5.yaml (kubernetes)
=====================================
Tests: 117 (SUCCESSES: 110, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 6)

AVD-KSV-0041 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 gotk-components33_5.yaml:40-50
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - namespaces
  44 │   - secrets
  45 │   - configmaps
  46 │   - serviceaccounts
  47 │   verbs:
  48 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components33_5.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - source.toolkit.fluxcd.io
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components33_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components33_5.yaml:22-27
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - helm.toolkit.fluxcd.io
  24 │   resources:
  25 │   - '*'
  26 │   verbs:
  27 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components33_5.yaml:28-33
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - notification.toolkit.fluxcd.io
  30 │   resources:
  31 │   - '*'
  32 │   verbs:
  33 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'crd-controller-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components33_5.yaml:34-39
────────────────────────────────────────
  34 ┌ - apiGroups:
  35 │   - image.toolkit.fluxcd.io
  36 │   resources:
  37 │   - '*'
  38 │   verbs:
  39 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'crd-controller-flux-system' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 gotk-components33_5.yaml:58-69
────────────────────────────────────────
  58 ┌ - apiGroups:
  59 │   - ''
  60 │   resources:
  61 │   - configmaps
  62 │   verbs:
  63 │   - get
  64 │   - list
  65 │   - watch
  66 └   - create
  ..   
────────────────────────────────────────



gotk-components33_6.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-edit-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components33_6.yaml:12-25
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - notification.toolkit.fluxcd.io
  14 │   - source.toolkit.fluxcd.io
  15 │   - helm.toolkit.fluxcd.io
  16 │   - image.toolkit.fluxcd.io
  17 │   - kustomize.toolkit.fluxcd.io
  18 │   resources:
  19 │   - '*'
  20 └   verbs:
  ..   
────────────────────────────────────────



gotk-components33_7.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view-flux-system' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 gotk-components33_7.yaml:13-24
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - notification.toolkit.fluxcd.io
  15 │   - source.toolkit.fluxcd.io
  16 │   - helm.toolkit.fluxcd.io
  17 │   - image.toolkit.fluxcd.io
  18 │   - kustomize.toolkit.fluxcd.io
  19 │   resources:
  20 │   - '*'
  21 └   verbs:
  ..   
────────────────────────────────────────



gotk-components33_8.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-reconciler-flux-system' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 gotk-components33_8.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/instance: flux-system
   6 │     app.kubernetes.io/part-of: flux
   7 │     app.kubernetes.io/version: v2.3.0
   8 └   name: cluster-reconciler-flux-system
────────────────────────────────────────



gotk-components34_1.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components34_1.yaml:11-19
────────────────────────────────────────
  11 ┌   egress:
  12 │   - {}
  13 │   ingress:
  14 │   - from:
  15 │     - podSelector: {}
  16 │   podSelector: {}
  17 │   policyTypes:
  18 │   - Ingress
  19 └   - Egress
────────────────────────────────────────



gotk-components34_16.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components34_16.yaml:13-20
────────────────────────────────────────
  13 ┌   ports:
  14 │   - name: http
  15 │     port: 80
  16 │     protocol: TCP
  17 │     targetPort: http
  18 │   selector:
  19 │     app: source-controller
  20 └   type: ClusterIP
────────────────────────────────────────



gotk-components34_17.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components34_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'source-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components34_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components34_17.yaml:13-106
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: source-controller
  17 │   strategy:
  18 │     type: Recreate
  19 │   template:
  20 │     metadata:
  21 └       annotations:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment source-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components34_17.yaml:28-94
────────────────────────────────────────
  28 ┌       - args:
  29 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  30 │         - --watch-all-namespaces=true
  31 │         - --log-level=info
  32 │         - --log-encoding=json
  33 │         - --enable-leader-election
  34 │         - --storage-path=/data
  35 │         - --storage-adv-addr=source-controller.$(RUNTIME_NAMESPACE).svc.cluster.local.
  36 └         env:
  ..   
────────────────────────────────────────



gotk-components34_2.yaml (kubernetes)
=====================================
Tests: 113 (SUCCESSES: 112, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components34_2.yaml:11-19
────────────────────────────────────────
  11 ┌   ingress:
  12 │   - from:
  13 │     - namespaceSelector: {}
  14 │     ports:
  15 │     - port: 8080
  16 │       protocol: TCP
  17 │   podSelector: {}
  18 │   policyTypes:
  19 └   - Ingress
────────────────────────────────────────



gotk-components34_20.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 109, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 3, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 gotk-components34_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'kustomize-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 gotk-components34_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0040 (LOW): A resource quota policy with hard memory and CPU limits should be configured per namespace
════════════════════════════════════════
Ensure that a ResourceQuota policy is configured to limit aggregate resource usage within a namespace

See https://avd.aquasec.com/misconfig/ksv040
────────────────────────────────────────
 gotk-components34_20.yaml:13-93
────────────────────────────────────────
  13 ┌   replicas: 1
  14 │   selector:
  15 │     matchLabels:
  16 │       app: kustomize-controller
  17 │   template:
  18 │     metadata:
  19 │       annotations:
  20 │         prometheus.io/port: '8080'
  21 └         prometheus.io/scrape: 'true'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment kustomize-controller (namespace: flux-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 gotk-components34_20.yaml:26-83
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --events-addr=http://notification-controller.flux-system.svc.cluster.local./
  28 │         - --watch-all-namespaces=true
  29 │         - --log-level=info
  30 │         - --log-encoding=json
  31 │         - --enable-leader-election
  32 │         env:
  33 │         - name: RUNTIME_NAMESPACE
  34 └           valueFrom:
  ..   
────────────────────────────────────────


