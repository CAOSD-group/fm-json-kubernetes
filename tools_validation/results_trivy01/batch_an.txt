
Report Summary

┌───────────────────────────────────────────────────────────────────────────────┬────────────┬───────────────────┐
│                                    Target                                     │    Type    │ Misconfigurations │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ AdmissionWebhook.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adminRole.yaml                                                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adminRole_1.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_1.yaml                                                                  │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_component-render_manifest.golden.yaml                                   │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_component-render_manifest.golden_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_component-render_manifest.golden_2.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_component-render_manifest.golden_3.yaml                                 │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_component-render_manifest.golden_5.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_component-render_manifest.golden_6.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_component-render_manifest.golden_7.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_component-render_manifest.golden_8.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_component-render_manifest.golden_9.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_rbac.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_rbac_1.yaml                                                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_rbac_2.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_rbac_3.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_rbac_4.yaml                                                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_rbac_5.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_role_binding.yaml                                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_role_binding1.yaml                                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_service_account.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_service_account1.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_user.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_user1.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_user1_1.yaml                                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admin_user_1.yaml                                                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adminer9_1.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adminer_1.yaml                                                                │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adminer_deployment.yaml                                                       │ kubernetes │        15         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adminer_service.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ administrator-cluster-role-binding.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ administrator-cluster-role.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ administrator.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ administrator_1.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ administrator_2.yaml                                                          │ kubernetes │        31         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ administrator_3.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admins.yaml                                                                   │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adminuser.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adminuser1.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-controller-deployment.yaml                                          │ kubernetes │        10         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-controller-deployment1.yaml                                         │ kubernetes │        10         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-controller-deployment1_1.yaml                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-controller-deployment2.yaml                                         │ kubernetes │        10         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-controller-deployment2_1.yaml                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-controller-deployment_1.yaml                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-controller.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-controller1.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-controller1_1.yaml                                                  │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-controller1_2.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-controller1_3.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-controller1_4.yaml                                                  │ kubernetes │        33         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-controller2.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-controller2_1.yaml                                                  │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-controller2_2.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-controller_1.yaml                                                   │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-controller_2.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-controller_3.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-controller_4.yaml                                                   │ kubernetes │        33         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-service-account.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-service-account1.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-service-account1_1.yaml                                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-service-account1_2.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-service-account1_3.yaml                                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-service-account1_4.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-service-account_1.yaml                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-service-account_2.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-service-account_3.yaml                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-service-account_4.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-service.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook1.yaml                                                       │ kubernetes │        10         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook1_1.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook1_2.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook1_3.yaml                                                     │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook1_4.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook1_5.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook2.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook2_1.yaml                                                     │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook4.yaml                                                       │ kubernetes │        10         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook4_1.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook4_2.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook4_3.yaml                                                     │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook4_4.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook4_5.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook5.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook5_1.yaml                                                     │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook6.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook6_1.yaml                                                     │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook7.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook7_1.yaml                                                     │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook8.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook8_1.yaml                                                     │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admission-webhook9.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration.yaml             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration1.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration10.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration11.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration12.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration13.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration14.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration15.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration16.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration17.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration18.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration19.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration20.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration21.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration22.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration23.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration24.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration25.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration26.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration27.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration28.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration29.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration3.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration30.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration31.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration32.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration33.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration37.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration38.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration39.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration4.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration40.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration41.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration42.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration43.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration44.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration45.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration46.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration47.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration48.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration49.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration5.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration50.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration51.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration52.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration53.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration54.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration6.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration7.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration8.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.MutatingWebhookConfiguration9.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingAdmissionPolicy.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingAdmissionPolicy1.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingAdmissionPolicy2.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingAdmissionPolicy3.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingAdmissionPolicy4.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingAdmissionPolicy5.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingAdmissionPolicy6.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingAdmissionPolicy7.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingAdmissionPolicy8.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingAdmissionPolicy9.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingAdmissionPolicyBinding.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingAdmissionPolicyBinding1.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingAdmissionPolicyBinding2.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingAdmissionPolicyBinding3.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingAdmissionPolicyBinding4.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingAdmissionPolicyBinding5.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingAdmissionPolicyBinding6.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingAdmissionPolicyBinding7.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingAdmissionPolicyBinding8.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingAdmissionPolicyBinding9.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration1.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration10.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration11.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration12.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration13.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration14.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration15.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration16.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration17.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration18.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration19.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration2.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration20.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration21.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration22.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration23.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration24.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration25.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration26.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration27.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration28.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration29.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration3.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration30.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration31.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration32.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration33.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration37.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration38.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration39.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration4.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration40.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration41.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration42.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration43.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration44.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration45.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration46.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration47.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration48.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration49.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration5.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration50.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration51.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration52.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration53.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration54.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration6.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration7.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration8.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1.ValidatingWebhookConfiguration9.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy1.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy10.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy11.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy12.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy13.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy14.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy15.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy16.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy17.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy19.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy2.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy20.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy21.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy22.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy23.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy24.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy25.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy26.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy27.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy28.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy29.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy3.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy30.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy31.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy32.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy33.yaml        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy4.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy5.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy6.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy7.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy8.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicy9.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding1.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding10.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding11.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding12.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding13.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding14.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding15.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding16.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding17.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding19.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding2.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding20.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding21.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding22.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding23.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding24.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding25.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding26.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding27.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding28.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding29.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding3.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding30.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding31.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding32.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding33.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding4.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding5.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding6.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding7.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding8.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1alpha1.ValidatingAdmissionPolicyBinding9.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy1.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy10.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy11.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy12.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy13.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy14.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy15.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy16.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy17.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy18.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy19.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy2.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy20.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy21.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy22.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy23.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy24.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy25.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy26.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy27.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy28.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy29.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy3.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy30.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy4.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy5.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy6.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy7.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy8.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicy9.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding.yaml    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding1.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding10.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding11.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding12.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding13.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding14.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding15.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding16.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding17.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding18.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding19.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding2.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding20.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding21.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding22.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding23.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding24.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding25.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding26.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding27.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding28.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding29.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding3.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding30.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding4.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding5.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding6.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding7.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding8.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ admissionregistration.k8s.io.v1beta1.ValidatingAdmissionPolicyBinding9.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice-deployment.yaml                                                     │ kubernetes │        13         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice-service.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice1.yaml                                                               │ kubernetes │         6         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice10.yaml                                                              │ kubernetes │         6         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice10_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice11.yaml                                                              │ kubernetes │         5         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice11_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice13.yaml                                                              │ kubernetes │         6         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice13_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice14.yaml                                                              │ kubernetes │         5         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice14_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice15.yaml                                                              │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice15_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice17.yaml                                                              │ kubernetes │         6         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice17_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice18.yaml                                                              │ kubernetes │         5         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice18_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice19.yaml                                                              │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice19_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice1_1.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice2.yaml                                                               │ kubernetes │         5         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice20.yaml                                                              │ kubernetes │        13         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice20_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice22.yaml                                                              │ kubernetes │         6         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice22_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice23.yaml                                                              │ kubernetes │         5         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice23_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice24.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice24_1.yaml                                                            │ kubernetes │        14         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice24_2.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice26.yaml                                                              │ kubernetes │         6         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice26_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice27.yaml                                                              │ kubernetes │         5         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice27_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice29.yaml                                                              │ kubernetes │         6         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice29_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice29_2.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice2_1.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice30.yaml                                                              │ kubernetes │         5         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice30_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice30_2.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice31.yaml                                                              │ kubernetes │         5         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice31_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice31_2.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice4.yaml                                                               │ kubernetes │         6         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice4_1.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice5.yaml                                                               │ kubernetes │         5         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice5_1.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice7.yaml                                                               │ kubernetes │         6         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice7_1.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice8.yaml                                                               │ kubernetes │         5         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ adservice8_1.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ advanced-liveness.yaml                                                        │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ advanced-pod.yaml                                                             │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aegle-wildcard-secret.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aeraki-bootstrap-config.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aeraki.yaml                                                                   │ kubernetes │        12         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aeraki_1.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aeraki_2.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aeraki_3.yaml                                                                 │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aeraki_4.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aeraki_5.yaml                                                                 │ kubernetes │         6         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aeraki_6.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ affine.yaml                                                                   │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ affine_1.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ affine_2.yaml                                                                 │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ affine_3.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ affine_4.yaml                                                                 │ kubernetes │        16         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ affine_5.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ affinity-2.yaml                                                               │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ affinity-p.yaml                                                               │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ affinity.yaml                                                                 │ kubernetes │        16         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ affinity1.yaml                                                                │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ affinity2.yaml                                                                │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ affinity3.yaml                                                                │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ affinity4.yaml                                                                │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ affinity5.yaml                                                                │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ affinityPreferred.yaml                                                        │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ affinityRequired.yaml                                                         │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ afterFix.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ afterFix1.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ afterFix1_1.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ afterFix1_2.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ afterFix1_3.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ afterFix1_4.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ afterFix1_5.yaml                                                              │ kubernetes │        13         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ afterFix1_6.yaml                                                              │ kubernetes │        12         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ afterFix1_7.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ afterFix1_8.yaml                                                              │ kubernetes │        14         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ afterFix_1.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ afterFix_2.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ afterFix_3.yaml                                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ afterFix_4.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ afterFix_5.yaml                                                               │ kubernetes │        13         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ afterFix_6.yaml                                                               │ kubernetes │        12         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ afterFix_7.yaml                                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ afterFix_8.yaml                                                               │ kubernetes │        14         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ag1-primary-svc.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ag2-primary-svc.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ age-key.secret.sops.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ age-key.secret.sops1.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ age-key.secret.sops2.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ age-key.secret.sops3.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ age-key.sops.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ age-key.sops1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agent-dep.yaml                                                                │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agent-dep_1.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agent-deploy.yaml                                                             │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agent-service.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agent2_2.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agent2_3.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agent2_4.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agent2_5.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agent2_6.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agent2_7.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agent5.yaml                                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agent5_1.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agent5_2.yaml                                                                 │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agent5_3.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agent5_4.yaml                                                                 │ kubernetes │        44         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agent6.yaml                                                                   │ kubernetes │        10         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregated-metrics-reader.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregated-metrics-reader1.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregated-metrics-reader10.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregated-metrics-reader11.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregated-metrics-reader2.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregated-metrics-reader3.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregated-metrics-reader4.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregated-metrics-reader5.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregated-metrics-reader6.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregated-metrics-reader7.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregated-metrics-reader8.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregated-metrics-reader9.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregator-assert.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregator-assert1.yaml                                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregator-assert1_1.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregator-assert_1.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregator-assert_2.yaml                                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregator-assert_3.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregator-deployment.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregator-deployment_1.yaml                                                  │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregator-deployment_2.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregator.yaml                                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregator1.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregator1_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregator1_2.yaml                                                            │ kubernetes │        14         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregator1_3.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregator_1.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregator_2.yaml                                                             │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aggregator_3.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agify_Deployment.yaml                                                         │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agify_Service.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-master-pod.yaml                                                       │ kubernetes │        31         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-master-service.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-pod.yaml                                                      │ kubernetes │        33         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-pod1.yaml                                                     │ kubernetes │        33         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-pod11.yaml                                                    │ kubernetes │        31         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-pod12.yaml                                                    │ kubernetes │        33         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-pod13.yaml                                                    │ kubernetes │        33         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-pod14.yaml                                                    │ kubernetes │        33         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-pod15.yaml                                                    │ kubernetes │        33         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-pod16.yaml                                                    │ kubernetes │        33         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-pod2.yaml                                                     │ kubernetes │        33         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-pod3.yaml                                                     │ kubernetes │        33         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-pod4.yaml                                                     │ kubernetes │        31         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-pod5.yaml                                                     │ kubernetes │        33         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-pod6.yaml                                                     │ kubernetes │        33         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-pod7.yaml                                                     │ kubernetes │        31         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-pod8.yaml                                                     │ kubernetes │        33         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-pod9.yaml                                                     │ kubernetes │        33         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-service.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-service1.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-service11.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-service12.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-service13.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-service14.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-service15.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-service16.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-service2.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-service3.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-service4.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-service5.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-service6.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-service7.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-service8.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-primary-service9.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-replica-service.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-replica-service1.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-replica-service11.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-replica-service12.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-replica-service13.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-replica-service14.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-replica-service15.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-replica-service16.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-replica-service2.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-replica-service3.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-replica-service4.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-replica-service5.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-replica-service6.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-replica-service7.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-replica-service8.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-replica-service9.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost-slave-service.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost.yaml                                                                  │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost1.yaml                                                                 │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost1_1.yaml                                                               │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost1_2.yaml                                                               │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost_1.yaml                                                                │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ agnhost_2.yaml                                                                │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ai-service-v2.yaml                                                            │ kubernetes │        14         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ai-service-v2_1.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ai-testing-api.yaml                                                           │ kubernetes │        15         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ai-testing-api_1.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ai-testing-ui.yaml                                                            │ kubernetes │        15         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ai-testing-ui_1.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ai-testing-ui_2.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aideployment_editor_role.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aideployment_viewer_role.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aigateway.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aigateway_editor_role.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aigateway_viewer_role.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ailab-ingress.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ailab-ingress1.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ailab-ingress1_1.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ailab-ingress_1.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aimodelmap_editor_role.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aimodelmap_viewer_role.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aio-recommended-v2.7.0.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aio-recommended-v2.7.0_1.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aio-recommended-v2.7.0_10.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aio-recommended-v2.7.0_11.yaml                                                │ kubernetes │        11         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aio-recommended-v2.7.0_12.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aio-recommended-v2.7.0_13.yaml                                                │ kubernetes │        11         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aio-recommended-v2.7.0_2.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aio-recommended-v2.7.0_3.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aio-recommended-v2.7.0_4.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aio-recommended-v2.7.0_5.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aio-recommended-v2.7.0_6.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aio-recommended-v2.7.0_7.yaml                                                 │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aio-recommended-v2.7.0_8.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aio-recommended-v2.7.0_9.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airbyte-ingress.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-config1.yaml                                                          │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-configmap.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-database.yaml                                                         │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-database1.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-database2.yaml                                                        │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-database3.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-deployment.yaml                                                       │ kubernetes │        33         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-flower.yaml                                                           │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-flower1.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-flower2.yaml                                                          │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-flower3.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-ingress.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-logs-pvc.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-rbac.yaml                                                             │ kubernetes │         3         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-rbac_1.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-redis.yaml                                                            │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-redis1.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-redis2.yaml                                                           │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-redis3.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-scheduler.yaml                                                        │ kubernetes │        15         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-scheduler1.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-scheduler2.yaml                                                       │ kubernetes │        15         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-scheduler3.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-secret.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-service.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-webserver.yaml                                                        │ kubernetes │        15         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-webserver2.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-webserver3.yaml                                                       │ kubernetes │        15         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-webserver5.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-worker.yaml                                                           │ kubernetes │        15         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-worker1.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-worker2.yaml                                                          │ kubernetes │        15         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow-worker3.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow.yaml                                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow1.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow1_1.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow1_2.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow3.yaml                                                                 │ kubernetes │        50         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow3_1.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow_1.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflow_2.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflowcluster_editor_role.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airflowcluster_viewer_role.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airsonic1.yaml                                                                │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ airsonic1_1.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akeyless-credentials-secret.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akeyless-creds.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akhikachmoney-deploy-secret.yaml                                              │ kubernetes │        14         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akhikachmoney-deploy.yaml                                                     │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akhikachmoney-ingress.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akhikachmoney-job.yaml                                                        │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akhikachmoney-secret.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akhikachmoney-service.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akri-anomaly-detection-app.yaml                                               │ kubernetes │        11         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akri-anomaly-detection-app_1.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akri-video-streaming-app.yaml                                                 │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akri-video-streaming-app1.yaml                                                │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akri-video-streaming-app1_1.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akri-video-streaming-app1_2.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akri-video-streaming-app1_3.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akri-video-streaming-app1_4.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akri-video-streaming-app2.yaml                                                │ kubernetes │        11         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akri-video-streaming-app2_1.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akri-video-streaming-app2_2.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akri-video-streaming-app2_3.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akri-video-streaming-app2_4.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akri-video-streaming-app_1.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akri-video-streaming-app_2.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akri-video-streaming-app_3.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ akri-video-streaming-app_4.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy-from-acr.yaml                                                      │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy-from-acr1.yaml                                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy-from-acr1_1.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy-from-acr2.yaml                                                     │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy-from-acr2_1.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy-from-acr_1.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy1.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy1_1.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy1_10.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy1_11.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy1_12.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy1_13.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy1_14.yaml                                                           │ kubernetes │         9         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy1_15.yaml                                                           │ kubernetes │         7         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy1_16.yaml                                                           │ kubernetes │         7         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy1_17.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy1_18.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy1_2.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy1_3.yaml                                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy1_4.yaml                                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy1_5.yaml                                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy1_6.yaml                                                            │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy1_7.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy1_8.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy1_9.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy_1.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy_10.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy_11.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy_12.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy_13.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy_14.yaml                                                            │ kubernetes │         9         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy_15.yaml                                                            │ kubernetes │         7         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy_16.yaml                                                            │ kubernetes │         7         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy_17.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy_18.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy_2.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy_3.yaml                                                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy_4.yaml                                                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy_5.yaml                                                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy_6.yaml                                                             │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy_7.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy_8.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-deploy_9.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-one.yaml                                                       │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-one1.yaml                                                      │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-one1_1.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-one2.yaml                                                      │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-one2_1.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-one4.yaml                                                      │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-one4_1.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-one5.yaml                                                      │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-one5_1.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-one6.yaml                                                      │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-one6_1.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-one_1.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-two.yaml                                                       │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-two1.yaml                                                      │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-two1_1.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-two2.yaml                                                      │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-two2_1.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-two4.yaml                                                      │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-two4_1.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-two5.yaml                                                      │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-two5_1.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-two6.yaml                                                      │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-two6_1.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-helloworld-two_1.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart.yaml                                                     │ kubernetes │        14         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart1.yaml                                                    │ kubernetes │        14         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart1_1.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart1_2.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart1_3.yaml                                                  │ kubernetes │        27         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart1_4.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart1_5.yaml                                                  │ kubernetes │        15         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart1_6.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart1_7.yaml                                                  │ kubernetes │        15         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart1_8.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart2.yaml                                                    │ kubernetes │        14         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart2_1.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart2_2.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart2_3.yaml                                                  │ kubernetes │        27         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart2_4.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart2_5.yaml                                                  │ kubernetes │        15         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart2_6.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart2_7.yaml                                                  │ kubernetes │        15         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart2_8.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart_1.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart_2.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart_3.yaml                                                   │ kubernetes │        27         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart_4.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart_5.yaml                                                   │ kubernetes │        15         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart_6.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart_7.yaml                                                   │ kubernetes │        15         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aks-store-quickstart_8.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aksrbac-clusteradmin.yaml                                                     │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aksrbac-viewdefault.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ aksrbac-viewdefault_1.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ al-nafi-dev.yaml                                                              │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ al-nafi-prod.yaml                                                             │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ al2023.yaml                                                                   │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alb-ing.yaml                                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alb-ingress-basics.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alb-ingress-basics1.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alb-ingress-class.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alb-ingress.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alb-ingress1.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alb-ingress3.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alb-ingress4.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alb-ingress5.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alb_ingress_controller.yaml                                                   │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alb_ingress_controller1.yaml                                                  │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alert-config.yaml                                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alert-deployment.yaml                                                         │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alert-deployment1.yaml                                                        │ kubernetes │        14         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alert-manager.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alert-service.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertM-config.yaml                                                            │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertM-deployment.yaml                                                        │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertM-service.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertcontact_editor_role.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertcontact_viewer_role.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertmanager-base.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertmanager-base_1.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertmanager-base_2.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertmanager-config4.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertmanager-configmap.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertmanager-configmap4.yaml                                                  │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertmanager-cr-svc.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertmanager-dep.yaml                                                         │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertmanager-dep1.yaml                                                        │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertmanager-dep2.yaml                                                        │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertmanager-deployment.yaml                                                  │ kubernetes │        23         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertmanager-deployment1.yaml                                                 │ kubernetes │        23         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertmanager-deployment1_1.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertmanager-deployment2.yaml                                                 │ kubernetes │        26         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertmanager-deployment4.yaml                                                 │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertmanager-deployment4_1.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertmanager-deployment_1.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertmanager-ingress.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertmanager-ingress1.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ alertmanager-ingress1_2.yaml                                                  │ kubernetes │         0         │
└───────────────────────────────────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


adminRole.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0112 (CRITICAL): Role 'admin-role' shouldn't manage all resources at the namespace 'roboshop'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 adminRole.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroup:
   8 │   - '*'
   9 │   resources:
  10 │   - '*'
  11 │   verbs:
  12 └   - '*'
────────────────────────────────────────



admin_1.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 admin_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: admin-user
   5 │   annotations:
   6 └     rbac.authorization.kubernetes.io/autoupdate: 'true'
────────────────────────────────────────



admin_component-render_manifest.golden.yaml (kubernetes)
========================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'admin-dubbo-admin-clusterrole' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 admin_component-render_manifest.golden.yaml:12-21
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - secrets
  17 │   - pods
  18 │   verbs:
  19 │   - get
  20 │   - watch
  21 └   - list
────────────────────────────────────────



admin_component-render_manifest.golden_3.yaml (kubernetes)
==========================================================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'dubbo-admin' of Deployment 'admin-dubbo-admin' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 admin_component-render_manifest.golden_3.yaml:25-71
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: ADMIN_CONFIG_PATH
  27 │           value: /config/admin.yml
  28 │         image: apache/dubbo-admin:0.5.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'dubbo-admin' of Deployment 'admin-dubbo-admin' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 admin_component-render_manifest.golden_3.yaml:25-71
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: ADMIN_CONFIG_PATH
  27 │           value: /config/admin.yml
  28 │         image: apache/dubbo-admin:0.5.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dubbo-admin' of 'deployment' 'admin-dubbo-admin' in 'dubbo-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 admin_component-render_manifest.golden_3.yaml:25-71
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: ADMIN_CONFIG_PATH
  27 │           value: /config/admin.yml
  28 │         image: apache/dubbo-admin:0.5.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dubbo-admin' of Deployment 'admin-dubbo-admin' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 admin_component-render_manifest.golden_3.yaml:25-71
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: ADMIN_CONFIG_PATH
  27 │           value: /config/admin.yml
  28 │         image: apache/dubbo-admin:0.5.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dubbo-admin' of Deployment 'admin-dubbo-admin' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 admin_component-render_manifest.golden_3.yaml:25-71
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: ADMIN_CONFIG_PATH
  27 │           value: /config/admin.yml
  28 │         image: apache/dubbo-admin:0.5.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'dubbo-admin' of Deployment 'admin-dubbo-admin' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 admin_component-render_manifest.golden_3.yaml:25-71
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: ADMIN_CONFIG_PATH
  27 │           value: /config/admin.yml
  28 │         image: apache/dubbo-admin:0.5.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dubbo-admin' of Deployment 'admin-dubbo-admin' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 admin_component-render_manifest.golden_3.yaml:25-71
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: ADMIN_CONFIG_PATH
  27 │           value: /config/admin.yml
  28 │         image: apache/dubbo-admin:0.5.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dubbo-admin' of Deployment 'admin-dubbo-admin' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 admin_component-render_manifest.golden_3.yaml:25-71
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: ADMIN_CONFIG_PATH
  27 │           value: /config/admin.yml
  28 │         image: apache/dubbo-admin:0.5.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dubbo-admin' of Deployment 'admin-dubbo-admin' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 admin_component-render_manifest.golden_3.yaml:25-71
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: ADMIN_CONFIG_PATH
  27 │           value: /config/admin.yml
  28 │         image: apache/dubbo-admin:0.5.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dubbo-admin' of Deployment 'admin-dubbo-admin' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 admin_component-render_manifest.golden_3.yaml:25-71
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: ADMIN_CONFIG_PATH
  27 │           value: /config/admin.yml
  28 │         image: apache/dubbo-admin:0.5.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dubbo-admin' of Deployment 'admin-dubbo-admin' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 admin_component-render_manifest.golden_3.yaml:25-71
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: ADMIN_CONFIG_PATH
  27 │           value: /config/admin.yml
  28 │         image: apache/dubbo-admin:0.5.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 admin_component-render_manifest.golden_3.yaml:25-71
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: ADMIN_CONFIG_PATH
  27 │           value: /config/admin.yml
  28 │         image: apache/dubbo-admin:0.5.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dubbo-admin" of deployment "admin-dubbo-admin" in "dubbo-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 admin_component-render_manifest.golden_3.yaml:25-71
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: ADMIN_CONFIG_PATH
  27 │           value: /config/admin.yml
  28 │         image: apache/dubbo-admin:0.5.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 admin_component-render_manifest.golden_3.yaml:54-55
────────────────────────────────────────
  54 ┌           runAsNonRoot: false
  55 └           runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 admin_component-render_manifest.golden_3.yaml:25-71
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: ADMIN_CONFIG_PATH
  27 │           value: /config/admin.yml
  28 │         image: apache/dubbo-admin:0.5.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment admin-dubbo-admin in dubbo-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admin_component-render_manifest.golden_3.yaml:24-77
────────────────────────────────────────
  24 ┌       containers:
  25 │       - env:
  26 │         - name: ADMIN_CONFIG_PATH
  27 │           value: /config/admin.yml
  28 │         image: apache/dubbo-admin:0.5.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dubbo-admin in deployment admin-dubbo-admin (namespace: dubbo-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 admin_component-render_manifest.golden_3.yaml:25-71
────────────────────────────────────────
  25 ┌       - env:
  26 │         - name: ADMIN_CONFIG_PATH
  27 │           value: /config/admin.yml
  28 │         image: apache/dubbo-admin:0.5.0
  29 │         imagePullPolicy: IfNotPresent
  30 │         livenessProbe:
  31 │           failureThreshold: 3
  32 │           httpGet:
  33 └             path: /
  ..   
────────────────────────────────────────



admin_rbac_1.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'admin-role' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 admin_rbac_1.yaml:17-25
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 │   - get
  23 │   - list
  24 │   - watch
  25 └   - create
────────────────────────────────────────



admin_rbac_4.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'pipeline-worker-role' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 admin_rbac_4.yaml:17-22
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 └   - get
────────────────────────────────────────



admin_role_binding.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 admin_role_binding.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



admin_role_binding1.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 admin_role_binding1.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



admin_user1_1.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 admin_user1_1.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



admin_user_1.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 admin_user_1.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



adminer_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'adminer-web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 adminer_1.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: web
  16 │         image: adminer:4.7-standalone
  17 │         args:
  18 │         - php
  19 │         - -S
  20 │         - 0.0.0.0:8080
  21 │         - -t
  22 └         - /var/www/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'adminer-web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 adminer_1.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: web
  16 │         image: adminer:4.7-standalone
  17 │         args:
  18 │         - php
  19 │         - -S
  20 │         - 0.0.0.0:8080
  21 │         - -t
  22 └         - /var/www/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'adminer-web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 adminer_1.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: web
  16 │         image: adminer:4.7-standalone
  17 │         args:
  18 │         - php
  19 │         - -S
  20 │         - 0.0.0.0:8080
  21 │         - -t
  22 └         - /var/www/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'adminer-web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 adminer_1.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: web
  16 │         image: adminer:4.7-standalone
  17 │         args:
  18 │         - php
  19 │         - -S
  20 │         - 0.0.0.0:8080
  21 │         - -t
  22 └         - /var/www/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'adminer-web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 adminer_1.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: web
  16 │         image: adminer:4.7-standalone
  17 │         args:
  18 │         - php
  19 │         - -S
  20 │         - 0.0.0.0:8080
  21 │         - -t
  22 └         - /var/www/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'adminer-web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 adminer_1.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: web
  16 │         image: adminer:4.7-standalone
  17 │         args:
  18 │         - php
  19 │         - -S
  20 │         - 0.0.0.0:8080
  21 │         - -t
  22 └         - /var/www/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'adminer-web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 adminer_1.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: web
  16 │         image: adminer:4.7-standalone
  17 │         args:
  18 │         - php
  19 │         - -S
  20 │         - 0.0.0.0:8080
  21 │         - -t
  22 └         - /var/www/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'adminer-web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 adminer_1.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: web
  16 │         image: adminer:4.7-standalone
  17 │         args:
  18 │         - php
  19 │         - -S
  20 │         - 0.0.0.0:8080
  21 │         - -t
  22 └         - /var/www/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'adminer-web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 adminer_1.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: web
  16 │         image: adminer:4.7-standalone
  17 │         args:
  18 │         - php
  19 │         - -S
  20 │         - 0.0.0.0:8080
  21 │         - -t
  22 └         - /var/www/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'adminer-web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adminer_1.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: web
  16 │         image: adminer:4.7-standalone
  17 │         args:
  18 │         - php
  19 │         - -S
  20 │         - 0.0.0.0:8080
  21 │         - -t
  22 └         - /var/www/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'adminer-web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adminer_1.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: web
  16 │         image: adminer:4.7-standalone
  17 │         args:
  18 │         - php
  19 │         - -S
  20 │         - 0.0.0.0:8080
  21 │         - -t
  22 └         - /var/www/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adminer_1.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: web
  16 │         image: adminer:4.7-standalone
  17 │         args:
  18 │         - php
  19 │         - -S
  20 │         - 0.0.0.0:8080
  21 │         - -t
  22 └         - /var/www/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "adminer-web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adminer_1.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: web
  16 │         image: adminer:4.7-standalone
  17 │         args:
  18 │         - php
  19 │         - -S
  20 │         - 0.0.0.0:8080
  21 │         - -t
  22 └         - /var/www/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 adminer_1.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: web
  16 │         image: adminer:4.7-standalone
  17 │         args:
  18 │         - php
  19 │         - -S
  20 │         - 0.0.0.0:8080
  21 │         - -t
  22 └         - /var/www/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adminer-web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adminer_1.yaml:4
────────────────────────────────────────
   4 [   name: adminer-web
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adminer-web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 adminer_1.yaml:15-22
────────────────────────────────────────
  15 ┌       - name: web
  16 │         image: adminer:4.7-standalone
  17 │         args:
  18 │         - php
  19 │         - -S
  20 │         - 0.0.0.0:8080
  21 │         - -t
  22 └         - /var/www/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adminer-web in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 adminer_1.yaml:14-22
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: web
  16 │         image: adminer:4.7-standalone
  17 │         args:
  18 │         - php
  19 │         - -S
  20 │         - 0.0.0.0:8080
  21 │         - -t
  22 └         - /var/www/html
────────────────────────────────────────



adminer_deployment.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'adminer' of Deployment 'adminer' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 adminer_deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer:latest
  18 │         resources:
  19 │           limits:
  20 │             memory: "128Mi"
  21 │             cpu: "500m"
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'adminer' of Deployment 'adminer' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 adminer_deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer:latest
  18 │         resources:
  19 │           limits:
  20 │             memory: "128Mi"
  21 │             cpu: "500m"
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'adminer' of 'deployment' 'adminer' in 'adminer-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 adminer_deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer:latest
  18 │         resources:
  19 │           limits:
  20 │             memory: "128Mi"
  21 │             cpu: "500m"
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'adminer' of Deployment 'adminer' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 adminer_deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer:latest
  18 │         resources:
  19 │           limits:
  20 │             memory: "128Mi"
  21 │             cpu: "500m"
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'adminer' of Deployment 'adminer' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 adminer_deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer:latest
  18 │         resources:
  19 │           limits:
  20 │             memory: "128Mi"
  21 │             cpu: "500m"
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'adminer' of Deployment 'adminer' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 adminer_deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer:latest
  18 │         resources:
  19 │           limits:
  20 │             memory: "128Mi"
  21 │             cpu: "500m"
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'adminer' of Deployment 'adminer' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 adminer_deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer:latest
  18 │         resources:
  19 │           limits:
  20 │             memory: "128Mi"
  21 │             cpu: "500m"
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'adminer' of Deployment 'adminer' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 adminer_deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer:latest
  18 │         resources:
  19 │           limits:
  20 │             memory: "128Mi"
  21 │             cpu: "500m"
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'adminer' of Deployment 'adminer' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adminer_deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer:latest
  18 │         resources:
  19 │           limits:
  20 │             memory: "128Mi"
  21 │             cpu: "500m"
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'adminer' of Deployment 'adminer' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adminer_deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer:latest
  18 │         resources:
  19 │           limits:
  20 │             memory: "128Mi"
  21 │             cpu: "500m"
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adminer_deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer:latest
  18 │         resources:
  19 │           limits:
  20 │             memory: "128Mi"
  21 │             cpu: "500m"
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "adminer" of deployment "adminer" in "adminer-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adminer_deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer:latest
  18 │         resources:
  19 │           limits:
  20 │             memory: "128Mi"
  21 │             cpu: "500m"
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 adminer_deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer:latest
  18 │         resources:
  19 │           limits:
  20 │             memory: "128Mi"
  21 │             cpu: "500m"
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adminer in adminer-ns namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 adminer_deployment.yaml:16-23
────────────────────────────────────────
  16 ┌       - name: adminer
  17 │         image: adminer:latest
  18 │         resources:
  19 │           limits:
  20 │             memory: "128Mi"
  21 │             cpu: "500m"
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adminer in adminer-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 adminer_deployment.yaml:15-23
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: adminer
  17 │         image: adminer:latest
  18 │         resources:
  19 │           limits:
  20 │             memory: "128Mi"
  21 │             cpu: "500m"
  22 │         ports:
  23 └         - containerPort: 8080
────────────────────────────────────────



administrator_2.yaml (kubernetes)
=================================
Tests: 128 (SUCCESSES: 97, FAILURES: 31)
Failures: 31 (UNKNOWN: 0, LOW: 18, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container '${stackname}-da' of Deployment '${stackname}-da-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 administrator_2.yaml:40-53
────────────────────────────────────────
  40 ┌       - name: ${stackname}-da
  41 │         image: ${dm_da_image}
  42 │         resources:
  43 │           limits:
  44 │             cpu: 500m
  45 │             memory: 1000Mi
  46 │         envFrom:
  47 │         - secretRef:
  48 └             name: ${stackname}-da-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container '${stackname}-da-init' of Deployment '${stackname}-da-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 administrator_2.yaml:26-38
────────────────────────────────────────
  26 ┌       - name: ${stackname}-da-init
  27 │         image: alpine/k8s:1.29.4
  28 │         command:
  29 │         - sh
  30 │         - -c
  31 │         - "while true; do\n  ready=$(kubectl get pods -l app=${DOLLAR}DM_SERVER_NAME\
  32 │           \ -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c\
  33 │           \ true)\n  echo ${DOLLAR}ready pods ready\n  if  [ \"${DOLLAR}ready\" -gt\
  34 └           \ 0 ]; then\n    echo \"Starting deployment...\"\n    break\n  fi\n  echo\
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container '${stackname}-da' of Deployment '${stackname}-da-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 administrator_2.yaml:40-53
────────────────────────────────────────
  40 ┌       - name: ${stackname}-da
  41 │         image: ${dm_da_image}
  42 │         resources:
  43 │           limits:
  44 │             cpu: 500m
  45 │             memory: 1000Mi
  46 │         envFrom:
  47 │         - secretRef:
  48 └             name: ${stackname}-da-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container '${stackname}-da-init' of Deployment '${stackname}-da-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 administrator_2.yaml:26-38
────────────────────────────────────────
  26 ┌       - name: ${stackname}-da-init
  27 │         image: alpine/k8s:1.29.4
  28 │         command:
  29 │         - sh
  30 │         - -c
  31 │         - "while true; do\n  ready=$(kubectl get pods -l app=${DOLLAR}DM_SERVER_NAME\
  32 │           \ -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c\
  33 │           \ true)\n  echo ${DOLLAR}ready pods ready\n  if  [ \"${DOLLAR}ready\" -gt\
  34 └           \ 0 ]; then\n    echo \"Starting deployment...\"\n    break\n  fi\n  echo\
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container '${stackname}-da' of 'deployment' '${stackname}-da-deployment' in '${namespace}' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 administrator_2.yaml:40-53
────────────────────────────────────────
  40 ┌       - name: ${stackname}-da
  41 │         image: ${dm_da_image}
  42 │         resources:
  43 │           limits:
  44 │             cpu: 500m
  45 │             memory: 1000Mi
  46 │         envFrom:
  47 │         - secretRef:
  48 └             name: ${stackname}-da-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container '${stackname}-da-init' of 'deployment' '${stackname}-da-deployment' in '${namespace}' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 administrator_2.yaml:26-38
────────────────────────────────────────
  26 ┌       - name: ${stackname}-da-init
  27 │         image: alpine/k8s:1.29.4
  28 │         command:
  29 │         - sh
  30 │         - -c
  31 │         - "while true; do\n  ready=$(kubectl get pods -l app=${DOLLAR}DM_SERVER_NAME\
  32 │           \ -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c\
  33 │           \ true)\n  echo ${DOLLAR}ready pods ready\n  if  [ \"${DOLLAR}ready\" -gt\
  34 └           \ 0 ]; then\n    echo \"Starting deployment...\"\n    break\n  fi\n  echo\
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container '${stackname}-da-init' of Deployment '${stackname}-da-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 administrator_2.yaml:26-38
────────────────────────────────────────
  26 ┌       - name: ${stackname}-da-init
  27 │         image: alpine/k8s:1.29.4
  28 │         command:
  29 │         - sh
  30 │         - -c
  31 │         - "while true; do\n  ready=$(kubectl get pods -l app=${DOLLAR}DM_SERVER_NAME\
  32 │           \ -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c\
  33 │           \ true)\n  echo ${DOLLAR}ready pods ready\n  if  [ \"${DOLLAR}ready\" -gt\
  34 └           \ 0 ]; then\n    echo \"Starting deployment...\"\n    break\n  fi\n  echo\
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container '${stackname}-da' of Deployment '${stackname}-da-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 administrator_2.yaml:40-53
────────────────────────────────────────
  40 ┌       - name: ${stackname}-da
  41 │         image: ${dm_da_image}
  42 │         resources:
  43 │           limits:
  44 │             cpu: 500m
  45 │             memory: 1000Mi
  46 │         envFrom:
  47 │         - secretRef:
  48 └             name: ${stackname}-da-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container '${stackname}-da-init' of Deployment '${stackname}-da-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 administrator_2.yaml:26-38
────────────────────────────────────────
  26 ┌       - name: ${stackname}-da-init
  27 │         image: alpine/k8s:1.29.4
  28 │         command:
  29 │         - sh
  30 │         - -c
  31 │         - "while true; do\n  ready=$(kubectl get pods -l app=${DOLLAR}DM_SERVER_NAME\
  32 │           \ -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c\
  33 │           \ true)\n  echo ${DOLLAR}ready pods ready\n  if  [ \"${DOLLAR}ready\" -gt\
  34 └           \ 0 ]; then\n    echo \"Starting deployment...\"\n    break\n  fi\n  echo\
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container '${stackname}-da' of Deployment '${stackname}-da-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 administrator_2.yaml:40-53
────────────────────────────────────────
  40 ┌       - name: ${stackname}-da
  41 │         image: ${dm_da_image}
  42 │         resources:
  43 │           limits:
  44 │             cpu: 500m
  45 │             memory: 1000Mi
  46 │         envFrom:
  47 │         - secretRef:
  48 └             name: ${stackname}-da-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container '${stackname}-da' of Deployment '${stackname}-da-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 administrator_2.yaml:40-53
────────────────────────────────────────
  40 ┌       - name: ${stackname}-da
  41 │         image: ${dm_da_image}
  42 │         resources:
  43 │           limits:
  44 │             cpu: 500m
  45 │             memory: 1000Mi
  46 │         envFrom:
  47 │         - secretRef:
  48 └             name: ${stackname}-da-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container '${stackname}-da-init' of Deployment '${stackname}-da-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 administrator_2.yaml:26-38
────────────────────────────────────────
  26 ┌       - name: ${stackname}-da-init
  27 │         image: alpine/k8s:1.29.4
  28 │         command:
  29 │         - sh
  30 │         - -c
  31 │         - "while true; do\n  ready=$(kubectl get pods -l app=${DOLLAR}DM_SERVER_NAME\
  32 │           \ -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c\
  33 │           \ true)\n  echo ${DOLLAR}ready pods ready\n  if  [ \"${DOLLAR}ready\" -gt\
  34 └           \ 0 ]; then\n    echo \"Starting deployment...\"\n    break\n  fi\n  echo\
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container '${stackname}-da' of Deployment '${stackname}-da-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 administrator_2.yaml:40-53
────────────────────────────────────────
  40 ┌       - name: ${stackname}-da
  41 │         image: ${dm_da_image}
  42 │         resources:
  43 │           limits:
  44 │             cpu: 500m
  45 │             memory: 1000Mi
  46 │         envFrom:
  47 │         - secretRef:
  48 └             name: ${stackname}-da-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container '${stackname}-da-init' of Deployment '${stackname}-da-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 administrator_2.yaml:26-38
────────────────────────────────────────
  26 ┌       - name: ${stackname}-da-init
  27 │         image: alpine/k8s:1.29.4
  28 │         command:
  29 │         - sh
  30 │         - -c
  31 │         - "while true; do\n  ready=$(kubectl get pods -l app=${DOLLAR}DM_SERVER_NAME\
  32 │           \ -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c\
  33 │           \ true)\n  echo ${DOLLAR}ready pods ready\n  if  [ \"${DOLLAR}ready\" -gt\
  34 └           \ 0 ]; then\n    echo \"Starting deployment...\"\n    break\n  fi\n  echo\
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container '${stackname}-da' of Deployment '${stackname}-da-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 administrator_2.yaml:40-53
────────────────────────────────────────
  40 ┌       - name: ${stackname}-da
  41 │         image: ${dm_da_image}
  42 │         resources:
  43 │           limits:
  44 │             cpu: 500m
  45 │             memory: 1000Mi
  46 │         envFrom:
  47 │         - secretRef:
  48 └             name: ${stackname}-da-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container '${stackname}-da-init' of Deployment '${stackname}-da-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 administrator_2.yaml:26-38
────────────────────────────────────────
  26 ┌       - name: ${stackname}-da-init
  27 │         image: alpine/k8s:1.29.4
  28 │         command:
  29 │         - sh
  30 │         - -c
  31 │         - "while true; do\n  ready=$(kubectl get pods -l app=${DOLLAR}DM_SERVER_NAME\
  32 │           \ -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c\
  33 │           \ true)\n  echo ${DOLLAR}ready pods ready\n  if  [ \"${DOLLAR}ready\" -gt\
  34 └           \ 0 ]; then\n    echo \"Starting deployment...\"\n    break\n  fi\n  echo\
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container '${stackname}-da-init' of Deployment '${stackname}-da-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 administrator_2.yaml:26-38
────────────────────────────────────────
  26 ┌       - name: ${stackname}-da-init
  27 │         image: alpine/k8s:1.29.4
  28 │         command:
  29 │         - sh
  30 │         - -c
  31 │         - "while true; do\n  ready=$(kubectl get pods -l app=${DOLLAR}DM_SERVER_NAME\
  32 │           \ -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c\
  33 │           \ true)\n  echo ${DOLLAR}ready pods ready\n  if  [ \"${DOLLAR}ready\" -gt\
  34 └           \ 0 ]; then\n    echo \"Starting deployment...\"\n    break\n  fi\n  echo\
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container '${stackname}-da' of Deployment '${stackname}-da-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 administrator_2.yaml:40-53
────────────────────────────────────────
  40 ┌       - name: ${stackname}-da
  41 │         image: ${dm_da_image}
  42 │         resources:
  43 │           limits:
  44 │             cpu: 500m
  45 │             memory: 1000Mi
  46 │         envFrom:
  47 │         - secretRef:
  48 └             name: ${stackname}-da-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container '${stackname}-da-init' of Deployment '${stackname}-da-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 administrator_2.yaml:26-38
────────────────────────────────────────
  26 ┌       - name: ${stackname}-da-init
  27 │         image: alpine/k8s:1.29.4
  28 │         command:
  29 │         - sh
  30 │         - -c
  31 │         - "while true; do\n  ready=$(kubectl get pods -l app=${DOLLAR}DM_SERVER_NAME\
  32 │           \ -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c\
  33 │           \ true)\n  echo ${DOLLAR}ready pods ready\n  if  [ \"${DOLLAR}ready\" -gt\
  34 └           \ 0 ]; then\n    echo \"Starting deployment...\"\n    break\n  fi\n  echo\
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container '${stackname}-da' of Deployment '${stackname}-da-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 administrator_2.yaml:40-53
────────────────────────────────────────
  40 ┌       - name: ${stackname}-da
  41 │         image: ${dm_da_image}
  42 │         resources:
  43 │           limits:
  44 │             cpu: 500m
  45 │             memory: 1000Mi
  46 │         envFrom:
  47 │         - secretRef:
  48 └             name: ${stackname}-da-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container '${stackname}-da-init' of Deployment '${stackname}-da-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 administrator_2.yaml:26-38
────────────────────────────────────────
  26 ┌       - name: ${stackname}-da-init
  27 │         image: alpine/k8s:1.29.4
  28 │         command:
  29 │         - sh
  30 │         - -c
  31 │         - "while true; do\n  ready=$(kubectl get pods -l app=${DOLLAR}DM_SERVER_NAME\
  32 │           \ -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c\
  33 │           \ true)\n  echo ${DOLLAR}ready pods ready\n  if  [ \"${DOLLAR}ready\" -gt\
  34 └           \ 0 ]; then\n    echo \"Starting deployment...\"\n    break\n  fi\n  echo\
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 administrator_2.yaml:40-53
────────────────────────────────────────
  40 ┌       - name: ${stackname}-da
  41 │         image: ${dm_da_image}
  42 │         resources:
  43 │           limits:
  44 │             cpu: 500m
  45 │             memory: 1000Mi
  46 │         envFrom:
  47 │         - secretRef:
  48 └             name: ${stackname}-da-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 administrator_2.yaml:26-38
────────────────────────────────────────
  26 ┌       - name: ${stackname}-da-init
  27 │         image: alpine/k8s:1.29.4
  28 │         command:
  29 │         - sh
  30 │         - -c
  31 │         - "while true; do\n  ready=$(kubectl get pods -l app=${DOLLAR}DM_SERVER_NAME\
  32 │           \ -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c\
  33 │           \ true)\n  echo ${DOLLAR}ready pods ready\n  if  [ \"${DOLLAR}ready\" -gt\
  34 └           \ 0 ]; then\n    echo \"Starting deployment...\"\n    break\n  fi\n  echo\
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "${stackname}-da" of deployment "${stackname}-da-deployment" in "${namespace}" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 administrator_2.yaml:40-53
────────────────────────────────────────
  40 ┌       - name: ${stackname}-da
  41 │         image: ${dm_da_image}
  42 │         resources:
  43 │           limits:
  44 │             cpu: 500m
  45 │             memory: 1000Mi
  46 │         envFrom:
  47 │         - secretRef:
  48 └             name: ${stackname}-da-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "${stackname}-da-init" of deployment "${stackname}-da-deployment" in "${namespace}" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 administrator_2.yaml:26-38
────────────────────────────────────────
  26 ┌       - name: ${stackname}-da-init
  27 │         image: alpine/k8s:1.29.4
  28 │         command:
  29 │         - sh
  30 │         - -c
  31 │         - "while true; do\n  ready=$(kubectl get pods -l app=${DOLLAR}DM_SERVER_NAME\
  32 │           \ -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c\
  33 │           \ true)\n  echo ${DOLLAR}ready pods ready\n  if  [ \"${DOLLAR}ready\" -gt\
  34 └           \ 0 ]; then\n    echo \"Starting deployment...\"\n    break\n  fi\n  echo\
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 administrator_2.yaml:26-38
────────────────────────────────────────
  26 ┌       - name: ${stackname}-da-init
  27 │         image: alpine/k8s:1.29.4
  28 │         command:
  29 │         - sh
  30 │         - -c
  31 │         - "while true; do\n  ready=$(kubectl get pods -l app=${DOLLAR}DM_SERVER_NAME\
  32 │           \ -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c\
  33 │           \ true)\n  echo ${DOLLAR}ready pods ready\n  if  [ \"${DOLLAR}ready\" -gt\
  34 └           \ 0 ]; then\n    echo \"Starting deployment...\"\n    break\n  fi\n  echo\
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 administrator_2.yaml:40-53
────────────────────────────────────────
  40 ┌       - name: ${stackname}-da
  41 │         image: ${dm_da_image}
  42 │         resources:
  43 │           limits:
  44 │             cpu: 500m
  45 │             memory: 1000Mi
  46 │         envFrom:
  47 │         - secretRef:
  48 └             name: ${stackname}-da-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ${stackname}-da-deployment in ${namespace} namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 administrator_2.yaml:40-53
────────────────────────────────────────
  40 ┌       - name: ${stackname}-da
  41 │         image: ${dm_da_image}
  42 │         resources:
  43 │           limits:
  44 │             cpu: 500m
  45 │             memory: 1000Mi
  46 │         envFrom:
  47 │         - secretRef:
  48 └             name: ${stackname}-da-secrets
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ${stackname}-da-deployment in ${namespace} namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 administrator_2.yaml:26-38
────────────────────────────────────────
  26 ┌       - name: ${stackname}-da-init
  27 │         image: alpine/k8s:1.29.4
  28 │         command:
  29 │         - sh
  30 │         - -c
  31 │         - "while true; do\n  ready=$(kubectl get pods -l app=${DOLLAR}DM_SERVER_NAME\
  32 │           \ -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c\
  33 │           \ true)\n  echo ${DOLLAR}ready pods ready\n  if  [ \"${DOLLAR}ready\" -gt\
  34 └           \ 0 ]; then\n    echo \"Starting deployment...\"\n    break\n  fi\n  echo\
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ${stackname}-da-deployment in ${namespace} namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 administrator_2.yaml:23-54
────────────────────────────────────────
  23 ┌       serviceAccountName: ${stackname}-resource-sa
  24 │       hostname: ${stackname}-da
  25 │       initContainers:
  26 │       - name: ${stackname}-da-init
  27 │         image: alpine/k8s:1.29.4
  28 │         command:
  29 │         - sh
  30 │         - -c
  31 └         - "while true; do\n  ready=$(kubectl get pods -l app=${DOLLAR}DM_SERVER_NAME\
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ${stackname}-da-init in deployment ${stackname}-da-deployment (namespace: ${namespace}) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 administrator_2.yaml:26-38
────────────────────────────────────────
  26 ┌       - name: ${stackname}-da-init
  27 │         image: alpine/k8s:1.29.4
  28 │         command:
  29 │         - sh
  30 │         - -c
  31 │         - "while true; do\n  ready=$(kubectl get pods -l app=${DOLLAR}DM_SERVER_NAME\
  32 │           \ -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -c\
  33 │           \ true)\n  echo ${DOLLAR}ready pods ready\n  if  [ \"${DOLLAR}ready\" -gt\
  34 └           \ 0 ]; then\n    echo \"Starting deployment...\"\n    break\n  fi\n  echo\
  ..   
────────────────────────────────────────



admins.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-admins' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 admins.yaml:6
────────────────────────────────────────
   6 [   name: cluster-admins
────────────────────────────────────────



admission-controller-deployment.yaml (kubernetes)
=================================================
Tests: 114 (SUCCESSES: 104, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'admission-controller' of Deployment 'vpa-admission-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 admission-controller-deployment.yaml:21-47
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.2.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'admission-controller' of Deployment 'vpa-admission-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 admission-controller-deployment.yaml:21-47
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.2.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'admission-controller' of 'deployment' 'vpa-admission-controller' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 admission-controller-deployment.yaml:21-47
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.2.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'admission-controller' of Deployment 'vpa-admission-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 admission-controller-deployment.yaml:21-47
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.2.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'admission-controller' of Deployment 'vpa-admission-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 admission-controller-deployment.yaml:21-47
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.2.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 admission-controller-deployment.yaml:21-47
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.2.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'vpa-admission-controller' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 admission-controller-deployment.yaml:7-51
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: vpa-admission-controller
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: vpa-admission-controller
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "admission-controller" of deployment "vpa-admission-controller" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 admission-controller-deployment.yaml:21-47
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.2.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 admission-controller-deployment.yaml:21-47
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.2.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container admission-controller in deployment vpa-admission-controller (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 admission-controller-deployment.yaml:21-47
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.2.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         args:
  ..   
────────────────────────────────────────



admission-controller-deployment1.yaml (kubernetes)
==================================================
Tests: 114 (SUCCESSES: 104, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'admission-controller' of Deployment 'vpa-admission-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 admission-controller-deployment1.yaml:21-43
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.0.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'admission-controller' of Deployment 'vpa-admission-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 admission-controller-deployment1.yaml:21-43
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.0.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'admission-controller' of 'deployment' 'vpa-admission-controller' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 admission-controller-deployment1.yaml:21-43
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.0.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'admission-controller' of Deployment 'vpa-admission-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 admission-controller-deployment1.yaml:21-43
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.0.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'admission-controller' of Deployment 'vpa-admission-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 admission-controller-deployment1.yaml:21-43
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.0.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 admission-controller-deployment1.yaml:21-43
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.0.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'vpa-admission-controller' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 admission-controller-deployment1.yaml:7-47
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: vpa-admission-controller
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: vpa-admission-controller
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "admission-controller" of deployment "vpa-admission-controller" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 admission-controller-deployment1.yaml:21-43
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.0.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 admission-controller-deployment1.yaml:21-43
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.0.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container admission-controller in deployment vpa-admission-controller (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 admission-controller-deployment1.yaml:21-43
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.0.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         volumeMounts:
  ..   
────────────────────────────────────────



admission-controller-deployment1_1.yaml (kubernetes)
====================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'vpa-webhook' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 admission-controller-deployment1_1.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 443
   9 │     targetPort: 8000
  10 │   selector:
  11 └     app: vpa-admission-controller
────────────────────────────────────────



admission-controller-deployment2.yaml (kubernetes)
==================================================
Tests: 114 (SUCCESSES: 104, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 5, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'admission-controller' of Deployment 'vpa-admission-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 admission-controller-deployment2.yaml:21-43
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.0.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'admission-controller' of Deployment 'vpa-admission-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 admission-controller-deployment2.yaml:21-43
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.0.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'admission-controller' of 'deployment' 'vpa-admission-controller' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 admission-controller-deployment2.yaml:21-43
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.0.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'admission-controller' of Deployment 'vpa-admission-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 admission-controller-deployment2.yaml:21-43
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.0.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'admission-controller' of Deployment 'vpa-admission-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 admission-controller-deployment2.yaml:21-43
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.0.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 admission-controller-deployment2.yaml:21-43
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.0.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'vpa-admission-controller' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 admission-controller-deployment2.yaml:7-47
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: vpa-admission-controller
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: vpa-admission-controller
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "admission-controller" of deployment "vpa-admission-controller" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 admission-controller-deployment2.yaml:21-43
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.0.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 admission-controller-deployment2.yaml:21-43
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.0.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container admission-controller in deployment vpa-admission-controller (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 admission-controller-deployment2.yaml:21-43
────────────────────────────────────────
  21 ┌       - name: admission-controller
  22 │         image: registry.k8s.io/autoscaling/vpa-admission-controller:1.0.0
  23 │         imagePullPolicy: Always
  24 │         env:
  25 │         - name: NAMESPACE
  26 │           valueFrom:
  27 │             fieldRef:
  28 │               fieldPath: metadata.namespace
  29 └         volumeMounts:
  ..   
────────────────────────────────────────



admission-controller-deployment2_1.yaml (kubernetes)
====================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'vpa-webhook' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 admission-controller-deployment2_1.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 443
   9 │     targetPort: 8000
  10 │   selector:
  11 └     app: vpa-admission-controller
────────────────────────────────────────



admission-controller-deployment_1.yaml (kubernetes)
===================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'vpa-webhook' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 admission-controller-deployment_1.yaml:7-11
────────────────────────────────────────
   7 ┌   ports:
   8 │   - port: 443
   9 │     targetPort: 8000
  10 │   selector:
  11 └     app: vpa-admission-controller
────────────────────────────────────────



admission-controller1_1.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'configmap-modifier' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 admission-controller1_1.yaml:7-13
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - configmaps
  11 │   verbs:
  12 │   - update
  13 └   - patch
────────────────────────────────────────



admission-controller1_4.yaml (kubernetes)
=========================================
Tests: 131 (SUCCESSES: 98, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-mgmt' of Deployment 'opa' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 admission-controller1_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'opa' of Deployment 'opa' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 admission-controller1_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-mgmt' of Deployment 'opa' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 admission-controller1_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'opa' of Deployment 'opa' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 admission-controller1_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-mgmt' of 'deployment' 'opa' in 'opa' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 admission-controller1_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'opa' of 'deployment' 'opa' in 'opa' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 admission-controller1_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-mgmt' of Deployment 'opa' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 admission-controller1_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'opa' of Deployment 'opa' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 admission-controller1_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-mgmt' of Deployment 'opa' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 admission-controller1_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'opa' of Deployment 'opa' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 admission-controller1_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-mgmt' of Deployment 'opa' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 admission-controller1_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'opa' of Deployment 'opa' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 admission-controller1_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-mgmt' of Deployment 'opa' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 admission-controller1_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'opa' of Deployment 'opa' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 admission-controller1_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-mgmt' of Deployment 'opa' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 admission-controller1_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'opa' of Deployment 'opa' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 admission-controller1_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-mgmt' of Deployment 'opa' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 admission-controller1_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'opa' of Deployment 'opa' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 admission-controller1_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-mgmt' of Deployment 'opa' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 admission-controller1_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'opa' of Deployment 'opa' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 admission-controller1_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-mgmt' of Deployment 'opa' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 admission-controller1_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'opa' of Deployment 'opa' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 admission-controller1_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 admission-controller1_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 admission-controller1_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-mgmt" of deployment "opa" in "opa" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 admission-controller1_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "opa" of deployment "opa" in "opa" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 admission-controller1_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 admission-controller1_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 admission-controller1_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container opa in opa namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admission-controller1_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container opa in opa namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admission-controller1_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment opa in opa namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admission-controller1_4.yaml:19-60
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 └         - --addr=0.0.0.0:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-mgmt in deployment opa (namespace: opa) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 admission-controller1_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container opa in deployment opa (namespace: opa) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 admission-controller1_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────



admission-controller2_1.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'hwameistor-admission-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 admission-controller2_1.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: server
  23 │         args:
  24 │         - --cert-dir=/etc/webhook/certs
  25 │         - --tls-private-key-file=tls.key
  26 │         - --tls-cert-file=tls.crt
  27 │         image: ghcr.io/hwameistor/admission:v0.14.1
  28 │         imagePullPolicy: IfNotPresent
  29 │         env:
  30 └         - name: WEBHOOK_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'hwameistor-admission-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 admission-controller2_1.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: server
  23 │         args:
  24 │         - --cert-dir=/etc/webhook/certs
  25 │         - --tls-private-key-file=tls.key
  26 │         - --tls-cert-file=tls.crt
  27 │         image: ghcr.io/hwameistor/admission:v0.14.1
  28 │         imagePullPolicy: IfNotPresent
  29 │         env:
  30 └         - name: WEBHOOK_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'hwameistor-admission-controller' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 admission-controller2_1.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: server
  23 │         args:
  24 │         - --cert-dir=/etc/webhook/certs
  25 │         - --tls-private-key-file=tls.key
  26 │         - --tls-cert-file=tls.crt
  27 │         image: ghcr.io/hwameistor/admission:v0.14.1
  28 │         imagePullPolicy: IfNotPresent
  29 │         env:
  30 └         - name: WEBHOOK_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'hwameistor-admission-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 admission-controller2_1.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: server
  23 │         args:
  24 │         - --cert-dir=/etc/webhook/certs
  25 │         - --tls-private-key-file=tls.key
  26 │         - --tls-cert-file=tls.crt
  27 │         image: ghcr.io/hwameistor/admission:v0.14.1
  28 │         imagePullPolicy: IfNotPresent
  29 │         env:
  30 └         - name: WEBHOOK_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'hwameistor-admission-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 admission-controller2_1.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: server
  23 │         args:
  24 │         - --cert-dir=/etc/webhook/certs
  25 │         - --tls-private-key-file=tls.key
  26 │         - --tls-cert-file=tls.crt
  27 │         image: ghcr.io/hwameistor/admission:v0.14.1
  28 │         imagePullPolicy: IfNotPresent
  29 │         env:
  30 └         - name: WEBHOOK_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'hwameistor-admission-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 admission-controller2_1.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: server
  23 │         args:
  24 │         - --cert-dir=/etc/webhook/certs
  25 │         - --tls-private-key-file=tls.key
  26 │         - --tls-cert-file=tls.crt
  27 │         image: ghcr.io/hwameistor/admission:v0.14.1
  28 │         imagePullPolicy: IfNotPresent
  29 │         env:
  30 └         - name: WEBHOOK_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'hwameistor-admission-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 admission-controller2_1.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: server
  23 │         args:
  24 │         - --cert-dir=/etc/webhook/certs
  25 │         - --tls-private-key-file=tls.key
  26 │         - --tls-cert-file=tls.crt
  27 │         image: ghcr.io/hwameistor/admission:v0.14.1
  28 │         imagePullPolicy: IfNotPresent
  29 │         env:
  30 └         - name: WEBHOOK_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'hwameistor-admission-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 admission-controller2_1.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: server
  23 │         args:
  24 │         - --cert-dir=/etc/webhook/certs
  25 │         - --tls-private-key-file=tls.key
  26 │         - --tls-cert-file=tls.crt
  27 │         image: ghcr.io/hwameistor/admission:v0.14.1
  28 │         imagePullPolicy: IfNotPresent
  29 │         env:
  30 └         - name: WEBHOOK_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'hwameistor-admission-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 admission-controller2_1.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: server
  23 │         args:
  24 │         - --cert-dir=/etc/webhook/certs
  25 │         - --tls-private-key-file=tls.key
  26 │         - --tls-cert-file=tls.crt
  27 │         image: ghcr.io/hwameistor/admission:v0.14.1
  28 │         imagePullPolicy: IfNotPresent
  29 │         env:
  30 └         - name: WEBHOOK_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'hwameistor-admission-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 admission-controller2_1.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: server
  23 │         args:
  24 │         - --cert-dir=/etc/webhook/certs
  25 │         - --tls-private-key-file=tls.key
  26 │         - --tls-cert-file=tls.crt
  27 │         image: ghcr.io/hwameistor/admission:v0.14.1
  28 │         imagePullPolicy: IfNotPresent
  29 │         env:
  30 └         - name: WEBHOOK_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'hwameistor-admission-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 admission-controller2_1.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: server
  23 │         args:
  24 │         - --cert-dir=/etc/webhook/certs
  25 │         - --tls-private-key-file=tls.key
  26 │         - --tls-cert-file=tls.crt
  27 │         image: ghcr.io/hwameistor/admission:v0.14.1
  28 │         imagePullPolicy: IfNotPresent
  29 │         env:
  30 └         - name: WEBHOOK_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 admission-controller2_1.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: server
  23 │         args:
  24 │         - --cert-dir=/etc/webhook/certs
  25 │         - --tls-private-key-file=tls.key
  26 │         - --tls-cert-file=tls.crt
  27 │         image: ghcr.io/hwameistor/admission:v0.14.1
  28 │         imagePullPolicy: IfNotPresent
  29 │         env:
  30 └         - name: WEBHOOK_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "hwameistor-admission-controller" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 admission-controller2_1.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: server
  23 │         args:
  24 │         - --cert-dir=/etc/webhook/certs
  25 │         - --tls-private-key-file=tls.key
  26 │         - --tls-cert-file=tls.crt
  27 │         image: ghcr.io/hwameistor/admission:v0.14.1
  28 │         imagePullPolicy: IfNotPresent
  29 │         env:
  30 └         - name: WEBHOOK_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 admission-controller2_1.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: server
  23 │         args:
  24 │         - --cert-dir=/etc/webhook/certs
  25 │         - --tls-private-key-file=tls.key
  26 │         - --tls-cert-file=tls.crt
  27 │         image: ghcr.io/hwameistor/admission:v0.14.1
  28 │         imagePullPolicy: IfNotPresent
  29 │         env:
  30 └         - name: WEBHOOK_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hwameistor-admission-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 admission-controller2_1.yaml:4-7
────────────────────────────────────────
   4 ┌   name: hwameistor-admission-controller
   5 │   namespace: default
   6 │   labels:
   7 └     app: hwameistor-admission-controller
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hwameistor-admission-controller in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admission-controller2_1.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: server
  23 │         args:
  24 │         - --cert-dir=/etc/webhook/certs
  25 │         - --tls-private-key-file=tls.key
  26 │         - --tls-cert-file=tls.crt
  27 │         image: ghcr.io/hwameistor/admission:v0.14.1
  28 │         imagePullPolicy: IfNotPresent
  29 │         env:
  30 └         - name: WEBHOOK_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hwameistor-admission-controller in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admission-controller2_1.yaml:20-49
────────────────────────────────────────
  20 ┌       serviceAccountName: hwameistor-admin
  21 │       containers:
  22 │       - name: server
  23 │         args:
  24 │         - --cert-dir=/etc/webhook/certs
  25 │         - --tls-private-key-file=tls.key
  26 │         - --tls-cert-file=tls.crt
  27 │         image: ghcr.io/hwameistor/admission:v0.14.1
  28 └         imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment hwameistor-admission-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 admission-controller2_1.yaml:22-46
────────────────────────────────────────
  22 ┌       - name: server
  23 │         args:
  24 │         - --cert-dir=/etc/webhook/certs
  25 │         - --tls-private-key-file=tls.key
  26 │         - --tls-cert-file=tls.crt
  27 │         image: ghcr.io/hwameistor/admission:v0.14.1
  28 │         imagePullPolicy: IfNotPresent
  29 │         env:
  30 └         - name: WEBHOOK_NAMESPACE
  ..   
────────────────────────────────────────



admission-controller_1.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'configmap-modifier' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 admission-controller_1.yaml:7-13
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - configmaps
  11 │   verbs:
  12 │   - update
  13 └   - patch
────────────────────────────────────────



admission-controller_4.yaml (kubernetes)
========================================
Tests: 131 (SUCCESSES: 98, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-mgmt' of Deployment 'opa' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 admission-controller_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'opa' of Deployment 'opa' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 admission-controller_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-mgmt' of Deployment 'opa' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 admission-controller_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'opa' of Deployment 'opa' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 admission-controller_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-mgmt' of 'deployment' 'opa' in 'opa' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 admission-controller_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'opa' of 'deployment' 'opa' in 'opa' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 admission-controller_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-mgmt' of Deployment 'opa' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 admission-controller_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'opa' of Deployment 'opa' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 admission-controller_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-mgmt' of Deployment 'opa' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 admission-controller_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'opa' of Deployment 'opa' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 admission-controller_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-mgmt' of Deployment 'opa' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 admission-controller_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'opa' of Deployment 'opa' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 admission-controller_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-mgmt' of Deployment 'opa' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 admission-controller_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'opa' of Deployment 'opa' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 admission-controller_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-mgmt' of Deployment 'opa' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 admission-controller_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'opa' of Deployment 'opa' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 admission-controller_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-mgmt' of Deployment 'opa' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 admission-controller_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'opa' of Deployment 'opa' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 admission-controller_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-mgmt' of Deployment 'opa' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 admission-controller_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'opa' of Deployment 'opa' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 admission-controller_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-mgmt' of Deployment 'opa' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 admission-controller_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'opa' of Deployment 'opa' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 admission-controller_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 admission-controller_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 admission-controller_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-mgmt" of deployment "opa" in "opa" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 admission-controller_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "opa" of deployment "opa" in "opa" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 admission-controller_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 admission-controller_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 admission-controller_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container opa in opa namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admission-controller_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container opa in opa namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admission-controller_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment opa in opa namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admission-controller_4.yaml:19-60
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 └         - --addr=0.0.0.0:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-mgmt in deployment opa (namespace: opa) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 admission-controller_4.yaml:52-56
────────────────────────────────────────
  52 ┌       - name: kube-mgmt
  53 │         image: openpolicyagent/kube-mgmt:2.0.1
  54 │         args:
  55 │         - --replicate-cluster=v1/namespaces
  56 └         - --replicate=networking.k8s.io/v1/ingresses
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container opa in deployment opa (namespace: opa) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 admission-controller_4.yaml:20-51
────────────────────────────────────────
  20 ┌       - name: opa
  21 │         image: openpolicyagent/opa:0.42.2-rootless
  22 │         args:
  23 │         - run
  24 │         - --server
  25 │         - --tls-cert-file=/certs/tls.crt
  26 │         - --tls-private-key-file=/certs/tls.key
  27 │         - --addr=0.0.0.0:8443
  28 └         - --addr=http://127.0.0.1:8181
  ..   
────────────────────────────────────────



admission-service-account1_1.yaml (kubernetes)
==============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 admission-service-account1_1.yaml:11-17
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - secrets
  15 │   verbs:
  16 │   - get
  17 └   - create
────────────────────────────────────────



admission-service-account1_3.yaml (kubernetes)
==============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 admission-service-account1_3.yaml:10-16
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - admissionregistration.k8s.io
  12 │   resources:
  13 │   - validatingwebhookconfigurations
  14 │   verbs:
  15 │   - get
  16 └   - update
────────────────────────────────────────



admission-service-account_1.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 admission-service-account_1.yaml:11-17
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - secrets
  15 │   verbs:
  16 │   - get
  17 └   - create
────────────────────────────────────────



admission-service-account_3.yaml (kubernetes)
=============================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 admission-service-account_3.yaml:10-16
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - admissionregistration.k8s.io
  12 │   resources:
  13 │   - validatingwebhookconfigurations
  14 │   verbs:
  15 │   - get
  16 └   - update
────────────────────────────────────────



admission-webhook1.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 104, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 admission-webhook1.yaml:23-58
────────────────────────────────────────
  23 ┌       - name: admission-webhook
  24 │         command:
  25 │         - /admission-webhook
  26 │         - --graceful-shutdown-timeout=10s
  27 │         - --health-probe-bind-addr=:10258
  28 │         image: ghcr.io/droot/admission-webhook:gcp-ksa-1.0.1
  29 │         ports:
  30 │         - name: admission
  31 └           containerPort: 10250
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'admission-webhook' of 'deployment' 'admission-webhook' in 'config-management-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 admission-webhook1.yaml:23-58
────────────────────────────────────────
  23 ┌       - name: admission-webhook
  24 │         command:
  25 │         - /admission-webhook
  26 │         - --graceful-shutdown-timeout=10s
  27 │         - --health-probe-bind-addr=:10258
  28 │         image: ghcr.io/droot/admission-webhook:gcp-ksa-1.0.1
  29 │         ports:
  30 │         - name: admission
  31 └           containerPort: 10250
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 admission-webhook1.yaml:23-58
────────────────────────────────────────
  23 ┌       - name: admission-webhook
  24 │         command:
  25 │         - /admission-webhook
  26 │         - --graceful-shutdown-timeout=10s
  27 │         - --health-probe-bind-addr=:10258
  28 │         image: ghcr.io/droot/admission-webhook:gcp-ksa-1.0.1
  29 │         ports:
  30 │         - name: admission
  31 └           containerPort: 10250
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 admission-webhook1.yaml:23-58
────────────────────────────────────────
  23 ┌       - name: admission-webhook
  24 │         command:
  25 │         - /admission-webhook
  26 │         - --graceful-shutdown-timeout=10s
  27 │         - --health-probe-bind-addr=:10258
  28 │         image: ghcr.io/droot/admission-webhook:gcp-ksa-1.0.1
  29 │         ports:
  30 │         - name: admission
  31 └           containerPort: 10250
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 admission-webhook1.yaml:23-58
────────────────────────────────────────
  23 ┌       - name: admission-webhook
  24 │         command:
  25 │         - /admission-webhook
  26 │         - --graceful-shutdown-timeout=10s
  27 │         - --health-probe-bind-addr=:10258
  28 │         image: ghcr.io/droot/admission-webhook:gcp-ksa-1.0.1
  29 │         ports:
  30 │         - name: admission
  31 └           containerPort: 10250
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 admission-webhook1.yaml:23-58
────────────────────────────────────────
  23 ┌       - name: admission-webhook
  24 │         command:
  25 │         - /admission-webhook
  26 │         - --graceful-shutdown-timeout=10s
  27 │         - --health-probe-bind-addr=:10258
  28 │         image: ghcr.io/droot/admission-webhook:gcp-ksa-1.0.1
  29 │         ports:
  30 │         - name: admission
  31 └           containerPort: 10250
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "admission-webhook" of deployment "admission-webhook" in "config-management-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 admission-webhook1.yaml:23-58
────────────────────────────────────────
  23 ┌       - name: admission-webhook
  24 │         command:
  25 │         - /admission-webhook
  26 │         - --graceful-shutdown-timeout=10s
  27 │         - --health-probe-bind-addr=:10258
  28 │         image: ghcr.io/droot/admission-webhook:gcp-ksa-1.0.1
  29 │         ports:
  30 │         - name: admission
  31 └           containerPort: 10250
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 admission-webhook1.yaml:23-58
────────────────────────────────────────
  23 ┌       - name: admission-webhook
  24 │         command:
  25 │         - /admission-webhook
  26 │         - --graceful-shutdown-timeout=10s
  27 │         - --health-probe-bind-addr=:10258
  28 │         image: ghcr.io/droot/admission-webhook:gcp-ksa-1.0.1
  29 │         ports:
  30 │         - name: admission
  31 └           containerPort: 10250
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment admission-webhook in config-management-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admission-webhook1.yaml:21-64
────────────────────────────────────────
  21 ┌       serviceAccountName: admission-webhook
  22 │       containers:
  23 │       - name: admission-webhook
  24 │         command:
  25 │         - /admission-webhook
  26 │         - --graceful-shutdown-timeout=10s
  27 │         - --health-probe-bind-addr=:10258
  28 │         image: ghcr.io/droot/admission-webhook:gcp-ksa-1.0.1
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container admission-webhook in deployment admission-webhook (namespace: config-management-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 admission-webhook1.yaml:23-58
────────────────────────────────────────
  23 ┌       - name: admission-webhook
  24 │         command:
  25 │         - /admission-webhook
  26 │         - --graceful-shutdown-timeout=10s
  27 │         - --health-probe-bind-addr=:10258
  28 │         image: ghcr.io/droot/admission-webhook:gcp-ksa-1.0.1
  29 │         ports:
  30 │         - name: admission
  31 └           containerPort: 10250
  ..   
────────────────────────────────────────



admission-webhook1_3.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'configsync.gke.io:admission-webhook' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 admission-webhook1_3.yaml:4-8
────────────────────────────────────────
   4 ┌   name: configsync.gke.io:admission-webhook
   5 │   labels:
   6 │     app: admission-webhook
   7 │     configmanagement.gke.io/system: 'true'
   8 └     configmanagement.gke.io/arch: csmr
────────────────────────────────────────



admission-webhook2_1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 admission-webhook2_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 admission-webhook2_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'admission-webhook' of 'deployment' 'admission-webhook' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 admission-webhook2_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 admission-webhook2_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 admission-webhook2_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'admission-webhook' of Deployment 'admission-webhook' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 admission-webhook2_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 admission-webhook2_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 admission-webhook2_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 admission-webhook2_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 admission-webhook2_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 admission-webhook2_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 admission-webhook2_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 admission-webhook2_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "admission-webhook" of deployment "admission-webhook" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 admission-webhook2_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 admission-webhook2_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment admission-webhook in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 admission-webhook2_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: admission-webhook
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container admission-webhook in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admission-webhook2_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment admission-webhook in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admission-webhook2_1.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container admission-webhook in deployment admission-webhook (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 admission-webhook2_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────



admission-webhook4.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 104, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 admission-webhook4.yaml:23-58
────────────────────────────────────────
  23 ┌       - name: admission-webhook
  24 │         command:
  25 │         - /admission-webhook
  26 │         - --graceful-shutdown-timeout=10s
  27 │         - --health-probe-bind-addr=:10258
  28 │         image: ghcr.io/droot/admission-webhook:gcp-ksa-1.0.1
  29 │         ports:
  30 │         - name: admission
  31 └           containerPort: 10250
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'admission-webhook' of 'deployment' 'admission-webhook' in 'config-management-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 admission-webhook4.yaml:23-58
────────────────────────────────────────
  23 ┌       - name: admission-webhook
  24 │         command:
  25 │         - /admission-webhook
  26 │         - --graceful-shutdown-timeout=10s
  27 │         - --health-probe-bind-addr=:10258
  28 │         image: ghcr.io/droot/admission-webhook:gcp-ksa-1.0.1
  29 │         ports:
  30 │         - name: admission
  31 └           containerPort: 10250
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 admission-webhook4.yaml:23-58
────────────────────────────────────────
  23 ┌       - name: admission-webhook
  24 │         command:
  25 │         - /admission-webhook
  26 │         - --graceful-shutdown-timeout=10s
  27 │         - --health-probe-bind-addr=:10258
  28 │         image: ghcr.io/droot/admission-webhook:gcp-ksa-1.0.1
  29 │         ports:
  30 │         - name: admission
  31 └           containerPort: 10250
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 admission-webhook4.yaml:23-58
────────────────────────────────────────
  23 ┌       - name: admission-webhook
  24 │         command:
  25 │         - /admission-webhook
  26 │         - --graceful-shutdown-timeout=10s
  27 │         - --health-probe-bind-addr=:10258
  28 │         image: ghcr.io/droot/admission-webhook:gcp-ksa-1.0.1
  29 │         ports:
  30 │         - name: admission
  31 └           containerPort: 10250
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 admission-webhook4.yaml:23-58
────────────────────────────────────────
  23 ┌       - name: admission-webhook
  24 │         command:
  25 │         - /admission-webhook
  26 │         - --graceful-shutdown-timeout=10s
  27 │         - --health-probe-bind-addr=:10258
  28 │         image: ghcr.io/droot/admission-webhook:gcp-ksa-1.0.1
  29 │         ports:
  30 │         - name: admission
  31 └           containerPort: 10250
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 admission-webhook4.yaml:23-58
────────────────────────────────────────
  23 ┌       - name: admission-webhook
  24 │         command:
  25 │         - /admission-webhook
  26 │         - --graceful-shutdown-timeout=10s
  27 │         - --health-probe-bind-addr=:10258
  28 │         image: ghcr.io/droot/admission-webhook:gcp-ksa-1.0.1
  29 │         ports:
  30 │         - name: admission
  31 └           containerPort: 10250
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "admission-webhook" of deployment "admission-webhook" in "config-management-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 admission-webhook4.yaml:23-58
────────────────────────────────────────
  23 ┌       - name: admission-webhook
  24 │         command:
  25 │         - /admission-webhook
  26 │         - --graceful-shutdown-timeout=10s
  27 │         - --health-probe-bind-addr=:10258
  28 │         image: ghcr.io/droot/admission-webhook:gcp-ksa-1.0.1
  29 │         ports:
  30 │         - name: admission
  31 └           containerPort: 10250
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 admission-webhook4.yaml:23-58
────────────────────────────────────────
  23 ┌       - name: admission-webhook
  24 │         command:
  25 │         - /admission-webhook
  26 │         - --graceful-shutdown-timeout=10s
  27 │         - --health-probe-bind-addr=:10258
  28 │         image: ghcr.io/droot/admission-webhook:gcp-ksa-1.0.1
  29 │         ports:
  30 │         - name: admission
  31 └           containerPort: 10250
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment admission-webhook in config-management-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admission-webhook4.yaml:21-64
────────────────────────────────────────
  21 ┌       serviceAccountName: admission-webhook
  22 │       containers:
  23 │       - name: admission-webhook
  24 │         command:
  25 │         - /admission-webhook
  26 │         - --graceful-shutdown-timeout=10s
  27 │         - --health-probe-bind-addr=:10258
  28 │         image: ghcr.io/droot/admission-webhook:gcp-ksa-1.0.1
  29 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container admission-webhook in deployment admission-webhook (namespace: config-management-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 admission-webhook4.yaml:23-58
────────────────────────────────────────
  23 ┌       - name: admission-webhook
  24 │         command:
  25 │         - /admission-webhook
  26 │         - --graceful-shutdown-timeout=10s
  27 │         - --health-probe-bind-addr=:10258
  28 │         image: ghcr.io/droot/admission-webhook:gcp-ksa-1.0.1
  29 │         ports:
  30 │         - name: admission
  31 └           containerPort: 10250
  ..   
────────────────────────────────────────



admission-webhook4_3.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'configsync.gke.io:admission-webhook' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 admission-webhook4_3.yaml:4-8
────────────────────────────────────────
   4 ┌   name: configsync.gke.io:admission-webhook
   5 │   labels:
   6 │     app: admission-webhook
   7 │     configmanagement.gke.io/system: 'true'
   8 └     configmanagement.gke.io/arch: csmr
────────────────────────────────────────



admission-webhook5_1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 admission-webhook5_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 admission-webhook5_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'admission-webhook' of 'deployment' 'admission-webhook' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 admission-webhook5_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 admission-webhook5_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 admission-webhook5_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'admission-webhook' of Deployment 'admission-webhook' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 admission-webhook5_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 admission-webhook5_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 admission-webhook5_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 admission-webhook5_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 admission-webhook5_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 admission-webhook5_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 admission-webhook5_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 admission-webhook5_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "admission-webhook" of deployment "admission-webhook" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 admission-webhook5_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 admission-webhook5_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment admission-webhook in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 admission-webhook5_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: admission-webhook
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container admission-webhook in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admission-webhook5_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment admission-webhook in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admission-webhook5_1.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container admission-webhook in deployment admission-webhook (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 admission-webhook5_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────



admission-webhook6_1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 admission-webhook6_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 admission-webhook6_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'admission-webhook' of 'deployment' 'admission-webhook' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 admission-webhook6_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 admission-webhook6_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 admission-webhook6_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'admission-webhook' of Deployment 'admission-webhook' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 admission-webhook6_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 admission-webhook6_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 admission-webhook6_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 admission-webhook6_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 admission-webhook6_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 admission-webhook6_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 admission-webhook6_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 admission-webhook6_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "admission-webhook" of deployment "admission-webhook" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 admission-webhook6_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 admission-webhook6_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment admission-webhook in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 admission-webhook6_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: admission-webhook
   5 │   labels:
   6 └     kubernetes.courselabs.co: admission
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container admission-webhook in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admission-webhook6_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment admission-webhook in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admission-webhook6_1.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container admission-webhook in deployment admission-webhook (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 admission-webhook6_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────



admission-webhook7_1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 admission-webhook7_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 admission-webhook7_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'admission-webhook' of 'deployment' 'admission-webhook' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 admission-webhook7_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 admission-webhook7_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 admission-webhook7_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'admission-webhook' of Deployment 'admission-webhook' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 admission-webhook7_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 admission-webhook7_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 admission-webhook7_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 admission-webhook7_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 admission-webhook7_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 admission-webhook7_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 admission-webhook7_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 admission-webhook7_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "admission-webhook" of deployment "admission-webhook" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 admission-webhook7_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 admission-webhook7_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment admission-webhook in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 admission-webhook7_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: admission-webhook
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container admission-webhook in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admission-webhook7_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment admission-webhook in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admission-webhook7_1.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container admission-webhook in deployment admission-webhook (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 admission-webhook7_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────



admission-webhook8_1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 admission-webhook8_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 admission-webhook8_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'admission-webhook' of 'deployment' 'admission-webhook' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 admission-webhook8_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 admission-webhook8_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 admission-webhook8_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'admission-webhook' of Deployment 'admission-webhook' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 admission-webhook8_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 admission-webhook8_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 admission-webhook8_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 admission-webhook8_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 admission-webhook8_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 admission-webhook8_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'admission-webhook' of Deployment 'admission-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 admission-webhook8_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 admission-webhook8_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "admission-webhook" of deployment "admission-webhook" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 admission-webhook8_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 admission-webhook8_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment admission-webhook in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 admission-webhook8_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: admission-webhook
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container admission-webhook in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admission-webhook8_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment admission-webhook in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 admission-webhook8_1.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container admission-webhook in deployment admission-webhook (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 admission-webhook8_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: admission-webhook
  18 │         image: kiamol/ch16-admission-webhook
  19 │         env:
  20 │         - name: USE_HTTPS
  21 │           value: 'true'
  22 │         - name: PORT
  23 │           value: '8443'
  24 │         ports:
  25 └         - name: https
  ..   
────────────────────────────────────────



adservice-deployment.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 adservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 9555
  22 │           env:
  23 │             - name: PORT
  24 │               value: "9555"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 adservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 9555
  22 │           env:
  23 │             - name: PORT
  24 │               value: "9555"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 adservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 9555
  22 │           env:
  23 │             - name: PORT
  24 │               value: "9555"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 adservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 9555
  22 │           env:
  23 │             - name: PORT
  24 │               value: "9555"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 adservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 9555
  22 │           env:
  23 │             - name: PORT
  24 │               value: "9555"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 9555
  22 │           env:
  23 │             - name: PORT
  24 │               value: "9555"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 9555
  22 │           env:
  23 │             - name: PORT
  24 │               value: "9555"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 9555
  22 │           env:
  23 │             - name: PORT
  24 │               value: "9555"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 9555
  22 │           env:
  23 │             - name: PORT
  24 │               value: "9555"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 adservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 9555
  22 │           env:
  23 │             - name: PORT
  24 │               value: "9555"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: adservice
   5 │   labels:
   6 └     app: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 adservice-deployment.yaml:18-43
────────────────────────────────────────
  18 ┌         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 9555
  22 │           env:
  23 │             - name: PORT
  24 │               value: "9555"
  25 │             - name: DISABLE_PROFILER
  26 └               value: "1"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 adservice-deployment.yaml:17-43
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: service
  19 │           image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  20 │           ports:
  21 │             - containerPort: 9555
  22 │           env:
  23 │             - name: PORT
  24 │               value: "9555"
  25 └             - name: DISABLE_PROFILER
  ..   
────────────────────────────────────────



adservice1.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'adservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 adservice1.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice1.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice1.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice1.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice1.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice1.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



adservice10.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'adservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 adservice10.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice10.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice10.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice10.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice10.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice10.yaml:4-6
────────────────────────────────────────
   4 ┌   name: adservice
   5 │   labels:
   6 └     app: adservice
────────────────────────────────────────



adservice11.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice11.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice11.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice11.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice11.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice11.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



adservice13.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'adservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 adservice13.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice13.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice13.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice13.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice13.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice13.yaml:4-6
────────────────────────────────────────
   4 ┌   name: adservice
   5 │   labels:
   6 └     app: adservice
────────────────────────────────────────



adservice14.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice14.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice14.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice14.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice14.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice14.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



adservice15.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'adservice' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 adservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: adservice
  19 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         ports:
  24 └         - containerPort: 9555
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'adservice' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 adservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: adservice
  19 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         ports:
  24 └         - containerPort: 9555
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'adservice' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 adservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: adservice
  19 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         ports:
  24 └         - containerPort: 9555
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'adservice' of Deployment 'adservice' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 adservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: adservice
  19 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         ports:
  24 └         - containerPort: 9555
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'adservice' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 adservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: adservice
  19 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         ports:
  24 └         - containerPort: 9555
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'adservice' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 adservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: adservice
  19 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         ports:
  24 └         - containerPort: 9555
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'adservice' of Deployment 'adservice' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 adservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: adservice
  19 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         ports:
  24 └         - containerPort: 9555
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'adservice' of Deployment 'adservice' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 adservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: adservice
  19 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         ports:
  24 └         - containerPort: 9555
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'adservice' of Deployment 'adservice' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 adservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: adservice
  19 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         ports:
  24 └         - containerPort: 9555
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'adservice' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: adservice
  19 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         ports:
  24 └         - containerPort: 9555
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'adservice' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: adservice
  19 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         ports:
  24 └         - containerPort: 9555
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: adservice
  19 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         ports:
  24 └         - containerPort: 9555
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "adservice" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: adservice
  19 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         ports:
  24 └         - containerPort: 9555
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 adservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: adservice
  19 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         ports:
  24 └         - containerPort: 9555
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice15.yaml:4-6
────────────────────────────────────────
   4 ┌   name: adservice
   5 │   labels:
   6 └     app: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 adservice15.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: adservice
  19 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         ports:
  24 └         - containerPort: 9555
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 adservice15.yaml:17-24
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: adservice
  19 │         image: gcr.io/google-samples/microservices-demo/adservice:v0.2.3
  20 │         env:
  21 │         - name: PORT
  22 │           value: '9555'
  23 │         ports:
  24 └         - containerPort: 9555
────────────────────────────────────────



adservice17.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'adservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 adservice17.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice17.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice17.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice17.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice17.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice17.yaml:4-6
────────────────────────────────────────
   4 ┌   name: adservice
   5 │   labels:
   6 └     app: adservice
────────────────────────────────────────



adservice18.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice18.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice18.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice18.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice18.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice18.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



adservice19.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 adservice19.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 adservice19.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 adservice19.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 adservice19.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 adservice19.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 adservice19.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 adservice19.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 adservice19.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 adservice19.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 adservice19.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice19.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice19.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice19.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice19.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 adservice19.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice19.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 adservice19.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 adservice19.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



adservice2.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice2.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice2.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice2.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice2.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice2.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



adservice20.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 adservice20.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/adservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 adservice20.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/adservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 adservice20.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/adservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 adservice20.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/adservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 adservice20.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/adservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice20.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/adservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice20.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/adservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice20.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/adservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice20.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/adservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 adservice20.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/adservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice20.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 adservice20.yaml:17-44
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/adservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 │         - name: PORT
  23 │           value: '9555'
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 adservice20.yaml:14-46
────────────────────────────────────────
  14 ┌       serviceAccountName: default
  15 │       terminationGracePeriodSeconds: 5
  16 │       containers:
  17 │       - name: server
  18 │         image: eshopimages.azurecr.io/eshop/adservice:$VERSION
  19 │         ports:
  20 │         - containerPort: 9555
  21 │         env:
  22 └         - name: PORT
  ..   
────────────────────────────────────────



adservice22.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'adservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 adservice22.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice22.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice22.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice22.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice22.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice22.yaml:4-6
────────────────────────────────────────
   4 ┌   name: adservice
   5 │   labels:
   6 └     app: adservice
────────────────────────────────────────



adservice23.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice23.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice23.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice23.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice23.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice23.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



adservice24.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'adservice' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



adservice24_1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'adservice' of Deployment 'adservice' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 adservice24_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: adservice
  23 │         image: srikanthhg/adservice:v1
  24 │         ports:
  25 │         - containerPort: 9555
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: adservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'adservice' of Deployment 'adservice' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 adservice24_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: adservice
  23 │         image: srikanthhg/adservice:v1
  24 │         ports:
  25 │         - containerPort: 9555
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: adservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'adservice' of 'deployment' 'adservice' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 adservice24_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: adservice
  23 │         image: srikanthhg/adservice:v1
  24 │         ports:
  25 │         - containerPort: 9555
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: adservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'adservice' of Deployment 'adservice' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 adservice24_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: adservice
  23 │         image: srikanthhg/adservice:v1
  24 │         ports:
  25 │         - containerPort: 9555
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: adservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'adservice' of Deployment 'adservice' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 adservice24_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: adservice
  23 │         image: srikanthhg/adservice:v1
  24 │         ports:
  25 │         - containerPort: 9555
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: adservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'adservice' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice24_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: adservice
  23 │         image: srikanthhg/adservice:v1
  24 │         ports:
  25 │         - containerPort: 9555
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: adservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'adservice' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice24_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: adservice
  23 │         image: srikanthhg/adservice:v1
  24 │         ports:
  25 │         - containerPort: 9555
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: adservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice24_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: adservice
  23 │         image: srikanthhg/adservice:v1
  24 │         ports:
  25 │         - containerPort: 9555
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: adservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "adservice" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice24_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: adservice
  23 │         image: srikanthhg/adservice:v1
  24 │         ports:
  25 │         - containerPort: 9555
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: adservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 adservice24_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: adservice
  23 │         image: srikanthhg/adservice:v1
  24 │         ports:
  25 │         - containerPort: 9555
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: adservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice24_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: adservice
   5 │   labels:
   6 └     app: adservice
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container adservice in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 adservice24_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: adservice
  23 │         image: srikanthhg/adservice:v1
  24 │         ports:
  25 │         - containerPort: 9555
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: adservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment adservice in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 adservice24_1.yaml:21-35
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: adservice
  23 │         image: srikanthhg/adservice:v1
  24 │         ports:
  25 │         - containerPort: 9555
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: adservice
  29 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container adservice in deployment adservice (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 adservice24_1.yaml:22-35
────────────────────────────────────────
  22 ┌       - name: adservice
  23 │         image: srikanthhg/adservice:v1
  24 │         ports:
  25 │         - containerPort: 9555
  26 │         envFrom:
  27 │         - configMapRef:
  28 │             name: adservice
  29 │         resources:
  30 └           requests:
  ..   
────────────────────────────────────────



adservice26.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'adservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 adservice26.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice26.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice26.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice26.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice26.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice26.yaml:4-6
────────────────────────────────────────
   4 ┌   name: adservice
   5 │   labels:
   6 └     app: adservice
────────────────────────────────────────



adservice27.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice27.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice27.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice27.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice27.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice27.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



adservice29.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'adservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 adservice29.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice29.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice29.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice29.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice29.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice29.yaml:4-6
────────────────────────────────────────
   4 ┌   name: adservice
   5 │   labels:
   6 └     app: adservice
────────────────────────────────────────



adservice30.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice30.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice30.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice30.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice30.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice30.yaml:4-6
────────────────────────────────────────
   4 ┌   name: adservice
   5 │   labels:
   6 └     app: adservice
────────────────────────────────────────



adservice31.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice31.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice31.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice31.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice31.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.10.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice31.yaml:4-6
────────────────────────────────────────
   4 ┌   name: adservice
   5 │   labels:
   6 └     app: adservice
────────────────────────────────────────



adservice4.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'adservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 adservice4.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice4.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice4.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice4.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice4.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice4.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



adservice5.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice5.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice5.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice5.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice5.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.8.1
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice5.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



adservice7.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'adservice' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 adservice7.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice7.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice7.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice7.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice7.yaml:24-54
────────────────────────────────────────
  24 ┌       - name: server
  25 │         securityContext:
  26 │           allowPrivilegeEscalation: false
  27 │           capabilities:
  28 │             drop:
  29 │             - ALL
  30 │           privileged: false
  31 │           readOnlyRootFilesystem: true
  32 └         image: adservice
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice7.yaml:4-6
────────────────────────────────────────
   4 ┌   name: adservice
   5 │   labels:
   6 └     app: adservice
────────────────────────────────────────



adservice8.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0020 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 adservice8.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'adservice' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 adservice8.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 adservice8.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "adservice" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 adservice8.yaml:22-52
────────────────────────────────────────
  22 ┌       - name: server
  23 │         securityContext:
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 │             - ALL
  28 │           privileged: false
  29 │           readOnlyRootFilesystem: true
  30 └         image: gcr.io/google-samples/microservices-demo/adservice:v0.9.0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment adservice in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 adservice8.yaml:4
────────────────────────────────────────
   4 [   name: adservice
────────────────────────────────────────



advanced-liveness.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'liveness' of Pod 'liveness-http' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 advanced-liveness.yaml:10-26
────────────────────────────────────────
  10 ┌     - args:
  11 │         - /server
  12 │       image: k8s.gcr.io/liveness
  13 │       livenessProbe:
  14 │         httpGet:
  15 │           httpHeaders:
  16 │             - name: X-Custom-Header
  17 │               value: Awesome
  18 └           # when "host" is not defined, "PodIP" will be used
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'liveness' of Pod 'liveness-http' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 advanced-liveness.yaml:10-26
────────────────────────────────────────
  10 ┌     - args:
  11 │         - /server
  12 │       image: k8s.gcr.io/liveness
  13 │       livenessProbe:
  14 │         httpGet:
  15 │           httpHeaders:
  16 │             - name: X-Custom-Header
  17 │               value: Awesome
  18 └           # when "host" is not defined, "PodIP" will be used
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'liveness' of 'pod' 'liveness-http' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 advanced-liveness.yaml:10-26
────────────────────────────────────────
  10 ┌     - args:
  11 │         - /server
  12 │       image: k8s.gcr.io/liveness
  13 │       livenessProbe:
  14 │         httpGet:
  15 │           httpHeaders:
  16 │             - name: X-Custom-Header
  17 │               value: Awesome
  18 └           # when "host" is not defined, "PodIP" will be used
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'liveness' of Pod 'liveness-http' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 advanced-liveness.yaml:10-26
────────────────────────────────────────
  10 ┌     - args:
  11 │         - /server
  12 │       image: k8s.gcr.io/liveness
  13 │       livenessProbe:
  14 │         httpGet:
  15 │           httpHeaders:
  16 │             - name: X-Custom-Header
  17 │               value: Awesome
  18 └           # when "host" is not defined, "PodIP" will be used
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'liveness' of Pod 'liveness-http' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 advanced-liveness.yaml:10-26
────────────────────────────────────────
  10 ┌     - args:
  11 │         - /server
  12 │       image: k8s.gcr.io/liveness
  13 │       livenessProbe:
  14 │         httpGet:
  15 │           httpHeaders:
  16 │             - name: X-Custom-Header
  17 │               value: Awesome
  18 └           # when "host" is not defined, "PodIP" will be used
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'liveness' of Pod 'liveness-http' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 advanced-liveness.yaml:10-26
────────────────────────────────────────
  10 ┌     - args:
  11 │         - /server
  12 │       image: k8s.gcr.io/liveness
  13 │       livenessProbe:
  14 │         httpGet:
  15 │           httpHeaders:
  16 │             - name: X-Custom-Header
  17 │               value: Awesome
  18 └           # when "host" is not defined, "PodIP" will be used
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'liveness' of Pod 'liveness-http' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 advanced-liveness.yaml:10-26
────────────────────────────────────────
  10 ┌     - args:
  11 │         - /server
  12 │       image: k8s.gcr.io/liveness
  13 │       livenessProbe:
  14 │         httpGet:
  15 │           httpHeaders:
  16 │             - name: X-Custom-Header
  17 │               value: Awesome
  18 └           # when "host" is not defined, "PodIP" will be used
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'liveness' of Pod 'liveness-http' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 advanced-liveness.yaml:10-26
────────────────────────────────────────
  10 ┌     - args:
  11 │         - /server
  12 │       image: k8s.gcr.io/liveness
  13 │       livenessProbe:
  14 │         httpGet:
  15 │           httpHeaders:
  16 │             - name: X-Custom-Header
  17 │               value: Awesome
  18 └           # when "host" is not defined, "PodIP" will be used
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'liveness' of Pod 'liveness-http' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 advanced-liveness.yaml:10-26
────────────────────────────────────────
  10 ┌     - args:
  11 │         - /server
  12 │       image: k8s.gcr.io/liveness
  13 │       livenessProbe:
  14 │         httpGet:
  15 │           httpHeaders:
  16 │             - name: X-Custom-Header
  17 │               value: Awesome
  18 └           # when "host" is not defined, "PodIP" will be used
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'liveness' of Pod 'liveness-http' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 advanced-liveness.yaml:10-26
────────────────────────────────────────
  10 ┌     - args:
  11 │         - /server
  12 │       image: k8s.gcr.io/liveness
  13 │       livenessProbe:
  14 │         httpGet:
  15 │           httpHeaders:
  16 │             - name: X-Custom-Header
  17 │               value: Awesome
  18 └           # when "host" is not defined, "PodIP" will be used
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'liveness' of Pod 'liveness-http' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 advanced-liveness.yaml:10-26
────────────────────────────────────────
  10 ┌     - args:
  11 │         - /server
  12 │       image: k8s.gcr.io/liveness
  13 │       livenessProbe:
  14 │         httpGet:
  15 │           httpHeaders:
  16 │             - name: X-Custom-Header
  17 │               value: Awesome
  18 └           # when "host" is not defined, "PodIP" will be used
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'liveness' of Pod 'liveness-http' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 advanced-liveness.yaml:10-26
────────────────────────────────────────
  10 ┌     - args:
  11 │         - /server
  12 │       image: k8s.gcr.io/liveness
  13 │       livenessProbe:
  14 │         httpGet:
  15 │           httpHeaders:
  16 │             - name: X-Custom-Header
  17 │               value: Awesome
  18 └           # when "host" is not defined, "PodIP" will be used
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 advanced-liveness.yaml:10-26
────────────────────────────────────────
  10 ┌     - args:
  11 │         - /server
  12 │       image: k8s.gcr.io/liveness
  13 │       livenessProbe:
  14 │         httpGet:
  15 │           httpHeaders:
  16 │             - name: X-Custom-Header
  17 │               value: Awesome
  18 └           # when "host" is not defined, "PodIP" will be used
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "liveness" of pod "liveness-http" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 advanced-liveness.yaml:10-26
────────────────────────────────────────
  10 ┌     - args:
  11 │         - /server
  12 │       image: k8s.gcr.io/liveness
  13 │       livenessProbe:
  14 │         httpGet:
  15 │           httpHeaders:
  16 │             - name: X-Custom-Header
  17 │               value: Awesome
  18 └           # when "host" is not defined, "PodIP" will be used
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 advanced-liveness.yaml:10-26
────────────────────────────────────────
  10 ┌     - args:
  11 │         - /server
  12 │       image: k8s.gcr.io/liveness
  13 │       livenessProbe:
  14 │         httpGet:
  15 │           httpHeaders:
  16 │             - name: X-Custom-Header
  17 │               value: Awesome
  18 └           # when "host" is not defined, "PodIP" will be used
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod liveness-http in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 advanced-liveness.yaml:5-7
────────────────────────────────────────
   5 ┌   labels:
   6 │     test: liveness
   7 └   name: liveness-http
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container liveness-http in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 advanced-liveness.yaml:10-26
────────────────────────────────────────
  10 ┌     - args:
  11 │         - /server
  12 │       image: k8s.gcr.io/liveness
  13 │       livenessProbe:
  14 │         httpGet:
  15 │           httpHeaders:
  16 │             - name: X-Custom-Header
  17 │               value: Awesome
  18 └           # when "host" is not defined, "PodIP" will be used
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod liveness-http in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 advanced-liveness.yaml:9-26
────────────────────────────────────────
   9 ┌   containers:
  10 │     - args:
  11 │         - /server
  12 │       image: k8s.gcr.io/liveness
  13 │       livenessProbe:
  14 │         httpGet:
  15 │           httpHeaders:
  16 │             - name: X-Custom-Header
  17 └               value: Awesome
  ..   
────────────────────────────────────────



advanced-pod.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'advanced-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 advanced-pod.yaml:10-27
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx:latest
  12 │       ports:
  13 │         - containerPort: 80
  14 │       livenessProbe:
  15 │         httpGet:
  16 │           path: /abcd.html
  17 │           port: 80
  18 └         initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'advanced-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 advanced-pod.yaml:10-27
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx:latest
  12 │       ports:
  13 │         - containerPort: 80
  14 │       livenessProbe:
  15 │         httpGet:
  16 │           path: /abcd.html
  17 │           port: 80
  18 └         initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'advanced-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 advanced-pod.yaml:10-27
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx:latest
  12 │       ports:
  13 │         - containerPort: 80
  14 │       livenessProbe:
  15 │         httpGet:
  16 │           path: /abcd.html
  17 │           port: 80
  18 └         initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'advanced-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 advanced-pod.yaml:10-27
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx:latest
  12 │       ports:
  13 │         - containerPort: 80
  14 │       livenessProbe:
  15 │         httpGet:
  16 │           path: /abcd.html
  17 │           port: 80
  18 └         initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'advanced-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 advanced-pod.yaml:10-27
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx:latest
  12 │       ports:
  13 │         - containerPort: 80
  14 │       livenessProbe:
  15 │         httpGet:
  16 │           path: /abcd.html
  17 │           port: 80
  18 └         initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'advanced-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 advanced-pod.yaml:10-27
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx:latest
  12 │       ports:
  13 │         - containerPort: 80
  14 │       livenessProbe:
  15 │         httpGet:
  16 │           path: /abcd.html
  17 │           port: 80
  18 └         initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'advanced-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 advanced-pod.yaml:10-27
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx:latest
  12 │       ports:
  13 │         - containerPort: 80
  14 │       livenessProbe:
  15 │         httpGet:
  16 │           path: /abcd.html
  17 │           port: 80
  18 └         initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'advanced-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 advanced-pod.yaml:10-27
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx:latest
  12 │       ports:
  13 │         - containerPort: 80
  14 │       livenessProbe:
  15 │         httpGet:
  16 │           path: /abcd.html
  17 │           port: 80
  18 └         initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'advanced-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 advanced-pod.yaml:10-27
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx:latest
  12 │       ports:
  13 │         - containerPort: 80
  14 │       livenessProbe:
  15 │         httpGet:
  16 │           path: /abcd.html
  17 │           port: 80
  18 └         initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'advanced-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 advanced-pod.yaml:10-27
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx:latest
  12 │       ports:
  13 │         - containerPort: 80
  14 │       livenessProbe:
  15 │         httpGet:
  16 │           path: /abcd.html
  17 │           port: 80
  18 └         initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'advanced-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 advanced-pod.yaml:10-27
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx:latest
  12 │       ports:
  13 │         - containerPort: 80
  14 │       livenessProbe:
  15 │         httpGet:
  16 │           path: /abcd.html
  17 │           port: 80
  18 └         initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'advanced-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 advanced-pod.yaml:10-27
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx:latest
  12 │       ports:
  13 │         - containerPort: 80
  14 │       livenessProbe:
  15 │         httpGet:
  16 │           path: /abcd.html
  17 │           port: 80
  18 └         initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 advanced-pod.yaml:10-27
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx:latest
  12 │       ports:
  13 │         - containerPort: 80
  14 │       livenessProbe:
  15 │         httpGet:
  16 │           path: /abcd.html
  17 │           port: 80
  18 └         initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "advanced-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 advanced-pod.yaml:10-27
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx:latest
  12 │       ports:
  13 │         - containerPort: 80
  14 │       livenessProbe:
  15 │         httpGet:
  16 │           path: /abcd.html
  17 │           port: 80
  18 └         initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 advanced-pod.yaml:10-27
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx:latest
  12 │       ports:
  13 │         - containerPort: 80
  14 │       livenessProbe:
  15 │         httpGet:
  16 │           path: /abcd.html
  17 │           port: 80
  18 └         initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod advanced-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 advanced-pod.yaml:4-7
────────────────────────────────────────
   4 ┌   name: advanced-pod
   5 │   labels:
   6 │     app: advanced-app
   7 └     tier: backend
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod advanced-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container advanced-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 advanced-pod.yaml:10-27
────────────────────────────────────────
  10 ┌     - name: nginx
  11 │       image: nginx:latest
  12 │       ports:
  13 │         - containerPort: 80
  14 │       livenessProbe:
  15 │         httpGet:
  16 │           path: /abcd.html
  17 │           port: 80
  18 └         initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod advanced-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 advanced-pod.yaml:9-27
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: nginx
  11 │       image: nginx:latest
  12 │       ports:
  13 │         - containerPort: 80
  14 │       livenessProbe:
  15 │         httpGet:
  16 │           path: /abcd.html
  17 └           port: 80
  ..   
────────────────────────────────────────



aeraki.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 103, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aeraki' of Deployment 'aeraki' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aeraki.yaml:22-86
────────────────────────────────────────
  22 ┌       - name: aeraki
  23 │         image: ${AERAKI_IMAGE}:${AERAKI_TAG}
  24 │         args:
  25 │         - --master=true
  26 │         - --enable-envoy-filter-namespace-scope=false
  27 │         - --log_output_level=all:info
  28 │         - --log_rotate=/home/aeraki_run.log
  29 │         imagePullPolicy: ${AERAKI_IMG_PULL_POLICY}
  30 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aeraki' of Deployment 'aeraki' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aeraki.yaml:22-86
────────────────────────────────────────
  22 ┌       - name: aeraki
  23 │         image: ${AERAKI_IMAGE}:${AERAKI_TAG}
  24 │         args:
  25 │         - --master=true
  26 │         - --enable-envoy-filter-namespace-scope=false
  27 │         - --log_output_level=all:info
  28 │         - --log_rotate=/home/aeraki_run.log
  29 │         imagePullPolicy: ${AERAKI_IMG_PULL_POLICY}
  30 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aeraki' of 'deployment' 'aeraki' in '${AERAKI_NAMESPACE}' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aeraki.yaml:22-86
────────────────────────────────────────
  22 ┌       - name: aeraki
  23 │         image: ${AERAKI_IMAGE}:${AERAKI_TAG}
  24 │         args:
  25 │         - --master=true
  26 │         - --enable-envoy-filter-namespace-scope=false
  27 │         - --log_output_level=all:info
  28 │         - --log_rotate=/home/aeraki_run.log
  29 │         imagePullPolicy: ${AERAKI_IMG_PULL_POLICY}
  30 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aeraki' of Deployment 'aeraki' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aeraki.yaml:22-86
────────────────────────────────────────
  22 ┌       - name: aeraki
  23 │         image: ${AERAKI_IMAGE}:${AERAKI_TAG}
  24 │         args:
  25 │         - --master=true
  26 │         - --enable-envoy-filter-namespace-scope=false
  27 │         - --log_output_level=all:info
  28 │         - --log_rotate=/home/aeraki_run.log
  29 │         imagePullPolicy: ${AERAKI_IMG_PULL_POLICY}
  30 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aeraki' of Deployment 'aeraki' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aeraki.yaml:22-86
────────────────────────────────────────
  22 ┌       - name: aeraki
  23 │         image: ${AERAKI_IMAGE}:${AERAKI_TAG}
  24 │         args:
  25 │         - --master=true
  26 │         - --enable-envoy-filter-namespace-scope=false
  27 │         - --log_output_level=all:info
  28 │         - --log_rotate=/home/aeraki_run.log
  29 │         imagePullPolicy: ${AERAKI_IMG_PULL_POLICY}
  30 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aeraki' of Deployment 'aeraki' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aeraki.yaml:22-86
────────────────────────────────────────
  22 ┌       - name: aeraki
  23 │         image: ${AERAKI_IMAGE}:${AERAKI_TAG}
  24 │         args:
  25 │         - --master=true
  26 │         - --enable-envoy-filter-namespace-scope=false
  27 │         - --log_output_level=all:info
  28 │         - --log_rotate=/home/aeraki_run.log
  29 │         imagePullPolicy: ${AERAKI_IMG_PULL_POLICY}
  30 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aeraki' of Deployment 'aeraki' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aeraki.yaml:22-86
────────────────────────────────────────
  22 ┌       - name: aeraki
  23 │         image: ${AERAKI_IMAGE}:${AERAKI_TAG}
  24 │         args:
  25 │         - --master=true
  26 │         - --enable-envoy-filter-namespace-scope=false
  27 │         - --log_output_level=all:info
  28 │         - --log_rotate=/home/aeraki_run.log
  29 │         imagePullPolicy: ${AERAKI_IMG_PULL_POLICY}
  30 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aeraki.yaml:22-86
────────────────────────────────────────
  22 ┌       - name: aeraki
  23 │         image: ${AERAKI_IMAGE}:${AERAKI_TAG}
  24 │         args:
  25 │         - --master=true
  26 │         - --enable-envoy-filter-namespace-scope=false
  27 │         - --log_output_level=all:info
  28 │         - --log_rotate=/home/aeraki_run.log
  29 │         imagePullPolicy: ${AERAKI_IMG_PULL_POLICY}
  30 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aeraki" of deployment "aeraki" in "${AERAKI_NAMESPACE}" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aeraki.yaml:22-86
────────────────────────────────────────
  22 ┌       - name: aeraki
  23 │         image: ${AERAKI_IMAGE}:${AERAKI_TAG}
  24 │         args:
  25 │         - --master=true
  26 │         - --enable-envoy-filter-namespace-scope=false
  27 │         - --log_output_level=all:info
  28 │         - --log_rotate=/home/aeraki_run.log
  29 │         imagePullPolicy: ${AERAKI_IMG_PULL_POLICY}
  30 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aeraki.yaml:22-86
────────────────────────────────────────
  22 ┌       - name: aeraki
  23 │         image: ${AERAKI_IMAGE}:${AERAKI_TAG}
  24 │         args:
  25 │         - --master=true
  26 │         - --enable-envoy-filter-namespace-scope=false
  27 │         - --log_output_level=all:info
  28 │         - --log_rotate=/home/aeraki_run.log
  29 │         imagePullPolicy: ${AERAKI_IMG_PULL_POLICY}
  30 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aeraki in ${AERAKI_NAMESPACE} namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aeraki.yaml:22-86
────────────────────────────────────────
  22 ┌       - name: aeraki
  23 │         image: ${AERAKI_IMAGE}:${AERAKI_TAG}
  24 │         args:
  25 │         - --master=true
  26 │         - --enable-envoy-filter-namespace-scope=false
  27 │         - --log_output_level=all:info
  28 │         - --log_rotate=/home/aeraki_run.log
  29 │         imagePullPolicy: ${AERAKI_IMG_PULL_POLICY}
  30 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aeraki in ${AERAKI_NAMESPACE} namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aeraki.yaml:20-91
────────────────────────────────────────
  20 ┌       serviceAccountName: aeraki
  21 │       containers:
  22 │       - name: aeraki
  23 │         image: ${AERAKI_IMAGE}:${AERAKI_TAG}
  24 │         args:
  25 │         - --master=true
  26 │         - --enable-envoy-filter-namespace-scope=false
  27 │         - --log_output_level=all:info
  28 └         - --log_rotate=/home/aeraki_run.log
  ..   
────────────────────────────────────────



aeraki_3.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0049 (MEDIUM): Role 'aeraki' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 aeraki_3.yaml:9-15
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - configmaps
  13 │   - events
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0112 (CRITICAL): Role 'aeraki' shouldn't manage all resources at the namespace '${AERAKI_NAMESPACE}'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 aeraki_3.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - coordination.k8s.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────



aeraki_5.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 109, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 5)

AVD-KSV-0041 (CRITICAL): ClusterRole 'aeraki' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 aeraki_5.yaml:8-15
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - secrets
  12 │   - namespaces
  13 │   - configmaps
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 aeraki_5.yaml:8-15
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - secrets
  12 │   - namespaces
  13 │   - configmaps
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'aeraki' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 aeraki_5.yaml:16-21
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - networking.istio.io
  18 │   resources:
  19 │   - '*'
  20 │   verbs:
  21 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'aeraki' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 aeraki_5.yaml:22-29
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - redis.aeraki.io
  24 │   - dubbo.aeraki.io
  25 │   - metaprotocol.aeraki.io
  26 │   resources:
  27 │   - '*'
  28 │   verbs:
  29 └   - '*'
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'aeraki' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 aeraki_5.yaml:8-15
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - secrets
  12 │   - namespaces
  13 │   - configmaps
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'aeraki' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 aeraki_5.yaml:39-44
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - admissionregistration.k8s.io
  41 │   resources:
  42 │   - validatingwebhookconfigurations
  43 │   verbs:
  44 └   - '*'
────────────────────────────────────────



affine.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'affine' of Deployment 'affine' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 affine.yaml:17-84
────────────────────────────────────────
  17 ┌       - name: affine
  18 │         image: ghcr.io/toeverything/affine-graphql:stable
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - node ./scripts/self-host-predeploy && node ./dist/index.js
  23 │         ports:
  24 │         - containerPort: 3010
  25 └         - containerPort: 5555
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'affine' of Deployment 'affine' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 affine.yaml:17-84
────────────────────────────────────────
  17 ┌       - name: affine
  18 │         image: ghcr.io/toeverything/affine-graphql:stable
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - node ./scripts/self-host-predeploy && node ./dist/index.js
  23 │         ports:
  24 │         - containerPort: 3010
  25 └         - containerPort: 5555
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'affine' of 'deployment' 'affine' in 'affine' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 affine.yaml:17-84
────────────────────────────────────────
  17 ┌       - name: affine
  18 │         image: ghcr.io/toeverything/affine-graphql:stable
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - node ./scripts/self-host-predeploy && node ./dist/index.js
  23 │         ports:
  24 │         - containerPort: 3010
  25 └         - containerPort: 5555
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'affine' of Deployment 'affine' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 affine.yaml:17-84
────────────────────────────────────────
  17 ┌       - name: affine
  18 │         image: ghcr.io/toeverything/affine-graphql:stable
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - node ./scripts/self-host-predeploy && node ./dist/index.js
  23 │         ports:
  24 │         - containerPort: 3010
  25 └         - containerPort: 5555
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'affine' of Deployment 'affine' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 affine.yaml:17-84
────────────────────────────────────────
  17 ┌       - name: affine
  18 │         image: ghcr.io/toeverything/affine-graphql:stable
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - node ./scripts/self-host-predeploy && node ./dist/index.js
  23 │         ports:
  24 │         - containerPort: 3010
  25 └         - containerPort: 5555
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'affine' of Deployment 'affine' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 affine.yaml:17-84
────────────────────────────────────────
  17 ┌       - name: affine
  18 │         image: ghcr.io/toeverything/affine-graphql:stable
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - node ./scripts/self-host-predeploy && node ./dist/index.js
  23 │         ports:
  24 │         - containerPort: 3010
  25 └         - containerPort: 5555
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'affine' of Deployment 'affine' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 affine.yaml:17-84
────────────────────────────────────────
  17 ┌       - name: affine
  18 │         image: ghcr.io/toeverything/affine-graphql:stable
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - node ./scripts/self-host-predeploy && node ./dist/index.js
  23 │         ports:
  24 │         - containerPort: 3010
  25 └         - containerPort: 5555
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'affine' of Deployment 'affine' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 affine.yaml:17-84
────────────────────────────────────────
  17 ┌       - name: affine
  18 │         image: ghcr.io/toeverything/affine-graphql:stable
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - node ./scripts/self-host-predeploy && node ./dist/index.js
  23 │         ports:
  24 │         - containerPort: 3010
  25 └         - containerPort: 5555
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'affine' of Deployment 'affine' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 affine.yaml:17-84
────────────────────────────────────────
  17 ┌       - name: affine
  18 │         image: ghcr.io/toeverything/affine-graphql:stable
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - node ./scripts/self-host-predeploy && node ./dist/index.js
  23 │         ports:
  24 │         - containerPort: 3010
  25 └         - containerPort: 5555
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'affine' of Deployment 'affine' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 affine.yaml:17-84
────────────────────────────────────────
  17 ┌       - name: affine
  18 │         image: ghcr.io/toeverything/affine-graphql:stable
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - node ./scripts/self-host-predeploy && node ./dist/index.js
  23 │         ports:
  24 │         - containerPort: 3010
  25 └         - containerPort: 5555
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'affine' of Deployment 'affine' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 affine.yaml:17-84
────────────────────────────────────────
  17 ┌       - name: affine
  18 │         image: ghcr.io/toeverything/affine-graphql:stable
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - node ./scripts/self-host-predeploy && node ./dist/index.js
  23 │         ports:
  24 │         - containerPort: 3010
  25 └         - containerPort: 5555
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 affine.yaml:17-84
────────────────────────────────────────
  17 ┌       - name: affine
  18 │         image: ghcr.io/toeverything/affine-graphql:stable
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - node ./scripts/self-host-predeploy && node ./dist/index.js
  23 │         ports:
  24 │         - containerPort: 3010
  25 └         - containerPort: 5555
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "affine" of deployment "affine" in "affine" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 affine.yaml:17-84
────────────────────────────────────────
  17 ┌       - name: affine
  18 │         image: ghcr.io/toeverything/affine-graphql:stable
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - node ./scripts/self-host-predeploy && node ./dist/index.js
  23 │         ports:
  24 │         - containerPort: 3010
  25 └         - containerPort: 5555
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 affine.yaml:17-84
────────────────────────────────────────
  17 ┌       - name: affine
  18 │         image: ghcr.io/toeverything/affine-graphql:stable
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - node ./scripts/self-host-predeploy && node ./dist/index.js
  23 │         ports:
  24 │         - containerPort: 3010
  25 └         - containerPort: 5555
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container affine in affine namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affine.yaml:17-84
────────────────────────────────────────
  17 ┌       - name: affine
  18 │         image: ghcr.io/toeverything/affine-graphql:stable
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - node ./scripts/self-host-predeploy && node ./dist/index.js
  23 │         ports:
  24 │         - containerPort: 3010
  25 └         - containerPort: 5555
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment affine in affine namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affine.yaml:16-91
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: affine
  18 │         image: ghcr.io/toeverything/affine-graphql:stable
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - node ./scripts/self-host-predeploy && node ./dist/index.js
  23 │         ports:
  24 └         - containerPort: 3010
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container affine in deployment affine (namespace: affine) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 affine.yaml:17-84
────────────────────────────────────────
  17 ┌       - name: affine
  18 │         image: ghcr.io/toeverything/affine-graphql:stable
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         - node ./scripts/self-host-predeploy && node ./dist/index.js
  23 │         ports:
  24 │         - containerPort: 3010
  25 └         - containerPort: 5555
  ..   
────────────────────────────────────────



affine_2.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'affine-redis' of Deployment 'affine-redis' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 affine_2.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: affine-redis
  18 │         image: redis
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'affine-redis' of Deployment 'affine-redis' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 affine_2.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: affine-redis
  18 │         image: redis
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'affine-redis' of 'deployment' 'affine-redis' in 'affine' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 affine_2.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: affine-redis
  18 │         image: redis
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'affine-redis' of Deployment 'affine-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 affine_2.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: affine-redis
  18 │         image: redis
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'affine-redis' of Deployment 'affine-redis' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 affine_2.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: affine-redis
  18 │         image: redis
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'affine-redis' of Deployment 'affine-redis' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 affine_2.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: affine-redis
  18 │         image: redis
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'affine-redis' of Deployment 'affine-redis' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 affine_2.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: affine-redis
  18 │         image: redis
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'affine-redis' of Deployment 'affine-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 affine_2.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: affine-redis
  18 │         image: redis
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'affine-redis' of Deployment 'affine-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 affine_2.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: affine-redis
  18 │         image: redis
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'affine-redis' of Deployment 'affine-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 affine_2.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: affine-redis
  18 │         image: redis
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'affine-redis' of Deployment 'affine-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 affine_2.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: affine-redis
  18 │         image: redis
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'affine-redis' of Deployment 'affine-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 affine_2.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: affine-redis
  18 │         image: redis
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 affine_2.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: affine-redis
  18 │         image: redis
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "affine-redis" of deployment "affine-redis" in "affine" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 affine_2.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: affine-redis
  18 │         image: redis
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 affine_2.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: affine-redis
  18 │         image: redis
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container affine-redis in affine namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affine_2.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: affine-redis
  18 │         image: redis
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment affine-redis in affine namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affine_2.yaml:16-25
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: affine-redis
  18 │         image: redis
  19 │         volumeMounts:
  20 │         - name: redis-data
  21 │           mountPath: /data
  22 │       volumes:
  23 │       - name: redis-data
  24 │         persistentVolumeClaim:
  25 └           claimName: affine-redis
────────────────────────────────────────



affine_4.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'affine-postgres' of Deployment 'affine-postgres' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 affine_4.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: affine-postgres
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_USER
  21 │           value: affine
  22 │         - name: POSTGRES_PASSWORD
  23 │           value: affine
  24 │         - name: POSTGRES_DB
  25 └           value: affine
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'affine-postgres' of Deployment 'affine-postgres' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 affine_4.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: affine-postgres
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_USER
  21 │           value: affine
  22 │         - name: POSTGRES_PASSWORD
  23 │           value: affine
  24 │         - name: POSTGRES_DB
  25 └           value: affine
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'affine-postgres' of 'deployment' 'affine-postgres' in 'affine' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 affine_4.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: affine-postgres
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_USER
  21 │           value: affine
  22 │         - name: POSTGRES_PASSWORD
  23 │           value: affine
  24 │         - name: POSTGRES_DB
  25 └           value: affine
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'affine-postgres' of Deployment 'affine-postgres' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 affine_4.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: affine-postgres
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_USER
  21 │           value: affine
  22 │         - name: POSTGRES_PASSWORD
  23 │           value: affine
  24 │         - name: POSTGRES_DB
  25 └           value: affine
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'affine-postgres' of Deployment 'affine-postgres' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 affine_4.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: affine-postgres
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_USER
  21 │           value: affine
  22 │         - name: POSTGRES_PASSWORD
  23 │           value: affine
  24 │         - name: POSTGRES_DB
  25 └           value: affine
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'affine-postgres' of Deployment 'affine-postgres' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 affine_4.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: affine-postgres
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_USER
  21 │           value: affine
  22 │         - name: POSTGRES_PASSWORD
  23 │           value: affine
  24 │         - name: POSTGRES_DB
  25 └           value: affine
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'affine-postgres' of Deployment 'affine-postgres' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 affine_4.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: affine-postgres
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_USER
  21 │           value: affine
  22 │         - name: POSTGRES_PASSWORD
  23 │           value: affine
  24 │         - name: POSTGRES_DB
  25 └           value: affine
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'affine-postgres' of Deployment 'affine-postgres' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 affine_4.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: affine-postgres
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_USER
  21 │           value: affine
  22 │         - name: POSTGRES_PASSWORD
  23 │           value: affine
  24 │         - name: POSTGRES_DB
  25 └           value: affine
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'affine-postgres' of Deployment 'affine-postgres' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 affine_4.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: affine-postgres
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_USER
  21 │           value: affine
  22 │         - name: POSTGRES_PASSWORD
  23 │           value: affine
  24 │         - name: POSTGRES_DB
  25 └           value: affine
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'affine-postgres' of Deployment 'affine-postgres' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 affine_4.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: affine-postgres
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_USER
  21 │           value: affine
  22 │         - name: POSTGRES_PASSWORD
  23 │           value: affine
  24 │         - name: POSTGRES_DB
  25 └           value: affine
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'affine-postgres' of Deployment 'affine-postgres' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 affine_4.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: affine-postgres
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_USER
  21 │           value: affine
  22 │         - name: POSTGRES_PASSWORD
  23 │           value: affine
  24 │         - name: POSTGRES_DB
  25 └           value: affine
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 affine_4.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: affine-postgres
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_USER
  21 │           value: affine
  22 │         - name: POSTGRES_PASSWORD
  23 │           value: affine
  24 │         - name: POSTGRES_DB
  25 └           value: affine
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "affine-postgres" of deployment "affine-postgres" in "affine" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 affine_4.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: affine-postgres
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_USER
  21 │           value: affine
  22 │         - name: POSTGRES_PASSWORD
  23 │           value: affine
  24 │         - name: POSTGRES_DB
  25 └           value: affine
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 affine_4.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: affine-postgres
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_USER
  21 │           value: affine
  22 │         - name: POSTGRES_PASSWORD
  23 │           value: affine
  24 │         - name: POSTGRES_DB
  25 └           value: affine
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container affine-postgres in affine namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affine_4.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: affine-postgres
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_USER
  21 │           value: affine
  22 │         - name: POSTGRES_PASSWORD
  23 │           value: affine
  24 │         - name: POSTGRES_DB
  25 └           value: affine
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment affine-postgres in affine namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affine_4.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: affine-postgres
  18 │         image: postgres:16
  19 │         env:
  20 │         - name: POSTGRES_USER
  21 │           value: affine
  22 │         - name: POSTGRES_PASSWORD
  23 │           value: affine
  24 └         - name: POSTGRES_DB
  ..   
────────────────────────────────────────



affinity-2.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 affinity-2.yaml:18-21
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 affinity-2.yaml:18-21
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 affinity-2.yaml:18-21
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 affinity-2.yaml:18-21
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 affinity-2.yaml:18-21
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 affinity-2.yaml:18-21
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 affinity-2.yaml:18-21
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 affinity-2.yaml:18-21
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 affinity-2.yaml:18-21
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 affinity-2.yaml:18-21
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 affinity-2.yaml:18-21
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 affinity-2.yaml:18-21
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 affinity-2.yaml:18-21
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 affinity-2.yaml:18-21
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 affinity-2.yaml:18-21
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 affinity-2.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: nginx
   6 └   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affinity-2.yaml:18-21
────────────────────────────────────────
  18 ┌       - image: nginx
  19 │         name: nginx
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affinity-2.yaml:17-30
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: nginx
  19 │         name: nginx
  20 │         ports:
  21 │         - containerPort: 80
  22 │       affinity:
  23 │         podAntiAffinity:
  24 │           preferredDuringSchedulingIgnoredDuringExecution:
  25 └           - weight: 100
  ..   
────────────────────────────────────────



affinity-p.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'affinity-c' of Pod 'affinity-p' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 affinity-p.yaml:17-24
────────────────────────────────────────
  17 ┌     - name: affinity-c
  18 │       image: nginx
  19 │       resources: 
  20 │         limits:
  21 │           memory: "500Mi"
  22 │           cpu: "500m"
  23 │       ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'affinity-c' of Pod 'affinity-p' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 affinity-p.yaml:17-24
────────────────────────────────────────
  17 ┌     - name: affinity-c
  18 │       image: nginx
  19 │       resources: 
  20 │         limits:
  21 │           memory: "500Mi"
  22 │           cpu: "500m"
  23 │       ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'affinity-c' of 'pod' 'affinity-p' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 affinity-p.yaml:17-24
────────────────────────────────────────
  17 ┌     - name: affinity-c
  18 │       image: nginx
  19 │       resources: 
  20 │         limits:
  21 │           memory: "500Mi"
  22 │           cpu: "500m"
  23 │       ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'affinity-c' of Pod 'affinity-p' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 affinity-p.yaml:17-24
────────────────────────────────────────
  17 ┌     - name: affinity-c
  18 │       image: nginx
  19 │       resources: 
  20 │         limits:
  21 │           memory: "500Mi"
  22 │           cpu: "500m"
  23 │       ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'affinity-c' of Pod 'affinity-p' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 affinity-p.yaml:17-24
────────────────────────────────────────
  17 ┌     - name: affinity-c
  18 │       image: nginx
  19 │       resources: 
  20 │         limits:
  21 │           memory: "500Mi"
  22 │           cpu: "500m"
  23 │       ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'affinity-c' of Pod 'affinity-p' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 affinity-p.yaml:17-24
────────────────────────────────────────
  17 ┌     - name: affinity-c
  18 │       image: nginx
  19 │       resources: 
  20 │         limits:
  21 │           memory: "500Mi"
  22 │           cpu: "500m"
  23 │       ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'affinity-c' of Pod 'affinity-p' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 affinity-p.yaml:17-24
────────────────────────────────────────
  17 ┌     - name: affinity-c
  18 │       image: nginx
  19 │       resources: 
  20 │         limits:
  21 │           memory: "500Mi"
  22 │           cpu: "500m"
  23 │       ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'affinity-c' of Pod 'affinity-p' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 affinity-p.yaml:17-24
────────────────────────────────────────
  17 ┌     - name: affinity-c
  18 │       image: nginx
  19 │       resources: 
  20 │         limits:
  21 │           memory: "500Mi"
  22 │           cpu: "500m"
  23 │       ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'affinity-c' of Pod 'affinity-p' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 affinity-p.yaml:17-24
────────────────────────────────────────
  17 ┌     - name: affinity-c
  18 │       image: nginx
  19 │       resources: 
  20 │         limits:
  21 │           memory: "500Mi"
  22 │           cpu: "500m"
  23 │       ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'affinity-c' of Pod 'affinity-p' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 affinity-p.yaml:17-24
────────────────────────────────────────
  17 ┌     - name: affinity-c
  18 │       image: nginx
  19 │       resources: 
  20 │         limits:
  21 │           memory: "500Mi"
  22 │           cpu: "500m"
  23 │       ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 affinity-p.yaml:17-24
────────────────────────────────────────
  17 ┌     - name: affinity-c
  18 │       image: nginx
  19 │       resources: 
  20 │         limits:
  21 │           memory: "500Mi"
  22 │           cpu: "500m"
  23 │       ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "affinity-c" of pod "affinity-p" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 affinity-p.yaml:17-24
────────────────────────────────────────
  17 ┌     - name: affinity-c
  18 │       image: nginx
  19 │       resources: 
  20 │         limits:
  21 │           memory: "500Mi"
  22 │           cpu: "500m"
  23 │       ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 affinity-p.yaml:17-24
────────────────────────────────────────
  17 ┌     - name: affinity-c
  18 │       image: nginx
  19 │       resources: 
  20 │         limits:
  21 │           memory: "500Mi"
  22 │           cpu: "500m"
  23 │       ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod affinity-p in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 affinity-p.yaml:5-7
────────────────────────────────────────
   5 ┌   name: affinity-p
   6 │   labels:
   7 └     name: affinity-p
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod affinity-p in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────
 affinity-p.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container affinity-p in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affinity-p.yaml:17-24
────────────────────────────────────────
  17 ┌     - name: affinity-c
  18 │       image: nginx
  19 │       resources: 
  20 │         limits:
  21 │           memory: "500Mi"
  22 │           cpu: "500m"
  23 │       ports:
  24 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod affinity-p in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affinity-p.yaml:9-24
────────────────────────────────────────
   9 ┌   affinity: 
  10 │     podAffinity:
  11 │       requiredDuringSchedulingIgnoredDuringExecution: 
  12 │         - labelSelector:
  13 │             matchLabels:
  14 │               name: podb
  15 │           topologyKey: kubernetes.io/hostname
  16 │   containers:
  17 └     - name: affinity-c
  ..   
────────────────────────────────────────



affinity.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'myapp' of Pod 'myapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 affinity.yaml:12-19
────────────────────────────────────────
  12 ┌   - name: myapp
  13 │     image: <Image>
  14 │     resources:
  15 │       limits:
  16 │         memory: "128Mi"
  17 │         cpu: "500m"
  18 │     ports:
  19 └       - containerPort: <Port>
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'myapp' of Pod 'myapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 affinity.yaml:12-19
────────────────────────────────────────
  12 ┌   - name: myapp
  13 │     image: <Image>
  14 │     resources:
  15 │       limits:
  16 │         memory: "128Mi"
  17 │         cpu: "500m"
  18 │     ports:
  19 └       - containerPort: <Port>
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'myapp' of 'pod' 'myapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 affinity.yaml:12-19
────────────────────────────────────────
  12 ┌   - name: myapp
  13 │     image: <Image>
  14 │     resources:
  15 │       limits:
  16 │         memory: "128Mi"
  17 │         cpu: "500m"
  18 │     ports:
  19 └       - containerPort: <Port>
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 affinity.yaml:12-19
────────────────────────────────────────
  12 ┌   - name: myapp
  13 │     image: <Image>
  14 │     resources:
  15 │       limits:
  16 │         memory: "128Mi"
  17 │         cpu: "500m"
  18 │     ports:
  19 └       - containerPort: <Port>
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'myapp' of Pod 'myapp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 affinity.yaml:12-19
────────────────────────────────────────
  12 ┌   - name: myapp
  13 │     image: <Image>
  14 │     resources:
  15 │       limits:
  16 │         memory: "128Mi"
  17 │         cpu: "500m"
  18 │     ports:
  19 └       - containerPort: <Port>
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'myapp' of Pod 'myapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 affinity.yaml:12-19
────────────────────────────────────────
  12 ┌   - name: myapp
  13 │     image: <Image>
  14 │     resources:
  15 │       limits:
  16 │         memory: "128Mi"
  17 │         cpu: "500m"
  18 │     ports:
  19 └       - containerPort: <Port>
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 affinity.yaml:12-19
────────────────────────────────────────
  12 ┌   - name: myapp
  13 │     image: <Image>
  14 │     resources:
  15 │       limits:
  16 │         memory: "128Mi"
  17 │         cpu: "500m"
  18 │     ports:
  19 └       - containerPort: <Port>
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'myapp' of Pod 'myapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 affinity.yaml:12-19
────────────────────────────────────────
  12 ┌   - name: myapp
  13 │     image: <Image>
  14 │     resources:
  15 │       limits:
  16 │         memory: "128Mi"
  17 │         cpu: "500m"
  18 │     ports:
  19 └       - containerPort: <Port>
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 affinity.yaml:12-19
────────────────────────────────────────
  12 ┌   - name: myapp
  13 │     image: <Image>
  14 │     resources:
  15 │       limits:
  16 │         memory: "128Mi"
  17 │         cpu: "500m"
  18 │     ports:
  19 └       - containerPort: <Port>
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'myapp' of Pod 'myapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 affinity.yaml:12-19
────────────────────────────────────────
  12 ┌   - name: myapp
  13 │     image: <Image>
  14 │     resources:
  15 │       limits:
  16 │         memory: "128Mi"
  17 │         cpu: "500m"
  18 │     ports:
  19 └       - containerPort: <Port>
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 affinity.yaml:12-19
────────────────────────────────────────
  12 ┌   - name: myapp
  13 │     image: <Image>
  14 │     resources:
  15 │       limits:
  16 │         memory: "128Mi"
  17 │         cpu: "500m"
  18 │     ports:
  19 └       - containerPort: <Port>
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "myapp" of pod "myapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 affinity.yaml:12-19
────────────────────────────────────────
  12 ┌   - name: myapp
  13 │     image: <Image>
  14 │     resources:
  15 │       limits:
  16 │         memory: "128Mi"
  17 │         cpu: "500m"
  18 │     ports:
  19 └       - containerPort: <Port>
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 affinity.yaml:12-19
────────────────────────────────────────
  12 ┌   - name: myapp
  13 │     image: <Image>
  14 │     resources:
  15 │       limits:
  16 │         memory: "128Mi"
  17 │         cpu: "500m"
  18 │     ports:
  19 └       - containerPort: <Port>
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod myapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 affinity.yaml:4-6
────────────────────────────────────────
   4 ┌   name: myapp
   5 │   labels:
   6 └     name: myapp
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container myapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affinity.yaml:12-19
────────────────────────────────────────
  12 ┌   - name: myapp
  13 │     image: <Image>
  14 │     resources:
  15 │       limits:
  16 │         memory: "128Mi"
  17 │         cpu: "500m"
  18 │     ports:
  19 └       - containerPort: <Port>
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod myapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affinity.yaml:8-19
────────────────────────────────────────
   8 ┌   affinity:
   9 │     requiredDuringSchedulingIgnoredExecution:
  10 │       n
  11 │   containers:
  12 │   - name: myapp
  13 │     image: <Image>
  14 │     resources:
  15 │       limits:
  16 └         memory: "128Mi"
  ..   
────────────────────────────────────────



affinity1.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): pod with-node-affinity in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 affinity1.yaml:4
────────────────────────────────────────
   4 [   name: with-node-affinity
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod with-node-affinity in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affinity1.yaml:6-14
────────────────────────────────────────
   6 ┌   affinity:
   7 │     nodeAffinity:
   8 │       requiredDuringSchedulingIgnoredDuringExecution:
   9 │         nodeSelectorTerms:
  10 │           - matchExpressions:
  11 │               - key: metadata.name
  12 │                 operator: In
  13 │                 values:
  14 └                   - node-geektime
────────────────────────────────────────



affinity2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'httpd' of Deployment 'nodeaffinity' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 affinity2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: httpd:latest
  24 │         ports:
  25 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'httpd' of Deployment 'nodeaffinity' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 affinity2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: httpd:latest
  24 │         ports:
  25 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'httpd' of 'deployment' 'nodeaffinity' in 'maloth' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 affinity2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: httpd:latest
  24 │         ports:
  25 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'httpd' of Deployment 'nodeaffinity' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 affinity2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: httpd:latest
  24 │         ports:
  25 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'httpd' of Deployment 'nodeaffinity' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 affinity2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: httpd:latest
  24 │         ports:
  25 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'httpd' of Deployment 'nodeaffinity' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 affinity2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: httpd:latest
  24 │         ports:
  25 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'httpd' of Deployment 'nodeaffinity' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 affinity2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: httpd:latest
  24 │         ports:
  25 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'httpd' of Deployment 'nodeaffinity' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 affinity2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: httpd:latest
  24 │         ports:
  25 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'httpd' of Deployment 'nodeaffinity' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 affinity2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: httpd:latest
  24 │         ports:
  25 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'httpd' of Deployment 'nodeaffinity' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 affinity2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: httpd:latest
  24 │         ports:
  25 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'httpd' of Deployment 'nodeaffinity' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 affinity2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: httpd:latest
  24 │         ports:
  25 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'httpd' of Deployment 'nodeaffinity' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 affinity2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: httpd:latest
  24 │         ports:
  25 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 affinity2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: httpd:latest
  24 │         ports:
  25 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "httpd" of deployment "nodeaffinity" in "maloth" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 affinity2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: httpd:latest
  24 │         ports:
  25 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 affinity2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: httpd:latest
  24 │         ports:
  25 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nodeaffinity in maloth namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nodeaffinity in maloth namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affinity2.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: httpd
  23 │         image: httpd:latest
  24 │         ports:
  25 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nodeaffinity in maloth namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affinity2.yaml:21-34
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: httpd
  23 │         image: httpd:latest
  24 │         ports:
  25 │         - containerPort: 80
  26 │       affinity:
  27 │          nodeAffinity:
  28 │            requiredDuringSchedulingIgnoredDuringExecution:
  29 └              nodeSelectorTerms:
  ..   
────────────────────────────────────────



affinity3.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'blue' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 affinity3.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: nginx
  17 │         imagePullPolicy: Always
  18 └         name: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'blue' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 affinity3.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: nginx
  17 │         imagePullPolicy: Always
  18 └         name: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'blue' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 affinity3.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: nginx
  17 │         imagePullPolicy: Always
  18 └         name: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'blue' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 affinity3.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: nginx
  17 │         imagePullPolicy: Always
  18 └         name: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'blue' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 affinity3.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: nginx
  17 │         imagePullPolicy: Always
  18 └         name: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'blue' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 affinity3.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: nginx
  17 │         imagePullPolicy: Always
  18 └         name: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'blue' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 affinity3.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: nginx
  17 │         imagePullPolicy: Always
  18 └         name: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'blue' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 affinity3.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: nginx
  17 │         imagePullPolicy: Always
  18 └         name: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'blue' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 affinity3.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: nginx
  17 │         imagePullPolicy: Always
  18 └         name: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'blue' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 affinity3.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: nginx
  17 │         imagePullPolicy: Always
  18 └         name: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'blue' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 affinity3.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: nginx
  17 │         imagePullPolicy: Always
  18 └         name: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'blue' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 affinity3.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: nginx
  17 │         imagePullPolicy: Always
  18 └         name: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 affinity3.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: nginx
  17 │         imagePullPolicy: Always
  18 └         name: nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "blue" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 affinity3.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: nginx
  17 │         imagePullPolicy: Always
  18 └         name: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 affinity3.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: nginx
  17 │         imagePullPolicy: Always
  18 └         name: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment blue in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 affinity3.yaml:4
────────────────────────────────────────
   4 [   name: blue
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container blue in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affinity3.yaml:16-18
────────────────────────────────────────
  16 ┌       - image: nginx
  17 │         imagePullPolicy: Always
  18 └         name: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment blue in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affinity3.yaml:15-27
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: nginx
  17 │         imagePullPolicy: Always
  18 │         name: nginx
  19 │       affinity:
  20 │         nodeAffinity:
  21 │           requiredDuringSchedulingIgnoredDuringExecution:
  22 │             nodeSelectorTerms:
  23 └             - matchExpressions:
  ..   
────────────────────────────────────────



affinity4.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginxcontainer' of Pod 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 affinity4.yaml:10-17
────────────────────────────────────────
  10 ┌   - name: nginxcontainer
  11 │     image: nginx:latest
  12 │     resources:
  13 │       limits:
  14 │         memory: "128Mi"
  15 │         cpu: "500m"
  16 │     ports:
  17 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginxcontainer' of Pod 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 affinity4.yaml:10-17
────────────────────────────────────────
  10 ┌   - name: nginxcontainer
  11 │     image: nginx:latest
  12 │     resources:
  13 │       limits:
  14 │         memory: "128Mi"
  15 │         cpu: "500m"
  16 │     ports:
  17 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginxcontainer' of 'pod' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 affinity4.yaml:10-17
────────────────────────────────────────
  10 ┌   - name: nginxcontainer
  11 │     image: nginx:latest
  12 │     resources:
  13 │       limits:
  14 │         memory: "128Mi"
  15 │         cpu: "500m"
  16 │     ports:
  17 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginxcontainer' of Pod 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 affinity4.yaml:10-17
────────────────────────────────────────
  10 ┌   - name: nginxcontainer
  11 │     image: nginx:latest
  12 │     resources:
  13 │       limits:
  14 │         memory: "128Mi"
  15 │         cpu: "500m"
  16 │     ports:
  17 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginxcontainer' of Pod 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 affinity4.yaml:10-17
────────────────────────────────────────
  10 ┌   - name: nginxcontainer
  11 │     image: nginx:latest
  12 │     resources:
  13 │       limits:
  14 │         memory: "128Mi"
  15 │         cpu: "500m"
  16 │     ports:
  17 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginxcontainer' of Pod 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 affinity4.yaml:10-17
────────────────────────────────────────
  10 ┌   - name: nginxcontainer
  11 │     image: nginx:latest
  12 │     resources:
  13 │       limits:
  14 │         memory: "128Mi"
  15 │         cpu: "500m"
  16 │     ports:
  17 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginxcontainer' of Pod 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 affinity4.yaml:10-17
────────────────────────────────────────
  10 ┌   - name: nginxcontainer
  11 │     image: nginx:latest
  12 │     resources:
  13 │       limits:
  14 │         memory: "128Mi"
  15 │         cpu: "500m"
  16 │     ports:
  17 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginxcontainer' of Pod 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 affinity4.yaml:10-17
────────────────────────────────────────
  10 ┌   - name: nginxcontainer
  11 │     image: nginx:latest
  12 │     resources:
  13 │       limits:
  14 │         memory: "128Mi"
  15 │         cpu: "500m"
  16 │     ports:
  17 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginxcontainer' of Pod 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 affinity4.yaml:10-17
────────────────────────────────────────
  10 ┌   - name: nginxcontainer
  11 │     image: nginx:latest
  12 │     resources:
  13 │       limits:
  14 │         memory: "128Mi"
  15 │         cpu: "500m"
  16 │     ports:
  17 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginxcontainer' of Pod 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 affinity4.yaml:10-17
────────────────────────────────────────
  10 ┌   - name: nginxcontainer
  11 │     image: nginx:latest
  12 │     resources:
  13 │       limits:
  14 │         memory: "128Mi"
  15 │         cpu: "500m"
  16 │     ports:
  17 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 affinity4.yaml:10-17
────────────────────────────────────────
  10 ┌   - name: nginxcontainer
  11 │     image: nginx:latest
  12 │     resources:
  13 │       limits:
  14 │         memory: "128Mi"
  15 │         cpu: "500m"
  16 │     ports:
  17 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginxcontainer" of pod "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 affinity4.yaml:10-17
────────────────────────────────────────
  10 ┌   - name: nginxcontainer
  11 │     image: nginx:latest
  12 │     resources:
  13 │       limits:
  14 │         memory: "128Mi"
  15 │         cpu: "500m"
  16 │     ports:
  17 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 affinity4.yaml:10-17
────────────────────────────────────────
  10 ┌   - name: nginxcontainer
  11 │     image: nginx:latest
  12 │     resources:
  13 │       limits:
  14 │         memory: "128Mi"
  15 │         cpu: "500m"
  16 │     ports:
  17 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 affinity4.yaml:4-7
────────────────────────────────────────
   4 ┌   name: nginx
   5 │   labels:
   6 │     name: myPod
   7 └     type: proxy
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affinity4.yaml:10-17
────────────────────────────────────────
  10 ┌   - name: nginxcontainer
  11 │     image: nginx:latest
  12 │     resources:
  13 │       limits:
  14 │         memory: "128Mi"
  15 │         cpu: "500m"
  16 │     ports:
  17 └       - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affinity4.yaml:9-19
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: nginxcontainer
  11 │     image: nginx:latest
  12 │     resources:
  13 │       limits:
  14 │         memory: "128Mi"
  15 │         cpu: "500m"
  16 │     ports:
  17 └       - containerPort: 80
  ..   
────────────────────────────────────────



affinity5.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 affinity5.yaml:19-22
────────────────────────────────────────
  19 ┌       - image: nginx
  20 │         name: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 affinity5.yaml:19-22
────────────────────────────────────────
  19 ┌       - image: nginx
  20 │         name: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 affinity5.yaml:19-22
────────────────────────────────────────
  19 ┌       - image: nginx
  20 │         name: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 affinity5.yaml:19-22
────────────────────────────────────────
  19 ┌       - image: nginx
  20 │         name: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 affinity5.yaml:19-22
────────────────────────────────────────
  19 ┌       - image: nginx
  20 │         name: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 affinity5.yaml:19-22
────────────────────────────────────────
  19 ┌       - image: nginx
  20 │         name: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 affinity5.yaml:19-22
────────────────────────────────────────
  19 ┌       - image: nginx
  20 │         name: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 affinity5.yaml:19-22
────────────────────────────────────────
  19 ┌       - image: nginx
  20 │         name: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 affinity5.yaml:19-22
────────────────────────────────────────
  19 ┌       - image: nginx
  20 │         name: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 affinity5.yaml:19-22
────────────────────────────────────────
  19 ┌       - image: nginx
  20 │         name: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 affinity5.yaml:19-22
────────────────────────────────────────
  19 ┌       - image: nginx
  20 │         name: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 affinity5.yaml:19-22
────────────────────────────────────────
  19 ┌       - image: nginx
  20 │         name: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 affinity5.yaml:19-22
────────────────────────────────────────
  19 ┌       - image: nginx
  20 │         name: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 affinity5.yaml:19-22
────────────────────────────────────────
  19 ┌       - image: nginx
  20 │         name: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 affinity5.yaml:19-22
────────────────────────────────────────
  19 ┌       - image: nginx
  20 │         name: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 affinity5.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: nginx
   6 └   name: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affinity5.yaml:19-22
────────────────────────────────────────
  19 ┌       - image: nginx
  20 │         name: nginx
  21 │         ports:
  22 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affinity5.yaml:18-31
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: nginx
  20 │         name: nginx
  21 │         ports:
  22 │         - containerPort: 80
  23 │       affinity:
  24 │         nodeAffinity:
  25 │           requiredDuringSchedulingIgnoredDuringExecution:
  26 └             nodeSelectorTerms:
  ..   
────────────────────────────────────────



affinityPreferred.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'affinity-preferred' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 affinityPreferred.yaml:24-25
────────────────────────────────────────
  24 ┌   - name: nginx
  25 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'affinity-preferred' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 affinityPreferred.yaml:24-25
────────────────────────────────────────
  24 ┌   - name: nginx
  25 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'affinity-preferred' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 affinityPreferred.yaml:24-25
────────────────────────────────────────
  24 ┌   - name: nginx
  25 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'affinity-preferred' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 affinityPreferred.yaml:24-25
────────────────────────────────────────
  24 ┌   - name: nginx
  25 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'affinity-preferred' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 affinityPreferred.yaml:24-25
────────────────────────────────────────
  24 ┌   - name: nginx
  25 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'affinity-preferred' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 affinityPreferred.yaml:24-25
────────────────────────────────────────
  24 ┌   - name: nginx
  25 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'affinity-preferred' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 affinityPreferred.yaml:24-25
────────────────────────────────────────
  24 ┌   - name: nginx
  25 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'affinity-preferred' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 affinityPreferred.yaml:24-25
────────────────────────────────────────
  24 ┌   - name: nginx
  25 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'affinity-preferred' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 affinityPreferred.yaml:24-25
────────────────────────────────────────
  24 ┌   - name: nginx
  25 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'affinity-preferred' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 affinityPreferred.yaml:24-25
────────────────────────────────────────
  24 ┌   - name: nginx
  25 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'affinity-preferred' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 affinityPreferred.yaml:24-25
────────────────────────────────────────
  24 ┌   - name: nginx
  25 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'affinity-preferred' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 affinityPreferred.yaml:24-25
────────────────────────────────────────
  24 ┌   - name: nginx
  25 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 affinityPreferred.yaml:24-25
────────────────────────────────────────
  24 ┌   - name: nginx
  25 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "affinity-preferred" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 affinityPreferred.yaml:24-25
────────────────────────────────────────
  24 ┌   - name: nginx
  25 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 affinityPreferred.yaml:24-25
────────────────────────────────────────
  24 ┌   - name: nginx
  25 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod affinity-preferred in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 affinityPreferred.yaml:4
────────────────────────────────────────
   4 [   name: affinity-preferred
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container affinity-preferred in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affinityPreferred.yaml:24-25
────────────────────────────────────────
  24 ┌   - name: nginx
  25 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod affinity-preferred in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affinityPreferred.yaml:6-25
────────────────────────────────────────
   6 ┌   affinity:
   7 │     nodeAffinity:
   8 │       preferredDuringSchedulingIgnoredDuringExecution:
   9 │       - weight: 1
  10 │         preference:
  11 │           matchExpressions:
  12 │           - key: kubernetes.io/hostname
  13 │             operator: In
  14 └             values:
  ..   
────────────────────────────────────────



affinityRequired.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'affinity-required' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 affinityRequired.yaml:16-17
────────────────────────────────────────
  16 ┌   - name: nginx
  17 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'affinity-required' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 affinityRequired.yaml:16-17
────────────────────────────────────────
  16 ┌   - name: nginx
  17 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'affinity-required' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 affinityRequired.yaml:16-17
────────────────────────────────────────
  16 ┌   - name: nginx
  17 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'affinity-required' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 affinityRequired.yaml:16-17
────────────────────────────────────────
  16 ┌   - name: nginx
  17 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'affinity-required' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 affinityRequired.yaml:16-17
────────────────────────────────────────
  16 ┌   - name: nginx
  17 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Pod 'affinity-required' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 affinityRequired.yaml:16-17
────────────────────────────────────────
  16 ┌   - name: nginx
  17 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'affinity-required' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 affinityRequired.yaml:16-17
────────────────────────────────────────
  16 ┌   - name: nginx
  17 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'affinity-required' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 affinityRequired.yaml:16-17
────────────────────────────────────────
  16 ┌   - name: nginx
  17 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'affinity-required' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 affinityRequired.yaml:16-17
────────────────────────────────────────
  16 ┌   - name: nginx
  17 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'affinity-required' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 affinityRequired.yaml:16-17
────────────────────────────────────────
  16 ┌   - name: nginx
  17 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'affinity-required' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 affinityRequired.yaml:16-17
────────────────────────────────────────
  16 ┌   - name: nginx
  17 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'affinity-required' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 affinityRequired.yaml:16-17
────────────────────────────────────────
  16 ┌   - name: nginx
  17 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 affinityRequired.yaml:16-17
────────────────────────────────────────
  16 ┌   - name: nginx
  17 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "affinity-required" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 affinityRequired.yaml:16-17
────────────────────────────────────────
  16 ┌   - name: nginx
  17 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 affinityRequired.yaml:16-17
────────────────────────────────────────
  16 ┌   - name: nginx
  17 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod affinity-required in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 affinityRequired.yaml:4
────────────────────────────────────────
   4 [   name: affinity-required
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container affinity-required in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affinityRequired.yaml:16-17
────────────────────────────────────────
  16 ┌   - name: nginx
  17 └     image: nginx:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod affinity-required in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 affinityRequired.yaml:6-17
────────────────────────────────────────
   6 ┌   affinity:
   7 │     nodeAffinity:
   8 │       requiredDuringSchedulingIgnoredDuringExecution:
   9 │         nodeSelectorTerms:
  10 │         - matchExpressions:
  11 │           - key: kubernetes.io/hostname
  12 │             operator: In
  13 │             values:
  14 └             - minikube-m02
  ..   
────────────────────────────────────────



afterFix1_3.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'targetcr' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 afterFix1_3.yaml:14-25
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - pods
  18 │   verbs:
  19 │   - get
  20 │   - list
  21 │   - watch
  22 └   - create
  ..   
────────────────────────────────────────



afterFix1_5.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'false-automount' of Deployment 'false-automount' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 afterFix1_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'false-automount' of Deployment 'false-automount' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 afterFix1_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'false-automount' of Deployment 'false-automount' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 afterFix1_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'false-automount' of Deployment 'false-automount' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 afterFix1_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'false-automount' of Deployment 'false-automount' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 afterFix1_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'false-automount' of Deployment 'false-automount' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 afterFix1_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'false-automount' of Deployment 'false-automount' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 afterFix1_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'false-automount' of Deployment 'false-automount' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 afterFix1_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'false-automount' of Deployment 'false-automount' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 afterFix1_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'false-automount' of Deployment 'false-automount' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 afterFix1_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'false-automount' of Deployment 'false-automount' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 afterFix1_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 afterFix1_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment false-automount in targetns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 afterFix1_5.yaml:16-30
────────────────────────────────────────
  16 ┌       serviceAccountName: targetsa
  17 │       automountServiceAccountToken: false
  18 │       containers:
  19 │       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 └           capabilities:
  ..   
────────────────────────────────────────



afterFix1_6.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'true-automount' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 afterFix1_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'true-automount' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 afterFix1_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'true-automount' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 afterFix1_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'true-automount' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 afterFix1_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'true-automount' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 afterFix1_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'true-automount' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 afterFix1_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'true-automount' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 afterFix1_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'true-automount' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 afterFix1_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'true-automount' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 afterFix1_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'nginx' of Deployment 'true-automount' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 afterFix1_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 afterFix1_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment true-automount in targetns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 afterFix1_6.yaml:16-31
────────────────────────────────────────
  16 ┌       nodeName: w1-k8s
  17 │       serviceAccountName: targetsa
  18 │       containers:
  19 │       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────



afterFix1_7.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'targetpod' in 'targetns' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



afterFix1_8.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'targetpod' of Pod 'targetpod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 afterFix1_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'targetpod' of 'pod' 'targetpod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 afterFix1_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'targetpod' of Pod 'targetpod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 afterFix1_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'targetpod' of Pod 'targetpod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 afterFix1_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'targetpod' of Pod 'targetpod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 afterFix1_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'targetpod' of Pod 'targetpod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 afterFix1_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'targetpod' of Pod 'targetpod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 afterFix1_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'targetpod' of Pod 'targetpod' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 afterFix1_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 afterFix1_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "targetpod" of pod "targetpod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 afterFix1_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 afterFix1_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod targetpod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 afterFix1_8.yaml:4
────────────────────────────────────────
   4 [   name: targetpod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod targetpod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod targetpod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 afterFix1_8.yaml:6-25
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 └       runAsNonRoot: true
  ..   
────────────────────────────────────────



afterFix_3.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'targetcr' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 afterFix_3.yaml:14-25
────────────────────────────────────────
  14 ┌ - apiGroups:
  15 │   - ''
  16 │   resources:
  17 │   - pods
  18 │   verbs:
  19 │   - get
  20 │   - list
  21 │   - watch
  22 └   - create
  ..   
────────────────────────────────────────



afterFix_5.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'false-automount' of Deployment 'false-automount' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 afterFix_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'false-automount' of Deployment 'false-automount' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 afterFix_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'false-automount' of Deployment 'false-automount' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 afterFix_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'false-automount' of Deployment 'false-automount' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 afterFix_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'false-automount' of Deployment 'false-automount' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 afterFix_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'false-automount' of Deployment 'false-automount' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 afterFix_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'false-automount' of Deployment 'false-automount' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 afterFix_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'false-automount' of Deployment 'false-automount' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 afterFix_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'false-automount' of Deployment 'false-automount' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 afterFix_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'false-automount' of Deployment 'false-automount' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 afterFix_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'false-automount' of Deployment 'false-automount' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 afterFix_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 afterFix_5.yaml:19-30
────────────────────────────────────────
  19 ┌       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 │           capabilities:
  25 │             drop:
  26 │             - NET_RAW
  27 └             add:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment false-automount in targetns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 afterFix_5.yaml:16-30
────────────────────────────────────────
  16 ┌       serviceAccountName: targetsa
  17 │       automountServiceAccountToken: false
  18 │       containers:
  19 │       - name: false-automount
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           allowPrivilegeEscalation: false
  24 └           capabilities:
  ..   
────────────────────────────────────────



afterFix_6.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 102, FAILURES: 12)
Failures: 12 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'true-automount' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 afterFix_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'true-automount' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 afterFix_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'true-automount' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 afterFix_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'true-automount' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 afterFix_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'true-automount' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 afterFix_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'true-automount' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 afterFix_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'true-automount' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 afterFix_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'true-automount' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 afterFix_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'true-automount' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 afterFix_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'nginx' of Deployment 'true-automount' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 afterFix_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 afterFix_6.yaml:19-31
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 │           allowPrivilegeEscalation: false
  25 │           capabilities:
  26 │             drop:
  27 └             - NET_RAW
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment true-automount in targetns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 afterFix_6.yaml:16-31
────────────────────────────────────────
  16 ┌       nodeName: w1-k8s
  17 │       serviceAccountName: targetsa
  18 │       containers:
  19 │       - name: nginx
  20 │         image: nginx:latest
  21 │         imagePullPolicy: Always
  22 │         securityContext:
  23 │           runAsGroup: 10001
  24 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────



afterFix_7.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'targetpod' in 'targetns' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



afterFix_8.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'targetpod' of Pod 'targetpod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 afterFix_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'targetpod' of 'pod' 'targetpod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 afterFix_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'targetpod' of Pod 'targetpod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 afterFix_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'targetpod' of Pod 'targetpod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 afterFix_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'targetpod' of Pod 'targetpod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 afterFix_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'targetpod' of Pod 'targetpod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 afterFix_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'targetpod' of Pod 'targetpod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 afterFix_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'targetpod' of Pod 'targetpod' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 afterFix_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 afterFix_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "targetpod" of pod "targetpod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 afterFix_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 afterFix_8.yaml:7-25
────────────────────────────────────────
   7 ┌   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 │       runAsNonRoot: true
  15 └       runAsUser: 10001
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod targetpod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 afterFix_8.yaml:4
────────────────────────────────────────
   4 [   name: targetpod
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod targetpod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod targetpod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 afterFix_8.yaml:6-25
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: targetpod
   8 │     image: ubuntu:20.04
   9 │     command:
  10 │     - /bin/sh
  11 │     - -c
  12 │     - apt update && apt install gcc vim -y;
  13 │     securityContext:
  14 └       runAsNonRoot: true
  ..   
────────────────────────────────────────



agent-dep.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'agent' of Deployment 'agent' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agent-dep.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: agent
  18 │         image: firas124578/agent
  19 │         env:
  20 │         - name: REDIS_HOST
  21 │           value: redis-service
  22 │         - name: SERVER_TRIGGER_HOST
  23 │           value: server-service
  24 │         - name: A1
  25 └           value: '0.5'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'agent' of Deployment 'agent' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agent-dep.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: agent
  18 │         image: firas124578/agent
  19 │         env:
  20 │         - name: REDIS_HOST
  21 │           value: redis-service
  22 │         - name: SERVER_TRIGGER_HOST
  23 │           value: server-service
  24 │         - name: A1
  25 └           value: '0.5'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'agent' of 'deployment' 'agent' in 'load-balancer' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agent-dep.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: agent
  18 │         image: firas124578/agent
  19 │         env:
  20 │         - name: REDIS_HOST
  21 │           value: redis-service
  22 │         - name: SERVER_TRIGGER_HOST
  23 │           value: server-service
  24 │         - name: A1
  25 └           value: '0.5'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'agent' of Deployment 'agent' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agent-dep.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: agent
  18 │         image: firas124578/agent
  19 │         env:
  20 │         - name: REDIS_HOST
  21 │           value: redis-service
  22 │         - name: SERVER_TRIGGER_HOST
  23 │           value: server-service
  24 │         - name: A1
  25 └           value: '0.5'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'agent' of Deployment 'agent' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agent-dep.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: agent
  18 │         image: firas124578/agent
  19 │         env:
  20 │         - name: REDIS_HOST
  21 │           value: redis-service
  22 │         - name: SERVER_TRIGGER_HOST
  23 │           value: server-service
  24 │         - name: A1
  25 └           value: '0.5'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'agent' of Deployment 'agent' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 agent-dep.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: agent
  18 │         image: firas124578/agent
  19 │         env:
  20 │         - name: REDIS_HOST
  21 │           value: redis-service
  22 │         - name: SERVER_TRIGGER_HOST
  23 │           value: server-service
  24 │         - name: A1
  25 └           value: '0.5'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'agent' of Deployment 'agent' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agent-dep.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: agent
  18 │         image: firas124578/agent
  19 │         env:
  20 │         - name: REDIS_HOST
  21 │           value: redis-service
  22 │         - name: SERVER_TRIGGER_HOST
  23 │           value: server-service
  24 │         - name: A1
  25 └           value: '0.5'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'agent' of Deployment 'agent' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agent-dep.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: agent
  18 │         image: firas124578/agent
  19 │         env:
  20 │         - name: REDIS_HOST
  21 │           value: redis-service
  22 │         - name: SERVER_TRIGGER_HOST
  23 │           value: server-service
  24 │         - name: A1
  25 └           value: '0.5'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'agent' of Deployment 'agent' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agent-dep.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: agent
  18 │         image: firas124578/agent
  19 │         env:
  20 │         - name: REDIS_HOST
  21 │           value: redis-service
  22 │         - name: SERVER_TRIGGER_HOST
  23 │           value: server-service
  24 │         - name: A1
  25 └           value: '0.5'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'agent' of Deployment 'agent' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agent-dep.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: agent
  18 │         image: firas124578/agent
  19 │         env:
  20 │         - name: REDIS_HOST
  21 │           value: redis-service
  22 │         - name: SERVER_TRIGGER_HOST
  23 │           value: server-service
  24 │         - name: A1
  25 └           value: '0.5'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'agent' of Deployment 'agent' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agent-dep.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: agent
  18 │         image: firas124578/agent
  19 │         env:
  20 │         - name: REDIS_HOST
  21 │           value: redis-service
  22 │         - name: SERVER_TRIGGER_HOST
  23 │           value: server-service
  24 │         - name: A1
  25 └           value: '0.5'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'agent' of Deployment 'agent' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agent-dep.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: agent
  18 │         image: firas124578/agent
  19 │         env:
  20 │         - name: REDIS_HOST
  21 │           value: redis-service
  22 │         - name: SERVER_TRIGGER_HOST
  23 │           value: server-service
  24 │         - name: A1
  25 └           value: '0.5'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agent-dep.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: agent
  18 │         image: firas124578/agent
  19 │         env:
  20 │         - name: REDIS_HOST
  21 │           value: redis-service
  22 │         - name: SERVER_TRIGGER_HOST
  23 │           value: server-service
  24 │         - name: A1
  25 └           value: '0.5'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "agent" of deployment "agent" in "load-balancer" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agent-dep.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: agent
  18 │         image: firas124578/agent
  19 │         env:
  20 │         - name: REDIS_HOST
  21 │           value: redis-service
  22 │         - name: SERVER_TRIGGER_HOST
  23 │           value: server-service
  24 │         - name: A1
  25 └           value: '0.5'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agent-dep.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: agent
  18 │         image: firas124578/agent
  19 │         env:
  20 │         - name: REDIS_HOST
  21 │           value: redis-service
  22 │         - name: SERVER_TRIGGER_HOST
  23 │           value: server-service
  24 │         - name: A1
  25 └           value: '0.5'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agent in load-balancer namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agent-dep.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: agent
  18 │         image: firas124578/agent
  19 │         env:
  20 │         - name: REDIS_HOST
  21 │           value: redis-service
  22 │         - name: SERVER_TRIGGER_HOST
  23 │           value: server-service
  24 │         - name: A1
  25 └           value: '0.5'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment agent in load-balancer namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agent-dep.yaml:16-42
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: agent
  18 │         image: firas124578/agent
  19 │         env:
  20 │         - name: REDIS_HOST
  21 │           value: redis-service
  22 │         - name: SERVER_TRIGGER_HOST
  23 │           value: server-service
  24 └         - name: A1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container agent in deployment agent (namespace: load-balancer) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agent-dep.yaml:17-38
────────────────────────────────────────
  17 ┌       - name: agent
  18 │         image: firas124578/agent
  19 │         env:
  20 │         - name: REDIS_HOST
  21 │           value: redis-service
  22 │         - name: SERVER_TRIGGER_HOST
  23 │           value: server-service
  24 │         - name: A1
  25 └           value: '0.5'
  ..   
────────────────────────────────────────



agent-deploy.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'bm-agent' of StatefulSet 'agent-statefulset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agent-deploy.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: bm-agent
  18 │           imagePullPolicy: Always
  19 │           image: ghkdqhrbals/bm-agent:latest
  20 │           ports:
  21 │             - containerPort: 8081
  22 │           env:
  23 │             - name: SERVER_PORT
  24 │               value: "8081"
  25 │             - name: eureka_client_serviceUrl_defaultZone
  26 └               value: "http://eureka-service:8761/eureka/"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'bm-agent' of StatefulSet 'agent-statefulset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agent-deploy.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: bm-agent
  18 │           imagePullPolicy: Always
  19 │           image: ghkdqhrbals/bm-agent:latest
  20 │           ports:
  21 │             - containerPort: 8081
  22 │           env:
  23 │             - name: SERVER_PORT
  24 │               value: "8081"
  25 │             - name: eureka_client_serviceUrl_defaultZone
  26 └               value: "http://eureka-service:8761/eureka/"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'bm-agent' of 'statefulset' 'agent-statefulset' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agent-deploy.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: bm-agent
  18 │           imagePullPolicy: Always
  19 │           image: ghkdqhrbals/bm-agent:latest
  20 │           ports:
  21 │             - containerPort: 8081
  22 │           env:
  23 │             - name: SERVER_PORT
  24 │               value: "8081"
  25 │             - name: eureka_client_serviceUrl_defaultZone
  26 └               value: "http://eureka-service:8761/eureka/"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'bm-agent' of StatefulSet 'agent-statefulset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agent-deploy.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: bm-agent
  18 │           imagePullPolicy: Always
  19 │           image: ghkdqhrbals/bm-agent:latest
  20 │           ports:
  21 │             - containerPort: 8081
  22 │           env:
  23 │             - name: SERVER_PORT
  24 │               value: "8081"
  25 │             - name: eureka_client_serviceUrl_defaultZone
  26 └               value: "http://eureka-service:8761/eureka/"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'bm-agent' of StatefulSet 'agent-statefulset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agent-deploy.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: bm-agent
  18 │           imagePullPolicy: Always
  19 │           image: ghkdqhrbals/bm-agent:latest
  20 │           ports:
  21 │             - containerPort: 8081
  22 │           env:
  23 │             - name: SERVER_PORT
  24 │               value: "8081"
  25 │             - name: eureka_client_serviceUrl_defaultZone
  26 └               value: "http://eureka-service:8761/eureka/"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'bm-agent' of StatefulSet 'agent-statefulset' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 agent-deploy.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: bm-agent
  18 │           imagePullPolicy: Always
  19 │           image: ghkdqhrbals/bm-agent:latest
  20 │           ports:
  21 │             - containerPort: 8081
  22 │           env:
  23 │             - name: SERVER_PORT
  24 │               value: "8081"
  25 │             - name: eureka_client_serviceUrl_defaultZone
  26 └               value: "http://eureka-service:8761/eureka/"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'bm-agent' of StatefulSet 'agent-statefulset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agent-deploy.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: bm-agent
  18 │           imagePullPolicy: Always
  19 │           image: ghkdqhrbals/bm-agent:latest
  20 │           ports:
  21 │             - containerPort: 8081
  22 │           env:
  23 │             - name: SERVER_PORT
  24 │               value: "8081"
  25 │             - name: eureka_client_serviceUrl_defaultZone
  26 └               value: "http://eureka-service:8761/eureka/"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'bm-agent' of StatefulSet 'agent-statefulset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agent-deploy.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: bm-agent
  18 │           imagePullPolicy: Always
  19 │           image: ghkdqhrbals/bm-agent:latest
  20 │           ports:
  21 │             - containerPort: 8081
  22 │           env:
  23 │             - name: SERVER_PORT
  24 │               value: "8081"
  25 │             - name: eureka_client_serviceUrl_defaultZone
  26 └               value: "http://eureka-service:8761/eureka/"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'bm-agent' of StatefulSet 'agent-statefulset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agent-deploy.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: bm-agent
  18 │           imagePullPolicy: Always
  19 │           image: ghkdqhrbals/bm-agent:latest
  20 │           ports:
  21 │             - containerPort: 8081
  22 │           env:
  23 │             - name: SERVER_PORT
  24 │               value: "8081"
  25 │             - name: eureka_client_serviceUrl_defaultZone
  26 └               value: "http://eureka-service:8761/eureka/"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'bm-agent' of StatefulSet 'agent-statefulset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agent-deploy.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: bm-agent
  18 │           imagePullPolicy: Always
  19 │           image: ghkdqhrbals/bm-agent:latest
  20 │           ports:
  21 │             - containerPort: 8081
  22 │           env:
  23 │             - name: SERVER_PORT
  24 │               value: "8081"
  25 │             - name: eureka_client_serviceUrl_defaultZone
  26 └               value: "http://eureka-service:8761/eureka/"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'bm-agent' of StatefulSet 'agent-statefulset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agent-deploy.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: bm-agent
  18 │           imagePullPolicy: Always
  19 │           image: ghkdqhrbals/bm-agent:latest
  20 │           ports:
  21 │             - containerPort: 8081
  22 │           env:
  23 │             - name: SERVER_PORT
  24 │               value: "8081"
  25 │             - name: eureka_client_serviceUrl_defaultZone
  26 └               value: "http://eureka-service:8761/eureka/"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'bm-agent' of StatefulSet 'agent-statefulset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agent-deploy.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: bm-agent
  18 │           imagePullPolicy: Always
  19 │           image: ghkdqhrbals/bm-agent:latest
  20 │           ports:
  21 │             - containerPort: 8081
  22 │           env:
  23 │             - name: SERVER_PORT
  24 │               value: "8081"
  25 │             - name: eureka_client_serviceUrl_defaultZone
  26 └               value: "http://eureka-service:8761/eureka/"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agent-deploy.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: bm-agent
  18 │           imagePullPolicy: Always
  19 │           image: ghkdqhrbals/bm-agent:latest
  20 │           ports:
  21 │             - containerPort: 8081
  22 │           env:
  23 │             - name: SERVER_PORT
  24 │               value: "8081"
  25 │             - name: eureka_client_serviceUrl_defaultZone
  26 └               value: "http://eureka-service:8761/eureka/"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "bm-agent" of statefulset "agent-statefulset" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agent-deploy.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: bm-agent
  18 │           imagePullPolicy: Always
  19 │           image: ghkdqhrbals/bm-agent:latest
  20 │           ports:
  21 │             - containerPort: 8081
  22 │           env:
  23 │             - name: SERVER_PORT
  24 │               value: "8081"
  25 │             - name: eureka_client_serviceUrl_defaultZone
  26 └               value: "http://eureka-service:8761/eureka/"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agent-deploy.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: bm-agent
  18 │           imagePullPolicy: Always
  19 │           image: ghkdqhrbals/bm-agent:latest
  20 │           ports:
  21 │             - containerPort: 8081
  22 │           env:
  23 │             - name: SERVER_PORT
  24 │               value: "8081"
  25 │             - name: eureka_client_serviceUrl_defaultZone
  26 └               value: "http://eureka-service:8761/eureka/"
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset agent-statefulset in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 agent-deploy.yaml:4
────────────────────────────────────────
   4 [   name: agent-statefulset
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agent-statefulset in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agent-deploy.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: bm-agent
  18 │           imagePullPolicy: Always
  19 │           image: ghkdqhrbals/bm-agent:latest
  20 │           ports:
  21 │             - containerPort: 8081
  22 │           env:
  23 │             - name: SERVER_PORT
  24 │               value: "8081"
  25 │             - name: eureka_client_serviceUrl_defaultZone
  26 └               value: "http://eureka-service:8761/eureka/"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset agent-statefulset in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agent-deploy.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: bm-agent
  18 │           imagePullPolicy: Always
  19 │           image: ghkdqhrbals/bm-agent:latest
  20 │           ports:
  21 │             - containerPort: 8081
  22 │           env:
  23 │             - name: SERVER_PORT
  24 └               value: "8081"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container bm-agent in statefulset agent-statefulset (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agent-deploy.yaml:17-26
────────────────────────────────────────
  17 ┌         - name: bm-agent
  18 │           imagePullPolicy: Always
  19 │           image: ghkdqhrbals/bm-agent:latest
  20 │           ports:
  21 │             - containerPort: 8081
  22 │           env:
  23 │             - name: SERVER_PORT
  24 │               value: "8081"
  25 │             - name: eureka_client_serviceUrl_defaultZone
  26 └               value: "http://eureka-service:8761/eureka/"
────────────────────────────────────────



agent5_2.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0047 (HIGH): Role permits privilege escalation from node proxy
════════════════════════════════════════
Check whether role permits privilege escalation from node proxy

See https://avd.aquasec.com/misconfig/ksv047
────────────────────────────────────────
 agent5_2.yaml:8-27
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - events
  12 │   - namespaces
  13 │   - namespaces/status
  14 │   - nodes
  15 │   - nodes/spec
  16 └   - nodes/stats
  ..   
────────────────────────────────────────



agent5_4.yaml (kubernetes)
==========================
Tests: 141 (SUCCESSES: 97, FAILURES: 44)
Failures: 44 (UNKNOWN: 0, LOW: 28, MEDIUM: 12, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'copy-configs' of Deployment 'bindplane-cluster-agent' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agent5_4.yaml:40-49
────────────────────────────────────────
  40 ┌       - name: copy-configs
  41 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  42 │         command:
  43 │         - sh
  44 │         - -c
  45 │         - cp config.yaml config/ && cp logging.yaml config/ && chown -R otel:otel
  46 │           config/
  47 │         volumeMounts:
  48 │         - mountPath: /etc/otel/config
  49 └           name: config
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'opentelemetry-container' of Deployment 'bindplane-cluster-agent' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agent5_4.yaml:51-90
────────────────────────────────────────
  51 ┌       - name: opentelemetry-container
  52 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  53 │         imagePullPolicy: IfNotPresent
  54 │         securityContext:
  55 │           readOnlyRootFilesystem: true
  56 │         ports:
  57 │         - containerPort: 8888
  58 │           name: prometheus
  59 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'setup-volumes' of Deployment 'bindplane-cluster-agent' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agent5_4.yaml:29-39
────────────────────────────────────────
  29 ┌       - name: setup-volumes
  30 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  31 │         securityContext:
  32 │           runAsUser: 0
  33 │         command:
  34 │         - chown
  35 │         - 'otel:'
  36 │         - /etc/otel/config
  37 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'copy-configs' of Deployment 'bindplane-cluster-agent' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agent5_4.yaml:40-49
────────────────────────────────────────
  40 ┌       - name: copy-configs
  41 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  42 │         command:
  43 │         - sh
  44 │         - -c
  45 │         - cp config.yaml config/ && cp logging.yaml config/ && chown -R otel:otel
  46 │           config/
  47 │         volumeMounts:
  48 │         - mountPath: /etc/otel/config
  49 └           name: config
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'opentelemetry-container' of Deployment 'bindplane-cluster-agent' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agent5_4.yaml:51-90
────────────────────────────────────────
  51 ┌       - name: opentelemetry-container
  52 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  53 │         imagePullPolicy: IfNotPresent
  54 │         securityContext:
  55 │           readOnlyRootFilesystem: true
  56 │         ports:
  57 │         - containerPort: 8888
  58 │           name: prometheus
  59 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'setup-volumes' of Deployment 'bindplane-cluster-agent' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agent5_4.yaml:29-39
────────────────────────────────────────
  29 ┌       - name: setup-volumes
  30 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  31 │         securityContext:
  32 │           runAsUser: 0
  33 │         command:
  34 │         - chown
  35 │         - 'otel:'
  36 │         - /etc/otel/config
  37 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'copy-configs' of 'deployment' 'bindplane-cluster-agent' in 'bindplane-agent' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agent5_4.yaml:40-49
────────────────────────────────────────
  40 ┌       - name: copy-configs
  41 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  42 │         command:
  43 │         - sh
  44 │         - -c
  45 │         - cp config.yaml config/ && cp logging.yaml config/ && chown -R otel:otel
  46 │           config/
  47 │         volumeMounts:
  48 │         - mountPath: /etc/otel/config
  49 └           name: config
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'opentelemetry-container' of 'deployment' 'bindplane-cluster-agent' in 'bindplane-agent' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agent5_4.yaml:51-90
────────────────────────────────────────
  51 ┌       - name: opentelemetry-container
  52 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  53 │         imagePullPolicy: IfNotPresent
  54 │         securityContext:
  55 │           readOnlyRootFilesystem: true
  56 │         ports:
  57 │         - containerPort: 8888
  58 │           name: prometheus
  59 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'setup-volumes' of 'deployment' 'bindplane-cluster-agent' in 'bindplane-agent' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agent5_4.yaml:29-39
────────────────────────────────────────
  29 ┌       - name: setup-volumes
  30 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  31 │         securityContext:
  32 │           runAsUser: 0
  33 │         command:
  34 │         - chown
  35 │         - 'otel:'
  36 │         - /etc/otel/config
  37 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'copy-configs' of Deployment 'bindplane-cluster-agent' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agent5_4.yaml:40-49
────────────────────────────────────────
  40 ┌       - name: copy-configs
  41 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  42 │         command:
  43 │         - sh
  44 │         - -c
  45 │         - cp config.yaml config/ && cp logging.yaml config/ && chown -R otel:otel
  46 │           config/
  47 │         volumeMounts:
  48 │         - mountPath: /etc/otel/config
  49 └           name: config
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'opentelemetry-container' of Deployment 'bindplane-cluster-agent' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agent5_4.yaml:51-90
────────────────────────────────────────
  51 ┌       - name: opentelemetry-container
  52 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  53 │         imagePullPolicy: IfNotPresent
  54 │         securityContext:
  55 │           readOnlyRootFilesystem: true
  56 │         ports:
  57 │         - containerPort: 8888
  58 │           name: prometheus
  59 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'setup-volumes' of Deployment 'bindplane-cluster-agent' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agent5_4.yaml:29-39
────────────────────────────────────────
  29 ┌       - name: setup-volumes
  30 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  31 │         securityContext:
  32 │           runAsUser: 0
  33 │         command:
  34 │         - chown
  35 │         - 'otel:'
  36 │         - /etc/otel/config
  37 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'copy-configs' of Deployment 'bindplane-cluster-agent' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agent5_4.yaml:40-49
────────────────────────────────────────
  40 ┌       - name: copy-configs
  41 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  42 │         command:
  43 │         - sh
  44 │         - -c
  45 │         - cp config.yaml config/ && cp logging.yaml config/ && chown -R otel:otel
  46 │           config/
  47 │         volumeMounts:
  48 │         - mountPath: /etc/otel/config
  49 └           name: config
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'opentelemetry-container' of Deployment 'bindplane-cluster-agent' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agent5_4.yaml:51-90
────────────────────────────────────────
  51 ┌       - name: opentelemetry-container
  52 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  53 │         imagePullPolicy: IfNotPresent
  54 │         securityContext:
  55 │           readOnlyRootFilesystem: true
  56 │         ports:
  57 │         - containerPort: 8888
  58 │           name: prometheus
  59 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'setup-volumes' of Deployment 'bindplane-cluster-agent' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agent5_4.yaml:29-39
────────────────────────────────────────
  29 ┌       - name: setup-volumes
  30 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  31 │         securityContext:
  32 │           runAsUser: 0
  33 │         command:
  34 │         - chown
  35 │         - 'otel:'
  36 │         - /etc/otel/config
  37 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'copy-configs' of Deployment 'bindplane-cluster-agent' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agent5_4.yaml:40-49
────────────────────────────────────────
  40 ┌       - name: copy-configs
  41 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  42 │         command:
  43 │         - sh
  44 │         - -c
  45 │         - cp config.yaml config/ && cp logging.yaml config/ && chown -R otel:otel
  46 │           config/
  47 │         volumeMounts:
  48 │         - mountPath: /etc/otel/config
  49 └           name: config
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'setup-volumes' of Deployment 'bindplane-cluster-agent' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agent5_4.yaml:29-39
────────────────────────────────────────
  29 ┌       - name: setup-volumes
  30 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  31 │         securityContext:
  32 │           runAsUser: 0
  33 │         command:
  34 │         - chown
  35 │         - 'otel:'
  36 │         - /etc/otel/config
  37 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'copy-configs' of Deployment 'bindplane-cluster-agent' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agent5_4.yaml:40-49
────────────────────────────────────────
  40 ┌       - name: copy-configs
  41 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  42 │         command:
  43 │         - sh
  44 │         - -c
  45 │         - cp config.yaml config/ && cp logging.yaml config/ && chown -R otel:otel
  46 │           config/
  47 │         volumeMounts:
  48 │         - mountPath: /etc/otel/config
  49 └           name: config
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'setup-volumes' of Deployment 'bindplane-cluster-agent' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agent5_4.yaml:29-39
────────────────────────────────────────
  29 ┌       - name: setup-volumes
  30 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  31 │         securityContext:
  32 │           runAsUser: 0
  33 │         command:
  34 │         - chown
  35 │         - 'otel:'
  36 │         - /etc/otel/config
  37 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'copy-configs' of Deployment 'bindplane-cluster-agent' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agent5_4.yaml:40-49
────────────────────────────────────────
  40 ┌       - name: copy-configs
  41 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  42 │         command:
  43 │         - sh
  44 │         - -c
  45 │         - cp config.yaml config/ && cp logging.yaml config/ && chown -R otel:otel
  46 │           config/
  47 │         volumeMounts:
  48 │         - mountPath: /etc/otel/config
  49 └           name: config
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'setup-volumes' of Deployment 'bindplane-cluster-agent' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agent5_4.yaml:29-39
────────────────────────────────────────
  29 ┌       - name: setup-volumes
  30 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  31 │         securityContext:
  32 │           runAsUser: 0
  33 │         command:
  34 │         - chown
  35 │         - 'otel:'
  36 │         - /etc/otel/config
  37 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'copy-configs' of Deployment 'bindplane-cluster-agent' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agent5_4.yaml:40-49
────────────────────────────────────────
  40 ┌       - name: copy-configs
  41 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  42 │         command:
  43 │         - sh
  44 │         - -c
  45 │         - cp config.yaml config/ && cp logging.yaml config/ && chown -R otel:otel
  46 │           config/
  47 │         volumeMounts:
  48 │         - mountPath: /etc/otel/config
  49 └           name: config
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'setup-volumes' of Deployment 'bindplane-cluster-agent' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agent5_4.yaml:29-39
────────────────────────────────────────
  29 ┌       - name: setup-volumes
  30 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  31 │         securityContext:
  32 │           runAsUser: 0
  33 │         command:
  34 │         - chown
  35 │         - 'otel:'
  36 │         - /etc/otel/config
  37 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'copy-configs' of Deployment 'bindplane-cluster-agent' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agent5_4.yaml:40-49
────────────────────────────────────────
  40 ┌       - name: copy-configs
  41 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  42 │         command:
  43 │         - sh
  44 │         - -c
  45 │         - cp config.yaml config/ && cp logging.yaml config/ && chown -R otel:otel
  46 │           config/
  47 │         volumeMounts:
  48 │         - mountPath: /etc/otel/config
  49 └           name: config
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'opentelemetry-container' of Deployment 'bindplane-cluster-agent' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agent5_4.yaml:51-90
────────────────────────────────────────
  51 ┌       - name: opentelemetry-container
  52 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  53 │         imagePullPolicy: IfNotPresent
  54 │         securityContext:
  55 │           readOnlyRootFilesystem: true
  56 │         ports:
  57 │         - containerPort: 8888
  58 │           name: prometheus
  59 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'setup-volumes' of Deployment 'bindplane-cluster-agent' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agent5_4.yaml:29-39
────────────────────────────────────────
  29 ┌       - name: setup-volumes
  30 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  31 │         securityContext:
  32 │           runAsUser: 0
  33 │         command:
  34 │         - chown
  35 │         - 'otel:'
  36 │         - /etc/otel/config
  37 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'copy-configs' of Deployment 'bindplane-cluster-agent' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agent5_4.yaml:40-49
────────────────────────────────────────
  40 ┌       - name: copy-configs
  41 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  42 │         command:
  43 │         - sh
  44 │         - -c
  45 │         - cp config.yaml config/ && cp logging.yaml config/ && chown -R otel:otel
  46 │           config/
  47 │         volumeMounts:
  48 │         - mountPath: /etc/otel/config
  49 └           name: config
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'opentelemetry-container' of Deployment 'bindplane-cluster-agent' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agent5_4.yaml:51-90
────────────────────────────────────────
  51 ┌       - name: opentelemetry-container
  52 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  53 │         imagePullPolicy: IfNotPresent
  54 │         securityContext:
  55 │           readOnlyRootFilesystem: true
  56 │         ports:
  57 │         - containerPort: 8888
  58 │           name: prometheus
  59 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'setup-volumes' of Deployment 'bindplane-cluster-agent' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agent5_4.yaml:29-39
────────────────────────────────────────
  29 ┌       - name: setup-volumes
  30 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  31 │         securityContext:
  32 │           runAsUser: 0
  33 │         command:
  34 │         - chown
  35 │         - 'otel:'
  36 │         - /etc/otel/config
  37 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agent5_4.yaml:29-39
────────────────────────────────────────
  29 ┌       - name: setup-volumes
  30 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  31 │         securityContext:
  32 │           runAsUser: 0
  33 │         command:
  34 │         - chown
  35 │         - 'otel:'
  36 │         - /etc/otel/config
  37 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agent5_4.yaml:40-49
────────────────────────────────────────
  40 ┌       - name: copy-configs
  41 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  42 │         command:
  43 │         - sh
  44 │         - -c
  45 │         - cp config.yaml config/ && cp logging.yaml config/ && chown -R otel:otel
  46 │           config/
  47 │         volumeMounts:
  48 │         - mountPath: /etc/otel/config
  49 └           name: config
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agent5_4.yaml:51-90
────────────────────────────────────────
  51 ┌       - name: opentelemetry-container
  52 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  53 │         imagePullPolicy: IfNotPresent
  54 │         securityContext:
  55 │           readOnlyRootFilesystem: true
  56 │         ports:
  57 │         - containerPort: 8888
  58 │           name: prometheus
  59 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "copy-configs" of deployment "bindplane-cluster-agent" in "bindplane-agent" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agent5_4.yaml:40-49
────────────────────────────────────────
  40 ┌       - name: copy-configs
  41 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  42 │         command:
  43 │         - sh
  44 │         - -c
  45 │         - cp config.yaml config/ && cp logging.yaml config/ && chown -R otel:otel
  46 │           config/
  47 │         volumeMounts:
  48 │         - mountPath: /etc/otel/config
  49 └           name: config
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "opentelemetry-container" of deployment "bindplane-cluster-agent" in "bindplane-agent" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agent5_4.yaml:51-90
────────────────────────────────────────
  51 ┌       - name: opentelemetry-container
  52 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  53 │         imagePullPolicy: IfNotPresent
  54 │         securityContext:
  55 │           readOnlyRootFilesystem: true
  56 │         ports:
  57 │         - containerPort: 8888
  58 │           name: prometheus
  59 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "setup-volumes" of deployment "bindplane-cluster-agent" in "bindplane-agent" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agent5_4.yaml:29-39
────────────────────────────────────────
  29 ┌       - name: setup-volumes
  30 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  31 │         securityContext:
  32 │           runAsUser: 0
  33 │         command:
  34 │         - chown
  35 │         - 'otel:'
  36 │         - /etc/otel/config
  37 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 agent5_4.yaml:32
────────────────────────────────────────
  32 [           runAsUser: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agent5_4.yaml:29-39
────────────────────────────────────────
  29 ┌       - name: setup-volumes
  30 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  31 │         securityContext:
  32 │           runAsUser: 0
  33 │         command:
  34 │         - chown
  35 │         - 'otel:'
  36 │         - /etc/otel/config
  37 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agent5_4.yaml:51-90
────────────────────────────────────────
  51 ┌       - name: opentelemetry-container
  52 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  53 │         imagePullPolicy: IfNotPresent
  54 │         securityContext:
  55 │           readOnlyRootFilesystem: true
  56 │         ports:
  57 │         - containerPort: 8888
  58 │           name: prometheus
  59 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agent5_4.yaml:40-49
────────────────────────────────────────
  40 ┌       - name: copy-configs
  41 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  42 │         command:
  43 │         - sh
  44 │         - -c
  45 │         - cp config.yaml config/ && cp logging.yaml config/ && chown -R otel:otel
  46 │           config/
  47 │         volumeMounts:
  48 │         - mountPath: /etc/otel/config
  49 └           name: config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container bindplane-cluster-agent in bindplane-agent namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agent5_4.yaml:40-49
────────────────────────────────────────
  40 ┌       - name: copy-configs
  41 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  42 │         command:
  43 │         - sh
  44 │         - -c
  45 │         - cp config.yaml config/ && cp logging.yaml config/ && chown -R otel:otel
  46 │           config/
  47 │         volumeMounts:
  48 │         - mountPath: /etc/otel/config
  49 └           name: config
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment bindplane-cluster-agent in bindplane-agent namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agent5_4.yaml:27-95
────────────────────────────────────────
  27 ┌       serviceAccount: bindplane-agent
  28 │       initContainers:
  29 │       - name: setup-volumes
  30 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  31 │         securityContext:
  32 │           runAsUser: 0
  33 │         command:
  34 │         - chown
  35 └         - 'otel:'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container copy-configs in deployment bindplane-cluster-agent (namespace: bindplane-agent) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agent5_4.yaml:40-49
────────────────────────────────────────
  40 ┌       - name: copy-configs
  41 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  42 │         command:
  43 │         - sh
  44 │         - -c
  45 │         - cp config.yaml config/ && cp logging.yaml config/ && chown -R otel:otel
  46 │           config/
  47 │         volumeMounts:
  48 │         - mountPath: /etc/otel/config
  49 └           name: config
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container opentelemetry-container in deployment bindplane-cluster-agent (namespace: bindplane-agent) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agent5_4.yaml:51-90
────────────────────────────────────────
  51 ┌       - name: opentelemetry-container
  52 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  53 │         imagePullPolicy: IfNotPresent
  54 │         securityContext:
  55 │           readOnlyRootFilesystem: true
  56 │         ports:
  57 │         - containerPort: 8888
  58 │           name: prometheus
  59 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container setup-volumes in deployment bindplane-cluster-agent (namespace: bindplane-agent) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agent5_4.yaml:29-39
────────────────────────────────────────
  29 ┌       - name: setup-volumes
  30 │         image: ghcr.io/observiq/observiq-otel-collector:1.56.0
  31 │         securityContext:
  32 │           runAsUser: 0
  33 │         command:
  34 │         - chown
  35 │         - 'otel:'
  36 │         - /etc/otel/config
  37 └         volumeMounts:
  ..   
────────────────────────────────────────



agent6.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 104, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 4, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0012 (MEDIUM): Container 'akri-agent' of DaemonSet 'akri-agent-daemonset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agent6.yaml:35-68
────────────────────────────────────────
  35 ┌       - name: akri-agent
  36 │         image: "ghcr.io/project-akri/akri/agent:v0.12.20-dev"
  37 │         resources:
  38 │           requests:
  39 │             memory: 11Mi
  40 │             cpu: 10m
  41 │           limits:
  42 │             memory: 79Mi
  43 └             cpu: 26m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'akri-agent' of DaemonSet 'akri-agent-daemonset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agent6.yaml:35-68
────────────────────────────────────────
  35 ┌       - name: akri-agent
  36 │         image: "ghcr.io/project-akri/akri/agent:v0.12.20-dev"
  37 │         resources:
  38 │           requests:
  39 │             memory: 11Mi
  40 │             cpu: 10m
  41 │           limits:
  42 │             memory: 79Mi
  43 └             cpu: 26m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'akri-agent' of DaemonSet 'akri-agent-daemonset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agent6.yaml:35-68
────────────────────────────────────────
  35 ┌       - name: akri-agent
  36 │         image: "ghcr.io/project-akri/akri/agent:v0.12.20-dev"
  37 │         resources:
  38 │           requests:
  39 │             memory: 11Mi
  40 │             cpu: 10m
  41 │           limits:
  42 │             memory: 79Mi
  43 └             cpu: 26m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'akri-agent' of DaemonSet 'akri-agent-daemonset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agent6.yaml:35-68
────────────────────────────────────────
  35 ┌       - name: akri-agent
  36 │         image: "ghcr.io/project-akri/akri/agent:v0.12.20-dev"
  37 │         resources:
  38 │           requests:
  39 │             memory: 11Mi
  40 │             cpu: 10m
  41 │           limits:
  42 │             memory: 79Mi
  43 └             cpu: 26m
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): DaemonSet 'akri-agent-daemonset' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 agent6.yaml:15-82
────────────────────────────────────────
  15 ┌   selector:
  16 │     matchLabels:
  17 │       app.kubernetes.io/part-of: akri
  18 │       app.kubernetes.io/instance: my-release
  19 │       app.kubernetes.io/name: akri-agent
  20 │   template:
  21 │     metadata:
  22 │       labels:
  23 └         helm.sh/chart: akri-0.12.20
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agent6.yaml:35-68
────────────────────────────────────────
  35 ┌       - name: akri-agent
  36 │         image: "ghcr.io/project-akri/akri/agent:v0.12.20-dev"
  37 │         resources:
  38 │           requests:
  39 │             memory: 11Mi
  40 │             cpu: 10m
  41 │           limits:
  42 │             memory: 79Mi
  43 └             cpu: 26m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "akri-agent" of daemonset "akri-agent-daemonset" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agent6.yaml:35-68
────────────────────────────────────────
  35 ┌       - name: akri-agent
  36 │         image: "ghcr.io/project-akri/akri/agent:v0.12.20-dev"
  37 │         resources:
  38 │           requests:
  39 │             memory: 11Mi
  40 │             cpu: 10m
  41 │           limits:
  42 │             memory: 79Mi
  43 └             cpu: 26m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): daemonset akri-agent-daemonset in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 agent6.yaml:5-13
────────────────────────────────────────
   5 ┌   name: akri-agent-daemonset
   6 │   labels:
   7 │     helm.sh/chart: akri-0.12.20
   8 │     app.kubernetes.io/part-of: akri
   9 │     app.kubernetes.io/instance: my-release
  10 │     app.kubernetes.io/version: "0.12.20"
  11 │     app.kubernetes.io/managed-by: Helm
  12 │     app.kubernetes.io/name: akri-agent
  13 └     app.kubernetes.io/component: agent
────────────────────────────────────────


AVD-KSV-0118 (HIGH): daemonset akri-agent-daemonset in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agent6.yaml:31-82
────────────────────────────────────────
  31 ┌       nodeSelector:
  32 │         "kubernetes.io/os": linux
  33 │       serviceAccountName: 'akri-agent-sa'
  34 │       containers:
  35 │       - name: akri-agent
  36 │         image: "ghcr.io/project-akri/akri/agent:v0.12.20-dev"
  37 │         resources:
  38 │           requests:
  39 └             memory: 11Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container akri-agent in daemonset akri-agent-daemonset (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agent6.yaml:35-68
────────────────────────────────────────
  35 ┌       - name: akri-agent
  36 │         image: "ghcr.io/project-akri/akri/agent:v0.12.20-dev"
  37 │         resources:
  38 │           requests:
  39 │             memory: 11Mi
  40 │             cpu: 10m
  41 │           limits:
  42 │             memory: 79Mi
  43 └             cpu: 26m
  ..   
────────────────────────────────────────



aggregator-assert1.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): statefulset vector-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aggregator-assert1.yaml:4
────────────────────────────────────────
   4 [   name: vector-aggregator
────────────────────────────────────────



aggregator-assert_2.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): statefulset vector-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aggregator-assert_2.yaml:4
────────────────────────────────────────
   4 [   name: vector-aggregator
────────────────────────────────────────



aggregator-deployment_1.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'wlsm-aggregator-service' of Deployment 'wlsm-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aggregator-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-aggregator-service
  18 │         image: localhost:5001/wlsm-aggregator-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wlsm-aggregator-service' of Deployment 'wlsm-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aggregator-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-aggregator-service
  18 │         image: localhost:5001/wlsm-aggregator-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wlsm-aggregator-service' of 'deployment' 'wlsm-aggregator' in 'wlsm-namespace' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aggregator-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-aggregator-service
  18 │         image: localhost:5001/wlsm-aggregator-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wlsm-aggregator-service' of Deployment 'wlsm-aggregator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aggregator-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-aggregator-service
  18 │         image: localhost:5001/wlsm-aggregator-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wlsm-aggregator-service' of Deployment 'wlsm-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aggregator-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-aggregator-service
  18 │         image: localhost:5001/wlsm-aggregator-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'wlsm-aggregator-service' of Deployment 'wlsm-aggregator' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 aggregator-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-aggregator-service
  18 │         image: localhost:5001/wlsm-aggregator-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wlsm-aggregator-service' of Deployment 'wlsm-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aggregator-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-aggregator-service
  18 │         image: localhost:5001/wlsm-aggregator-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wlsm-aggregator-service' of Deployment 'wlsm-aggregator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aggregator-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-aggregator-service
  18 │         image: localhost:5001/wlsm-aggregator-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wlsm-aggregator-service' of Deployment 'wlsm-aggregator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aggregator-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-aggregator-service
  18 │         image: localhost:5001/wlsm-aggregator-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wlsm-aggregator-service' of Deployment 'wlsm-aggregator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aggregator-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-aggregator-service
  18 │         image: localhost:5001/wlsm-aggregator-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wlsm-aggregator-service' of Deployment 'wlsm-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aggregator-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-aggregator-service
  18 │         image: localhost:5001/wlsm-aggregator-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wlsm-aggregator-service' of Deployment 'wlsm-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aggregator-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-aggregator-service
  18 │         image: localhost:5001/wlsm-aggregator-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aggregator-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-aggregator-service
  18 │         image: localhost:5001/wlsm-aggregator-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wlsm-aggregator-service" of deployment "wlsm-aggregator" in "wlsm-namespace" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aggregator-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-aggregator-service
  18 │         image: localhost:5001/wlsm-aggregator-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aggregator-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-aggregator-service
  18 │         image: localhost:5001/wlsm-aggregator-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container wlsm-aggregator in wlsm-namespace namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aggregator-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-aggregator-service
  18 │         image: localhost:5001/wlsm-aggregator-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment wlsm-aggregator in wlsm-namespace namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aggregator-deployment_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: wlsm-aggregator-service
  18 │         image: localhost:5001/wlsm-aggregator-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8082
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container wlsm-aggregator-service in deployment wlsm-aggregator (namespace: wlsm-namespace) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aggregator-deployment_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: wlsm-aggregator-service
  18 │         image: localhost:5001/wlsm-aggregator-service:latest
  19 │         imagePullPolicy: Always
  20 │         ports:
  21 └         - containerPort: 8082
────────────────────────────────────────



aggregator.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'vector-aggregator' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"  host_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



aggregator1.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'vector-aggregator' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"  host_key"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



aggregator1_2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vector' of StatefulSet 'vector-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aggregator1_2.yaml:32-54
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vector' of StatefulSet 'vector-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aggregator1_2.yaml:32-54
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vector' of 'statefulset' 'vector-aggregator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aggregator1_2.yaml:32-54
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vector' of StatefulSet 'vector-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aggregator1_2.yaml:32-54
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vector' of StatefulSet 'vector-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aggregator1_2.yaml:32-54
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vector' of StatefulSet 'vector-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aggregator1_2.yaml:32-54
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vector' of StatefulSet 'vector-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aggregator1_2.yaml:32-54
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aggregator1_2.yaml:32-54
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vector" of statefulset "vector-aggregator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aggregator1_2.yaml:32-54
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aggregator1_2.yaml:32-54
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset vector-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aggregator1_2.yaml:4-9
────────────────────────────────────────
   4 ┌   generation: 1
   5 │   labels:
   6 │     app.kubernetes.io/component: Aggregator
   7 │     app.kubernetes.io/instance: vector-aggregator
   8 │     app.kubernetes.io/name: vector
   9 └   name: vector-aggregator
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vector-aggregator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aggregator1_2.yaml:32-54
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset vector-aggregator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aggregator1_2.yaml:31-65
────────────────────────────────────────
  31 ┌       containers:
  32 │       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 └         - containerPort: 6000
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vector in statefulset vector-aggregator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aggregator1_2.yaml:32-54
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────



aggregator_2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vector' of StatefulSet 'vector-aggregator' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aggregator_2.yaml:32-48
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vector' of StatefulSet 'vector-aggregator' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aggregator_2.yaml:32-48
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vector' of 'statefulset' 'vector-aggregator' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aggregator_2.yaml:32-48
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vector' of StatefulSet 'vector-aggregator' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aggregator_2.yaml:32-48
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vector' of StatefulSet 'vector-aggregator' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aggregator_2.yaml:32-48
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vector' of StatefulSet 'vector-aggregator' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aggregator_2.yaml:32-48
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vector' of StatefulSet 'vector-aggregator' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aggregator_2.yaml:32-48
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vector' of StatefulSet 'vector-aggregator' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aggregator_2.yaml:32-48
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vector' of StatefulSet 'vector-aggregator' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aggregator_2.yaml:32-48
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vector' of StatefulSet 'vector-aggregator' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aggregator_2.yaml:32-48
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vector' of StatefulSet 'vector-aggregator' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aggregator_2.yaml:32-48
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aggregator_2.yaml:32-48
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vector" of statefulset "vector-aggregator" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aggregator_2.yaml:32-48
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aggregator_2.yaml:32-48
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset vector-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aggregator_2.yaml:4-9
────────────────────────────────────────
   4 ┌   generation: 1
   5 │   labels:
   6 │     app.kubernetes.io/component: Aggregator
   7 │     app.kubernetes.io/instance: vector-aggregator
   8 │     app.kubernetes.io/name: vector
   9 └   name: vector-aggregator
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vector-aggregator in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aggregator_2.yaml:32-48
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset vector-aggregator in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aggregator_2.yaml:31-59
────────────────────────────────────────
  31 ┌       containers:
  32 │       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 └         - containerPort: 6000
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vector in statefulset vector-aggregator (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aggregator_2.yaml:32-48
────────────────────────────────────────
  32 ┌       - args:
  33 │         - --config-dir
  34 │         - /etc/vector/
  35 │         image: timberio/vector:0.38.0-alpine
  36 │         imagePullPolicy: IfNotPresent
  37 │         name: vector
  38 │         ports:
  39 │         - containerPort: 6000
  40 └           name: vector
  ..   
────────────────────────────────────────



agify_Deployment.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'agify' of Deployment 'agify' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agify_Deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: agify
  17 │         image: marcstu2007/agify:1
  18 │         ports:
  19 └         - containerPort: 3000  # El puerto en el que tu aplicación Node.js está escuchando
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'agify' of Deployment 'agify' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agify_Deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: agify
  17 │         image: marcstu2007/agify:1
  18 │         ports:
  19 └         - containerPort: 3000  # El puerto en el que tu aplicación Node.js está escuchando
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'agify' of 'deployment' 'agify' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agify_Deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: agify
  17 │         image: marcstu2007/agify:1
  18 │         ports:
  19 └         - containerPort: 3000  # El puerto en el que tu aplicación Node.js está escuchando
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'agify' of Deployment 'agify' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agify_Deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: agify
  17 │         image: marcstu2007/agify:1
  18 │         ports:
  19 └         - containerPort: 3000  # El puerto en el que tu aplicación Node.js está escuchando
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'agify' of Deployment 'agify' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agify_Deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: agify
  17 │         image: marcstu2007/agify:1
  18 │         ports:
  19 └         - containerPort: 3000  # El puerto en el que tu aplicación Node.js está escuchando
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'agify' of Deployment 'agify' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agify_Deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: agify
  17 │         image: marcstu2007/agify:1
  18 │         ports:
  19 └         - containerPort: 3000  # El puerto en el que tu aplicación Node.js está escuchando
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'agify' of Deployment 'agify' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agify_Deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: agify
  17 │         image: marcstu2007/agify:1
  18 │         ports:
  19 └         - containerPort: 3000  # El puerto en el que tu aplicación Node.js está escuchando
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'agify' of Deployment 'agify' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agify_Deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: agify
  17 │         image: marcstu2007/agify:1
  18 │         ports:
  19 └         - containerPort: 3000  # El puerto en el que tu aplicación Node.js está escuchando
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'agify' of Deployment 'agify' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agify_Deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: agify
  17 │         image: marcstu2007/agify:1
  18 │         ports:
  19 └         - containerPort: 3000  # El puerto en el que tu aplicación Node.js está escuchando
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'agify' of Deployment 'agify' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agify_Deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: agify
  17 │         image: marcstu2007/agify:1
  18 │         ports:
  19 └         - containerPort: 3000  # El puerto en el que tu aplicación Node.js está escuchando
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'agify' of Deployment 'agify' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agify_Deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: agify
  17 │         image: marcstu2007/agify:1
  18 │         ports:
  19 └         - containerPort: 3000  # El puerto en el que tu aplicación Node.js está escuchando
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agify_Deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: agify
  17 │         image: marcstu2007/agify:1
  18 │         ports:
  19 └         - containerPort: 3000  # El puerto en el que tu aplicación Node.js está escuchando
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "agify" of deployment "agify" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agify_Deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: agify
  17 │         image: marcstu2007/agify:1
  18 │         ports:
  19 └         - containerPort: 3000  # El puerto en el que tu aplicación Node.js está escuchando
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agify_Deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: agify
  17 │         image: marcstu2007/agify:1
  18 │         ports:
  19 └         - containerPort: 3000  # El puerto en el que tu aplicación Node.js está escuchando
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment agify in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 agify_Deployment.yaml:4
────────────────────────────────────────
   4 [   name: agify
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agify in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agify_Deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: agify
  17 │         image: marcstu2007/agify:1
  18 │         ports:
  19 └         - containerPort: 3000  # El puerto en el que tu aplicación Node.js está escuchando
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment agify in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agify_Deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: agify
  17 │         image: marcstu2007/agify:1
  18 │         ports:
  19 └         - containerPort: 3000  # El puerto en el que tu aplicación Node.js está escuchando
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container agify in deployment agify (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agify_Deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: agify
  17 │         image: marcstu2007/agify:1
  18 │         ports:
  19 └         - containerPort: 3000  # El puerto en el que tu aplicación Node.js está escuchando
────────────────────────────────────────



agnhost-master-pod.yaml (kubernetes)
====================================
Tests: 129 (SUCCESSES: 98, FAILURES: 31)
Failures: 31 (UNKNOWN: 0, LOW: 20, MEDIUM: 6, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'agnhost-master' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-master-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: master
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: MASTER
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of Pod 'agnhost-master' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-master-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'agnhost-master' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-master-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: master
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: MASTER
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of Pod 'agnhost-master' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-master-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'agnhost-master' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-master-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: master
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: MASTER
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'pod' 'agnhost-master' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-master-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of Pod 'agnhost-master' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost-master-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'agnhost-master' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-master-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: master
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: MASTER
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of Pod 'agnhost-master' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-master-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'agnhost-master' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-master-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: master
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: MASTER
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of Pod 'agnhost-master' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-master-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'agnhost-master' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-master-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: master
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: MASTER
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of Pod 'agnhost-master' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-master-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'agnhost-master' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-master-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: master
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: MASTER
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of Pod 'agnhost-master' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-master-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'agnhost-master' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-master-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: master
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: MASTER
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of Pod 'agnhost-master' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-master-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'agnhost-master' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-master-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: master
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: MASTER
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of Pod 'agnhost-master' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-master-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'agnhost-master' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-master-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: master
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: MASTER
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of Pod 'agnhost-master' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-master-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-master-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: master
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: MASTER
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-master-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "agnhost-master" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-master-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: master
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: MASTER
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of pod "agnhost-master" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-master-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-master-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-master-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: master
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: MASTER
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod agnhost-master in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 agnhost-master-pod.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: agnhost
   6 │     role: master
   7 └   name: agnhost-master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-master in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-master-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-master in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-master-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: master
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: MASTER
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-master in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-master-pod.yaml:9-32
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: master
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: MASTER
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 └       resources:
  ..   
────────────────────────────────────────



agnhost-primary-pod.yaml (kubernetes)
=====================================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'primary' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'primary' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost-primary-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "primary" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod agnhost-primary in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 agnhost-primary-pod.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: agnhost
   6 │     role: primary
   7 └   name: agnhost-primary
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-primary in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod.yaml:9-32
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 └       resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container primary in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sentinel in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────



agnhost-primary-pod1.yaml (kubernetes)
======================================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod1.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod1.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'primary' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod1.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod1.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'primary' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod1.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod1.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost-primary-pod1.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod1.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod1.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod1.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod1.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod1.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod1.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod1.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod1.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod1.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod1.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod1.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod1.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod1.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod1.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod1.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod1.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "primary" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod1.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod1.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod1.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod1.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod agnhost-primary in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 agnhost-primary-pod1.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: agnhost
   6 │     role: primary
   7 └   name: agnhost-primary
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod1.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod1.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-primary in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod1.yaml:9-32
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 └       resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container primary in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod1.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sentinel in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod1.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────



agnhost-primary-pod11.yaml (kubernetes)
=======================================
Tests: 129 (SUCCESSES: 98, FAILURES: 31)
Failures: 31 (UNKNOWN: 0, LOW: 20, MEDIUM: 6, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod11.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod11.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'primary' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod11.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod11.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'primary' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod11.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod11.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost-primary-pod11.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod11.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod11.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod11.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod11.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod11.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod11.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod11.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod11.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod11.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod11.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod11.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod11.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod11.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod11.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod11.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod11.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "primary" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod11.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod11.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod11.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod11.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod agnhost-primary in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 agnhost-primary-pod11.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: agnhost
   6 │     role: primary
   7 └   name: agnhost-primary
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod11.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod11.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-primary in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod11.yaml:9-32
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: primary
  11 │       image: gcr.io/kubernetes-e2e-test-images/agnhost:1.0
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 └       resources:
  ..   
────────────────────────────────────────



agnhost-primary-pod12.yaml (kubernetes)
=======================================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod12.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod12.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'primary' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod12.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod12.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'primary' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod12.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod12.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost-primary-pod12.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod12.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod12.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod12.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod12.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod12.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod12.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod12.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod12.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod12.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod12.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod12.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod12.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod12.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod12.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod12.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod12.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "primary" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod12.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod12.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod12.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod12.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod agnhost-primary in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 agnhost-primary-pod12.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: agnhost
   6 │     role: primary
   7 └   name: agnhost-primary
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod12.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod12.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-primary in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod12.yaml:9-32
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 └       resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container primary in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod12.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sentinel in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod12.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────



agnhost-primary-pod13.yaml (kubernetes)
=======================================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod13.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod13.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'primary' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod13.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod13.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'primary' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod13.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod13.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost-primary-pod13.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod13.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod13.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod13.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod13.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod13.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod13.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod13.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod13.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod13.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod13.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod13.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod13.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod13.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod13.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod13.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod13.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "primary" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod13.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod13.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod13.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod13.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod agnhost-primary in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 agnhost-primary-pod13.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: agnhost
   6 │     role: primary
   7 └   name: agnhost-primary
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod13.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod13.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-primary in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod13.yaml:9-32
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 └       resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container primary in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod13.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sentinel in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod13.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────



agnhost-primary-pod14.yaml (kubernetes)
=======================================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod14.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod14.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'primary' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod14.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod14.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'primary' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod14.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod14.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost-primary-pod14.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod14.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod14.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod14.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod14.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod14.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod14.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod14.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod14.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod14.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod14.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod14.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod14.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod14.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod14.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod14.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod14.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "primary" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod14.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod14.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod14.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod14.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod agnhost-primary in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 agnhost-primary-pod14.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: agnhost
   6 │     role: primary
   7 └   name: agnhost-primary
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod14.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod14.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-primary in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod14.yaml:9-32
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 └       resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container primary in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod14.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sentinel in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod14.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────



agnhost-primary-pod15.yaml (kubernetes)
=======================================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod15.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod15.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'primary' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod15.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod15.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'primary' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod15.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod15.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost-primary-pod15.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod15.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod15.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod15.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod15.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod15.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod15.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod15.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod15.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod15.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod15.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod15.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod15.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod15.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod15.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod15.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod15.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "primary" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod15.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod15.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod15.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod15.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod agnhost-primary in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 agnhost-primary-pod15.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: agnhost
   6 │     role: primary
   7 └   name: agnhost-primary
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod15.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod15.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-primary in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod15.yaml:9-32
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 └       resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container primary in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod15.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sentinel in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod15.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────



agnhost-primary-pod16.yaml (kubernetes)
=======================================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod16.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod16.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'primary' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod16.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod16.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'primary' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod16.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod16.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost-primary-pod16.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod16.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod16.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod16.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod16.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod16.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod16.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod16.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod16.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod16.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod16.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod16.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod16.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod16.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod16.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod16.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod16.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "primary" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod16.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod16.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod16.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod16.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod agnhost-primary in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 agnhost-primary-pod16.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: agnhost
   6 │     role: primary
   7 └   name: agnhost-primary
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod16.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod16.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-primary in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod16.yaml:9-32
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 └       resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container primary in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod16.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sentinel in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod16.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────



agnhost-primary-pod2.yaml (kubernetes)
======================================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod2.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod2.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'primary' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod2.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod2.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'primary' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod2.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod2.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost-primary-pod2.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod2.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod2.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod2.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod2.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod2.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod2.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod2.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod2.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod2.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod2.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod2.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod2.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod2.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod2.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod2.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod2.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "primary" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod2.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod2.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod2.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod2.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod agnhost-primary in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 agnhost-primary-pod2.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: agnhost
   6 │     role: primary
   7 └   name: agnhost-primary
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod2.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod2.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-primary in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod2.yaml:9-32
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 └       resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container primary in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod2.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sentinel in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod2.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────



agnhost-primary-pod3.yaml (kubernetes)
======================================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod3.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod3.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'primary' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod3.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod3.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'primary' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod3.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod3.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost-primary-pod3.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod3.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod3.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod3.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod3.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod3.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod3.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod3.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod3.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod3.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod3.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod3.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod3.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod3.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod3.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod3.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod3.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "primary" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod3.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod3.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod3.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod3.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod agnhost-primary in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 agnhost-primary-pod3.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: agnhost
   6 │     role: primary
   7 └   name: agnhost-primary
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod3.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod3.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-primary in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod3.yaml:9-32
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 └       resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container primary in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod3.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sentinel in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod3.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────



agnhost-primary-pod4.yaml (kubernetes)
======================================
Tests: 129 (SUCCESSES: 98, FAILURES: 31)
Failures: 31 (UNKNOWN: 0, LOW: 20, MEDIUM: 6, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod4.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod4.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'primary' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod4.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod4.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'primary' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod4.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod4.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost-primary-pod4.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod4.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod4.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod4.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod4.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod4.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod4.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod4.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod4.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod4.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod4.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod4.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod4.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod4.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod4.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod4.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod4.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "primary" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod4.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod4.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod4.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod4.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod agnhost-primary in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 agnhost-primary-pod4.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: agnhost
   6 │     role: primary
   7 └   name: agnhost-primary
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod4.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod4.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-primary in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod4.yaml:9-32
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 └       resources:
  ..   
────────────────────────────────────────



agnhost-primary-pod5.yaml (kubernetes)
======================================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod5.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod5.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'primary' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod5.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod5.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'primary' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod5.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod5.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost-primary-pod5.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod5.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod5.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod5.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod5.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod5.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod5.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod5.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod5.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod5.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod5.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod5.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod5.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod5.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod5.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod5.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod5.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "primary" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod5.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod5.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod5.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod5.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod agnhost-primary in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 agnhost-primary-pod5.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: agnhost
   6 │     role: primary
   7 └   name: agnhost-primary
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod5.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod5.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-primary in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod5.yaml:9-32
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 └       resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container primary in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod5.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sentinel in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod5.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────



agnhost-primary-pod6.yaml (kubernetes)
======================================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod6.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod6.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'primary' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod6.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod6.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'primary' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod6.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod6.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost-primary-pod6.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod6.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod6.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod6.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod6.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod6.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod6.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod6.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod6.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod6.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod6.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod6.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod6.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod6.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod6.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod6.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod6.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "primary" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod6.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod6.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod6.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod6.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod agnhost-primary in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 agnhost-primary-pod6.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: agnhost
   6 │     role: primary
   7 └   name: agnhost-primary
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod6.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod6.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-primary in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod6.yaml:9-32
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 └       resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container primary in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod6.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sentinel in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod6.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────



agnhost-primary-pod7.yaml (kubernetes)
======================================
Tests: 129 (SUCCESSES: 98, FAILURES: 31)
Failures: 31 (UNKNOWN: 0, LOW: 20, MEDIUM: 6, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod7.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod7.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'primary' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod7.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod7.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'primary' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod7.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod7.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost-primary-pod7.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod7.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod7.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod7.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod7.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod7.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod7.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod7.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod7.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod7.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod7.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod7.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod7.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod7.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod7.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod7.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod7.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "primary" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod7.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod7.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod7.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod7.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod agnhost-primary in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 agnhost-primary-pod7.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: agnhost
   6 │     role: primary
   7 └   name: agnhost-primary
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod7.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod7.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-primary in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod7.yaml:9-32
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: primary
  11 │       image: k8s.gcr.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 └       resources:
  ..   
────────────────────────────────────────



agnhost-primary-pod8.yaml (kubernetes)
======================================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod8.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod8.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'primary' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod8.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod8.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'primary' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod8.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod8.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost-primary-pod8.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod8.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod8.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod8.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod8.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod8.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod8.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod8.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod8.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod8.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod8.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod8.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod8.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod8.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod8.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod8.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod8.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "primary" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod8.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod8.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod8.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod8.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod agnhost-primary in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 agnhost-primary-pod8.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: agnhost
   6 │     role: primary
   7 └   name: agnhost-primary
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod8.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod8.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-primary in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod8.yaml:9-32
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 └       resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container primary in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod8.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sentinel in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod8.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────



agnhost-primary-pod9.yaml (kubernetes)
======================================
Tests: 130 (SUCCESSES: 97, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod9.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost-primary-pod9.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'primary' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod9.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost-primary-pod9.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'primary' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod9.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'pod' 'agnhost-primary' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost-primary-pod9.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost-primary-pod9.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod9.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost-primary-pod9.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod9.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost-primary-pod9.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod9.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost-primary-pod9.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod9.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost-primary-pod9.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod9.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost-primary-pod9.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod9.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost-primary-pod9.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'primary' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod9.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of Pod 'agnhost-primary' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost-primary-pod9.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod9.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost-primary-pod9.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "primary" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod9.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of pod "agnhost-primary" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost-primary-pod9.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod9.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost-primary-pod9.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod agnhost-primary in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 agnhost-primary-pod9.yaml:4-7
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: agnhost
   6 │     role: primary
   7 └   name: agnhost-primary
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod9.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-primary in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod9.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-primary in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost-primary-pod9.yaml:9-32
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 └       resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container primary in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod9.yaml:10-22
────────────────────────────────────────
  10 ┌     - name: primary
  11 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  12 │       env:
  13 │         - name: PRIMARY
  14 │           value: "true"
  15 │       ports:
  16 │         - containerPort: 6379
  17 │       resources:
  18 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sentinel in pod agnhost-primary (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 agnhost-primary-pod9.yaml:23-29
────────────────────────────────────────
  23 ┌     - name: sentinel
  24 │       image: registry.k8s.io/e2e-test-images/agnhost:2.32
  25 │       env:
  26 │         - name: SENTINEL
  27 │           value: "true"
  28 │       ports:
  29 └         - containerPort: 26379
────────────────────────────────────────



agnhost.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'a1' of Pod 'agnhost-a' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'a1' of Pod 'agnhost-a' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'a1' of 'pod' 'agnhost-a' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'a1' of Pod 'agnhost-a' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'a1' of Pod 'agnhost-a' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'a1' of Pod 'agnhost-a' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'a1' of Pod 'agnhost-a' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'a1' of Pod 'agnhost-a' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'a1' of Pod 'agnhost-a' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'a1' of Pod 'agnhost-a' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'a1' of Pod 'agnhost-a' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Pod 'agnhost-a' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 agnhost.yaml:10-20
────────────────────────────────────────
  10 ┌   nodeName: aks-nodepool1-12809644-vmss000000
  11 │   containers:
  12 │   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 └     - --http
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "a1" of pod "agnhost-a" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-a in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-a in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost.yaml:10-20
────────────────────────────────────────
  10 ┌   nodeName: aks-nodepool1-12809644-vmss000000
  11 │   containers:
  12 │   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 └     - --http
  ..   
────────────────────────────────────────



agnhost1.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'a1' of Pod 'agnhost-a' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'a1' of Pod 'agnhost-a' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'a1' of 'pod' 'agnhost-a' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'a1' of Pod 'agnhost-a' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'a1' of Pod 'agnhost-a' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'a1' of Pod 'agnhost-a' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'a1' of Pod 'agnhost-a' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'a1' of Pod 'agnhost-a' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'a1' of Pod 'agnhost-a' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'a1' of Pod 'agnhost-a' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'a1' of Pod 'agnhost-a' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Pod 'agnhost-a' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 agnhost1.yaml:10-20
────────────────────────────────────────
  10 ┌   nodeName: aks-nodepool1-12809644-vmss000000
  11 │   containers:
  12 │   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 └     - --http
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "a1" of pod "agnhost-a" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-a in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-a in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost1.yaml:10-20
────────────────────────────────────────
  10 ┌   nodeName: aks-nodepool1-12809644-vmss000000
  11 │   containers:
  12 │   - name: a1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 └     - --http
  ..   
────────────────────────────────────────



agnhost1_1.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'b1' of Pod 'agnhost-b' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost1_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'b1' of Pod 'agnhost-b' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost1_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'b1' of 'pod' 'agnhost-b' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost1_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'b1' of Pod 'agnhost-b' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost1_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'b1' of Pod 'agnhost-b' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost1_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'b1' of Pod 'agnhost-b' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost1_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'b1' of Pod 'agnhost-b' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost1_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'b1' of Pod 'agnhost-b' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost1_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'b1' of Pod 'agnhost-b' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost1_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'b1' of Pod 'agnhost-b' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost1_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'b1' of Pod 'agnhost-b' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost1_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost1_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Pod 'agnhost-b' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 agnhost1_1.yaml:10-20
────────────────────────────────────────
  10 ┌   nodeName: aks-nodepool1-12809644-vmss000001
  11 │   containers:
  12 │   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 └     - --http
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "b1" of pod "agnhost-b" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost1_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost1_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-b in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost1_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-b in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost1_1.yaml:10-20
────────────────────────────────────────
  10 ┌   nodeName: aks-nodepool1-12809644-vmss000001
  11 │   containers:
  12 │   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 └     - --http
  ..   
────────────────────────────────────────



agnhost1_2.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'c1' of Pod 'agnhost-c' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost1_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'c1' of Pod 'agnhost-c' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost1_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'c1' of 'pod' 'agnhost-c' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost1_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'c1' of Pod 'agnhost-c' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost1_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'c1' of Pod 'agnhost-c' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost1_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'c1' of Pod 'agnhost-c' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost1_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'c1' of Pod 'agnhost-c' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost1_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'c1' of Pod 'agnhost-c' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost1_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'c1' of Pod 'agnhost-c' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost1_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'c1' of Pod 'agnhost-c' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost1_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'c1' of Pod 'agnhost-c' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost1_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost1_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Pod 'agnhost-c' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 agnhost1_2.yaml:10-20
────────────────────────────────────────
  10 ┌   nodeName: aks-nodepool1-12809644-vmss000002
  11 │   containers:
  12 │   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 └     - --http
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "c1" of pod "agnhost-c" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost1_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost1_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-c in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost1_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-c in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost1_2.yaml:10-20
────────────────────────────────────────
  10 ┌   nodeName: aks-nodepool1-12809644-vmss000002
  11 │   containers:
  12 │   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 └     - --http
  ..   
────────────────────────────────────────



agnhost_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'b1' of Pod 'agnhost-b' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'b1' of Pod 'agnhost-b' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'b1' of 'pod' 'agnhost-b' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'b1' of Pod 'agnhost-b' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'b1' of Pod 'agnhost-b' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'b1' of Pod 'agnhost-b' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'b1' of Pod 'agnhost-b' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'b1' of Pod 'agnhost-b' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'b1' of Pod 'agnhost-b' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'b1' of Pod 'agnhost-b' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'b1' of Pod 'agnhost-b' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Pod 'agnhost-b' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 agnhost_1.yaml:10-20
────────────────────────────────────────
  10 ┌   nodeName: aks-nodepool1-12809644-vmss000001
  11 │   containers:
  12 │   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 └     - --http
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "b1" of pod "agnhost-b" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-b in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost_1.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-b in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost_1.yaml:10-20
────────────────────────────────────────
  10 ┌   nodeName: aks-nodepool1-12809644-vmss000001
  11 │   containers:
  12 │   - name: b1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 └     - --http
  ..   
────────────────────────────────────────



agnhost_2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'c1' of Pod 'agnhost-c' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 agnhost_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'c1' of Pod 'agnhost-c' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 agnhost_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'c1' of 'pod' 'agnhost-c' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 agnhost_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'c1' of Pod 'agnhost-c' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 agnhost_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'c1' of Pod 'agnhost-c' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 agnhost_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'c1' of Pod 'agnhost-c' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 agnhost_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'c1' of Pod 'agnhost-c' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 agnhost_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'c1' of Pod 'agnhost-c' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 agnhost_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'c1' of Pod 'agnhost-c' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 agnhost_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'c1' of Pod 'agnhost-c' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 agnhost_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'c1' of Pod 'agnhost-c' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 agnhost_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 agnhost_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Pod 'agnhost-c' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 agnhost_2.yaml:10-20
────────────────────────────────────────
  10 ┌   nodeName: aks-nodepool1-12809644-vmss000002
  11 │   containers:
  12 │   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 └     - --http
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "c1" of pod "agnhost-c" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 agnhost_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 agnhost_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container agnhost-c in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost_2.yaml:12-20
────────────────────────────────────────
  12 ┌   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 │     - --http
  19 │     - --port
  20 └     - '80'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod agnhost-c in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 agnhost_2.yaml:10-20
────────────────────────────────────────
  10 ┌   nodeName: aks-nodepool1-12809644-vmss000002
  11 │   containers:
  12 │   - name: c1
  13 │     image: k8s.gcr.io/e2e-test-images/agnhost:2.36
  14 │     command:
  15 │     - /agnhost
  16 │     args:
  17 │     - serve-hostname
  18 └     - --http
  ..   
────────────────────────────────────────



ai-service-v2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ai-service' of Deployment 'ai-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ai-service-v2.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: ai-service
  21 │         image: ghcr.io/azure-samples/aks-store-demo/ai-service:latest
  22 │         ports:
  23 │         - containerPort: 5001
  24 │         volumeMounts:
  25 │         - name: secrets-store01-inline
  26 │           mountPath: /mnt/secrets-store
  27 │           readOnly: true
  28 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ai-service' of Deployment 'ai-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ai-service-v2.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: ai-service
  21 │         image: ghcr.io/azure-samples/aks-store-demo/ai-service:latest
  22 │         ports:
  23 │         - containerPort: 5001
  24 │         volumeMounts:
  25 │         - name: secrets-store01-inline
  26 │           mountPath: /mnt/secrets-store
  27 │           readOnly: true
  28 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ai-service' of 'deployment' 'ai-service' in 'aksappga' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ai-service-v2.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: ai-service
  21 │         image: ghcr.io/azure-samples/aks-store-demo/ai-service:latest
  22 │         ports:
  23 │         - containerPort: 5001
  24 │         volumeMounts:
  25 │         - name: secrets-store01-inline
  26 │           mountPath: /mnt/secrets-store
  27 │           readOnly: true
  28 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ai-service' of Deployment 'ai-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ai-service-v2.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: ai-service
  21 │         image: ghcr.io/azure-samples/aks-store-demo/ai-service:latest
  22 │         ports:
  23 │         - containerPort: 5001
  24 │         volumeMounts:
  25 │         - name: secrets-store01-inline
  26 │           mountPath: /mnt/secrets-store
  27 │           readOnly: true
  28 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ai-service' of Deployment 'ai-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ai-service-v2.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: ai-service
  21 │         image: ghcr.io/azure-samples/aks-store-demo/ai-service:latest
  22 │         ports:
  23 │         - containerPort: 5001
  24 │         volumeMounts:
  25 │         - name: secrets-store01-inline
  26 │           mountPath: /mnt/secrets-store
  27 │           readOnly: true
  28 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ai-service' of Deployment 'ai-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ai-service-v2.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: ai-service
  21 │         image: ghcr.io/azure-samples/aks-store-demo/ai-service:latest
  22 │         ports:
  23 │         - containerPort: 5001
  24 │         volumeMounts:
  25 │         - name: secrets-store01-inline
  26 │           mountPath: /mnt/secrets-store
  27 │           readOnly: true
  28 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ai-service' of Deployment 'ai-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ai-service-v2.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: ai-service
  21 │         image: ghcr.io/azure-samples/aks-store-demo/ai-service:latest
  22 │         ports:
  23 │         - containerPort: 5001
  24 │         volumeMounts:
  25 │         - name: secrets-store01-inline
  26 │           mountPath: /mnt/secrets-store
  27 │           readOnly: true
  28 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ai-service' of Deployment 'ai-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ai-service-v2.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: ai-service
  21 │         image: ghcr.io/azure-samples/aks-store-demo/ai-service:latest
  22 │         ports:
  23 │         - containerPort: 5001
  24 │         volumeMounts:
  25 │         - name: secrets-store01-inline
  26 │           mountPath: /mnt/secrets-store
  27 │           readOnly: true
  28 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ai-service-v2.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: ai-service
  21 │         image: ghcr.io/azure-samples/aks-store-demo/ai-service:latest
  22 │         ports:
  23 │         - containerPort: 5001
  24 │         volumeMounts:
  25 │         - name: secrets-store01-inline
  26 │           mountPath: /mnt/secrets-store
  27 │           readOnly: true
  28 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ai-service" of deployment "ai-service" in "aksappga" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ai-service-v2.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: ai-service
  21 │         image: ghcr.io/azure-samples/aks-store-demo/ai-service:latest
  22 │         ports:
  23 │         - containerPort: 5001
  24 │         volumeMounts:
  25 │         - name: secrets-store01-inline
  26 │           mountPath: /mnt/secrets-store
  27 │           readOnly: true
  28 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ai-service-v2.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: ai-service
  21 │         image: ghcr.io/azure-samples/aks-store-demo/ai-service:latest
  22 │         ports:
  23 │         - containerPort: 5001
  24 │         volumeMounts:
  25 │         - name: secrets-store01-inline
  26 │           mountPath: /mnt/secrets-store
  27 │           readOnly: true
  28 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ai-service in aksappga namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ai-service-v2.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: ai-service
  21 │         image: ghcr.io/azure-samples/aks-store-demo/ai-service:latest
  22 │         ports:
  23 │         - containerPort: 5001
  24 │         volumeMounts:
  25 │         - name: secrets-store01-inline
  26 │           mountPath: /mnt/secrets-store
  27 │           readOnly: true
  28 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ai-service in aksappga namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ai-service-v2.yaml:16-53
────────────────────────────────────────
  16 ┌       serviceAccountName: workload-identity-sa
  17 │       nodeSelector:
  18 │         kubernetes.io/os: linux
  19 │       containers:
  20 │       - name: ai-service
  21 │         image: ghcr.io/azure-samples/aks-store-demo/ai-service:latest
  22 │         ports:
  23 │         - containerPort: 5001
  24 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ai-service in deployment ai-service (namespace: aksappga) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ai-service-v2.yaml:20-46
────────────────────────────────────────
  20 ┌       - name: ai-service
  21 │         image: ghcr.io/azure-samples/aks-store-demo/ai-service:latest
  22 │         ports:
  23 │         - containerPort: 5001
  24 │         volumeMounts:
  25 │         - name: secrets-store01-inline
  26 │           mountPath: /mnt/secrets-store
  27 │           readOnly: true
  28 └         env:
  ..   
────────────────────────────────────────



ai-testing-api.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ai-testing-api' of Deployment 'ai-testing-api' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ai-testing-api.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: ai-testing-api
  19 │         image: ghcr.io/kenahrens/ai-testing-api:latest
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: TGI_API_URL
  23 │           value: http://hf-tgi-server.default.svc.cluster.local/v1/chat/completions
  24 │         resources:
  25 │           requests:
  26 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ai-testing-api' of Deployment 'ai-testing-api' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ai-testing-api.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: ai-testing-api
  19 │         image: ghcr.io/kenahrens/ai-testing-api:latest
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: TGI_API_URL
  23 │           value: http://hf-tgi-server.default.svc.cluster.local/v1/chat/completions
  24 │         resources:
  25 │           requests:
  26 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ai-testing-api' of 'deployment' 'ai-testing-api' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ai-testing-api.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: ai-testing-api
  19 │         image: ghcr.io/kenahrens/ai-testing-api:latest
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: TGI_API_URL
  23 │           value: http://hf-tgi-server.default.svc.cluster.local/v1/chat/completions
  24 │         resources:
  25 │           requests:
  26 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ai-testing-api' of Deployment 'ai-testing-api' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ai-testing-api.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: ai-testing-api
  19 │         image: ghcr.io/kenahrens/ai-testing-api:latest
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: TGI_API_URL
  23 │           value: http://hf-tgi-server.default.svc.cluster.local/v1/chat/completions
  24 │         resources:
  25 │           requests:
  26 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ai-testing-api' of Deployment 'ai-testing-api' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ai-testing-api.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: ai-testing-api
  19 │         image: ghcr.io/kenahrens/ai-testing-api:latest
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: TGI_API_URL
  23 │           value: http://hf-tgi-server.default.svc.cluster.local/v1/chat/completions
  24 │         resources:
  25 │           requests:
  26 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ai-testing-api' of Deployment 'ai-testing-api' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ai-testing-api.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: ai-testing-api
  19 │         image: ghcr.io/kenahrens/ai-testing-api:latest
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: TGI_API_URL
  23 │           value: http://hf-tgi-server.default.svc.cluster.local/v1/chat/completions
  24 │         resources:
  25 │           requests:
  26 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ai-testing-api' of Deployment 'ai-testing-api' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ai-testing-api.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: ai-testing-api
  19 │         image: ghcr.io/kenahrens/ai-testing-api:latest
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: TGI_API_URL
  23 │           value: http://hf-tgi-server.default.svc.cluster.local/v1/chat/completions
  24 │         resources:
  25 │           requests:
  26 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ai-testing-api' of Deployment 'ai-testing-api' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ai-testing-api.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: ai-testing-api
  19 │         image: ghcr.io/kenahrens/ai-testing-api:latest
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: TGI_API_URL
  23 │           value: http://hf-tgi-server.default.svc.cluster.local/v1/chat/completions
  24 │         resources:
  25 │           requests:
  26 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ai-testing-api.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: ai-testing-api
  19 │         image: ghcr.io/kenahrens/ai-testing-api:latest
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: TGI_API_URL
  23 │           value: http://hf-tgi-server.default.svc.cluster.local/v1/chat/completions
  24 │         resources:
  25 │           requests:
  26 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ai-testing-api" of deployment "ai-testing-api" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ai-testing-api.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: ai-testing-api
  19 │         image: ghcr.io/kenahrens/ai-testing-api:latest
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: TGI_API_URL
  23 │           value: http://hf-tgi-server.default.svc.cluster.local/v1/chat/completions
  24 │         resources:
  25 │           requests:
  26 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ai-testing-api.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: ai-testing-api
  19 │         image: ghcr.io/kenahrens/ai-testing-api:latest
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: TGI_API_URL
  23 │           value: http://hf-tgi-server.default.svc.cluster.local/v1/chat/completions
  24 │         resources:
  25 │           requests:
  26 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ai-testing-api in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ai-testing-api.yaml:4-6
────────────────────────────────────────
   4 ┌   name: ai-testing-api
   5 │   labels:
   6 └     app: ai-testing-api
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ai-testing-api in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ai-testing-api.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: ai-testing-api
  19 │         image: ghcr.io/kenahrens/ai-testing-api:latest
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: TGI_API_URL
  23 │           value: http://hf-tgi-server.default.svc.cluster.local/v1/chat/completions
  24 │         resources:
  25 │           requests:
  26 └             cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ai-testing-api in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ai-testing-api.yaml:17-39
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: ai-testing-api
  19 │         image: ghcr.io/kenahrens/ai-testing-api:latest
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: TGI_API_URL
  23 │           value: http://hf-tgi-server.default.svc.cluster.local/v1/chat/completions
  24 │         resources:
  25 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ai-testing-api in deployment ai-testing-api (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ai-testing-api.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: ai-testing-api
  19 │         image: ghcr.io/kenahrens/ai-testing-api:latest
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: TGI_API_URL
  23 │           value: http://hf-tgi-server.default.svc.cluster.local/v1/chat/completions
  24 │         resources:
  25 │           requests:
  26 └             cpu: 100m
  ..   
────────────────────────────────────────



ai-testing-ui.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ai-testing-ui' of Deployment 'ai-testing-ui' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ai-testing-ui.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ai-testing-ui
  19 │         image: ghcr.io/kenahrens/ai-testing-ui:latest
  20 │         imagePullPolicy: Always
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │             ephemeral-storage: 0Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ai-testing-ui' of Deployment 'ai-testing-ui' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ai-testing-ui.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ai-testing-ui
  19 │         image: ghcr.io/kenahrens/ai-testing-ui:latest
  20 │         imagePullPolicy: Always
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │             ephemeral-storage: 0Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ai-testing-ui' of 'deployment' 'ai-testing-ui' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ai-testing-ui.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ai-testing-ui
  19 │         image: ghcr.io/kenahrens/ai-testing-ui:latest
  20 │         imagePullPolicy: Always
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │             ephemeral-storage: 0Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ai-testing-ui' of Deployment 'ai-testing-ui' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ai-testing-ui.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ai-testing-ui
  19 │         image: ghcr.io/kenahrens/ai-testing-ui:latest
  20 │         imagePullPolicy: Always
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │             ephemeral-storage: 0Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ai-testing-ui' of Deployment 'ai-testing-ui' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ai-testing-ui.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ai-testing-ui
  19 │         image: ghcr.io/kenahrens/ai-testing-ui:latest
  20 │         imagePullPolicy: Always
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │             ephemeral-storage: 0Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ai-testing-ui' of Deployment 'ai-testing-ui' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ai-testing-ui.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ai-testing-ui
  19 │         image: ghcr.io/kenahrens/ai-testing-ui:latest
  20 │         imagePullPolicy: Always
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │             ephemeral-storage: 0Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ai-testing-ui' of Deployment 'ai-testing-ui' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ai-testing-ui.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ai-testing-ui
  19 │         image: ghcr.io/kenahrens/ai-testing-ui:latest
  20 │         imagePullPolicy: Always
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │             ephemeral-storage: 0Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ai-testing-ui' of Deployment 'ai-testing-ui' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ai-testing-ui.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ai-testing-ui
  19 │         image: ghcr.io/kenahrens/ai-testing-ui:latest
  20 │         imagePullPolicy: Always
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │             ephemeral-storage: 0Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ai-testing-ui.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ai-testing-ui
  19 │         image: ghcr.io/kenahrens/ai-testing-ui:latest
  20 │         imagePullPolicy: Always
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │             ephemeral-storage: 0Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ai-testing-ui" of deployment "ai-testing-ui" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ai-testing-ui.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ai-testing-ui
  19 │         image: ghcr.io/kenahrens/ai-testing-ui:latest
  20 │         imagePullPolicy: Always
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │             ephemeral-storage: 0Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ai-testing-ui.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ai-testing-ui
  19 │         image: ghcr.io/kenahrens/ai-testing-ui:latest
  20 │         imagePullPolicy: Always
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │             ephemeral-storage: 0Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ai-testing-ui in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ai-testing-ui.yaml:4-6
────────────────────────────────────────
   4 ┌   name: ai-testing-ui
   5 │   labels:
   6 └     app: ai-testing-ui
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ai-testing-ui in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ai-testing-ui.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ai-testing-ui
  19 │         image: ghcr.io/kenahrens/ai-testing-ui:latest
  20 │         imagePullPolicy: Always
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │             ephemeral-storage: 0Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ai-testing-ui in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ai-testing-ui.yaml:17-36
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: ai-testing-ui
  19 │         image: ghcr.io/kenahrens/ai-testing-ui:latest
  20 │         imagePullPolicy: Always
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 └             ephemeral-storage: 0Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ai-testing-ui in deployment ai-testing-ui (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ai-testing-ui.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: ai-testing-ui
  19 │         image: ghcr.io/kenahrens/ai-testing-ui:latest
  20 │         imagePullPolicy: Always
  21 │         resources:
  22 │           requests:
  23 │             cpu: 100m
  24 │             memory: 100Mi
  25 │             ephemeral-storage: 0Mi
  26 └           limits:
  ..   
────────────────────────────────────────



aio-recommended-v2.7.0_11.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aio-recommended-v2.7.0_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard' of 'deployment' 'kubernetes-dashboard' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aio-recommended-v2.7.0_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aio-recommended-v2.7.0_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aio-recommended-v2.7.0_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aio-recommended-v2.7.0_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aio-recommended-v2.7.0_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aio-recommended-v2.7.0_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aio-recommended-v2.7.0_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aio-recommended-v2.7.0_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aio-recommended-v2.7.0_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard in deployment kubernetes-dashboard (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aio-recommended-v2.7.0_11.yaml:23-48
────────────────────────────────────────
  23 ┌       - name: kubernetes-dashboard
  24 │         image: kubernetesui/dashboard:v2.7.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 │         - containerPort: 8443
  28 │           protocol: TCP
  29 │         args:
  30 │         - --auto-generate-certificates
  31 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────



aio-recommended-v2.7.0_13.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 9, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aio-recommended-v2.7.0_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dashboard-metrics-scraper' of 'deployment' 'dashboard-metrics-scraper' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aio-recommended-v2.7.0_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aio-recommended-v2.7.0_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aio-recommended-v2.7.0_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aio-recommended-v2.7.0_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aio-recommended-v2.7.0_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aio-recommended-v2.7.0_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aio-recommended-v2.7.0_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aio-recommended-v2.7.0_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aio-recommended-v2.7.0_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dashboard-metrics-scraper in deployment dashboard-metrics-scraper (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aio-recommended-v2.7.0_13.yaml:23-42
────────────────────────────────────────
  23 ┌       - name: dashboard-metrics-scraper
  24 │         image: kubernetesui/metrics-scraper:v1.0.8
  25 │         ports:
  26 │         - containerPort: 8000
  27 │           protocol: TCP
  28 │         livenessProbe:
  29 │           httpGet:
  30 │             scheme: HTTP
  31 └             path: /
  ..   
────────────────────────────────────────



aio-recommended-v2.7.0_7.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 aio-recommended-v2.7.0_7.yaml:21-29
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   resourceNames:
  26 │   - kubernetes-dashboard-settings
  27 │   verbs:
  28 │   - get
  29 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard' shouldn't have access to manage secrets in namespace 'kubernetes-dashboard'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 aio-recommended-v2.7.0_7.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   resourceNames:
  14 │   - kubernetes-dashboard-key-holder
  15 │   - kubernetes-dashboard-certs
  16 │   - kubernetes-dashboard-csrf
  17 └   verbs:
  ..   
────────────────────────────────────────



airflow-config1.yaml (kubernetes)
=================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'airflow-config' in 'airflow-app' namespace stores sensitive contents in key(s) or value(s) '{"AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'airflow-config' in 'airflow-app' namespace stores secrets in key(s) or value(s) '{"AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "POSTGRES_PASSWORD"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



airflow-database.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'airflow-database' of Deployment 'airflow-database' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 airflow-database.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'airflow-database' of Deployment 'airflow-database' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 airflow-database.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'airflow-database' of 'deployment' 'airflow-database' in 'airflow-v10' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 airflow-database.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'airflow-database' of Deployment 'airflow-database' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 airflow-database.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'airflow-database' of Deployment 'airflow-database' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 airflow-database.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'airflow-database' of Deployment 'airflow-database' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 airflow-database.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'airflow-database' of Deployment 'airflow-database' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 airflow-database.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'airflow-database' of Deployment 'airflow-database' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 airflow-database.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'airflow-database' of Deployment 'airflow-database' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 airflow-database.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'airflow-database' of Deployment 'airflow-database' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 airflow-database.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'airflow-database' of Deployment 'airflow-database' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 airflow-database.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'airflow-database' of Deployment 'airflow-database' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 airflow-database.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 airflow-database.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "airflow-database" of deployment "airflow-database" in "airflow-v10" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 airflow-database.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 airflow-database.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container airflow-database in airflow-v10 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-database.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment airflow-database in airflow-v10 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-database.yaml:19-43
────────────────────────────────────────
  19 ┌       volumes:
  20 │         - name: generic-database
  21 │           persistentVolumeClaim:
  22 │             claimName: generic-database
  23 │         - name: empty1
  24 │           emptyDir: {}
  25 │       containers:
  26 │         - resources: {}
  27 └           name: airflow-database
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container airflow-database in deployment airflow-database (namespace: airflow-v10) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 airflow-database.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────



airflow-database2.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'airflow-database' of Deployment 'airflow-database' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 airflow-database2.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'airflow-database' of Deployment 'airflow-database' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 airflow-database2.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'airflow-database' of 'deployment' 'airflow-database' in 'airflow-v10' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 airflow-database2.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'airflow-database' of Deployment 'airflow-database' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 airflow-database2.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'airflow-database' of Deployment 'airflow-database' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 airflow-database2.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'airflow-database' of Deployment 'airflow-database' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 airflow-database2.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'airflow-database' of Deployment 'airflow-database' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 airflow-database2.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'airflow-database' of Deployment 'airflow-database' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 airflow-database2.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'airflow-database' of Deployment 'airflow-database' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 airflow-database2.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'airflow-database' of Deployment 'airflow-database' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 airflow-database2.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'airflow-database' of Deployment 'airflow-database' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 airflow-database2.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'airflow-database' of Deployment 'airflow-database' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 airflow-database2.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 airflow-database2.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "airflow-database" of deployment "airflow-database" in "airflow-v10" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 airflow-database2.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 airflow-database2.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container airflow-database in airflow-v10 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-database2.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment airflow-database in airflow-v10 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-database2.yaml:19-43
────────────────────────────────────────
  19 ┌       volumes:
  20 │         - name: generic-database
  21 │           persistentVolumeClaim:
  22 │             claimName: generic-database
  23 │         - name: empty1
  24 │           emptyDir: {}
  25 │       containers:
  26 │         - resources: {}
  27 └           name: airflow-database
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container airflow-database in deployment airflow-database (namespace: airflow-v10) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 airflow-database2.yaml:26-43
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-database
  28 │           env:
  29 │             - name: POSTGRESQL_USERNAME
  30 │               value: 'bn_airflow'
  31 │             - name: POSTGRESQL_PASSWORD
  32 │               value: 'bitnami1'
  33 │             - name: POSTGRESQL_DATABASE
  34 └               value: 'bitnami_airflow'
  ..   
────────────────────────────────────────



airflow-deployment.yaml (kubernetes)
====================================
Tests: 131 (SUCCESSES: 98, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 20, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'airflow-scheduler' of Deployment 'airflow' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 airflow-deployment.yaml:22-44
────────────────────────────────────────
  22 ┌         - name: airflow-scheduler 
  23 │           image: 'apache/airflow:2.8.3' 
  24 │           imagePullPolicy: IfNotPresent 
  25 │           env: 
  26 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  27 │               valueFrom: 
  28 │                 configMapKeyRef: 
  29 │                   name: airflow-config 
  30 └                   key: sql_alchemy_conn 
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'airflow-webserver' of Deployment 'airflow' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 airflow-deployment.yaml:45-64
────────────────────────────────────────
  45 ┌         - name: airflow-webserver 
  46 │           env: 
  47 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  48 │               valueFrom: 
  49 │                 configMapKeyRef: 
  50 │                   name: airflow-config 
  51 │                   key: sql_alchemy_conn 
  52 │             - name: AIRFLOW__CORE__EXECUTOR 
  53 └               valueFrom: 
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'airflow-scheduler' of Deployment 'airflow' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 airflow-deployment.yaml:22-44
────────────────────────────────────────
  22 ┌         - name: airflow-scheduler 
  23 │           image: 'apache/airflow:2.8.3' 
  24 │           imagePullPolicy: IfNotPresent 
  25 │           env: 
  26 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  27 │               valueFrom: 
  28 │                 configMapKeyRef: 
  29 │                   name: airflow-config 
  30 └                   key: sql_alchemy_conn 
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'airflow-webserver' of Deployment 'airflow' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 airflow-deployment.yaml:45-64
────────────────────────────────────────
  45 ┌         - name: airflow-webserver 
  46 │           env: 
  47 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  48 │               valueFrom: 
  49 │                 configMapKeyRef: 
  50 │                   name: airflow-config 
  51 │                   key: sql_alchemy_conn 
  52 │             - name: AIRFLOW__CORE__EXECUTOR 
  53 └               valueFrom: 
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'airflow-scheduler' of 'deployment' 'airflow' in 'airflow' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 airflow-deployment.yaml:22-44
────────────────────────────────────────
  22 ┌         - name: airflow-scheduler 
  23 │           image: 'apache/airflow:2.8.3' 
  24 │           imagePullPolicy: IfNotPresent 
  25 │           env: 
  26 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  27 │               valueFrom: 
  28 │                 configMapKeyRef: 
  29 │                   name: airflow-config 
  30 └                   key: sql_alchemy_conn 
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'airflow-webserver' of 'deployment' 'airflow' in 'airflow' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 airflow-deployment.yaml:45-64
────────────────────────────────────────
  45 ┌         - name: airflow-webserver 
  46 │           env: 
  47 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  48 │               valueFrom: 
  49 │                 configMapKeyRef: 
  50 │                   name: airflow-config 
  51 │                   key: sql_alchemy_conn 
  52 │             - name: AIRFLOW__CORE__EXECUTOR 
  53 └               valueFrom: 
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'airflow-scheduler' of Deployment 'airflow' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 airflow-deployment.yaml:22-44
────────────────────────────────────────
  22 ┌         - name: airflow-scheduler 
  23 │           image: 'apache/airflow:2.8.3' 
  24 │           imagePullPolicy: IfNotPresent 
  25 │           env: 
  26 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  27 │               valueFrom: 
  28 │                 configMapKeyRef: 
  29 │                   name: airflow-config 
  30 └                   key: sql_alchemy_conn 
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'airflow-webserver' of Deployment 'airflow' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 airflow-deployment.yaml:45-64
────────────────────────────────────────
  45 ┌         - name: airflow-webserver 
  46 │           env: 
  47 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  48 │               valueFrom: 
  49 │                 configMapKeyRef: 
  50 │                   name: airflow-config 
  51 │                   key: sql_alchemy_conn 
  52 │             - name: AIRFLOW__CORE__EXECUTOR 
  53 └               valueFrom: 
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'airflow-scheduler' of Deployment 'airflow' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 airflow-deployment.yaml:22-44
────────────────────────────────────────
  22 ┌         - name: airflow-scheduler 
  23 │           image: 'apache/airflow:2.8.3' 
  24 │           imagePullPolicy: IfNotPresent 
  25 │           env: 
  26 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  27 │               valueFrom: 
  28 │                 configMapKeyRef: 
  29 │                   name: airflow-config 
  30 └                   key: sql_alchemy_conn 
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'airflow-webserver' of Deployment 'airflow' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 airflow-deployment.yaml:45-64
────────────────────────────────────────
  45 ┌         - name: airflow-webserver 
  46 │           env: 
  47 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  48 │               valueFrom: 
  49 │                 configMapKeyRef: 
  50 │                   name: airflow-config 
  51 │                   key: sql_alchemy_conn 
  52 │             - name: AIRFLOW__CORE__EXECUTOR 
  53 └               valueFrom: 
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'airflow-scheduler' of Deployment 'airflow' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 airflow-deployment.yaml:22-44
────────────────────────────────────────
  22 ┌         - name: airflow-scheduler 
  23 │           image: 'apache/airflow:2.8.3' 
  24 │           imagePullPolicy: IfNotPresent 
  25 │           env: 
  26 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  27 │               valueFrom: 
  28 │                 configMapKeyRef: 
  29 │                   name: airflow-config 
  30 └                   key: sql_alchemy_conn 
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'airflow-webserver' of Deployment 'airflow' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 airflow-deployment.yaml:45-64
────────────────────────────────────────
  45 ┌         - name: airflow-webserver 
  46 │           env: 
  47 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  48 │               valueFrom: 
  49 │                 configMapKeyRef: 
  50 │                   name: airflow-config 
  51 │                   key: sql_alchemy_conn 
  52 │             - name: AIRFLOW__CORE__EXECUTOR 
  53 └               valueFrom: 
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'airflow-scheduler' of Deployment 'airflow' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 airflow-deployment.yaml:22-44
────────────────────────────────────────
  22 ┌         - name: airflow-scheduler 
  23 │           image: 'apache/airflow:2.8.3' 
  24 │           imagePullPolicy: IfNotPresent 
  25 │           env: 
  26 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  27 │               valueFrom: 
  28 │                 configMapKeyRef: 
  29 │                   name: airflow-config 
  30 └                   key: sql_alchemy_conn 
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'airflow-webserver' of Deployment 'airflow' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 airflow-deployment.yaml:45-64
────────────────────────────────────────
  45 ┌         - name: airflow-webserver 
  46 │           env: 
  47 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  48 │               valueFrom: 
  49 │                 configMapKeyRef: 
  50 │                   name: airflow-config 
  51 │                   key: sql_alchemy_conn 
  52 │             - name: AIRFLOW__CORE__EXECUTOR 
  53 └               valueFrom: 
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'airflow-scheduler' of Deployment 'airflow' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 airflow-deployment.yaml:22-44
────────────────────────────────────────
  22 ┌         - name: airflow-scheduler 
  23 │           image: 'apache/airflow:2.8.3' 
  24 │           imagePullPolicy: IfNotPresent 
  25 │           env: 
  26 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  27 │               valueFrom: 
  28 │                 configMapKeyRef: 
  29 │                   name: airflow-config 
  30 └                   key: sql_alchemy_conn 
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'airflow-webserver' of Deployment 'airflow' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 airflow-deployment.yaml:45-64
────────────────────────────────────────
  45 ┌         - name: airflow-webserver 
  46 │           env: 
  47 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  48 │               valueFrom: 
  49 │                 configMapKeyRef: 
  50 │                   name: airflow-config 
  51 │                   key: sql_alchemy_conn 
  52 │             - name: AIRFLOW__CORE__EXECUTOR 
  53 └               valueFrom: 
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'airflow-scheduler' of Deployment 'airflow' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 airflow-deployment.yaml:22-44
────────────────────────────────────────
  22 ┌         - name: airflow-scheduler 
  23 │           image: 'apache/airflow:2.8.3' 
  24 │           imagePullPolicy: IfNotPresent 
  25 │           env: 
  26 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  27 │               valueFrom: 
  28 │                 configMapKeyRef: 
  29 │                   name: airflow-config 
  30 └                   key: sql_alchemy_conn 
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'airflow-webserver' of Deployment 'airflow' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 airflow-deployment.yaml:45-64
────────────────────────────────────────
  45 ┌         - name: airflow-webserver 
  46 │           env: 
  47 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  48 │               valueFrom: 
  49 │                 configMapKeyRef: 
  50 │                   name: airflow-config 
  51 │                   key: sql_alchemy_conn 
  52 │             - name: AIRFLOW__CORE__EXECUTOR 
  53 └               valueFrom: 
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'airflow-scheduler' of Deployment 'airflow' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 airflow-deployment.yaml:22-44
────────────────────────────────────────
  22 ┌         - name: airflow-scheduler 
  23 │           image: 'apache/airflow:2.8.3' 
  24 │           imagePullPolicy: IfNotPresent 
  25 │           env: 
  26 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  27 │               valueFrom: 
  28 │                 configMapKeyRef: 
  29 │                   name: airflow-config 
  30 └                   key: sql_alchemy_conn 
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'airflow-webserver' of Deployment 'airflow' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 airflow-deployment.yaml:45-64
────────────────────────────────────────
  45 ┌         - name: airflow-webserver 
  46 │           env: 
  47 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  48 │               valueFrom: 
  49 │                 configMapKeyRef: 
  50 │                   name: airflow-config 
  51 │                   key: sql_alchemy_conn 
  52 │             - name: AIRFLOW__CORE__EXECUTOR 
  53 └               valueFrom: 
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'airflow-scheduler' of Deployment 'airflow' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 airflow-deployment.yaml:22-44
────────────────────────────────────────
  22 ┌         - name: airflow-scheduler 
  23 │           image: 'apache/airflow:2.8.3' 
  24 │           imagePullPolicy: IfNotPresent 
  25 │           env: 
  26 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  27 │               valueFrom: 
  28 │                 configMapKeyRef: 
  29 │                   name: airflow-config 
  30 └                   key: sql_alchemy_conn 
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'airflow-webserver' of Deployment 'airflow' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 airflow-deployment.yaml:45-64
────────────────────────────────────────
  45 ┌         - name: airflow-webserver 
  46 │           env: 
  47 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  48 │               valueFrom: 
  49 │                 configMapKeyRef: 
  50 │                   name: airflow-config 
  51 │                   key: sql_alchemy_conn 
  52 │             - name: AIRFLOW__CORE__EXECUTOR 
  53 └               valueFrom: 
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 airflow-deployment.yaml:22-44
────────────────────────────────────────
  22 ┌         - name: airflow-scheduler 
  23 │           image: 'apache/airflow:2.8.3' 
  24 │           imagePullPolicy: IfNotPresent 
  25 │           env: 
  26 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  27 │               valueFrom: 
  28 │                 configMapKeyRef: 
  29 │                   name: airflow-config 
  30 └                   key: sql_alchemy_conn 
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 airflow-deployment.yaml:45-64
────────────────────────────────────────
  45 ┌         - name: airflow-webserver 
  46 │           env: 
  47 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  48 │               valueFrom: 
  49 │                 configMapKeyRef: 
  50 │                   name: airflow-config 
  51 │                   key: sql_alchemy_conn 
  52 │             - name: AIRFLOW__CORE__EXECUTOR 
  53 └               valueFrom: 
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "airflow-scheduler" of deployment "airflow" in "airflow" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 airflow-deployment.yaml:22-44
────────────────────────────────────────
  22 ┌         - name: airflow-scheduler 
  23 │           image: 'apache/airflow:2.8.3' 
  24 │           imagePullPolicy: IfNotPresent 
  25 │           env: 
  26 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  27 │               valueFrom: 
  28 │                 configMapKeyRef: 
  29 │                   name: airflow-config 
  30 └                   key: sql_alchemy_conn 
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "airflow-webserver" of deployment "airflow" in "airflow" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 airflow-deployment.yaml:45-64
────────────────────────────────────────
  45 ┌         - name: airflow-webserver 
  46 │           env: 
  47 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  48 │               valueFrom: 
  49 │                 configMapKeyRef: 
  50 │                   name: airflow-config 
  51 │                   key: sql_alchemy_conn 
  52 │             - name: AIRFLOW__CORE__EXECUTOR 
  53 └               valueFrom: 
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 airflow-deployment.yaml:45-64
────────────────────────────────────────
  45 ┌         - name: airflow-webserver 
  46 │           env: 
  47 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  48 │               valueFrom: 
  49 │                 configMapKeyRef: 
  50 │                   name: airflow-config 
  51 │                   key: sql_alchemy_conn 
  52 │             - name: AIRFLOW__CORE__EXECUTOR 
  53 └               valueFrom: 
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 airflow-deployment.yaml:22-44
────────────────────────────────────────
  22 ┌         - name: airflow-scheduler 
  23 │           image: 'apache/airflow:2.8.3' 
  24 │           imagePullPolicy: IfNotPresent 
  25 │           env: 
  26 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  27 │               valueFrom: 
  28 │                 configMapKeyRef: 
  29 │                   name: airflow-config 
  30 └                   key: sql_alchemy_conn 
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container airflow in airflow namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-deployment.yaml:45-64
────────────────────────────────────────
  45 ┌         - name: airflow-webserver 
  46 │           env: 
  47 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  48 │               valueFrom: 
  49 │                 configMapKeyRef: 
  50 │                   name: airflow-config 
  51 │                   key: sql_alchemy_conn 
  52 │             - name: AIRFLOW__CORE__EXECUTOR 
  53 └               valueFrom: 
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container airflow in airflow namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-deployment.yaml:22-44
────────────────────────────────────────
  22 ┌         - name: airflow-scheduler 
  23 │           image: 'apache/airflow:2.8.3' 
  24 │           imagePullPolicy: IfNotPresent 
  25 │           env: 
  26 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  27 │               valueFrom: 
  28 │                 configMapKeyRef: 
  29 │                   name: airflow-config 
  30 └                   key: sql_alchemy_conn 
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment airflow in airflow namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-deployment.yaml:20-72
────────────────────────────────────────
  20 ┌       serviceAccountName: airflow-scheduler 
  21 │       containers: 
  22 │         - name: airflow-scheduler 
  23 │           image: 'apache/airflow:2.8.3' 
  24 │           imagePullPolicy: IfNotPresent 
  25 │           env: 
  26 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  27 │               valueFrom: 
  28 └                 configMapKeyRef: 
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container airflow-scheduler in deployment airflow (namespace: airflow) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 airflow-deployment.yaml:22-44
────────────────────────────────────────
  22 ┌         - name: airflow-scheduler 
  23 │           image: 'apache/airflow:2.8.3' 
  24 │           imagePullPolicy: IfNotPresent 
  25 │           env: 
  26 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  27 │               valueFrom: 
  28 │                 configMapKeyRef: 
  29 │                   name: airflow-config 
  30 └                   key: sql_alchemy_conn 
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container airflow-webserver in deployment airflow (namespace: airflow) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 airflow-deployment.yaml:45-64
────────────────────────────────────────
  45 ┌         - name: airflow-webserver 
  46 │           env: 
  47 │             - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN 
  48 │               valueFrom: 
  49 │                 configMapKeyRef: 
  50 │                   name: airflow-config 
  51 │                   key: sql_alchemy_conn 
  52 │             - name: AIRFLOW__CORE__EXECUTOR 
  53 └               valueFrom: 
  ..   
────────────────────────────────────────



airflow-flower.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'airflow-flower' of Deployment 'airflow-flower' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 airflow-flower.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'airflow-flower' of Deployment 'airflow-flower' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 airflow-flower.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'airflow-flower' of 'deployment' 'airflow-flower' in 'airflow-v10' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 airflow-flower.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'airflow-flower' of Deployment 'airflow-flower' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 airflow-flower.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'airflow-flower' of Deployment 'airflow-flower' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 airflow-flower.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'airflow-flower' of Deployment 'airflow-flower' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 airflow-flower.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'airflow-flower' of Deployment 'airflow-flower' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 airflow-flower.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'airflow-flower' of Deployment 'airflow-flower' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 airflow-flower.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'airflow-flower' of Deployment 'airflow-flower' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 airflow-flower.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'airflow-flower' of Deployment 'airflow-flower' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 airflow-flower.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'airflow-flower' of Deployment 'airflow-flower' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 airflow-flower.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 airflow-flower.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "airflow-flower" of deployment "airflow-flower" in "airflow-v10" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 airflow-flower.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 airflow-flower.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container airflow-flower in airflow-v10 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-flower.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment airflow-flower in airflow-v10 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-flower.yaml:18-81
────────────────────────────────────────
  18 ┌       volumes:
  19 │         - name: generic-flower
  20 │           persistentVolumeClaim:
  21 │             claimName: generic-flower
  22 │         - name: empty1
  23 │           emptyDir: {}
  24 │         - name: airflow-cfg-flower
  25 │           configMap:
  26 └             name: airflow-cfg-flower
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container airflow-flower in deployment airflow-flower (namespace: airflow-v10) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 airflow-flower.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────



airflow-flower2.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'airflow-flower' of Deployment 'airflow-flower' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 airflow-flower2.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'airflow-flower' of Deployment 'airflow-flower' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 airflow-flower2.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'airflow-flower' of 'deployment' 'airflow-flower' in 'airflow-v10' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 airflow-flower2.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'airflow-flower' of Deployment 'airflow-flower' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 airflow-flower2.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'airflow-flower' of Deployment 'airflow-flower' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 airflow-flower2.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'airflow-flower' of Deployment 'airflow-flower' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 airflow-flower2.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'airflow-flower' of Deployment 'airflow-flower' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 airflow-flower2.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'airflow-flower' of Deployment 'airflow-flower' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 airflow-flower2.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'airflow-flower' of Deployment 'airflow-flower' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 airflow-flower2.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'airflow-flower' of Deployment 'airflow-flower' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 airflow-flower2.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'airflow-flower' of Deployment 'airflow-flower' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 airflow-flower2.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 airflow-flower2.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "airflow-flower" of deployment "airflow-flower" in "airflow-v10" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 airflow-flower2.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 airflow-flower2.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container airflow-flower in airflow-v10 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-flower2.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment airflow-flower in airflow-v10 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-flower2.yaml:18-81
────────────────────────────────────────
  18 ┌       volumes:
  19 │         - name: generic-flower
  20 │           persistentVolumeClaim:
  21 │             claimName: generic-flower
  22 │         - name: empty1
  23 │           emptyDir: {}
  24 │         - name: airflow-cfg-flower
  25 │           configMap:
  26 └             name: airflow-cfg-flower
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container airflow-flower in deployment airflow-flower (namespace: airflow-v10) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 airflow-flower2.yaml:29-81
────────────────────────────────────────
  29 ┌         - resources: {}
  30 │           name: airflow-flower
  31 │           env:
  32 │             - name: AIRFLOW_HOME
  33 │               value: /opt/airflow
  34 │             - name: USER
  35 │               value: "${AIRFLOW_UID:-1000}:${AIRFLOW_GID:-0}"
  36 │             - name: AIRFLOW_FERNET_KEY
  37 └               value: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
  ..   
────────────────────────────────────────



airflow-rbac.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0042 (MEDIUM): ClusterRole 'airflow-worker-role' should not have access to resource 'pods/log' for verbs ["delete", "deletecollection", "*"]
════════════════════════════════════════
Used to cover attacker’s tracks, but most clusters ship logs quickly off-cluster.

See https://avd.aquasec.com/misconfig/ksv042
────────────────────────────────────────
 airflow-rbac.yaml:6-18
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - pods
  10 │   - pods/log
  11 │   - pods/exec
  12 │   verbs:
  13 │   - get
  14 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'airflow-worker-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 airflow-rbac.yaml:6-18
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - pods
  10 │   - pods/log
  11 │   - pods/exec
  12 │   verbs:
  13 │   - get
  14 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): ClusterRole 'airflow-worker-role' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 airflow-rbac.yaml:6-18
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - pods
  10 │   - pods/log
  11 │   - pods/exec
  12 │   verbs:
  13 │   - get
  14 └   - list
  ..   
────────────────────────────────────────



airflow-redis.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'airflow-redis' of Deployment 'airflow-redis' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 airflow-redis.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'airflow-redis' of Deployment 'airflow-redis' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 airflow-redis.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'airflow-redis' of 'deployment' 'airflow-redis' in 'airflow-v10' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 airflow-redis.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'airflow-redis' of Deployment 'airflow-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 airflow-redis.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'airflow-redis' of Deployment 'airflow-redis' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 airflow-redis.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'airflow-redis' of Deployment 'airflow-redis' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 airflow-redis.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'airflow-redis' of Deployment 'airflow-redis' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 airflow-redis.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'airflow-redis' of Deployment 'airflow-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 airflow-redis.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'airflow-redis' of Deployment 'airflow-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 airflow-redis.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'airflow-redis' of Deployment 'airflow-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 airflow-redis.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'airflow-redis' of Deployment 'airflow-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 airflow-redis.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'airflow-redis' of Deployment 'airflow-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 airflow-redis.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 airflow-redis.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "airflow-redis" of deployment "airflow-redis" in "airflow-v10" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 airflow-redis.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 airflow-redis.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container airflow-redis in airflow-v10 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-redis.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment airflow-redis in airflow-v10 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-redis.yaml:19-39
────────────────────────────────────────
  19 ┌       volumes:
  20 │         - name: generic-redis
  21 │           persistentVolumeClaim:
  22 │             claimName: generic-redis
  23 │         - name: empty1
  24 │           emptyDir: {}
  25 │       containers:
  26 │         - resources: {}
  27 └           name: airflow-redis
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container airflow-redis in deployment airflow-redis (namespace: airflow-v10) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 airflow-redis.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────



airflow-redis2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'airflow-redis' of Deployment 'airflow-redis' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 airflow-redis2.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'airflow-redis' of Deployment 'airflow-redis' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 airflow-redis2.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'airflow-redis' of 'deployment' 'airflow-redis' in 'airflow-v10' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 airflow-redis2.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'airflow-redis' of Deployment 'airflow-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 airflow-redis2.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'airflow-redis' of Deployment 'airflow-redis' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 airflow-redis2.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'airflow-redis' of Deployment 'airflow-redis' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 airflow-redis2.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'airflow-redis' of Deployment 'airflow-redis' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 airflow-redis2.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'airflow-redis' of Deployment 'airflow-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 airflow-redis2.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'airflow-redis' of Deployment 'airflow-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 airflow-redis2.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'airflow-redis' of Deployment 'airflow-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 airflow-redis2.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'airflow-redis' of Deployment 'airflow-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 airflow-redis2.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'airflow-redis' of Deployment 'airflow-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 airflow-redis2.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 airflow-redis2.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "airflow-redis" of deployment "airflow-redis" in "airflow-v10" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 airflow-redis2.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 airflow-redis2.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container airflow-redis in airflow-v10 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-redis2.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment airflow-redis in airflow-v10 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-redis2.yaml:19-39
────────────────────────────────────────
  19 ┌       volumes:
  20 │         - name: generic-redis
  21 │           persistentVolumeClaim:
  22 │             claimName: generic-redis
  23 │         - name: empty1
  24 │           emptyDir: {}
  25 │       containers:
  26 │         - resources: {}
  27 └           name: airflow-redis
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container airflow-redis in deployment airflow-redis (namespace: airflow-v10) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 airflow-redis2.yaml:26-39
────────────────────────────────────────
  26 ┌         - resources: {}
  27 │           name: airflow-redis
  28 │           env:
  29 │             - name: ALLOW_EMPTY_PASSWORD
  30 │               value: 'yes'
  31 │           ports:
  32 │             - containerPort: 6379
  33 │               protocol: TCP
  34 └           volumeMounts:
  ..   
────────────────────────────────────────



airflow-scheduler.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'airflow-scheduler' of Deployment 'airflow-scheduler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 airflow-scheduler.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'airflow-scheduler' of Deployment 'airflow-scheduler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 airflow-scheduler.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'airflow-scheduler' of 'deployment' 'airflow-scheduler' in 'airflow-v10' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 airflow-scheduler.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'airflow-scheduler' of Deployment 'airflow-scheduler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 airflow-scheduler.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'airflow-scheduler' of Deployment 'airflow-scheduler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 airflow-scheduler.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'airflow-scheduler' of Deployment 'airflow-scheduler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 airflow-scheduler.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'airflow-scheduler' of Deployment 'airflow-scheduler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 airflow-scheduler.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'airflow-scheduler' of Deployment 'airflow-scheduler' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 airflow-scheduler.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'airflow-scheduler' of Deployment 'airflow-scheduler' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 airflow-scheduler.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 airflow-scheduler.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "airflow-scheduler" of deployment "airflow-scheduler" in "airflow-v10" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 airflow-scheduler.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 airflow-scheduler.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container airflow-scheduler in airflow-v10 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-scheduler.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment airflow-scheduler in airflow-v10 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-scheduler.yaml:18-91
────────────────────────────────────────
  18 ┌       volumes:
  19 │         - name: generic-scheduler
  20 │           persistentVolumeClaim:
  21 │             claimName: generic-worker-scheduler
  22 │         - name: empty1
  23 │           emptyDir: {}
  24 │         - name: airflow-cfg-scheduler
  25 │           configMap:
  26 └             name: airflow-cfg-scheduler
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container airflow-scheduler in deployment airflow-scheduler (namespace: airflow-v10) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 airflow-scheduler.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────



airflow-scheduler2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'airflow-scheduler' of Deployment 'airflow-scheduler' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 airflow-scheduler2.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'airflow-scheduler' of Deployment 'airflow-scheduler' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 airflow-scheduler2.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'airflow-scheduler' of 'deployment' 'airflow-scheduler' in 'airflow-v10' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 airflow-scheduler2.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'airflow-scheduler' of Deployment 'airflow-scheduler' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 airflow-scheduler2.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'airflow-scheduler' of Deployment 'airflow-scheduler' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 airflow-scheduler2.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'airflow-scheduler' of Deployment 'airflow-scheduler' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 airflow-scheduler2.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'airflow-scheduler' of Deployment 'airflow-scheduler' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 airflow-scheduler2.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'airflow-scheduler' of Deployment 'airflow-scheduler' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 airflow-scheduler2.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'airflow-scheduler' of Deployment 'airflow-scheduler' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 airflow-scheduler2.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 airflow-scheduler2.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "airflow-scheduler" of deployment "airflow-scheduler" in "airflow-v10" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 airflow-scheduler2.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 airflow-scheduler2.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container airflow-scheduler in airflow-v10 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-scheduler2.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment airflow-scheduler in airflow-v10 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-scheduler2.yaml:18-91
────────────────────────────────────────
  18 ┌       volumes:
  19 │         - name: generic-scheduler
  20 │           persistentVolumeClaim:
  21 │             claimName: generic-worker-scheduler
  22 │         - name: empty1
  23 │           emptyDir: {}
  24 │         - name: airflow-cfg-scheduler
  25 │           configMap:
  26 └             name: airflow-cfg-scheduler
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container airflow-scheduler in deployment airflow-scheduler (namespace: airflow-v10) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 airflow-scheduler2.yaml:29-91
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 1Gi
  34 │           name: airflow-scheduler
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────



airflow-webserver.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'airflow-webserver' of Deployment 'airflow-webserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 airflow-webserver.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'airflow-webserver' of Deployment 'airflow-webserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 airflow-webserver.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'airflow-webserver' of 'deployment' 'airflow-webserver' in 'airflow-v10' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 airflow-webserver.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'airflow-webserver' of Deployment 'airflow-webserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 airflow-webserver.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'airflow-webserver' of Deployment 'airflow-webserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 airflow-webserver.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'airflow-webserver' of Deployment 'airflow-webserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 airflow-webserver.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'airflow-webserver' of Deployment 'airflow-webserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 airflow-webserver.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'airflow-webserver' of Deployment 'airflow-webserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 airflow-webserver.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'airflow-webserver' of Deployment 'airflow-webserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 airflow-webserver.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 airflow-webserver.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "airflow-webserver" of deployment "airflow-webserver" in "airflow-v10" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 airflow-webserver.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 airflow-webserver.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container airflow-webserver in airflow-v10 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-webserver.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment airflow-webserver in airflow-v10 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-webserver.yaml:19-92
────────────────────────────────────────
  19 ┌       volumes:
  20 │         - name: airflow-cfg
  21 │           configMap:
  22 │             name: airflow-cfg
  23 │             defaultMode: 511
  24 │         - name: generic-webserver
  25 │           persistentVolumeClaim:
  26 │             claimName: generic-webserver
  27 └         - name: empty1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container airflow-webserver in deployment airflow-webserver (namespace: airflow-v10) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 airflow-webserver.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────



airflow-webserver3.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'airflow-webserver' of Deployment 'airflow-webserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 airflow-webserver3.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'airflow-webserver' of Deployment 'airflow-webserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 airflow-webserver3.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'airflow-webserver' of 'deployment' 'airflow-webserver' in 'airflow-v10' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 airflow-webserver3.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'airflow-webserver' of Deployment 'airflow-webserver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 airflow-webserver3.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'airflow-webserver' of Deployment 'airflow-webserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 airflow-webserver3.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'airflow-webserver' of Deployment 'airflow-webserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 airflow-webserver3.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'airflow-webserver' of Deployment 'airflow-webserver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 airflow-webserver3.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'airflow-webserver' of Deployment 'airflow-webserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 airflow-webserver3.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'airflow-webserver' of Deployment 'airflow-webserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 airflow-webserver3.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 airflow-webserver3.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "airflow-webserver" of deployment "airflow-webserver" in "airflow-v10" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 airflow-webserver3.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 airflow-webserver3.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container airflow-webserver in airflow-v10 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-webserver3.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment airflow-webserver in airflow-v10 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-webserver3.yaml:19-92
────────────────────────────────────────
  19 ┌       volumes:
  20 │         - name: airflow-cfg
  21 │           configMap:
  22 │             name: airflow-cfg
  23 │             defaultMode: 511
  24 │         - name: generic-webserver
  25 │           persistentVolumeClaim:
  26 │             claimName: generic-webserver
  27 └         - name: empty1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container airflow-webserver in deployment airflow-webserver (namespace: airflow-v10) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 airflow-webserver3.yaml:30-92
────────────────────────────────────────
  30 ┌         - resources:
  31 │             limits:
  32 │               memory: 2Gi
  33 │             requests:
  34 │               memory: 2Gi
  35 │           name: airflow-webserver
  36 │           env:
  37 │             - name: AIRFLOW_HOME
  38 └               value: /opt/airflow
  ..   
────────────────────────────────────────



airflow-worker.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'airflow-worker' of Deployment 'airflow-worker' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 airflow-worker.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'airflow-worker' of Deployment 'airflow-worker' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 airflow-worker.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'airflow-worker' of 'deployment' 'airflow-worker' in 'airflow-v10' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 airflow-worker.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'airflow-worker' of Deployment 'airflow-worker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 airflow-worker.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'airflow-worker' of Deployment 'airflow-worker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 airflow-worker.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'airflow-worker' of Deployment 'airflow-worker' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 airflow-worker.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'airflow-worker' of Deployment 'airflow-worker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 airflow-worker.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'airflow-worker' of Deployment 'airflow-worker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 airflow-worker.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'airflow-worker' of Deployment 'airflow-worker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 airflow-worker.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 airflow-worker.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "airflow-worker" of deployment "airflow-worker" in "airflow-v10" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 airflow-worker.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 airflow-worker.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container airflow-worker in airflow-v10 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-worker.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment airflow-worker in airflow-v10 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-worker.yaml:18-85
────────────────────────────────────────
  18 ┌       volumes:
  19 │         - name: generic-worker
  20 │           persistentVolumeClaim:
  21 │             claimName: generic-worker-scheduler
  22 │         - name: empty1
  23 │           emptyDir: {}
  24 │         - name: airflow-cfg-scheduler
  25 │           configMap:
  26 └             name: airflow-cfg-scheduler
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container airflow-worker in deployment airflow-worker (namespace: airflow-v10) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 airflow-worker.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────



airflow-worker2.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'airflow-worker' of Deployment 'airflow-worker' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 airflow-worker2.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'airflow-worker' of Deployment 'airflow-worker' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 airflow-worker2.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'airflow-worker' of 'deployment' 'airflow-worker' in 'airflow-v10' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 airflow-worker2.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'airflow-worker' of Deployment 'airflow-worker' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 airflow-worker2.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'airflow-worker' of Deployment 'airflow-worker' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 airflow-worker2.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'airflow-worker' of Deployment 'airflow-worker' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 airflow-worker2.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'airflow-worker' of Deployment 'airflow-worker' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 airflow-worker2.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'airflow-worker' of Deployment 'airflow-worker' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 airflow-worker2.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'airflow-worker' of Deployment 'airflow-worker' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 airflow-worker2.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 airflow-worker2.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "airflow-worker" of deployment "airflow-worker" in "airflow-v10" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 airflow-worker2.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 airflow-worker2.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container airflow-worker in airflow-v10 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-worker2.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment airflow-worker in airflow-v10 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow-worker2.yaml:18-85
────────────────────────────────────────
  18 ┌       volumes:
  19 │         - name: generic-worker
  20 │           persistentVolumeClaim:
  21 │             claimName: generic-worker-scheduler
  22 │         - name: empty1
  23 │           emptyDir: {}
  24 │         - name: airflow-cfg-scheduler
  25 │           configMap:
  26 └             name: airflow-cfg-scheduler
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container airflow-worker in deployment airflow-worker (namespace: airflow-v10) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 airflow-worker2.yaml:29-85
────────────────────────────────────────
  29 ┌         - resources:
  30 │             limits:
  31 │               memory: 2Gi
  32 │             requests:
  33 │               memory: 2Gi
  34 │           name: airflow-worker
  35 │           env:
  36 │             - name: AIRFLOW_HOME
  37 └               value: /opt/airflow
  ..   
────────────────────────────────────────



airflow3.yaml (kubernetes)
==========================
Tests: 147 (SUCCESSES: 97, FAILURES: 50)
Failures: 50 (UNKNOWN: 0, LOW: 30, MEDIUM: 13, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'airflow-create-user' of Deployment 'airflow-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 airflow3.yaml:54-79
────────────────────────────────────────
  54 ┌       - name: airflow-create-user
  55 │         image: apache/airflow:2.2.4
  56 │         imagePullPolicy: IfNotPresent
  57 │         env:
  58 │         - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
  59 │           valueFrom:
  60 │             configMapKeyRef:
  61 │               name: airflow-config
  62 └               key: sql_alchemy_conn
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'airflow-scheduler' of Deployment 'airflow-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 airflow3.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: airflow-scheduler
  18 │         image: apache/airflow:2.2.4
  19 │         imagePullPolicy: IfNotPresent
  20 │         args:
  21 │         - scheduler
  22 │         volumeMounts:
  23 │         - name: shared
  24 │           mountPath: /dags/
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'airflow-webserver' of Deployment 'airflow-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 airflow3.yaml:33-52
────────────────────────────────────────
  33 ┌       - name: airflow-webserver
  34 │         image: apache/airflow:2.2.4
  35 │         imagePullPolicy: IfNotPresent
  36 │         ports:
  37 │         - containerPort: 8090
  38 │         args:
  39 │         - webserver
  40 │         - -p
  41 └         - '8090'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'airflow-create-user' of Deployment 'airflow-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 airflow3.yaml:54-79
────────────────────────────────────────
  54 ┌       - name: airflow-create-user
  55 │         image: apache/airflow:2.2.4
  56 │         imagePullPolicy: IfNotPresent
  57 │         env:
  58 │         - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
  59 │           valueFrom:
  60 │             configMapKeyRef:
  61 │               name: airflow-config
  62 └               key: sql_alchemy_conn
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'airflow-scheduler' of Deployment 'airflow-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 airflow3.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: airflow-scheduler
  18 │         image: apache/airflow:2.2.4
  19 │         imagePullPolicy: IfNotPresent
  20 │         args:
  21 │         - scheduler
  22 │         volumeMounts:
  23 │         - name: shared
  24 │           mountPath: /dags/
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'airflow-webserver' of Deployment 'airflow-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 airflow3.yaml:33-52
────────────────────────────────────────
  33 ┌       - name: airflow-webserver
  34 │         image: apache/airflow:2.2.4
  35 │         imagePullPolicy: IfNotPresent
  36 │         ports:
  37 │         - containerPort: 8090
  38 │         args:
  39 │         - webserver
  40 │         - -p
  41 └         - '8090'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'airflow-create-user' of 'deployment' 'airflow-deployment' in 'airflow-app' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 airflow3.yaml:54-79
────────────────────────────────────────
  54 ┌       - name: airflow-create-user
  55 │         image: apache/airflow:2.2.4
  56 │         imagePullPolicy: IfNotPresent
  57 │         env:
  58 │         - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
  59 │           valueFrom:
  60 │             configMapKeyRef:
  61 │               name: airflow-config
  62 └               key: sql_alchemy_conn
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'airflow-scheduler' of 'deployment' 'airflow-deployment' in 'airflow-app' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 airflow3.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: airflow-scheduler
  18 │         image: apache/airflow:2.2.4
  19 │         imagePullPolicy: IfNotPresent
  20 │         args:
  21 │         - scheduler
  22 │         volumeMounts:
  23 │         - name: shared
  24 │           mountPath: /dags/
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'airflow-webserver' of 'deployment' 'airflow-deployment' in 'airflow-app' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 airflow3.yaml:33-52
────────────────────────────────────────
  33 ┌       - name: airflow-webserver
  34 │         image: apache/airflow:2.2.4
  35 │         imagePullPolicy: IfNotPresent
  36 │         ports:
  37 │         - containerPort: 8090
  38 │         args:
  39 │         - webserver
  40 │         - -p
  41 └         - '8090'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'airflow-create-user' of Deployment 'airflow-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 airflow3.yaml:54-79
────────────────────────────────────────
  54 ┌       - name: airflow-create-user
  55 │         image: apache/airflow:2.2.4
  56 │         imagePullPolicy: IfNotPresent
  57 │         env:
  58 │         - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
  59 │           valueFrom:
  60 │             configMapKeyRef:
  61 │               name: airflow-config
  62 └               key: sql_alchemy_conn
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'airflow-scheduler' of Deployment 'airflow-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 airflow3.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: airflow-scheduler
  18 │         image: apache/airflow:2.2.4
  19 │         imagePullPolicy: IfNotPresent
  20 │         args:
  21 │         - scheduler
  22 │         volumeMounts:
  23 │         - name: shared
  24 │           mountPath: /dags/
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'airflow-webserver' of Deployment 'airflow-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 airflow3.yaml:33-52
────────────────────────────────────────
  33 ┌       - name: airflow-webserver
  34 │         image: apache/airflow:2.2.4
  35 │         imagePullPolicy: IfNotPresent
  36 │         ports:
  37 │         - containerPort: 8090
  38 │         args:
  39 │         - webserver
  40 │         - -p
  41 └         - '8090'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'airflow-create-user' of Deployment 'airflow-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 airflow3.yaml:54-79
────────────────────────────────────────
  54 ┌       - name: airflow-create-user
  55 │         image: apache/airflow:2.2.4
  56 │         imagePullPolicy: IfNotPresent
  57 │         env:
  58 │         - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
  59 │           valueFrom:
  60 │             configMapKeyRef:
  61 │               name: airflow-config
  62 └               key: sql_alchemy_conn
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'airflow-scheduler' of Deployment 'airflow-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 airflow3.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: airflow-scheduler
  18 │         image: apache/airflow:2.2.4
  19 │         imagePullPolicy: IfNotPresent
  20 │         args:
  21 │         - scheduler
  22 │         volumeMounts:
  23 │         - name: shared
  24 │           mountPath: /dags/
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'airflow-webserver' of Deployment 'airflow-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 airflow3.yaml:33-52
────────────────────────────────────────
  33 ┌       - name: airflow-webserver
  34 │         image: apache/airflow:2.2.4
  35 │         imagePullPolicy: IfNotPresent
  36 │         ports:
  37 │         - containerPort: 8090
  38 │         args:
  39 │         - webserver
  40 │         - -p
  41 └         - '8090'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'airflow-create-user' of Deployment 'airflow-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 airflow3.yaml:54-79
────────────────────────────────────────
  54 ┌       - name: airflow-create-user
  55 │         image: apache/airflow:2.2.4
  56 │         imagePullPolicy: IfNotPresent
  57 │         env:
  58 │         - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
  59 │           valueFrom:
  60 │             configMapKeyRef:
  61 │               name: airflow-config
  62 └               key: sql_alchemy_conn
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'airflow-scheduler' of Deployment 'airflow-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 airflow3.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: airflow-scheduler
  18 │         image: apache/airflow:2.2.4
  19 │         imagePullPolicy: IfNotPresent
  20 │         args:
  21 │         - scheduler
  22 │         volumeMounts:
  23 │         - name: shared
  24 │           mountPath: /dags/
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'airflow-webserver' of Deployment 'airflow-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 airflow3.yaml:33-52
────────────────────────────────────────
  33 ┌       - name: airflow-webserver
  34 │         image: apache/airflow:2.2.4
  35 │         imagePullPolicy: IfNotPresent
  36 │         ports:
  37 │         - containerPort: 8090
  38 │         args:
  39 │         - webserver
  40 │         - -p
  41 └         - '8090'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'airflow-create-user' of Deployment 'airflow-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 airflow3.yaml:54-79
────────────────────────────────────────
  54 ┌       - name: airflow-create-user
  55 │         image: apache/airflow:2.2.4
  56 │         imagePullPolicy: IfNotPresent
  57 │         env:
  58 │         - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
  59 │           valueFrom:
  60 │             configMapKeyRef:
  61 │               name: airflow-config
  62 └               key: sql_alchemy_conn
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'airflow-scheduler' of Deployment 'airflow-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 airflow3.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: airflow-scheduler
  18 │         image: apache/airflow:2.2.4
  19 │         imagePullPolicy: IfNotPresent
  20 │         args:
  21 │         - scheduler
  22 │         volumeMounts:
  23 │         - name: shared
  24 │           mountPath: /dags/
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'airflow-webserver' of Deployment 'airflow-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 airflow3.yaml:33-52
────────────────────────────────────────
  33 ┌       - name: airflow-webserver
  34 │         image: apache/airflow:2.2.4
  35 │         imagePullPolicy: IfNotPresent
  36 │         ports:
  37 │         - containerPort: 8090
  38 │         args:
  39 │         - webserver
  40 │         - -p
  41 └         - '8090'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'airflow-create-user' of Deployment 'airflow-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 airflow3.yaml:54-79
────────────────────────────────────────
  54 ┌       - name: airflow-create-user
  55 │         image: apache/airflow:2.2.4
  56 │         imagePullPolicy: IfNotPresent
  57 │         env:
  58 │         - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
  59 │           valueFrom:
  60 │             configMapKeyRef:
  61 │               name: airflow-config
  62 └               key: sql_alchemy_conn
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'airflow-scheduler' of Deployment 'airflow-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 airflow3.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: airflow-scheduler
  18 │         image: apache/airflow:2.2.4
  19 │         imagePullPolicy: IfNotPresent
  20 │         args:
  21 │         - scheduler
  22 │         volumeMounts:
  23 │         - name: shared
  24 │           mountPath: /dags/
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'airflow-webserver' of Deployment 'airflow-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 airflow3.yaml:33-52
────────────────────────────────────────
  33 ┌       - name: airflow-webserver
  34 │         image: apache/airflow:2.2.4
  35 │         imagePullPolicy: IfNotPresent
  36 │         ports:
  37 │         - containerPort: 8090
  38 │         args:
  39 │         - webserver
  40 │         - -p
  41 └         - '8090'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'airflow-create-user' of Deployment 'airflow-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 airflow3.yaml:54-79
────────────────────────────────────────
  54 ┌       - name: airflow-create-user
  55 │         image: apache/airflow:2.2.4
  56 │         imagePullPolicy: IfNotPresent
  57 │         env:
  58 │         - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
  59 │           valueFrom:
  60 │             configMapKeyRef:
  61 │               name: airflow-config
  62 └               key: sql_alchemy_conn
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'airflow-scheduler' of Deployment 'airflow-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 airflow3.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: airflow-scheduler
  18 │         image: apache/airflow:2.2.4
  19 │         imagePullPolicy: IfNotPresent
  20 │         args:
  21 │         - scheduler
  22 │         volumeMounts:
  23 │         - name: shared
  24 │           mountPath: /dags/
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'airflow-webserver' of Deployment 'airflow-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 airflow3.yaml:33-52
────────────────────────────────────────
  33 ┌       - name: airflow-webserver
  34 │         image: apache/airflow:2.2.4
  35 │         imagePullPolicy: IfNotPresent
  36 │         ports:
  37 │         - containerPort: 8090
  38 │         args:
  39 │         - webserver
  40 │         - -p
  41 └         - '8090'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'airflow-create-user' of Deployment 'airflow-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 airflow3.yaml:54-79
────────────────────────────────────────
  54 ┌       - name: airflow-create-user
  55 │         image: apache/airflow:2.2.4
  56 │         imagePullPolicy: IfNotPresent
  57 │         env:
  58 │         - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
  59 │           valueFrom:
  60 │             configMapKeyRef:
  61 │               name: airflow-config
  62 └               key: sql_alchemy_conn
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'airflow-scheduler' of Deployment 'airflow-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 airflow3.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: airflow-scheduler
  18 │         image: apache/airflow:2.2.4
  19 │         imagePullPolicy: IfNotPresent
  20 │         args:
  21 │         - scheduler
  22 │         volumeMounts:
  23 │         - name: shared
  24 │           mountPath: /dags/
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'airflow-webserver' of Deployment 'airflow-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 airflow3.yaml:33-52
────────────────────────────────────────
  33 ┌       - name: airflow-webserver
  34 │         image: apache/airflow:2.2.4
  35 │         imagePullPolicy: IfNotPresent
  36 │         ports:
  37 │         - containerPort: 8090
  38 │         args:
  39 │         - webserver
  40 │         - -p
  41 └         - '8090'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'airflow-create-user' of Deployment 'airflow-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 airflow3.yaml:54-79
────────────────────────────────────────
  54 ┌       - name: airflow-create-user
  55 │         image: apache/airflow:2.2.4
  56 │         imagePullPolicy: IfNotPresent
  57 │         env:
  58 │         - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
  59 │           valueFrom:
  60 │             configMapKeyRef:
  61 │               name: airflow-config
  62 └               key: sql_alchemy_conn
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'airflow-scheduler' of Deployment 'airflow-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 airflow3.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: airflow-scheduler
  18 │         image: apache/airflow:2.2.4
  19 │         imagePullPolicy: IfNotPresent
  20 │         args:
  21 │         - scheduler
  22 │         volumeMounts:
  23 │         - name: shared
  24 │           mountPath: /dags/
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'airflow-webserver' of Deployment 'airflow-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 airflow3.yaml:33-52
────────────────────────────────────────
  33 ┌       - name: airflow-webserver
  34 │         image: apache/airflow:2.2.4
  35 │         imagePullPolicy: IfNotPresent
  36 │         ports:
  37 │         - containerPort: 8090
  38 │         args:
  39 │         - webserver
  40 │         - -p
  41 └         - '8090'
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'airflow-deployment' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 airflow3.yaml:7-84
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: airflow-app
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: airflow-app
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 airflow3.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: airflow-scheduler
  18 │         image: apache/airflow:2.2.4
  19 │         imagePullPolicy: IfNotPresent
  20 │         args:
  21 │         - scheduler
  22 │         volumeMounts:
  23 │         - name: shared
  24 │           mountPath: /dags/
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 airflow3.yaml:54-79
────────────────────────────────────────
  54 ┌       - name: airflow-create-user
  55 │         image: apache/airflow:2.2.4
  56 │         imagePullPolicy: IfNotPresent
  57 │         env:
  58 │         - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
  59 │           valueFrom:
  60 │             configMapKeyRef:
  61 │               name: airflow-config
  62 └               key: sql_alchemy_conn
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 airflow3.yaml:33-52
────────────────────────────────────────
  33 ┌       - name: airflow-webserver
  34 │         image: apache/airflow:2.2.4
  35 │         imagePullPolicy: IfNotPresent
  36 │         ports:
  37 │         - containerPort: 8090
  38 │         args:
  39 │         - webserver
  40 │         - -p
  41 └         - '8090'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "airflow-create-user" of deployment "airflow-deployment" in "airflow-app" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 airflow3.yaml:54-79
────────────────────────────────────────
  54 ┌       - name: airflow-create-user
  55 │         image: apache/airflow:2.2.4
  56 │         imagePullPolicy: IfNotPresent
  57 │         env:
  58 │         - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
  59 │           valueFrom:
  60 │             configMapKeyRef:
  61 │               name: airflow-config
  62 └               key: sql_alchemy_conn
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "airflow-scheduler" of deployment "airflow-deployment" in "airflow-app" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 airflow3.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: airflow-scheduler
  18 │         image: apache/airflow:2.2.4
  19 │         imagePullPolicy: IfNotPresent
  20 │         args:
  21 │         - scheduler
  22 │         volumeMounts:
  23 │         - name: shared
  24 │           mountPath: /dags/
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "airflow-webserver" of deployment "airflow-deployment" in "airflow-app" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 airflow3.yaml:33-52
────────────────────────────────────────
  33 ┌       - name: airflow-webserver
  34 │         image: apache/airflow:2.2.4
  35 │         imagePullPolicy: IfNotPresent
  36 │         ports:
  37 │         - containerPort: 8090
  38 │         args:
  39 │         - webserver
  40 │         - -p
  41 └         - '8090'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 airflow3.yaml:54-79
────────────────────────────────────────
  54 ┌       - name: airflow-create-user
  55 │         image: apache/airflow:2.2.4
  56 │         imagePullPolicy: IfNotPresent
  57 │         env:
  58 │         - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
  59 │           valueFrom:
  60 │             configMapKeyRef:
  61 │               name: airflow-config
  62 └               key: sql_alchemy_conn
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 airflow3.yaml:33-52
────────────────────────────────────────
  33 ┌       - name: airflow-webserver
  34 │         image: apache/airflow:2.2.4
  35 │         imagePullPolicy: IfNotPresent
  36 │         ports:
  37 │         - containerPort: 8090
  38 │         args:
  39 │         - webserver
  40 │         - -p
  41 └         - '8090'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 airflow3.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: airflow-scheduler
  18 │         image: apache/airflow:2.2.4
  19 │         imagePullPolicy: IfNotPresent
  20 │         args:
  21 │         - scheduler
  22 │         volumeMounts:
  23 │         - name: shared
  24 │           mountPath: /dags/
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container airflow-deployment in airflow-app namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow3.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: airflow-scheduler
  18 │         image: apache/airflow:2.2.4
  19 │         imagePullPolicy: IfNotPresent
  20 │         args:
  21 │         - scheduler
  22 │         volumeMounts:
  23 │         - name: shared
  24 │           mountPath: /dags/
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container airflow-deployment in airflow-app namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow3.yaml:54-79
────────────────────────────────────────
  54 ┌       - name: airflow-create-user
  55 │         image: apache/airflow:2.2.4
  56 │         imagePullPolicy: IfNotPresent
  57 │         env:
  58 │         - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
  59 │           valueFrom:
  60 │             configMapKeyRef:
  61 │               name: airflow-config
  62 └               key: sql_alchemy_conn
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container airflow-deployment in airflow-app namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow3.yaml:33-52
────────────────────────────────────────
  33 ┌       - name: airflow-webserver
  34 │         image: apache/airflow:2.2.4
  35 │         imagePullPolicy: IfNotPresent
  36 │         ports:
  37 │         - containerPort: 8090
  38 │         args:
  39 │         - webserver
  40 │         - -p
  41 └         - '8090'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment airflow-deployment in airflow-app namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airflow3.yaml:16-84
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: airflow-scheduler
  18 │         image: apache/airflow:2.2.4
  19 │         imagePullPolicy: IfNotPresent
  20 │         args:
  21 │         - scheduler
  22 │         volumeMounts:
  23 │         - name: shared
  24 └           mountPath: /dags/
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container airflow-create-user in deployment airflow-deployment (namespace: airflow-app) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 airflow3.yaml:54-79
────────────────────────────────────────
  54 ┌       - name: airflow-create-user
  55 │         image: apache/airflow:2.2.4
  56 │         imagePullPolicy: IfNotPresent
  57 │         env:
  58 │         - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN
  59 │           valueFrom:
  60 │             configMapKeyRef:
  61 │               name: airflow-config
  62 └               key: sql_alchemy_conn
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container airflow-scheduler in deployment airflow-deployment (namespace: airflow-app) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 airflow3.yaml:17-32
────────────────────────────────────────
  17 ┌       - name: airflow-scheduler
  18 │         image: apache/airflow:2.2.4
  19 │         imagePullPolicy: IfNotPresent
  20 │         args:
  21 │         - scheduler
  22 │         volumeMounts:
  23 │         - name: shared
  24 │           mountPath: /dags/
  25 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container airflow-webserver in deployment airflow-deployment (namespace: airflow-app) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 airflow3.yaml:33-52
────────────────────────────────────────
  33 ┌       - name: airflow-webserver
  34 │         image: apache/airflow:2.2.4
  35 │         imagePullPolicy: IfNotPresent
  36 │         ports:
  37 │         - containerPort: 8090
  38 │         args:
  39 │         - webserver
  40 │         - -p
  41 └         - '8090'
  ..   
────────────────────────────────────────



airsonic1.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 96, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'airsonic' of Deployment 'airsonic' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 airsonic1.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: airsonic
  18 │         image: airsonicadvanced/airsonic-advanced:latest
  19 │         ports:
  20 │         - containerPort: 4040
  21 │         env:
  22 │         - name: TZ
  23 │           value: America/New_York
  24 │         - name: JAVA_OPTS
  25 └           value: -Dserver.forward-headers-strategy=native
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'airsonic' of Deployment 'airsonic' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 airsonic1.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: airsonic
  18 │         image: airsonicadvanced/airsonic-advanced:latest
  19 │         ports:
  20 │         - containerPort: 4040
  21 │         env:
  22 │         - name: TZ
  23 │           value: America/New_York
  24 │         - name: JAVA_OPTS
  25 └           value: -Dserver.forward-headers-strategy=native
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'airsonic' of 'deployment' 'airsonic' in 'airsonic' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 airsonic1.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: airsonic
  18 │         image: airsonicadvanced/airsonic-advanced:latest
  19 │         ports:
  20 │         - containerPort: 4040
  21 │         env:
  22 │         - name: TZ
  23 │           value: America/New_York
  24 │         - name: JAVA_OPTS
  25 └           value: -Dserver.forward-headers-strategy=native
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'airsonic' of Deployment 'airsonic' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 airsonic1.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: airsonic
  18 │         image: airsonicadvanced/airsonic-advanced:latest
  19 │         ports:
  20 │         - containerPort: 4040
  21 │         env:
  22 │         - name: TZ
  23 │           value: America/New_York
  24 │         - name: JAVA_OPTS
  25 └           value: -Dserver.forward-headers-strategy=native
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'airsonic' of Deployment 'airsonic' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 airsonic1.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: airsonic
  18 │         image: airsonicadvanced/airsonic-advanced:latest
  19 │         ports:
  20 │         - containerPort: 4040
  21 │         env:
  22 │         - name: TZ
  23 │           value: America/New_York
  24 │         - name: JAVA_OPTS
  25 └           value: -Dserver.forward-headers-strategy=native
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'airsonic' of Deployment 'airsonic' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 airsonic1.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: airsonic
  18 │         image: airsonicadvanced/airsonic-advanced:latest
  19 │         ports:
  20 │         - containerPort: 4040
  21 │         env:
  22 │         - name: TZ
  23 │           value: America/New_York
  24 │         - name: JAVA_OPTS
  25 └           value: -Dserver.forward-headers-strategy=native
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'airsonic' of Deployment 'airsonic' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 airsonic1.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: airsonic
  18 │         image: airsonicadvanced/airsonic-advanced:latest
  19 │         ports:
  20 │         - containerPort: 4040
  21 │         env:
  22 │         - name: TZ
  23 │           value: America/New_York
  24 │         - name: JAVA_OPTS
  25 └           value: -Dserver.forward-headers-strategy=native
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'airsonic' of Deployment 'airsonic' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 airsonic1.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: airsonic
  18 │         image: airsonicadvanced/airsonic-advanced:latest
  19 │         ports:
  20 │         - containerPort: 4040
  21 │         env:
  22 │         - name: TZ
  23 │           value: America/New_York
  24 │         - name: JAVA_OPTS
  25 └           value: -Dserver.forward-headers-strategy=native
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'airsonic' of Deployment 'airsonic' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 airsonic1.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: airsonic
  18 │         image: airsonicadvanced/airsonic-advanced:latest
  19 │         ports:
  20 │         - containerPort: 4040
  21 │         env:
  22 │         - name: TZ
  23 │           value: America/New_York
  24 │         - name: JAVA_OPTS
  25 └           value: -Dserver.forward-headers-strategy=native
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'airsonic' of Deployment 'airsonic' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 airsonic1.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: airsonic
  18 │         image: airsonicadvanced/airsonic-advanced:latest
  19 │         ports:
  20 │         - containerPort: 4040
  21 │         env:
  22 │         - name: TZ
  23 │           value: America/New_York
  24 │         - name: JAVA_OPTS
  25 └           value: -Dserver.forward-headers-strategy=native
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'airsonic' of Deployment 'airsonic' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 airsonic1.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: airsonic
  18 │         image: airsonicadvanced/airsonic-advanced:latest
  19 │         ports:
  20 │         - containerPort: 4040
  21 │         env:
  22 │         - name: TZ
  23 │           value: America/New_York
  24 │         - name: JAVA_OPTS
  25 └           value: -Dserver.forward-headers-strategy=native
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'airsonic' of Deployment 'airsonic' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 airsonic1.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: airsonic
  18 │         image: airsonicadvanced/airsonic-advanced:latest
  19 │         ports:
  20 │         - containerPort: 4040
  21 │         env:
  22 │         - name: TZ
  23 │           value: America/New_York
  24 │         - name: JAVA_OPTS
  25 └           value: -Dserver.forward-headers-strategy=native
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 airsonic1.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: airsonic
  18 │         image: airsonicadvanced/airsonic-advanced:latest
  19 │         ports:
  20 │         - containerPort: 4040
  21 │         env:
  22 │         - name: TZ
  23 │           value: America/New_York
  24 │         - name: JAVA_OPTS
  25 └           value: -Dserver.forward-headers-strategy=native
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "airsonic" of deployment "airsonic" in "airsonic" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 airsonic1.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: airsonic
  18 │         image: airsonicadvanced/airsonic-advanced:latest
  19 │         ports:
  20 │         - containerPort: 4040
  21 │         env:
  22 │         - name: TZ
  23 │           value: America/New_York
  24 │         - name: JAVA_OPTS
  25 └           value: -Dserver.forward-headers-strategy=native
  ..   
────────────────────────────────────────


AVD-KSV-0105 (LOW): securityContext.runAsUser should be set to a value greater than 0
════════════════════════════════════════
Containers should be forbidden from running with a root UID.

See https://avd.aquasec.com/misconfig/ksv105
────────────────────────────────────────
 airsonic1.yaml:34-35
────────────────────────────────────────
  34 ┌           runAsUser: 0
  35 └           runAsGroup: 0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 airsonic1.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: airsonic
  18 │         image: airsonicadvanced/airsonic-advanced:latest
  19 │         ports:
  20 │         - containerPort: 4040
  21 │         env:
  22 │         - name: TZ
  23 │           value: America/New_York
  24 │         - name: JAVA_OPTS
  25 └           value: -Dserver.forward-headers-strategy=native
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment airsonic in airsonic namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 airsonic1.yaml:16-42
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: airsonic
  18 │         image: airsonicadvanced/airsonic-advanced:latest
  19 │         ports:
  20 │         - containerPort: 4040
  21 │         env:
  22 │         - name: TZ
  23 │           value: America/New_York
  24 └         - name: JAVA_OPTS
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container airsonic in deployment airsonic (namespace: airsonic) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 airsonic1.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: airsonic
  18 │         image: airsonicadvanced/airsonic-advanced:latest
  19 │         ports:
  20 │         - containerPort: 4040
  21 │         env:
  22 │         - name: TZ
  23 │           value: America/New_York
  24 │         - name: JAVA_OPTS
  25 └           value: -Dserver.forward-headers-strategy=native
  ..   
────────────────────────────────────────



akhikachmoney-deploy-secret.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web-akhikachmoney' of Deployment 'web-akhikachmoney' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 akhikachmoney-deploy-secret.yaml:18-56
────────────────────────────────────────
  18 ┌         - name: web-akhikachmoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.3
  20 │           command: ["./manage.py", "runserver", "0.0.0.0:8000"]
  21 │           imagePullPolicy: Always
  22 │           resources:
  23 │             requests:
  24 │               memory: 64Mi
  25 │               cpu: 100m
  26 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web-akhikachmoney' of Deployment 'web-akhikachmoney' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 akhikachmoney-deploy-secret.yaml:18-56
────────────────────────────────────────
  18 ┌         - name: web-akhikachmoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.3
  20 │           command: ["./manage.py", "runserver", "0.0.0.0:8000"]
  21 │           imagePullPolicy: Always
  22 │           resources:
  23 │             requests:
  24 │               memory: 64Mi
  25 │               cpu: 100m
  26 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web-akhikachmoney' of 'deployment' 'web-akhikachmoney' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 akhikachmoney-deploy-secret.yaml:18-56
────────────────────────────────────────
  18 ┌         - name: web-akhikachmoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.3
  20 │           command: ["./manage.py", "runserver", "0.0.0.0:8000"]
  21 │           imagePullPolicy: Always
  22 │           resources:
  23 │             requests:
  24 │               memory: 64Mi
  25 │               cpu: 100m
  26 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web-akhikachmoney' of Deployment 'web-akhikachmoney' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 akhikachmoney-deploy-secret.yaml:18-56
────────────────────────────────────────
  18 ┌         - name: web-akhikachmoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.3
  20 │           command: ["./manage.py", "runserver", "0.0.0.0:8000"]
  21 │           imagePullPolicy: Always
  22 │           resources:
  23 │             requests:
  24 │               memory: 64Mi
  25 │               cpu: 100m
  26 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web-akhikachmoney' of Deployment 'web-akhikachmoney' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 akhikachmoney-deploy-secret.yaml:18-56
────────────────────────────────────────
  18 ┌         - name: web-akhikachmoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.3
  20 │           command: ["./manage.py", "runserver", "0.0.0.0:8000"]
  21 │           imagePullPolicy: Always
  22 │           resources:
  23 │             requests:
  24 │               memory: 64Mi
  25 │               cpu: 100m
  26 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web-akhikachmoney' of Deployment 'web-akhikachmoney' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 akhikachmoney-deploy-secret.yaml:18-56
────────────────────────────────────────
  18 ┌         - name: web-akhikachmoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.3
  20 │           command: ["./manage.py", "runserver", "0.0.0.0:8000"]
  21 │           imagePullPolicy: Always
  22 │           resources:
  23 │             requests:
  24 │               memory: 64Mi
  25 │               cpu: 100m
  26 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web-akhikachmoney' of Deployment 'web-akhikachmoney' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 akhikachmoney-deploy-secret.yaml:18-56
────────────────────────────────────────
  18 ┌         - name: web-akhikachmoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.3
  20 │           command: ["./manage.py", "runserver", "0.0.0.0:8000"]
  21 │           imagePullPolicy: Always
  22 │           resources:
  23 │             requests:
  24 │               memory: 64Mi
  25 │               cpu: 100m
  26 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 akhikachmoney-deploy-secret.yaml:18-56
────────────────────────────────────────
  18 ┌         - name: web-akhikachmoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.3
  20 │           command: ["./manage.py", "runserver", "0.0.0.0:8000"]
  21 │           imagePullPolicy: Always
  22 │           resources:
  23 │             requests:
  24 │               memory: 64Mi
  25 │               cpu: 100m
  26 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web-akhikachmoney" of deployment "web-akhikachmoney" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 akhikachmoney-deploy-secret.yaml:18-56
────────────────────────────────────────
  18 ┌         - name: web-akhikachmoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.3
  20 │           command: ["./manage.py", "runserver", "0.0.0.0:8000"]
  21 │           imagePullPolicy: Always
  22 │           resources:
  23 │             requests:
  24 │               memory: 64Mi
  25 │               cpu: 100m
  26 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 akhikachmoney-deploy-secret.yaml:18-56
────────────────────────────────────────
  18 ┌         - name: web-akhikachmoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.3
  20 │           command: ["./manage.py", "runserver", "0.0.0.0:8000"]
  21 │           imagePullPolicy: Always
  22 │           resources:
  23 │             requests:
  24 │               memory: 64Mi
  25 │               cpu: 100m
  26 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment web-akhikachmoney in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 akhikachmoney-deploy-secret.yaml:4-6
────────────────────────────────────────
   4 ┌   name: web-akhikachmoney
   5 │   labels:
   6 └     app: web-akhikachmoney
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web-akhikachmoney in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 akhikachmoney-deploy-secret.yaml:18-56
────────────────────────────────────────
  18 ┌         - name: web-akhikachmoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.3
  20 │           command: ["./manage.py", "runserver", "0.0.0.0:8000"]
  21 │           imagePullPolicy: Always
  22 │           resources:
  23 │             requests:
  24 │               memory: 64Mi
  25 │               cpu: 100m
  26 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment web-akhikachmoney in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 akhikachmoney-deploy-secret.yaml:17-56
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: web-akhikachmoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.3
  20 │           command: ["./manage.py", "runserver", "0.0.0.0:8000"]
  21 │           imagePullPolicy: Always
  22 │           resources:
  23 │             requests:
  24 │               memory: 64Mi
  25 └               cpu: 100m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web-akhikachmoney in deployment web-akhikachmoney (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 akhikachmoney-deploy-secret.yaml:18-56
────────────────────────────────────────
  18 ┌         - name: web-akhikachmoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.3
  20 │           command: ["./manage.py", "runserver", "0.0.0.0:8000"]
  21 │           imagePullPolicy: Always
  22 │           resources:
  23 │             requests:
  24 │               memory: 64Mi
  25 │               cpu: 100m
  26 └             limits:
  ..   
────────────────────────────────────────



akhikachmoney-deploy.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web-akhikachoney' of Deployment 'web-akhikachoney' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 akhikachmoney-deploy.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: web-akhikachoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.1
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8000
  23 │           env:
  24 │             - name: POSTGRES_USER
  25 │               value: "moussa"
  26 └             - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web-akhikachoney' of Deployment 'web-akhikachoney' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 akhikachmoney-deploy.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: web-akhikachoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.1
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8000
  23 │           env:
  24 │             - name: POSTGRES_USER
  25 │               value: "moussa"
  26 └             - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web-akhikachoney' of 'deployment' 'web-akhikachoney' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 akhikachmoney-deploy.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: web-akhikachoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.1
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8000
  23 │           env:
  24 │             - name: POSTGRES_USER
  25 │               value: "moussa"
  26 └             - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web-akhikachoney' of Deployment 'web-akhikachoney' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 akhikachmoney-deploy.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: web-akhikachoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.1
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8000
  23 │           env:
  24 │             - name: POSTGRES_USER
  25 │               value: "moussa"
  26 └             - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web-akhikachoney' of Deployment 'web-akhikachoney' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 akhikachmoney-deploy.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: web-akhikachoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.1
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8000
  23 │           env:
  24 │             - name: POSTGRES_USER
  25 │               value: "moussa"
  26 └             - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web-akhikachoney' of Deployment 'web-akhikachoney' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 akhikachmoney-deploy.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: web-akhikachoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.1
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8000
  23 │           env:
  24 │             - name: POSTGRES_USER
  25 │               value: "moussa"
  26 └             - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web-akhikachoney' of Deployment 'web-akhikachoney' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 akhikachmoney-deploy.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: web-akhikachoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.1
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8000
  23 │           env:
  24 │             - name: POSTGRES_USER
  25 │               value: "moussa"
  26 └             - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web-akhikachoney' of Deployment 'web-akhikachoney' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 akhikachmoney-deploy.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: web-akhikachoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.1
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8000
  23 │           env:
  24 │             - name: POSTGRES_USER
  25 │               value: "moussa"
  26 └             - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web-akhikachoney' of Deployment 'web-akhikachoney' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 akhikachmoney-deploy.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: web-akhikachoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.1
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8000
  23 │           env:
  24 │             - name: POSTGRES_USER
  25 │               value: "moussa"
  26 └             - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web-akhikachoney' of Deployment 'web-akhikachoney' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 akhikachmoney-deploy.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: web-akhikachoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.1
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8000
  23 │           env:
  24 │             - name: POSTGRES_USER
  25 │               value: "moussa"
  26 └             - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web-akhikachoney' of Deployment 'web-akhikachoney' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 akhikachmoney-deploy.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: web-akhikachoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.1
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8000
  23 │           env:
  24 │             - name: POSTGRES_USER
  25 │               value: "moussa"
  26 └             - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 akhikachmoney-deploy.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: web-akhikachoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.1
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8000
  23 │           env:
  24 │             - name: POSTGRES_USER
  25 │               value: "moussa"
  26 └             - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web-akhikachoney" of deployment "web-akhikachoney" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 akhikachmoney-deploy.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: web-akhikachoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.1
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8000
  23 │           env:
  24 │             - name: POSTGRES_USER
  25 │               value: "moussa"
  26 └             - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 akhikachmoney-deploy.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: web-akhikachoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.1
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8000
  23 │           env:
  24 │             - name: POSTGRES_USER
  25 │               value: "moussa"
  26 └             - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment web-akhikachoney in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 akhikachmoney-deploy.yaml:4-6
────────────────────────────────────────
   4 ┌   name: web-akhikachoney
   5 │   labels:
   6 └     app: web-akhikachoney
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web-akhikachoney in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 akhikachmoney-deploy.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: web-akhikachoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.1
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8000
  23 │           env:
  24 │             - name: POSTGRES_USER
  25 │               value: "moussa"
  26 └             - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment web-akhikachoney in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 akhikachmoney-deploy.yaml:17-29
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: web-akhikachoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.1
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8000
  23 │           env:
  24 │             - name: POSTGRES_USER
  25 └               value: "moussa"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web-akhikachoney in deployment web-akhikachoney (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 akhikachmoney-deploy.yaml:18-29
────────────────────────────────────────
  18 ┌         - name: web-akhikachoney
  19 │           image: akhibousokhona1/akhikachmoney:v1.1
  20 │           imagePullPolicy: Always
  21 │           ports:
  22 │             - containerPort: 8000
  23 │           env:
  24 │             - name: POSTGRES_USER
  25 │               value: "moussa"
  26 └             - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────



akhikachmoney-job.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'django-migrations' of Job 'django-migrations' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 akhikachmoney-job.yaml:9-37
────────────────────────────────────────
   9 ┌         - name: django-migrations
  10 │           image: akhibousokhona1/akhikachmoney:v1.3
  11 │           command: ['python', 'manage.py', 'migrate','--fake']
  12 │           env:
  13 │             - name: POSTGRES_USER
  14 │               valueFrom:
  15 │                 secretKeyRef:
  16 │                   name: django-postgres-credentials
  17 └                   key: user
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'django-migrations' of Job 'django-migrations' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 akhikachmoney-job.yaml:9-37
────────────────────────────────────────
   9 ┌         - name: django-migrations
  10 │           image: akhibousokhona1/akhikachmoney:v1.3
  11 │           command: ['python', 'manage.py', 'migrate','--fake']
  12 │           env:
  13 │             - name: POSTGRES_USER
  14 │               valueFrom:
  15 │                 secretKeyRef:
  16 │                   name: django-postgres-credentials
  17 └                   key: user
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'django-migrations' of 'job' 'django-migrations' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 akhikachmoney-job.yaml:9-37
────────────────────────────────────────
   9 ┌         - name: django-migrations
  10 │           image: akhibousokhona1/akhikachmoney:v1.3
  11 │           command: ['python', 'manage.py', 'migrate','--fake']
  12 │           env:
  13 │             - name: POSTGRES_USER
  14 │               valueFrom:
  15 │                 secretKeyRef:
  16 │                   name: django-postgres-credentials
  17 └                   key: user
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'django-migrations' of Job 'django-migrations' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 akhikachmoney-job.yaml:9-37
────────────────────────────────────────
   9 ┌         - name: django-migrations
  10 │           image: akhibousokhona1/akhikachmoney:v1.3
  11 │           command: ['python', 'manage.py', 'migrate','--fake']
  12 │           env:
  13 │             - name: POSTGRES_USER
  14 │               valueFrom:
  15 │                 secretKeyRef:
  16 │                   name: django-postgres-credentials
  17 └                   key: user
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'django-migrations' of Job 'django-migrations' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 akhikachmoney-job.yaml:9-37
────────────────────────────────────────
   9 ┌         - name: django-migrations
  10 │           image: akhibousokhona1/akhikachmoney:v1.3
  11 │           command: ['python', 'manage.py', 'migrate','--fake']
  12 │           env:
  13 │             - name: POSTGRES_USER
  14 │               valueFrom:
  15 │                 secretKeyRef:
  16 │                   name: django-postgres-credentials
  17 └                   key: user
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'django-migrations' of Job 'django-migrations' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 akhikachmoney-job.yaml:9-37
────────────────────────────────────────
   9 ┌         - name: django-migrations
  10 │           image: akhibousokhona1/akhikachmoney:v1.3
  11 │           command: ['python', 'manage.py', 'migrate','--fake']
  12 │           env:
  13 │             - name: POSTGRES_USER
  14 │               valueFrom:
  15 │                 secretKeyRef:
  16 │                   name: django-postgres-credentials
  17 └                   key: user
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'django-migrations' of Job 'django-migrations' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 akhikachmoney-job.yaml:9-37
────────────────────────────────────────
   9 ┌         - name: django-migrations
  10 │           image: akhibousokhona1/akhikachmoney:v1.3
  11 │           command: ['python', 'manage.py', 'migrate','--fake']
  12 │           env:
  13 │             - name: POSTGRES_USER
  14 │               valueFrom:
  15 │                 secretKeyRef:
  16 │                   name: django-postgres-credentials
  17 └                   key: user
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'django-migrations' of Job 'django-migrations' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 akhikachmoney-job.yaml:9-37
────────────────────────────────────────
   9 ┌         - name: django-migrations
  10 │           image: akhibousokhona1/akhikachmoney:v1.3
  11 │           command: ['python', 'manage.py', 'migrate','--fake']
  12 │           env:
  13 │             - name: POSTGRES_USER
  14 │               valueFrom:
  15 │                 secretKeyRef:
  16 │                   name: django-postgres-credentials
  17 └                   key: user
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'django-migrations' of Job 'django-migrations' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 akhikachmoney-job.yaml:9-37
────────────────────────────────────────
   9 ┌         - name: django-migrations
  10 │           image: akhibousokhona1/akhikachmoney:v1.3
  11 │           command: ['python', 'manage.py', 'migrate','--fake']
  12 │           env:
  13 │             - name: POSTGRES_USER
  14 │               valueFrom:
  15 │                 secretKeyRef:
  16 │                   name: django-postgres-credentials
  17 └                   key: user
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'django-migrations' of Job 'django-migrations' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 akhikachmoney-job.yaml:9-37
────────────────────────────────────────
   9 ┌         - name: django-migrations
  10 │           image: akhibousokhona1/akhikachmoney:v1.3
  11 │           command: ['python', 'manage.py', 'migrate','--fake']
  12 │           env:
  13 │             - name: POSTGRES_USER
  14 │               valueFrom:
  15 │                 secretKeyRef:
  16 │                   name: django-postgres-credentials
  17 └                   key: user
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'django-migrations' of Job 'django-migrations' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 akhikachmoney-job.yaml:9-37
────────────────────────────────────────
   9 ┌         - name: django-migrations
  10 │           image: akhibousokhona1/akhikachmoney:v1.3
  11 │           command: ['python', 'manage.py', 'migrate','--fake']
  12 │           env:
  13 │             - name: POSTGRES_USER
  14 │               valueFrom:
  15 │                 secretKeyRef:
  16 │                   name: django-postgres-credentials
  17 └                   key: user
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 akhikachmoney-job.yaml:9-37
────────────────────────────────────────
   9 ┌         - name: django-migrations
  10 │           image: akhibousokhona1/akhikachmoney:v1.3
  11 │           command: ['python', 'manage.py', 'migrate','--fake']
  12 │           env:
  13 │             - name: POSTGRES_USER
  14 │               valueFrom:
  15 │                 secretKeyRef:
  16 │                   name: django-postgres-credentials
  17 └                   key: user
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "django-migrations" of job "django-migrations" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 akhikachmoney-job.yaml:9-37
────────────────────────────────────────
   9 ┌         - name: django-migrations
  10 │           image: akhibousokhona1/akhikachmoney:v1.3
  11 │           command: ['python', 'manage.py', 'migrate','--fake']
  12 │           env:
  13 │             - name: POSTGRES_USER
  14 │               valueFrom:
  15 │                 secretKeyRef:
  16 │                   name: django-postgres-credentials
  17 └                   key: user
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 akhikachmoney-job.yaml:9-37
────────────────────────────────────────
   9 ┌         - name: django-migrations
  10 │           image: akhibousokhona1/akhikachmoney:v1.3
  11 │           command: ['python', 'manage.py', 'migrate','--fake']
  12 │           env:
  13 │             - name: POSTGRES_USER
  14 │               valueFrom:
  15 │                 secretKeyRef:
  16 │                   name: django-postgres-credentials
  17 └                   key: user
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job django-migrations in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 akhikachmoney-job.yaml:4
────────────────────────────────────────
   4 [   name: django-migrations
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container django-migrations in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 akhikachmoney-job.yaml:9-37
────────────────────────────────────────
   9 ┌         - name: django-migrations
  10 │           image: akhibousokhona1/akhikachmoney:v1.3
  11 │           command: ['python', 'manage.py', 'migrate','--fake']
  12 │           env:
  13 │             - name: POSTGRES_USER
  14 │               valueFrom:
  15 │                 secretKeyRef:
  16 │                   name: django-postgres-credentials
  17 └                   key: user
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job django-migrations in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 akhikachmoney-job.yaml:8-38
────────────────────────────────────────
   8 ┌       containers:
   9 │         - name: django-migrations
  10 │           image: akhibousokhona1/akhikachmoney:v1.3
  11 │           command: ['python', 'manage.py', 'migrate','--fake']
  12 │           env:
  13 │             - name: POSTGRES_USER
  14 │               valueFrom:
  15 │                 secretKeyRef:
  16 └                   name: django-postgres-credentials
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container django-migrations in job django-migrations (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 akhikachmoney-job.yaml:9-37
────────────────────────────────────────
   9 ┌         - name: django-migrations
  10 │           image: akhibousokhona1/akhikachmoney:v1.3
  11 │           command: ['python', 'manage.py', 'migrate','--fake']
  12 │           env:
  13 │             - name: POSTGRES_USER
  14 │               valueFrom:
  15 │                 secretKeyRef:
  16 │                   name: django-postgres-credentials
  17 └                   key: user
  ..   
────────────────────────────────────────



akri-anomaly-detection-app.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'akri-anomaly-detection-app' of Deployment 'akri-anomaly-detection-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 akri-anomaly-detection-app.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: akri-anomaly-detection-app
  17 │         image: ghcr.io/project-akri/akri/anomaly-detection-app:latest-dev
  18 │         imagePullPolicy: Always
  19 │         securityContext:
  20 │           runAsUser: 1000
  21 │           allowPrivilegeEscalation: false
  22 │           runAsNonRoot: true
  23 │           readOnlyRootFilesystem: true
  24 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'akri-anomaly-detection-app' of Deployment 'akri-anomaly-detection-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 akri-anomaly-detection-app.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: akri-anomaly-detection-app
  17 │         image: ghcr.io/project-akri/akri/anomaly-detection-app:latest-dev
  18 │         imagePullPolicy: Always
  19 │         securityContext:
  20 │           runAsUser: 1000
  21 │           allowPrivilegeEscalation: false
  22 │           runAsNonRoot: true
  23 │           readOnlyRootFilesystem: true
  24 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'akri-anomaly-detection-app' of Deployment 'akri-anomaly-detection-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 akri-anomaly-detection-app.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: akri-anomaly-detection-app
  17 │         image: ghcr.io/project-akri/akri/anomaly-detection-app:latest-dev
  18 │         imagePullPolicy: Always
  19 │         securityContext:
  20 │           runAsUser: 1000
  21 │           allowPrivilegeEscalation: false
  22 │           runAsNonRoot: true
  23 │           readOnlyRootFilesystem: true
  24 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'akri-anomaly-detection-app' of Deployment 'akri-anomaly-detection-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 akri-anomaly-detection-app.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: akri-anomaly-detection-app
  17 │         image: ghcr.io/project-akri/akri/anomaly-detection-app:latest-dev
  18 │         imagePullPolicy: Always
  19 │         securityContext:
  20 │           runAsUser: 1000
  21 │           allowPrivilegeEscalation: false
  22 │           runAsNonRoot: true
  23 │           readOnlyRootFilesystem: true
  24 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'akri-anomaly-detection-app' of Deployment 'akri-anomaly-detection-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 akri-anomaly-detection-app.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: akri-anomaly-detection-app
  17 │         image: ghcr.io/project-akri/akri/anomaly-detection-app:latest-dev
  18 │         imagePullPolicy: Always
  19 │         securityContext:
  20 │           runAsUser: 1000
  21 │           allowPrivilegeEscalation: false
  22 │           runAsNonRoot: true
  23 │           readOnlyRootFilesystem: true
  24 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'akri-anomaly-detection-app' of Deployment 'akri-anomaly-detection-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 akri-anomaly-detection-app.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: akri-anomaly-detection-app
  17 │         image: ghcr.io/project-akri/akri/anomaly-detection-app:latest-dev
  18 │         imagePullPolicy: Always
  19 │         securityContext:
  20 │           runAsUser: 1000
  21 │           allowPrivilegeEscalation: false
  22 │           runAsNonRoot: true
  23 │           readOnlyRootFilesystem: true
  24 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 akri-anomaly-detection-app.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: akri-anomaly-detection-app
  17 │         image: ghcr.io/project-akri/akri/anomaly-detection-app:latest-dev
  18 │         imagePullPolicy: Always
  19 │         securityContext:
  20 │           runAsUser: 1000
  21 │           allowPrivilegeEscalation: false
  22 │           runAsNonRoot: true
  23 │           readOnlyRootFilesystem: true
  24 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "akri-anomaly-detection-app" of deployment "akri-anomaly-detection-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 akri-anomaly-detection-app.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: akri-anomaly-detection-app
  17 │         image: ghcr.io/project-akri/akri/anomaly-detection-app:latest-dev
  18 │         imagePullPolicy: Always
  19 │         securityContext:
  20 │           runAsUser: 1000
  21 │           allowPrivilegeEscalation: false
  22 │           runAsNonRoot: true
  23 │           readOnlyRootFilesystem: true
  24 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment akri-anomaly-detection-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 akri-anomaly-detection-app.yaml:4
────────────────────────────────────────
   4 [   name: akri-anomaly-detection-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment akri-anomaly-detection-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 akri-anomaly-detection-app.yaml:15-29
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: akri-anomaly-detection-app
  17 │         image: ghcr.io/project-akri/akri/anomaly-detection-app:latest-dev
  18 │         imagePullPolicy: Always
  19 │         securityContext:
  20 │           runAsUser: 1000
  21 │           allowPrivilegeEscalation: false
  22 │           runAsNonRoot: true
  23 └           readOnlyRootFilesystem: true
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container akri-anomaly-detection-app in deployment akri-anomaly-detection-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 akri-anomaly-detection-app.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: akri-anomaly-detection-app
  17 │         image: ghcr.io/project-akri/akri/anomaly-detection-app:latest-dev
  18 │         imagePullPolicy: Always
  19 │         securityContext:
  20 │           runAsUser: 1000
  21 │           allowPrivilegeEscalation: false
  22 │           runAsNonRoot: true
  23 │           readOnlyRootFilesystem: true
  24 └           capabilities:
  ..   
────────────────────────────────────────



akri-video-streaming-app.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 akri-video-streaming-app.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 akri-video-streaming-app.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'akri-video-streaming-app' of 'deployment' 'akri-video-streaming-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 akri-video-streaming-app.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 akri-video-streaming-app.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 akri-video-streaming-app.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 akri-video-streaming-app.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 akri-video-streaming-app.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 akri-video-streaming-app.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 akri-video-streaming-app.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 akri-video-streaming-app.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 akri-video-streaming-app.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 akri-video-streaming-app.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "akri-video-streaming-app" of deployment "akri-video-streaming-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 akri-video-streaming-app.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 akri-video-streaming-app.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment akri-video-streaming-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 akri-video-streaming-app.yaml:4
────────────────────────────────────────
   4 [   name: akri-video-streaming-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container akri-video-streaming-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 akri-video-streaming-app.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment akri-video-streaming-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 akri-video-streaming-app.yaml:15-24
────────────────────────────────────────
  15 ┌       nodeSelector:
  16 │         kubernetes.io/os: linux
  17 │       serviceAccountName: akri-video-streaming-app-sa
  18 │       containers:
  19 │       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container akri-video-streaming-app in deployment akri-video-streaming-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 akri-video-streaming-app.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────



akri-video-streaming-app1.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 akri-video-streaming-app1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 akri-video-streaming-app1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'akri-video-streaming-app' of 'deployment' 'akri-video-streaming-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 akri-video-streaming-app1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 akri-video-streaming-app1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 akri-video-streaming-app1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 akri-video-streaming-app1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 akri-video-streaming-app1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 akri-video-streaming-app1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 akri-video-streaming-app1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 akri-video-streaming-app1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 akri-video-streaming-app1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 akri-video-streaming-app1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "akri-video-streaming-app" of deployment "akri-video-streaming-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 akri-video-streaming-app1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 akri-video-streaming-app1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment akri-video-streaming-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 akri-video-streaming-app1.yaml:4
────────────────────────────────────────
   4 [   name: akri-video-streaming-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container akri-video-streaming-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 akri-video-streaming-app1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment akri-video-streaming-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 akri-video-streaming-app1.yaml:15-24
────────────────────────────────────────
  15 ┌       nodeSelector:
  16 │         kubernetes.io/os: linux
  17 │       serviceAccountName: akri-video-streaming-app-sa
  18 │       containers:
  19 │       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container akri-video-streaming-app in deployment akri-video-streaming-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 akri-video-streaming-app1.yaml:19-24
────────────────────────────────────────
  19 ┌       - name: akri-video-streaming-app
  20 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: CONFIGURATION_NAME
  24 └           value: akri-onvif
────────────────────────────────────────



akri-video-streaming-app2.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 103, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 8, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 akri-video-streaming-app2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: akri-video-streaming-app
  18 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  19 │         imagePullPolicy: Always
  20 │         securityContext:
  21 │           runAsUser: 1000
  22 │           allowPrivilegeEscalation: false
  23 │           runAsNonRoot: true
  24 │           readOnlyRootFilesystem: true
  25 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 akri-video-streaming-app2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: akri-video-streaming-app
  18 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  19 │         imagePullPolicy: Always
  20 │         securityContext:
  21 │           runAsUser: 1000
  22 │           allowPrivilegeEscalation: false
  23 │           runAsNonRoot: true
  24 │           readOnlyRootFilesystem: true
  25 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 akri-video-streaming-app2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: akri-video-streaming-app
  18 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  19 │         imagePullPolicy: Always
  20 │         securityContext:
  21 │           runAsUser: 1000
  22 │           allowPrivilegeEscalation: false
  23 │           runAsNonRoot: true
  24 │           readOnlyRootFilesystem: true
  25 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 akri-video-streaming-app2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: akri-video-streaming-app
  18 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  19 │         imagePullPolicy: Always
  20 │         securityContext:
  21 │           runAsUser: 1000
  22 │           allowPrivilegeEscalation: false
  23 │           runAsNonRoot: true
  24 │           readOnlyRootFilesystem: true
  25 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 akri-video-streaming-app2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: akri-video-streaming-app
  18 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  19 │         imagePullPolicy: Always
  20 │         securityContext:
  21 │           runAsUser: 1000
  22 │           allowPrivilegeEscalation: false
  23 │           runAsNonRoot: true
  24 │           readOnlyRootFilesystem: true
  25 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'akri-video-streaming-app' of Deployment 'akri-video-streaming-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 akri-video-streaming-app2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: akri-video-streaming-app
  18 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  19 │         imagePullPolicy: Always
  20 │         securityContext:
  21 │           runAsUser: 1000
  22 │           allowPrivilegeEscalation: false
  23 │           runAsNonRoot: true
  24 │           readOnlyRootFilesystem: true
  25 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 akri-video-streaming-app2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: akri-video-streaming-app
  18 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  19 │         imagePullPolicy: Always
  20 │         securityContext:
  21 │           runAsUser: 1000
  22 │           allowPrivilegeEscalation: false
  23 │           runAsNonRoot: true
  24 │           readOnlyRootFilesystem: true
  25 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "akri-video-streaming-app" of deployment "akri-video-streaming-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 akri-video-streaming-app2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: akri-video-streaming-app
  18 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  19 │         imagePullPolicy: Always
  20 │         securityContext:
  21 │           runAsUser: 1000
  22 │           allowPrivilegeEscalation: false
  23 │           runAsNonRoot: true
  24 │           readOnlyRootFilesystem: true
  25 └           capabilities:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment akri-video-streaming-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 akri-video-streaming-app2.yaml:4
────────────────────────────────────────
   4 [   name: akri-video-streaming-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment akri-video-streaming-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 akri-video-streaming-app2.yaml:15-30
────────────────────────────────────────
  15 ┌       serviceAccountName: akri-video-streaming-app-sa
  16 │       containers:
  17 │       - name: akri-video-streaming-app
  18 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  19 │         imagePullPolicy: Always
  20 │         securityContext:
  21 │           runAsUser: 1000
  22 │           allowPrivilegeEscalation: false
  23 └           runAsNonRoot: true
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container akri-video-streaming-app in deployment akri-video-streaming-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 akri-video-streaming-app2.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: akri-video-streaming-app
  18 │         image: ghcr.io/project-akri/akri/video-streaming-app:latest-dev
  19 │         imagePullPolicy: Always
  20 │         securityContext:
  21 │           runAsUser: 1000
  22 │           allowPrivilegeEscalation: false
  23 │           runAsNonRoot: true
  24 │           readOnlyRootFilesystem: true
  25 └           capabilities:
  ..   
────────────────────────────────────────



aks-deploy-from-acr.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-springboot-app' of Deployment 'my-springboot-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-deploy-from-acr.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-springboot-app' of Deployment 'my-springboot-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-deploy-from-acr.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-springboot-app' of 'deployment' 'my-springboot-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-deploy-from-acr.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-springboot-app' of Deployment 'my-springboot-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-deploy-from-acr.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-springboot-app' of Deployment 'my-springboot-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-deploy-from-acr.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-springboot-app' of Deployment 'my-springboot-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-deploy-from-acr.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-springboot-app' of Deployment 'my-springboot-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aks-deploy-from-acr.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-springboot-app' of Deployment 'my-springboot-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aks-deploy-from-acr.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-springboot-app' of Deployment 'my-springboot-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-deploy-from-acr.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-springboot-app' of Deployment 'my-springboot-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-deploy-from-acr.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-springboot-app' of Deployment 'my-springboot-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-deploy-from-acr.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-deploy-from-acr.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-springboot-app" of deployment "my-springboot-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-deploy-from-acr.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-deploy-from-acr.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-springboot-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-deploy-from-acr.yaml:4
────────────────────────────────────────
   4 [   name: my-springboot-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-springboot-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-deploy-from-acr.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-springboot-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-deploy-from-acr.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────



aks-deploy-from-acr1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-springboot-app' of Deployment 'my-springboot-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-deploy-from-acr1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-springboot-app' of Deployment 'my-springboot-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-deploy-from-acr1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-springboot-app' of 'deployment' 'my-springboot-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-deploy-from-acr1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-springboot-app' of Deployment 'my-springboot-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-deploy-from-acr1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-springboot-app' of Deployment 'my-springboot-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-deploy-from-acr1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-springboot-app' of Deployment 'my-springboot-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-deploy-from-acr1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-springboot-app' of Deployment 'my-springboot-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aks-deploy-from-acr1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-springboot-app' of Deployment 'my-springboot-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aks-deploy-from-acr1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-springboot-app' of Deployment 'my-springboot-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-deploy-from-acr1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-springboot-app' of Deployment 'my-springboot-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-deploy-from-acr1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-springboot-app' of Deployment 'my-springboot-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-deploy-from-acr1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-deploy-from-acr1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-springboot-app" of deployment "my-springboot-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-deploy-from-acr1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-deploy-from-acr1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-springboot-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-deploy-from-acr1.yaml:4
────────────────────────────────────────
   4 [   name: my-springboot-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-springboot-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-deploy-from-acr1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-springboot-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-deploy-from-acr1.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: my-springboot-app
  17 │         image: myacrrepo4321.azurecr.io/akannan1087/springboot-app:#{Build.BuildId}#
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────



aks-deploy-from-acr2.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'azuredb2acr' of Deployment 'my-springboot-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-deploy-from-acr2.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: azuredb2acr
  17 │         image: azuredb2acr.azurecr.io/abcd:307
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'azuredb2acr' of Deployment 'my-springboot-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-deploy-from-acr2.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: azuredb2acr
  17 │         image: azuredb2acr.azurecr.io/abcd:307
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'azuredb2acr' of 'deployment' 'my-springboot-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-deploy-from-acr2.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: azuredb2acr
  17 │         image: azuredb2acr.azurecr.io/abcd:307
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'azuredb2acr' of Deployment 'my-springboot-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-deploy-from-acr2.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: azuredb2acr
  17 │         image: azuredb2acr.azurecr.io/abcd:307
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'azuredb2acr' of Deployment 'my-springboot-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-deploy-from-acr2.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: azuredb2acr
  17 │         image: azuredb2acr.azurecr.io/abcd:307
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'azuredb2acr' of Deployment 'my-springboot-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-deploy-from-acr2.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: azuredb2acr
  17 │         image: azuredb2acr.azurecr.io/abcd:307
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'azuredb2acr' of Deployment 'my-springboot-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aks-deploy-from-acr2.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: azuredb2acr
  17 │         image: azuredb2acr.azurecr.io/abcd:307
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'azuredb2acr' of Deployment 'my-springboot-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aks-deploy-from-acr2.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: azuredb2acr
  17 │         image: azuredb2acr.azurecr.io/abcd:307
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'azuredb2acr' of Deployment 'my-springboot-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-deploy-from-acr2.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: azuredb2acr
  17 │         image: azuredb2acr.azurecr.io/abcd:307
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'azuredb2acr' of Deployment 'my-springboot-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-deploy-from-acr2.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: azuredb2acr
  17 │         image: azuredb2acr.azurecr.io/abcd:307
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'azuredb2acr' of Deployment 'my-springboot-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-deploy-from-acr2.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: azuredb2acr
  17 │         image: azuredb2acr.azurecr.io/abcd:307
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-deploy-from-acr2.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: azuredb2acr
  17 │         image: azuredb2acr.azurecr.io/abcd:307
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "azuredb2acr" of deployment "my-springboot-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-deploy-from-acr2.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: azuredb2acr
  17 │         image: azuredb2acr.azurecr.io/abcd:307
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-deploy-from-acr2.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: azuredb2acr
  17 │         image: azuredb2acr.azurecr.io/abcd:307
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-springboot-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-deploy-from-acr2.yaml:4
────────────────────────────────────────
   4 [   name: my-springboot-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-springboot-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-deploy-from-acr2.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: azuredb2acr
  17 │         image: azuredb2acr.azurecr.io/abcd:307
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-springboot-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-deploy-from-acr2.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: azuredb2acr
  17 │         image: azuredb2acr.azurecr.io/abcd:307
  18 │         imagePullPolicy: Always
  19 │         ports:
  20 └         - containerPort: 8085
────────────────────────────────────────



aks-deploy1_14.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-deploy1_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-deploy1_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-deploy1_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-deploy1_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-deploy1_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 aks-deploy1_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-deploy1_14.yaml:33-122
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-deploy1_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



aks-deploy1_15.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-deploy1_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aks-deploy1_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aks-deploy1_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-deploy1_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-deploy1_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-deploy1_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-deploy1_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



aks-deploy1_16.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-deploy1_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aks-deploy1_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aks-deploy1_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-deploy1_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-deploy1_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-deploy1_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-deploy1_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



aks-deploy1_3.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 aks-deploy1_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



aks-deploy1_4.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 aks-deploy1_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



aks-deploy1_5.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 aks-deploy1_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



aks-deploy1_6.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 aks-deploy1_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



aks-deploy_14.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-deploy_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-deploy_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-deploy_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-deploy_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-deploy_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 aks-deploy_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-deploy_14.yaml:33-122
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-deploy_14.yaml:34-113
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



aks-deploy_15.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-deploy_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aks-deploy_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aks-deploy_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-deploy_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-deploy_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-deploy_15.yaml:23-50
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-deploy_15.yaml:24-46
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



aks-deploy_16.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 5, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-deploy_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aks-deploy_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aks-deploy_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-deploy_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-deploy_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-deploy_16.yaml:23-52
────────────────────────────────────────
  23 ┌       containers:
  24 │       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-deploy_16.yaml:24-48
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



aks-deploy_3.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 aks-deploy_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



aks-deploy_4.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 aks-deploy_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



aks-deploy_5.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 aks-deploy_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



aks-deploy_6.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 aks-deploy_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



aks-helloworld-one.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-helloworld-one.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-helloworld-one.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aks-helloworld-one' of 'deployment' 'aks-helloworld-one' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-helloworld-one.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-helloworld-one.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-helloworld-one.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-helloworld-one.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aks-helloworld-one.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aks-helloworld-one.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-helloworld-one.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-helloworld-one.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-helloworld-one.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-helloworld-one.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aks-helloworld-one" of deployment "aks-helloworld-one" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-helloworld-one.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-helloworld-one.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment aks-helloworld-one in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-helloworld-one.yaml:4
────────────────────────────────────────
   4 [   name: aks-helloworld-one
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment aks-helloworld-one in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aks-helloworld-one in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-one.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aks-helloworld-one in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-one.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container aks-helloworld-one in deployment aks-helloworld-one (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-helloworld-one.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────



aks-helloworld-one1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-helloworld-one1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-helloworld-one1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aks-helloworld-one' of 'deployment' 'aks-helloworld-one' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-helloworld-one1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-helloworld-one1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-helloworld-one1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-helloworld-one1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aks-helloworld-one1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aks-helloworld-one1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-helloworld-one1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-helloworld-one1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-helloworld-one1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-helloworld-one1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aks-helloworld-one" of deployment "aks-helloworld-one" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-helloworld-one1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-helloworld-one1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment aks-helloworld-one in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-helloworld-one1.yaml:4
────────────────────────────────────────
   4 [   name: aks-helloworld-one
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment aks-helloworld-one in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aks-helloworld-one in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-one1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aks-helloworld-one in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-one1.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container aks-helloworld-one in deployment aks-helloworld-one (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-helloworld-one1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────



aks-helloworld-one2.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-helloworld-one2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-helloworld-one2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aks-helloworld-one' of 'deployment' 'aks-helloworld-one' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-helloworld-one2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-helloworld-one2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-helloworld-one2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-helloworld-one2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aks-helloworld-one2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aks-helloworld-one2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-helloworld-one2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-helloworld-one2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-helloworld-one2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-helloworld-one2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aks-helloworld-one" of deployment "aks-helloworld-one" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-helloworld-one2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-helloworld-one2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment aks-helloworld-one in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-helloworld-one2.yaml:4
────────────────────────────────────────
   4 [   name: aks-helloworld-one
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment aks-helloworld-one in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aks-helloworld-one in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-one2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aks-helloworld-one in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-one2.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container aks-helloworld-one in deployment aks-helloworld-one (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-helloworld-one2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────



aks-helloworld-one4.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-helloworld-one4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-helloworld-one4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aks-helloworld-one' of 'deployment' 'aks-helloworld-one' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-helloworld-one4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-helloworld-one4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-helloworld-one4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-helloworld-one4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aks-helloworld-one4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aks-helloworld-one4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-helloworld-one4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-helloworld-one4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-helloworld-one4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-helloworld-one4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aks-helloworld-one" of deployment "aks-helloworld-one" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-helloworld-one4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-helloworld-one4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment aks-helloworld-one in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-helloworld-one4.yaml:4
────────────────────────────────────────
   4 [   name: aks-helloworld-one
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment aks-helloworld-one in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aks-helloworld-one in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-one4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aks-helloworld-one in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-one4.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container aks-helloworld-one in deployment aks-helloworld-one (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-helloworld-one4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────



aks-helloworld-one5.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-helloworld-one5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-helloworld-one5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aks-helloworld-one' of 'deployment' 'aks-helloworld-one' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-helloworld-one5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-helloworld-one5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-helloworld-one5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-helloworld-one5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aks-helloworld-one5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aks-helloworld-one5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-helloworld-one5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-helloworld-one5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-helloworld-one5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-helloworld-one5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aks-helloworld-one" of deployment "aks-helloworld-one" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-helloworld-one5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-helloworld-one5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment aks-helloworld-one in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-helloworld-one5.yaml:4
────────────────────────────────────────
   4 [   name: aks-helloworld-one
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment aks-helloworld-one in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aks-helloworld-one in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-one5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aks-helloworld-one in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-one5.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container aks-helloworld-one in deployment aks-helloworld-one (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-helloworld-one5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────



aks-helloworld-one6.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-helloworld-one6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-helloworld-one6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aks-helloworld-one' of 'deployment' 'aks-helloworld-one' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-helloworld-one6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-helloworld-one6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-helloworld-one6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-helloworld-one6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aks-helloworld-one6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aks-helloworld-one6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-helloworld-one6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-helloworld-one6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aks-helloworld-one' of Deployment 'aks-helloworld-one' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-helloworld-one6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-helloworld-one6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aks-helloworld-one" of deployment "aks-helloworld-one" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-helloworld-one6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-helloworld-one6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment aks-helloworld-one in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-helloworld-one6.yaml:4
────────────────────────────────────────
   4 [   name: aks-helloworld-one
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment aks-helloworld-one in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aks-helloworld-one in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-one6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aks-helloworld-one in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-one6.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container aks-helloworld-one in deployment aks-helloworld-one (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-helloworld-one6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-one
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: Welcome to Azure Kubernetes Service (AKS)
────────────────────────────────────────



aks-helloworld-two.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-helloworld-two.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-helloworld-two.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aks-helloworld-two' of 'deployment' 'aks-helloworld-two' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-helloworld-two.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-helloworld-two.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-helloworld-two.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-helloworld-two.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aks-helloworld-two.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aks-helloworld-two.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-helloworld-two.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-helloworld-two.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-helloworld-two.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-helloworld-two.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aks-helloworld-two" of deployment "aks-helloworld-two" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-helloworld-two.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-helloworld-two.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment aks-helloworld-two in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-helloworld-two.yaml:4
────────────────────────────────────────
   4 [   name: aks-helloworld-two
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment aks-helloworld-two in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aks-helloworld-two in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-two.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aks-helloworld-two in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-two.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container aks-helloworld-two in deployment aks-helloworld-two (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-helloworld-two.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────



aks-helloworld-two1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-helloworld-two1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-helloworld-two1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aks-helloworld-two' of 'deployment' 'aks-helloworld-two' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-helloworld-two1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-helloworld-two1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-helloworld-two1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-helloworld-two1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aks-helloworld-two1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aks-helloworld-two1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-helloworld-two1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-helloworld-two1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-helloworld-two1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-helloworld-two1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aks-helloworld-two" of deployment "aks-helloworld-two" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-helloworld-two1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-helloworld-two1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment aks-helloworld-two in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-helloworld-two1.yaml:4
────────────────────────────────────────
   4 [   name: aks-helloworld-two
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment aks-helloworld-two in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aks-helloworld-two in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-two1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aks-helloworld-two in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-two1.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container aks-helloworld-two in deployment aks-helloworld-two (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-helloworld-two1.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────



aks-helloworld-two2.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-helloworld-two2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-helloworld-two2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aks-helloworld-two' of 'deployment' 'aks-helloworld-two' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-helloworld-two2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-helloworld-two2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-helloworld-two2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-helloworld-two2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aks-helloworld-two2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aks-helloworld-two2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-helloworld-two2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-helloworld-two2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-helloworld-two2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-helloworld-two2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aks-helloworld-two" of deployment "aks-helloworld-two" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-helloworld-two2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-helloworld-two2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment aks-helloworld-two in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-helloworld-two2.yaml:4
────────────────────────────────────────
   4 [   name: aks-helloworld-two
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment aks-helloworld-two in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aks-helloworld-two in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-two2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aks-helloworld-two in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-two2.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container aks-helloworld-two in deployment aks-helloworld-two (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-helloworld-two2.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────



aks-helloworld-two4.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-helloworld-two4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-helloworld-two4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aks-helloworld-two' of 'deployment' 'aks-helloworld-two' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-helloworld-two4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-helloworld-two4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-helloworld-two4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-helloworld-two4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aks-helloworld-two4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aks-helloworld-two4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-helloworld-two4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-helloworld-two4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-helloworld-two4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-helloworld-two4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aks-helloworld-two" of deployment "aks-helloworld-two" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-helloworld-two4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-helloworld-two4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment aks-helloworld-two in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-helloworld-two4.yaml:4
────────────────────────────────────────
   4 [   name: aks-helloworld-two
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment aks-helloworld-two in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aks-helloworld-two in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-two4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aks-helloworld-two in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-two4.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container aks-helloworld-two in deployment aks-helloworld-two (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-helloworld-two4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────



aks-helloworld-two5.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-helloworld-two5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-helloworld-two5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aks-helloworld-two' of 'deployment' 'aks-helloworld-two' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-helloworld-two5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-helloworld-two5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-helloworld-two5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-helloworld-two5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aks-helloworld-two5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aks-helloworld-two5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-helloworld-two5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-helloworld-two5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-helloworld-two5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-helloworld-two5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aks-helloworld-two" of deployment "aks-helloworld-two" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-helloworld-two5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-helloworld-two5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment aks-helloworld-two in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-helloworld-two5.yaml:4
────────────────────────────────────────
   4 [   name: aks-helloworld-two
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment aks-helloworld-two in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aks-helloworld-two in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-two5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aks-helloworld-two in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-two5.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container aks-helloworld-two in deployment aks-helloworld-two (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-helloworld-two5.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────



aks-helloworld-two6.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-helloworld-two6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-helloworld-two6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aks-helloworld-two' of 'deployment' 'aks-helloworld-two' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-helloworld-two6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 aks-helloworld-two6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-helloworld-two6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-helloworld-two6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 aks-helloworld-two6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 aks-helloworld-two6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 aks-helloworld-two6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-helloworld-two6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aks-helloworld-two' of Deployment 'aks-helloworld-two' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-helloworld-two6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-helloworld-two6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aks-helloworld-two" of deployment "aks-helloworld-two" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-helloworld-two6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-helloworld-two6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment aks-helloworld-two in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-helloworld-two6.yaml:4
────────────────────────────────────────
   4 [   name: aks-helloworld-two
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment aks-helloworld-two in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aks-helloworld-two in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-two6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aks-helloworld-two in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-helloworld-two6.yaml:15-22
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container aks-helloworld-two in deployment aks-helloworld-two (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-helloworld-two6.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: aks-helloworld-two
  17 │         image: mcr.microsoft.com/azuredocs/aks-helloworld:v1
  18 │         ports:
  19 │         - containerPort: 80
  20 │         env:
  21 │         - name: TITLE
  22 └           value: AKS Ingress Demo
────────────────────────────────────────



aks-store-quickstart.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-store-quickstart.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-store-quickstart.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rabbitmq' of 'deployment' 'rabbitmq' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-store-quickstart.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-store-quickstart.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-store-quickstart.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-store-quickstart.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-store-quickstart.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-store-quickstart.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbitmq" of deployment "rabbitmq" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-store-quickstart.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-store-quickstart.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment rabbitmq in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-store-quickstart.yaml:4
────────────────────────────────────────
   4 [   name: rabbitmq
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rabbitmq in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment rabbitmq in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart.yaml:15-47
────────────────────────────────────────
  15 ┌       nodeSelector:
  16 │         kubernetes.io/os: linux
  17 │       containers:
  18 │       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 └         - containerPort: 15672
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rabbitmq in deployment rabbitmq (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-store-quickstart.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────



aks-store-quickstart1.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-store-quickstart1.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-store-quickstart1.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rabbitmq' of 'deployment' 'rabbitmq' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-store-quickstart1.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-store-quickstart1.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-store-quickstart1.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-store-quickstart1.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-store-quickstart1.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-store-quickstart1.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbitmq" of deployment "rabbitmq" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-store-quickstart1.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-store-quickstart1.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment rabbitmq in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-store-quickstart1.yaml:4
────────────────────────────────────────
   4 [   name: rabbitmq
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rabbitmq in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart1.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment rabbitmq in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart1.yaml:15-47
────────────────────────────────────────
  15 ┌       nodeSelector:
  16 │         kubernetes.io/os: linux
  17 │       containers:
  18 │       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 └         - containerPort: 15672
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rabbitmq in deployment rabbitmq (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-store-quickstart1.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────



aks-store-quickstart1_3.yaml (kubernetes)
=========================================
Tests: 127 (SUCCESSES: 100, FAILURES: 27)
Failures: 27 (UNKNOWN: 0, LOW: 13, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'order-service' of Deployment 'order-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-for-rabbitmq' of Deployment 'order-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'order-service' of Deployment 'order-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-for-rabbitmq' of Deployment 'order-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'order-service' of 'deployment' 'order-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-for-rabbitmq' of 'deployment' 'order-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'order-service' of Deployment 'order-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-for-rabbitmq' of Deployment 'order-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'order-service' of Deployment 'order-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'wait-for-rabbitmq' of Deployment 'order-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'order-service' of Deployment 'order-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-for-rabbitmq' of Deployment 'order-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'order-service' of Deployment 'order-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-for-rabbitmq' of Deployment 'order-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'order-service' of Deployment 'order-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-for-rabbitmq' of Deployment 'order-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "order-service" of deployment "order-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-for-rabbitmq" of deployment "order-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment order-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:4
────────────────────────────────────────
   4 [   name: order-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container order-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container order-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment order-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:15-55
────────────────────────────────────────
  15 ┌       nodeSelector:
  16 │         kubernetes.io/os: linux
  17 │       containers:
  18 │       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 └         - name: ORDER_QUEUE_HOSTNAME
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container order-service in deployment order-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-store-quickstart1_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────



aks-store-quickstart1_5.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'product-service' of Deployment 'product-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-store-quickstart1_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'product-service' of Deployment 'product-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-store-quickstart1_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'product-service' of 'deployment' 'product-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-store-quickstart1_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'product-service' of Deployment 'product-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-store-quickstart1_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'product-service' of Deployment 'product-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 aks-store-quickstart1_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'product-service' of Deployment 'product-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-store-quickstart1_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'product-service' of Deployment 'product-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-store-quickstart1_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'product-service' of Deployment 'product-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-store-quickstart1_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-store-quickstart1_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "product-service" of deployment "product-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-store-quickstart1_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-store-quickstart1_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment product-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-store-quickstart1_5.yaml:4
────────────────────────────────────────
   4 [   name: product-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container product-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart1_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment product-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart1_5.yaml:15-28
────────────────────────────────────────
  15 ┌       nodeSelector:
  16 │         kubernetes.io/os: linux
  17 │       containers:
  18 │       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container product-service in deployment product-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-store-quickstart1_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────



aks-store-quickstart1_7.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'store-front' of Deployment 'store-front' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-store-quickstart1_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'store-front' of Deployment 'store-front' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-store-quickstart1_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'store-front' of 'deployment' 'store-front' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-store-quickstart1_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'store-front' of Deployment 'store-front' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-store-quickstart1_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'store-front' of Deployment 'store-front' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 aks-store-quickstart1_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'store-front' of Deployment 'store-front' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-store-quickstart1_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'store-front' of Deployment 'store-front' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-store-quickstart1_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'store-front' of Deployment 'store-front' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-store-quickstart1_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-store-quickstart1_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "store-front" of deployment "store-front" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-store-quickstart1_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-store-quickstart1_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment store-front in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-store-quickstart1_7.yaml:4
────────────────────────────────────────
   4 [   name: store-front
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container store-front in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart1_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment store-front in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart1_7.yaml:15-34
────────────────────────────────────────
  15 ┌       nodeSelector:
  16 │         kubernetes.io/os: linux
  17 │       containers:
  18 │       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container store-front in deployment store-front (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-store-quickstart1_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────



aks-store-quickstart2.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-store-quickstart2.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-store-quickstart2.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rabbitmq' of 'deployment' 'rabbitmq' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-store-quickstart2.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-store-quickstart2.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-store-quickstart2.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-store-quickstart2.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rabbitmq' of Deployment 'rabbitmq' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-store-quickstart2.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-store-quickstart2.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rabbitmq" of deployment "rabbitmq" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-store-quickstart2.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-store-quickstart2.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment rabbitmq in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-store-quickstart2.yaml:4
────────────────────────────────────────
   4 [   name: rabbitmq
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rabbitmq in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart2.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment rabbitmq in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart2.yaml:15-47
────────────────────────────────────────
  15 ┌       nodeSelector:
  16 │         kubernetes.io/os: linux
  17 │       containers:
  18 │       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 └         - containerPort: 15672
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container rabbitmq in deployment rabbitmq (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-store-quickstart2.yaml:18-40
────────────────────────────────────────
  18 ┌       - name: rabbitmq
  19 │         image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
  20 │         ports:
  21 │         - containerPort: 5672
  22 │           name: rabbitmq-amqp
  23 │         - containerPort: 15672
  24 │           name: rabbitmq-http
  25 │         env:
  26 └         - name: RABBITMQ_DEFAULT_USER
  ..   
────────────────────────────────────────



aks-store-quickstart2_3.yaml (kubernetes)
=========================================
Tests: 127 (SUCCESSES: 100, FAILURES: 27)
Failures: 27 (UNKNOWN: 0, LOW: 13, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'order-service' of Deployment 'order-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-for-rabbitmq' of Deployment 'order-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'order-service' of Deployment 'order-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-for-rabbitmq' of Deployment 'order-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'order-service' of 'deployment' 'order-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-for-rabbitmq' of 'deployment' 'order-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'order-service' of Deployment 'order-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-for-rabbitmq' of Deployment 'order-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'order-service' of Deployment 'order-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'wait-for-rabbitmq' of Deployment 'order-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'order-service' of Deployment 'order-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-for-rabbitmq' of Deployment 'order-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'order-service' of Deployment 'order-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-for-rabbitmq' of Deployment 'order-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'order-service' of Deployment 'order-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-for-rabbitmq' of Deployment 'order-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "order-service" of deployment "order-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-for-rabbitmq" of deployment "order-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment order-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:4
────────────────────────────────────────
   4 [   name: order-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container order-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container order-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment order-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:15-55
────────────────────────────────────────
  15 ┌       nodeSelector:
  16 │         kubernetes.io/os: linux
  17 │       containers:
  18 │       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 └         - name: ORDER_QUEUE_HOSTNAME
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container order-service in deployment order-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-store-quickstart2_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────



aks-store-quickstart2_5.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'product-service' of Deployment 'product-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-store-quickstart2_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'product-service' of Deployment 'product-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-store-quickstart2_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'product-service' of 'deployment' 'product-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-store-quickstart2_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'product-service' of Deployment 'product-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-store-quickstart2_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'product-service' of Deployment 'product-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 aks-store-quickstart2_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'product-service' of Deployment 'product-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-store-quickstart2_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'product-service' of Deployment 'product-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-store-quickstart2_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'product-service' of Deployment 'product-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-store-quickstart2_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-store-quickstart2_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "product-service" of deployment "product-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-store-quickstart2_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-store-quickstart2_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment product-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-store-quickstart2_5.yaml:4
────────────────────────────────────────
   4 [   name: product-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container product-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart2_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment product-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart2_5.yaml:15-28
────────────────────────────────────────
  15 ┌       nodeSelector:
  16 │         kubernetes.io/os: linux
  17 │       containers:
  18 │       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container product-service in deployment product-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-store-quickstart2_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────



aks-store-quickstart2_7.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'store-front' of Deployment 'store-front' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-store-quickstart2_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'store-front' of Deployment 'store-front' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-store-quickstart2_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'store-front' of 'deployment' 'store-front' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-store-quickstart2_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'store-front' of Deployment 'store-front' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-store-quickstart2_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'store-front' of Deployment 'store-front' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 aks-store-quickstart2_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'store-front' of Deployment 'store-front' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-store-quickstart2_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'store-front' of Deployment 'store-front' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-store-quickstart2_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'store-front' of Deployment 'store-front' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-store-quickstart2_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-store-quickstart2_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "store-front" of deployment "store-front" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-store-quickstart2_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-store-quickstart2_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment store-front in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-store-quickstart2_7.yaml:4
────────────────────────────────────────
   4 [   name: store-front
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container store-front in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart2_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment store-front in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart2_7.yaml:15-34
────────────────────────────────────────
  15 ┌       nodeSelector:
  16 │         kubernetes.io/os: linux
  17 │       containers:
  18 │       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container store-front in deployment store-front (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-store-quickstart2_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────



aks-store-quickstart_3.yaml (kubernetes)
========================================
Tests: 127 (SUCCESSES: 100, FAILURES: 27)
Failures: 27 (UNKNOWN: 0, LOW: 13, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'order-service' of Deployment 'order-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-store-quickstart_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-for-rabbitmq' of Deployment 'order-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-store-quickstart_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'order-service' of Deployment 'order-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-store-quickstart_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-for-rabbitmq' of Deployment 'order-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-store-quickstart_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'order-service' of 'deployment' 'order-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-store-quickstart_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-for-rabbitmq' of 'deployment' 'order-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-store-quickstart_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'order-service' of Deployment 'order-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-store-quickstart_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-for-rabbitmq' of Deployment 'order-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-store-quickstart_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'order-service' of Deployment 'order-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 aks-store-quickstart_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'wait-for-rabbitmq' of Deployment 'order-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 aks-store-quickstart_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'order-service' of Deployment 'order-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-store-quickstart_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-for-rabbitmq' of Deployment 'order-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-store-quickstart_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'order-service' of Deployment 'order-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-store-quickstart_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-for-rabbitmq' of Deployment 'order-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-store-quickstart_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'order-service' of Deployment 'order-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-store-quickstart_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-for-rabbitmq' of Deployment 'order-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-store-quickstart_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-store-quickstart_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-store-quickstart_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "order-service" of deployment "order-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-store-quickstart_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-for-rabbitmq" of deployment "order-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-store-quickstart_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-store-quickstart_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-store-quickstart_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment order-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-store-quickstart_3.yaml:4
────────────────────────────────────────
   4 [   name: order-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container order-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart_3.yaml:43-55
────────────────────────────────────────
  43 ┌       - name: wait-for-rabbitmq
  44 │         image: busybox
  45 │         command:
  46 │         - sh
  47 │         - -c
  48 │         - until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;
  49 │         resources:
  50 │           requests:
  51 └             cpu: 1m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container order-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment order-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart_3.yaml:15-55
────────────────────────────────────────
  15 ┌       nodeSelector:
  16 │         kubernetes.io/os: linux
  17 │       containers:
  18 │       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 └         - name: ORDER_QUEUE_HOSTNAME
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container order-service in deployment order-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-store-quickstart_3.yaml:18-41
────────────────────────────────────────
  18 ┌       - name: order-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: ORDER_QUEUE_HOSTNAME
  24 │           value: rabbitmq
  25 │         - name: ORDER_QUEUE_PORT
  26 └           value: '5672'
  ..   
────────────────────────────────────────



aks-store-quickstart_5.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'product-service' of Deployment 'product-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-store-quickstart_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'product-service' of Deployment 'product-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-store-quickstart_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'product-service' of 'deployment' 'product-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-store-quickstart_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'product-service' of Deployment 'product-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-store-quickstart_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'product-service' of Deployment 'product-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 aks-store-quickstart_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'product-service' of Deployment 'product-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-store-quickstart_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'product-service' of Deployment 'product-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-store-quickstart_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'product-service' of Deployment 'product-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-store-quickstart_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-store-quickstart_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "product-service" of deployment "product-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-store-quickstart_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-store-quickstart_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment product-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-store-quickstart_5.yaml:4
────────────────────────────────────────
   4 [   name: product-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container product-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment product-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart_5.yaml:15-28
────────────────────────────────────────
  15 ┌       nodeSelector:
  16 │         kubernetes.io/os: linux
  17 │       containers:
  18 │       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container product-service in deployment product-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-store-quickstart_5.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: product-service
  19 │         image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
  20 │         ports:
  21 │         - containerPort: 3002
  22 │         resources:
  23 │           requests:
  24 │             cpu: 1m
  25 │             memory: 1Mi
  26 └           limits:
  ..   
────────────────────────────────────────



aks-store-quickstart_7.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'store-front' of Deployment 'store-front' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 aks-store-quickstart_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'store-front' of Deployment 'store-front' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 aks-store-quickstart_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'store-front' of 'deployment' 'store-front' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 aks-store-quickstart_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'store-front' of Deployment 'store-front' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 aks-store-quickstart_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'store-front' of Deployment 'store-front' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 aks-store-quickstart_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'store-front' of Deployment 'store-front' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 aks-store-quickstart_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'store-front' of Deployment 'store-front' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 aks-store-quickstart_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'store-front' of Deployment 'store-front' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 aks-store-quickstart_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 aks-store-quickstart_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "store-front" of deployment "store-front" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 aks-store-quickstart_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 aks-store-quickstart_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment store-front in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 aks-store-quickstart_7.yaml:4
────────────────────────────────────────
   4 [   name: store-front
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container store-front in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment store-front in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 aks-store-quickstart_7.yaml:15-34
────────────────────────────────────────
  15 ┌       nodeSelector:
  16 │         kubernetes.io/os: linux
  17 │       containers:
  18 │       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container store-front in deployment store-front (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 aks-store-quickstart_7.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: store-front
  19 │         image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
  20 │         ports:
  21 │         - containerPort: 8080
  22 │           name: store-front
  23 │         env:
  24 │         - name: VUE_APP_ORDER_SERVICE_URL
  25 │           value: http://order-service:3000/
  26 └         - name: VUE_APP_PRODUCT_SERVICE_URL
  ..   
────────────────────────────────────────



aksrbac-clusteradmin.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'aksrbac-cluster-admins' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 aksrbac-clusteradmin.yaml:4
────────────────────────────────────────
   4 [   name: aksrbac-cluster-admins
────────────────────────────────────────



al-nafi-dev.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'development-webapp' of Pod 'al-nafi-development-webapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 al-nafi-dev.yaml:11-20
────────────────────────────────────────
  11 ┌   - name: development-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     livenessProbe:
  17 │       httpGet:
  18 │         path: /live
  19 │         port: 8080   
  20 └       periodSeconds: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'development-webapp' of Pod 'al-nafi-development-webapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 al-nafi-dev.yaml:11-20
────────────────────────────────────────
  11 ┌   - name: development-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     livenessProbe:
  17 │       httpGet:
  18 │         path: /live
  19 │         port: 8080   
  20 └       periodSeconds: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'development-webapp' of 'pod' 'al-nafi-development-webapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 al-nafi-dev.yaml:11-20
────────────────────────────────────────
  11 ┌   - name: development-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     livenessProbe:
  17 │       httpGet:
  18 │         path: /live
  19 │         port: 8080   
  20 └       periodSeconds: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'development-webapp' of Pod 'al-nafi-development-webapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 al-nafi-dev.yaml:11-20
────────────────────────────────────────
  11 ┌   - name: development-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     livenessProbe:
  17 │       httpGet:
  18 │         path: /live
  19 │         port: 8080   
  20 └       periodSeconds: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'development-webapp' of Pod 'al-nafi-development-webapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 al-nafi-dev.yaml:11-20
────────────────────────────────────────
  11 ┌   - name: development-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     livenessProbe:
  17 │       httpGet:
  18 │         path: /live
  19 │         port: 8080   
  20 └       periodSeconds: 1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'development-webapp' of Pod 'al-nafi-development-webapp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 al-nafi-dev.yaml:11-20
────────────────────────────────────────
  11 ┌   - name: development-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     livenessProbe:
  17 │       httpGet:
  18 │         path: /live
  19 │         port: 8080   
  20 └       periodSeconds: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'development-webapp' of Pod 'al-nafi-development-webapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 al-nafi-dev.yaml:11-20
────────────────────────────────────────
  11 ┌   - name: development-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     livenessProbe:
  17 │       httpGet:
  18 │         path: /live
  19 │         port: 8080   
  20 └       periodSeconds: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'development-webapp' of Pod 'al-nafi-development-webapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 al-nafi-dev.yaml:11-20
────────────────────────────────────────
  11 ┌   - name: development-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     livenessProbe:
  17 │       httpGet:
  18 │         path: /live
  19 │         port: 8080   
  20 └       periodSeconds: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'development-webapp' of Pod 'al-nafi-development-webapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 al-nafi-dev.yaml:11-20
────────────────────────────────────────
  11 ┌   - name: development-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     livenessProbe:
  17 │       httpGet:
  18 │         path: /live
  19 │         port: 8080   
  20 └       periodSeconds: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'development-webapp' of Pod 'al-nafi-development-webapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 al-nafi-dev.yaml:11-20
────────────────────────────────────────
  11 ┌   - name: development-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     livenessProbe:
  17 │       httpGet:
  18 │         path: /live
  19 │         port: 8080   
  20 └       periodSeconds: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'development-webapp' of Pod 'al-nafi-development-webapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 al-nafi-dev.yaml:11-20
────────────────────────────────────────
  11 ┌   - name: development-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     livenessProbe:
  17 │       httpGet:
  18 │         path: /live
  19 │         port: 8080   
  20 └       periodSeconds: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'development-webapp' of Pod 'al-nafi-development-webapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 al-nafi-dev.yaml:11-20
────────────────────────────────────────
  11 ┌   - name: development-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     livenessProbe:
  17 │       httpGet:
  18 │         path: /live
  19 │         port: 8080   
  20 └       periodSeconds: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 al-nafi-dev.yaml:11-20
────────────────────────────────────────
  11 ┌   - name: development-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     livenessProbe:
  17 │       httpGet:
  18 │         path: /live
  19 │         port: 8080   
  20 └       periodSeconds: 1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "development-webapp" of pod "al-nafi-development-webapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 al-nafi-dev.yaml:11-20
────────────────────────────────────────
  11 ┌   - name: development-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     livenessProbe:
  17 │       httpGet:
  18 │         path: /live
  19 │         port: 8080   
  20 └       periodSeconds: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 al-nafi-dev.yaml:11-20
────────────────────────────────────────
  11 ┌   - name: development-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     livenessProbe:
  17 │       httpGet:
  18 │         path: /live
  19 │         port: 8080   
  20 └       periodSeconds: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod al-nafi-development-webapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 al-nafi-dev.yaml:4-7
────────────────────────────────────────
   4 ┌   name: al-nafi-development-webapp
   5 │   labels:
   6 │     app: development
   7 └     tier: production
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container al-nafi-development-webapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 al-nafi-dev.yaml:11-20
────────────────────────────────────────
  11 ┌   - name: development-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     livenessProbe:
  17 │       httpGet:
  18 │         path: /live
  19 │         port: 8080   
  20 └       periodSeconds: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod al-nafi-development-webapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 al-nafi-dev.yaml:10-20
────────────────────────────────────────
  10 ┌   containers:
  11 │   - name: development-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     livenessProbe:
  17 │       httpGet:
  18 └         path: /live
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container development-webapp in pod al-nafi-development-webapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 al-nafi-dev.yaml:11-20
────────────────────────────────────────
  11 ┌   - name: development-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     livenessProbe:
  17 │       httpGet:
  18 │         path: /live
  19 │         port: 8080   
  20 └       periodSeconds: 1
────────────────────────────────────────



al-nafi-prod.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'production-webapp' of Pod 'al-nafi-production-webapp' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 al-nafi-prod.yaml:11-30
────────────────────────────────────────
  11 ┌   - name: production-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     
  17 │     env:
  18 │     - name: APP_START_DELAY
  19 └       value: "120"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'production-webapp' of Pod 'al-nafi-production-webapp' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 al-nafi-prod.yaml:11-30
────────────────────────────────────────
  11 ┌   - name: production-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     
  17 │     env:
  18 │     - name: APP_START_DELAY
  19 └       value: "120"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'production-webapp' of 'pod' 'al-nafi-production-webapp' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 al-nafi-prod.yaml:11-30
────────────────────────────────────────
  11 ┌   - name: production-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     
  17 │     env:
  18 │     - name: APP_START_DELAY
  19 └       value: "120"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'production-webapp' of Pod 'al-nafi-production-webapp' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 al-nafi-prod.yaml:11-30
────────────────────────────────────────
  11 ┌   - name: production-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     
  17 │     env:
  18 │     - name: APP_START_DELAY
  19 └       value: "120"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'production-webapp' of Pod 'al-nafi-production-webapp' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 al-nafi-prod.yaml:11-30
────────────────────────────────────────
  11 ┌   - name: production-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     
  17 │     env:
  18 │     - name: APP_START_DELAY
  19 └       value: "120"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'production-webapp' of Pod 'al-nafi-production-webapp' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 al-nafi-prod.yaml:11-30
────────────────────────────────────────
  11 ┌   - name: production-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     
  17 │     env:
  18 │     - name: APP_START_DELAY
  19 └       value: "120"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'production-webapp' of Pod 'al-nafi-production-webapp' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 al-nafi-prod.yaml:11-30
────────────────────────────────────────
  11 ┌   - name: production-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     
  17 │     env:
  18 │     - name: APP_START_DELAY
  19 └       value: "120"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'production-webapp' of Pod 'al-nafi-production-webapp' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 al-nafi-prod.yaml:11-30
────────────────────────────────────────
  11 ┌   - name: production-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     
  17 │     env:
  18 │     - name: APP_START_DELAY
  19 └       value: "120"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'production-webapp' of Pod 'al-nafi-production-webapp' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 al-nafi-prod.yaml:11-30
────────────────────────────────────────
  11 ┌   - name: production-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     
  17 │     env:
  18 │     - name: APP_START_DELAY
  19 └       value: "120"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'production-webapp' of Pod 'al-nafi-production-webapp' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 al-nafi-prod.yaml:11-30
────────────────────────────────────────
  11 ┌   - name: production-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     
  17 │     env:
  18 │     - name: APP_START_DELAY
  19 └       value: "120"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'production-webapp' of Pod 'al-nafi-production-webapp' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 al-nafi-prod.yaml:11-30
────────────────────────────────────────
  11 ┌   - name: production-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     
  17 │     env:
  18 │     - name: APP_START_DELAY
  19 └       value: "120"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'production-webapp' of Pod 'al-nafi-production-webapp' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 al-nafi-prod.yaml:11-30
────────────────────────────────────────
  11 ┌   - name: production-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     
  17 │     env:
  18 │     - name: APP_START_DELAY
  19 └       value: "120"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 al-nafi-prod.yaml:11-30
────────────────────────────────────────
  11 ┌   - name: production-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     
  17 │     env:
  18 │     - name: APP_START_DELAY
  19 └       value: "120"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "production-webapp" of pod "al-nafi-production-webapp" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 al-nafi-prod.yaml:11-30
────────────────────────────────────────
  11 ┌   - name: production-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     
  17 │     env:
  18 │     - name: APP_START_DELAY
  19 └       value: "120"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 al-nafi-prod.yaml:11-30
────────────────────────────────────────
  11 ┌   - name: production-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     
  17 │     env:
  18 │     - name: APP_START_DELAY
  19 └       value: "120"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod al-nafi-production-webapp in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 al-nafi-prod.yaml:4-7
────────────────────────────────────────
   4 ┌   name: al-nafi-production-webapp
   5 │   labels:
   6 │     app: development
   7 └     tier: production
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container al-nafi-production-webapp in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 al-nafi-prod.yaml:11-30
────────────────────────────────────────
  11 ┌   - name: production-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     
  17 │     env:
  18 │     - name: APP_START_DELAY
  19 └       value: "120"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod al-nafi-production-webapp in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 al-nafi-prod.yaml:10-30
────────────────────────────────────────
  10 ┌   containers:
  11 │   - name: production-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     
  17 │     env:
  18 └     - name: APP_START_DELAY
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container production-webapp in pod al-nafi-production-webapp (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 al-nafi-prod.yaml:11-30
────────────────────────────────────────
  11 ┌   - name: production-webapp
  12 │     image: kodekloud/webapp-delayed-start
  13 │     ports:
  14 │     - containerPort: 8080
  15 │       protocol: TCP
  16 │     
  17 │     env:
  18 │     - name: APP_START_DELAY
  19 └       value: "120"
  ..   
────────────────────────────────────────



al2023.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'al2023-test' of Pod 'al2023-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 al2023.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: al2023-test
  12 │     image: public.ecr.aws/amazonlinux/amazonlinux:2023-minimal
  13 └     command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'al2023-test' of Pod 'al2023-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 al2023.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: al2023-test
  12 │     image: public.ecr.aws/amazonlinux/amazonlinux:2023-minimal
  13 └     command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'al2023-test' of 'pod' 'al2023-test' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 al2023.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: al2023-test
  12 │     image: public.ecr.aws/amazonlinux/amazonlinux:2023-minimal
  13 └     command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'al2023-test' of Pod 'al2023-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 al2023.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: al2023-test
  12 │     image: public.ecr.aws/amazonlinux/amazonlinux:2023-minimal
  13 └     command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'al2023-test' of Pod 'al2023-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 al2023.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: al2023-test
  12 │     image: public.ecr.aws/amazonlinux/amazonlinux:2023-minimal
  13 └     command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'al2023-test' of Pod 'al2023-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 al2023.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: al2023-test
  12 │     image: public.ecr.aws/amazonlinux/amazonlinux:2023-minimal
  13 └     command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'al2023-test' of Pod 'al2023-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 al2023.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: al2023-test
  12 │     image: public.ecr.aws/amazonlinux/amazonlinux:2023-minimal
  13 └     command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'al2023-test' of Pod 'al2023-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 al2023.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: al2023-test
  12 │     image: public.ecr.aws/amazonlinux/amazonlinux:2023-minimal
  13 └     command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'al2023-test' of Pod 'al2023-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 al2023.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: al2023-test
  12 │     image: public.ecr.aws/amazonlinux/amazonlinux:2023-minimal
  13 └     command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'al2023-test' of Pod 'al2023-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 al2023.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: al2023-test
  12 │     image: public.ecr.aws/amazonlinux/amazonlinux:2023-minimal
  13 └     command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'al2023-test' of Pod 'al2023-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 al2023.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: al2023-test
  12 │     image: public.ecr.aws/amazonlinux/amazonlinux:2023-minimal
  13 └     command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 al2023.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: al2023-test
  12 │     image: public.ecr.aws/amazonlinux/amazonlinux:2023-minimal
  13 └     command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "al2023-test" of pod "al2023-test" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 al2023.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: al2023-test
  12 │     image: public.ecr.aws/amazonlinux/amazonlinux:2023-minimal
  13 └     command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 al2023.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: al2023-test
  12 │     image: public.ecr.aws/amazonlinux/amazonlinux:2023-minimal
  13 └     command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod al2023-test in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 al2023.yaml:4-8
────────────────────────────────────────
   4 ┌   name: al2023-test
   5 │   namespace: default
   6 │   labels:
   7 │     app: al2023-test
   8 └     manage: server-side
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container al2023-test in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 al2023.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: al2023-test
  12 │     image: public.ecr.aws/amazonlinux/amazonlinux:2023-minimal
  13 └     command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod al2023-test in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 al2023.yaml:10-13
────────────────────────────────────────
  10 ┌   containers:
  11 │   - name: al2023-test
  12 │     image: public.ecr.aws/amazonlinux/amazonlinux:2023-minimal
  13 └     command: ["sleep", "infinity"]
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container al2023-test in pod al2023-test (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 al2023.yaml:11-13
────────────────────────────────────────
  11 ┌   - name: al2023-test
  12 │     image: public.ecr.aws/amazonlinux/amazonlinux:2023-minimal
  13 └     command: ["sleep", "infinity"]
────────────────────────────────────────



alb_ingress_controller.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'alb-ingress-controller' of Deployment 'alb-ingress-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 alb_ingress_controller.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alb-ingress-controller' of Deployment 'alb-ingress-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 alb_ingress_controller.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alb-ingress-controller' of 'deployment' 'alb-ingress-controller' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 alb_ingress_controller.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'alb-ingress-controller' of Deployment 'alb-ingress-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 alb_ingress_controller.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alb-ingress-controller' of Deployment 'alb-ingress-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 alb_ingress_controller.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'alb-ingress-controller' of Deployment 'alb-ingress-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 alb_ingress_controller.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'alb-ingress-controller' of Deployment 'alb-ingress-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 alb_ingress_controller.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'alb-ingress-controller' of Deployment 'alb-ingress-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 alb_ingress_controller.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'alb-ingress-controller' of Deployment 'alb-ingress-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 alb_ingress_controller.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'alb-ingress-controller' of Deployment 'alb-ingress-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 alb_ingress_controller.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'alb-ingress-controller' of Deployment 'alb-ingress-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 alb_ingress_controller.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 alb_ingress_controller.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'alb-ingress-controller' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 alb_ingress_controller.yaml:15-70
────────────────────────────────────────
  15 ┌   selector:
  16 │     matchLabels:
  17 │       app.kubernetes.io/name: alb-ingress-controller
  18 │   template:
  19 │     metadata:
  20 │       labels:
  21 │         app.kubernetes.io/name: alb-ingress-controller
  22 │     spec:
  23 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alb-ingress-controller" of deployment "alb-ingress-controller" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 alb_ingress_controller.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 alb_ingress_controller.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container alb-ingress-controller in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alb_ingress_controller.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment alb-ingress-controller in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alb_ingress_controller.yaml:23-70
────────────────────────────────────────
  23 ┌       containers:
  24 │         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 └             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container alb-ingress-controller in deployment alb-ingress-controller (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 alb_ingress_controller.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────



alb_ingress_controller1.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'alb-ingress-controller' of Deployment 'alb-ingress-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 alb_ingress_controller1.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alb-ingress-controller' of Deployment 'alb-ingress-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 alb_ingress_controller1.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alb-ingress-controller' of 'deployment' 'alb-ingress-controller' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 alb_ingress_controller1.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'alb-ingress-controller' of Deployment 'alb-ingress-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 alb_ingress_controller1.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alb-ingress-controller' of Deployment 'alb-ingress-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 alb_ingress_controller1.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'alb-ingress-controller' of Deployment 'alb-ingress-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 alb_ingress_controller1.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'alb-ingress-controller' of Deployment 'alb-ingress-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 alb_ingress_controller1.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'alb-ingress-controller' of Deployment 'alb-ingress-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 alb_ingress_controller1.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'alb-ingress-controller' of Deployment 'alb-ingress-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 alb_ingress_controller1.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'alb-ingress-controller' of Deployment 'alb-ingress-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 alb_ingress_controller1.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'alb-ingress-controller' of Deployment 'alb-ingress-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 alb_ingress_controller1.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 alb_ingress_controller1.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'alb-ingress-controller' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 alb_ingress_controller1.yaml:15-70
────────────────────────────────────────
  15 ┌   selector:
  16 │     matchLabels:
  17 │       app.kubernetes.io/name: alb-ingress-controller
  18 │   template:
  19 │     metadata:
  20 │       labels:
  21 │         app.kubernetes.io/name: alb-ingress-controller
  22 │     spec:
  23 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alb-ingress-controller" of deployment "alb-ingress-controller" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 alb_ingress_controller1.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 alb_ingress_controller1.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container alb-ingress-controller in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alb_ingress_controller1.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment alb-ingress-controller in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alb_ingress_controller1.yaml:23-70
────────────────────────────────────────
  23 ┌       containers:
  24 │         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 └             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container alb-ingress-controller in deployment alb-ingress-controller (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 alb_ingress_controller1.yaml:24-69
────────────────────────────────────────
  24 ┌         - name: alb-ingress-controller
  25 │           args:
  26 │             # Limit the namespace where this ALB Ingress Controller deployment will
  27 │             # resolve ingress resources. If left commented, all namespaces are used.
  28 │             #- --watch-namespace=dev
  29 │ 
  30 │             # Setting the ingress-class flag below ensures that only ingress resources with the
  31 │             # annotation kubernetes.io/ingress.class: "alb" are respected by the controller. You may
  32 └             # choose any class you'd like for this controller to respect.
  ..   
────────────────────────────────────────



alert-deployment.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 alert-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config-volume
  22 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alertmanager' of Deployment 'alertmanager-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 alert-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config-volume
  22 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alertmanager' of 'deployment' 'alertmanager-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 alert-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config-volume
  22 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'alertmanager' of Deployment 'alertmanager-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 alert-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config-volume
  22 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 alert-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config-volume
  22 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 alert-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config-volume
  22 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'alertmanager' of Deployment 'alertmanager-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 alert-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config-volume
  22 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'alertmanager' of Deployment 'alertmanager-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 alert-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config-volume
  22 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'alertmanager' of Deployment 'alertmanager-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 alert-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config-volume
  22 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'alertmanager' of Deployment 'alertmanager-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 alert-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config-volume
  22 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'alertmanager' of Deployment 'alertmanager-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 alert-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config-volume
  22 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'alertmanager' of Deployment 'alertmanager-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 alert-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config-volume
  22 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 alert-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config-volume
  22 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alertmanager" of deployment "alertmanager-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 alert-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config-volume
  22 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 alert-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config-volume
  22 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment alertmanager-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 alert-deployment.yaml:4
────────────────────────────────────────
   4 [   name: alertmanager-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container alertmanager-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alert-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config-volume
  22 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment alertmanager-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alert-deployment.yaml:15-29
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config-volume
  22 │           mountPath: /etc/alertmanager
  23 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container alertmanager in deployment alertmanager-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 alert-deployment.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config-volume
  22 └           mountPath: /etc/alertmanager
────────────────────────────────────────



alert-deployment1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 alert-deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: alertmanager
  19 │         image: prom/alertmanager:latest
  20 │         args:
  21 │           - "--config.file=/etc/alertmanager/config.yml"
  22 │           - "--storage.path=/alertmanager"
  23 │         ports:
  24 │         - name: alertmanager
  25 │           containerPort: 9093
  26 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 alert-deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: alertmanager
  19 │         image: prom/alertmanager:latest
  20 │         args:
  21 │           - "--config.file=/etc/alertmanager/config.yml"
  22 │           - "--storage.path=/alertmanager"
  23 │         ports:
  24 │         - name: alertmanager
  25 │           containerPort: 9093
  26 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alertmanager' of 'deployment' 'alertmanager' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 alert-deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: alertmanager
  19 │         image: prom/alertmanager:latest
  20 │         args:
  21 │           - "--config.file=/etc/alertmanager/config.yml"
  22 │           - "--storage.path=/alertmanager"
  23 │         ports:
  24 │         - name: alertmanager
  25 │           containerPort: 9093
  26 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 alert-deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: alertmanager
  19 │         image: prom/alertmanager:latest
  20 │         args:
  21 │           - "--config.file=/etc/alertmanager/config.yml"
  22 │           - "--storage.path=/alertmanager"
  23 │         ports:
  24 │         - name: alertmanager
  25 │           containerPort: 9093
  26 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 alert-deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: alertmanager
  19 │         image: prom/alertmanager:latest
  20 │         args:
  21 │           - "--config.file=/etc/alertmanager/config.yml"
  22 │           - "--storage.path=/alertmanager"
  23 │         ports:
  24 │         - name: alertmanager
  25 │           containerPort: 9093
  26 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 alert-deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: alertmanager
  19 │         image: prom/alertmanager:latest
  20 │         args:
  21 │           - "--config.file=/etc/alertmanager/config.yml"
  22 │           - "--storage.path=/alertmanager"
  23 │         ports:
  24 │         - name: alertmanager
  25 │           containerPort: 9093
  26 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 alert-deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: alertmanager
  19 │         image: prom/alertmanager:latest
  20 │         args:
  21 │           - "--config.file=/etc/alertmanager/config.yml"
  22 │           - "--storage.path=/alertmanager"
  23 │         ports:
  24 │         - name: alertmanager
  25 │           containerPort: 9093
  26 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 alert-deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: alertmanager
  19 │         image: prom/alertmanager:latest
  20 │         args:
  21 │           - "--config.file=/etc/alertmanager/config.yml"
  22 │           - "--storage.path=/alertmanager"
  23 │         ports:
  24 │         - name: alertmanager
  25 │           containerPort: 9093
  26 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 alert-deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: alertmanager
  19 │         image: prom/alertmanager:latest
  20 │         args:
  21 │           - "--config.file=/etc/alertmanager/config.yml"
  22 │           - "--storage.path=/alertmanager"
  23 │         ports:
  24 │         - name: alertmanager
  25 │           containerPort: 9093
  26 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alertmanager" of deployment "alertmanager" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 alert-deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: alertmanager
  19 │         image: prom/alertmanager:latest
  20 │         args:
  21 │           - "--config.file=/etc/alertmanager/config.yml"
  22 │           - "--storage.path=/alertmanager"
  23 │         ports:
  24 │         - name: alertmanager
  25 │           containerPort: 9093
  26 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 alert-deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: alertmanager
  19 │         image: prom/alertmanager:latest
  20 │         args:
  21 │           - "--config.file=/etc/alertmanager/config.yml"
  22 │           - "--storage.path=/alertmanager"
  23 │         ports:
  24 │         - name: alertmanager
  25 │           containerPort: 9093
  26 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container alertmanager in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alert-deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: alertmanager
  19 │         image: prom/alertmanager:latest
  20 │         args:
  21 │           - "--config.file=/etc/alertmanager/config.yml"
  22 │           - "--storage.path=/alertmanager"
  23 │         ports:
  24 │         - name: alertmanager
  25 │           containerPort: 9093
  26 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment alertmanager in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alert-deployment1.yaml:17-43
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: alertmanager
  19 │         image: prom/alertmanager:latest
  20 │         args:
  21 │           - "--config.file=/etc/alertmanager/config.yml"
  22 │           - "--storage.path=/alertmanager"
  23 │         ports:
  24 │         - name: alertmanager
  25 └           containerPort: 9093
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container alertmanager in deployment alertmanager (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 alert-deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: alertmanager
  19 │         image: prom/alertmanager:latest
  20 │         args:
  21 │           - "--config.file=/etc/alertmanager/config.yml"
  22 │           - "--storage.path=/alertmanager"
  23 │         ports:
  24 │         - name: alertmanager
  25 │           containerPort: 9093
  26 └         resources:
  ..   
────────────────────────────────────────



alertM-config.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'alertmanager-config' in 'monitoring' namespace stores sensitive contents in key(s) or value(s) '{"        auth_username", "        from", "        to"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'alertmanager-config' in 'monitoring' namespace stores secrets in key(s) or value(s) '{"        auth_password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



alertM-deployment.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 alertM-deployment.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: alertmanager
  23 │         image: prom/alertmanager:v0.25.0
  24 │         args:
  25 │         - --config.file=/etc/alertmanager/alertmanager.yml
  26 │         ports:
  27 │         - containerPort: 9093
  28 │         volumeMounts:
  29 │         - name: config-volume
  30 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 alertM-deployment.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: alertmanager
  23 │         image: prom/alertmanager:v0.25.0
  24 │         args:
  25 │         - --config.file=/etc/alertmanager/alertmanager.yml
  26 │         ports:
  27 │         - containerPort: 9093
  28 │         volumeMounts:
  29 │         - name: config-volume
  30 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alertmanager' of 'deployment' 'alertmanager' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 alertM-deployment.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: alertmanager
  23 │         image: prom/alertmanager:v0.25.0
  24 │         args:
  25 │         - --config.file=/etc/alertmanager/alertmanager.yml
  26 │         ports:
  27 │         - containerPort: 9093
  28 │         volumeMounts:
  29 │         - name: config-volume
  30 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 alertM-deployment.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: alertmanager
  23 │         image: prom/alertmanager:v0.25.0
  24 │         args:
  25 │         - --config.file=/etc/alertmanager/alertmanager.yml
  26 │         ports:
  27 │         - containerPort: 9093
  28 │         volumeMounts:
  29 │         - name: config-volume
  30 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 alertM-deployment.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: alertmanager
  23 │         image: prom/alertmanager:v0.25.0
  24 │         args:
  25 │         - --config.file=/etc/alertmanager/alertmanager.yml
  26 │         ports:
  27 │         - containerPort: 9093
  28 │         volumeMounts:
  29 │         - name: config-volume
  30 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 alertM-deployment.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: alertmanager
  23 │         image: prom/alertmanager:v0.25.0
  24 │         args:
  25 │         - --config.file=/etc/alertmanager/alertmanager.yml
  26 │         ports:
  27 │         - containerPort: 9093
  28 │         volumeMounts:
  29 │         - name: config-volume
  30 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 alertM-deployment.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: alertmanager
  23 │         image: prom/alertmanager:v0.25.0
  24 │         args:
  25 │         - --config.file=/etc/alertmanager/alertmanager.yml
  26 │         ports:
  27 │         - containerPort: 9093
  28 │         volumeMounts:
  29 │         - name: config-volume
  30 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 alertM-deployment.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: alertmanager
  23 │         image: prom/alertmanager:v0.25.0
  24 │         args:
  25 │         - --config.file=/etc/alertmanager/alertmanager.yml
  26 │         ports:
  27 │         - containerPort: 9093
  28 │         volumeMounts:
  29 │         - name: config-volume
  30 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 alertM-deployment.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: alertmanager
  23 │         image: prom/alertmanager:v0.25.0
  24 │         args:
  25 │         - --config.file=/etc/alertmanager/alertmanager.yml
  26 │         ports:
  27 │         - containerPort: 9093
  28 │         volumeMounts:
  29 │         - name: config-volume
  30 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 alertM-deployment.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: alertmanager
  23 │         image: prom/alertmanager:v0.25.0
  24 │         args:
  25 │         - --config.file=/etc/alertmanager/alertmanager.yml
  26 │         ports:
  27 │         - containerPort: 9093
  28 │         volumeMounts:
  29 │         - name: config-volume
  30 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 alertM-deployment.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: alertmanager
  23 │         image: prom/alertmanager:v0.25.0
  24 │         args:
  25 │         - --config.file=/etc/alertmanager/alertmanager.yml
  26 │         ports:
  27 │         - containerPort: 9093
  28 │         volumeMounts:
  29 │         - name: config-volume
  30 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 alertM-deployment.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: alertmanager
  23 │         image: prom/alertmanager:v0.25.0
  24 │         args:
  25 │         - --config.file=/etc/alertmanager/alertmanager.yml
  26 │         ports:
  27 │         - containerPort: 9093
  28 │         volumeMounts:
  29 │         - name: config-volume
  30 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alertmanager" of deployment "alertmanager" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 alertM-deployment.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: alertmanager
  23 │         image: prom/alertmanager:v0.25.0
  24 │         args:
  25 │         - --config.file=/etc/alertmanager/alertmanager.yml
  26 │         ports:
  27 │         - containerPort: 9093
  28 │         volumeMounts:
  29 │         - name: config-volume
  30 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 alertM-deployment.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: alertmanager
  23 │         image: prom/alertmanager:v0.25.0
  24 │         args:
  25 │         - --config.file=/etc/alertmanager/alertmanager.yml
  26 │         ports:
  27 │         - containerPort: 9093
  28 │         volumeMounts:
  29 │         - name: config-volume
  30 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container alertmanager in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alertM-deployment.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: alertmanager
  23 │         image: prom/alertmanager:v0.25.0
  24 │         args:
  25 │         - --config.file=/etc/alertmanager/alertmanager.yml
  26 │         ports:
  27 │         - containerPort: 9093
  28 │         volumeMounts:
  29 │         - name: config-volume
  30 └           mountPath: /etc/alertmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment alertmanager in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alertM-deployment.yaml:21-34
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: alertmanager
  23 │         image: prom/alertmanager:v0.25.0
  24 │         args:
  25 │         - --config.file=/etc/alertmanager/alertmanager.yml
  26 │         ports:
  27 │         - containerPort: 9093
  28 │         volumeMounts:
  29 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container alertmanager in deployment alertmanager (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 alertM-deployment.yaml:22-30
────────────────────────────────────────
  22 ┌       - name: alertmanager
  23 │         image: prom/alertmanager:v0.25.0
  24 │         args:
  25 │         - --config.file=/etc/alertmanager/alertmanager.yml
  26 │         ports:
  27 │         - containerPort: 9093
  28 │         volumeMounts:
  29 │         - name: config-volume
  30 └           mountPath: /etc/alertmanager
────────────────────────────────────────



alertmanager-configmap4.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'alertmanager-configmap' in 'monitoring' namespace stores sensitive contents in key(s) or value(s) '{"        from", "      - to"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



alertmanager-dep.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 alertmanager-dep.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 alertmanager-dep.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alertmanager' of 'deployment' 'alertmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 alertmanager-dep.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 alertmanager-dep.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 alertmanager-dep.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 alertmanager-dep.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 alertmanager-dep.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 alertmanager-dep.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 alertmanager-dep.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 alertmanager-dep.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 alertmanager-dep.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 alertmanager-dep.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 alertmanager-dep.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alertmanager" of deployment "alertmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 alertmanager-dep.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 alertmanager-dep.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment alertmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 alertmanager-dep.yaml:4
────────────────────────────────────────
   4 [   name: alertmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container alertmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alertmanager-dep.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment alertmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alertmanager-dep.yaml:16-40
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 └                 key: slack-hook-url
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container alertmanager in deployment alertmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 alertmanager-dep.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────



alertmanager-dep1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 alertmanager-dep1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 alertmanager-dep1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alertmanager' of 'deployment' 'alertmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 alertmanager-dep1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 alertmanager-dep1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 alertmanager-dep1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 alertmanager-dep1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 alertmanager-dep1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 alertmanager-dep1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 alertmanager-dep1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 alertmanager-dep1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 alertmanager-dep1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 alertmanager-dep1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 alertmanager-dep1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alertmanager" of deployment "alertmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 alertmanager-dep1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 alertmanager-dep1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment alertmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 alertmanager-dep1.yaml:4
────────────────────────────────────────
   4 [   name: alertmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container alertmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alertmanager-dep1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment alertmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alertmanager-dep1.yaml:16-40
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 └                 key: slack-hook-url
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container alertmanager in deployment alertmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 alertmanager-dep1.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────



alertmanager-dep2.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 alertmanager-dep2.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 alertmanager-dep2.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alertmanager' of 'deployment' 'alertmanager' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 alertmanager-dep2.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 alertmanager-dep2.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 alertmanager-dep2.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 alertmanager-dep2.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 alertmanager-dep2.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 alertmanager-dep2.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 alertmanager-dep2.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 alertmanager-dep2.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 alertmanager-dep2.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 alertmanager-dep2.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 alertmanager-dep2.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alertmanager" of deployment "alertmanager" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 alertmanager-dep2.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 alertmanager-dep2.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment alertmanager in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 alertmanager-dep2.yaml:4
────────────────────────────────────────
   4 [   name: alertmanager
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container alertmanager in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alertmanager-dep2.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment alertmanager in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alertmanager-dep2.yaml:16-40
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 └                 key: slack-hook-url
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container alertmanager in deployment alertmanager (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 alertmanager-dep2.yaml:17-34
────────────────────────────────────────
  17 ┌       - name: alertmanager
  18 │         image: prom/alertmanager:latest
  19 │         env:
  20 │           - name: SLACK_HOOK_URL
  21 │             valueFrom:
  22 │               secretKeyRef:
  23 │                 name: slack-hook-url
  24 │                 key: slack-hook-url
  25 └         command: ['/bin/sh', '/etc/alertmanager/configure_secret.sh']
  ..   
────────────────────────────────────────



alertmanager-deployment.yaml (kubernetes)
=========================================
Tests: 121 (SUCCESSES: 98, FAILURES: 23)
Failures: 23 (UNKNOWN: 0, LOW: 14, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'volume-permissions' of Deployment 'alertmanager-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 alertmanager-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alertmanager' of Deployment 'alertmanager-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 alertmanager-deployment.yaml:31-62
────────────────────────────────────────
  31 ┌       - name: alertmanager
  32 │         image: prom/alertmanager:v0.28.1
  33 │         args:
  34 │         - --config.file=/etc/alertmanager/alertmanager.yml
  35 │         - --web.external-url=https://alertmanager.ing.k3s.brickyard.whitestar.systems
  36 │         ports:
  37 │         - containerPort: 9093
  38 │         volumeMounts:
  39 └         - name: alertmanager-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volume-permissions' of Deployment 'alertmanager-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 alertmanager-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alertmanager' of 'deployment' 'alertmanager-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 alertmanager-deployment.yaml:31-62
────────────────────────────────────────
  31 ┌       - name: alertmanager
  32 │         image: prom/alertmanager:v0.28.1
  33 │         args:
  34 │         - --config.file=/etc/alertmanager/alertmanager.yml
  35 │         - --web.external-url=https://alertmanager.ing.k3s.brickyard.whitestar.systems
  36 │         ports:
  37 │         - containerPort: 9093
  38 │         volumeMounts:
  39 └         - name: alertmanager-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volume-permissions' of 'deployment' 'alertmanager-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 alertmanager-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'volume-permissions' of Deployment 'alertmanager-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 alertmanager-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 alertmanager-deployment.yaml:31-62
────────────────────────────────────────
  31 ┌       - name: alertmanager
  32 │         image: prom/alertmanager:v0.28.1
  33 │         args:
  34 │         - --config.file=/etc/alertmanager/alertmanager.yml
  35 │         - --web.external-url=https://alertmanager.ing.k3s.brickyard.whitestar.systems
  36 │         ports:
  37 │         - containerPort: 9093
  38 │         volumeMounts:
  39 └         - name: alertmanager-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volume-permissions' of Deployment 'alertmanager-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 alertmanager-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volume-permissions' of Deployment 'alertmanager-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 alertmanager-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'volume-permissions' of Deployment 'alertmanager-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 alertmanager-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'volume-permissions' of Deployment 'alertmanager-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 alertmanager-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'volume-permissions' of Deployment 'alertmanager-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 alertmanager-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volume-permissions' of Deployment 'alertmanager-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 alertmanager-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volume-permissions' of Deployment 'alertmanager-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 alertmanager-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 alertmanager-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 alertmanager-deployment.yaml:31-62
────────────────────────────────────────
  31 ┌       - name: alertmanager
  32 │         image: prom/alertmanager:v0.28.1
  33 │         args:
  34 │         - --config.file=/etc/alertmanager/alertmanager.yml
  35 │         - --web.external-url=https://alertmanager.ing.k3s.brickyard.whitestar.systems
  36 │         ports:
  37 │         - containerPort: 9093
  38 │         volumeMounts:
  39 └         - name: alertmanager-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alertmanager" of deployment "alertmanager-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 alertmanager-deployment.yaml:31-62
────────────────────────────────────────
  31 ┌       - name: alertmanager
  32 │         image: prom/alertmanager:v0.28.1
  33 │         args:
  34 │         - --config.file=/etc/alertmanager/alertmanager.yml
  35 │         - --web.external-url=https://alertmanager.ing.k3s.brickyard.whitestar.systems
  36 │         ports:
  37 │         - containerPort: 9093
  38 │         volumeMounts:
  39 └         - name: alertmanager-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volume-permissions" of deployment "alertmanager-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 alertmanager-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 alertmanager-deployment.yaml:31-62
────────────────────────────────────────
  31 ┌       - name: alertmanager
  32 │         image: prom/alertmanager:v0.28.1
  33 │         args:
  34 │         - --config.file=/etc/alertmanager/alertmanager.yml
  35 │         - --web.external-url=https://alertmanager.ing.k3s.brickyard.whitestar.systems
  36 │         ports:
  37 │         - containerPort: 9093
  38 │         volumeMounts:
  39 └         - name: alertmanager-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 alertmanager-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container alertmanager-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alertmanager-deployment.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment alertmanager-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alertmanager-deployment.yaml:20-70
────────────────────────────────────────
  20 ┌       initContainers:
  21 │       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 └         - name: alertmanager-storage-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container alertmanager in deployment alertmanager-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 alertmanager-deployment.yaml:31-62
────────────────────────────────────────
  31 ┌       - name: alertmanager
  32 │         image: prom/alertmanager:v0.28.1
  33 │         args:
  34 │         - --config.file=/etc/alertmanager/alertmanager.yml
  35 │         - --web.external-url=https://alertmanager.ing.k3s.brickyard.whitestar.systems
  36 │         ports:
  37 │         - containerPort: 9093
  38 │         volumeMounts:
  39 └         - name: alertmanager-config-volume
  ..   
────────────────────────────────────────



alertmanager-deployment1.yaml (kubernetes)
==========================================
Tests: 121 (SUCCESSES: 98, FAILURES: 23)
Failures: 23 (UNKNOWN: 0, LOW: 14, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'volume-permissions' of Deployment 'alertmanager-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 alertmanager-deployment1.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alertmanager' of Deployment 'alertmanager-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 alertmanager-deployment1.yaml:31-62
────────────────────────────────────────
  31 ┌       - name: alertmanager
  32 │         image: prom/alertmanager:v0.28.1
  33 │         args:
  34 │         - --config.file=/etc/alertmanager/alertmanager.yml
  35 │         - --web.external-url=https://alertmanager.ing.k3s.brickyard.whitestar.systems
  36 │         ports:
  37 │         - containerPort: 9093
  38 │         volumeMounts:
  39 └         - name: alertmanager-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volume-permissions' of Deployment 'alertmanager-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 alertmanager-deployment1.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alertmanager' of 'deployment' 'alertmanager-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 alertmanager-deployment1.yaml:31-62
────────────────────────────────────────
  31 ┌       - name: alertmanager
  32 │         image: prom/alertmanager:v0.28.1
  33 │         args:
  34 │         - --config.file=/etc/alertmanager/alertmanager.yml
  35 │         - --web.external-url=https://alertmanager.ing.k3s.brickyard.whitestar.systems
  36 │         ports:
  37 │         - containerPort: 9093
  38 │         volumeMounts:
  39 └         - name: alertmanager-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volume-permissions' of 'deployment' 'alertmanager-deployment' in 'monitoring' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 alertmanager-deployment1.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'volume-permissions' of Deployment 'alertmanager-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 alertmanager-deployment1.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 alertmanager-deployment1.yaml:31-62
────────────────────────────────────────
  31 ┌       - name: alertmanager
  32 │         image: prom/alertmanager:v0.28.1
  33 │         args:
  34 │         - --config.file=/etc/alertmanager/alertmanager.yml
  35 │         - --web.external-url=https://alertmanager.ing.k3s.brickyard.whitestar.systems
  36 │         ports:
  37 │         - containerPort: 9093
  38 │         volumeMounts:
  39 └         - name: alertmanager-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volume-permissions' of Deployment 'alertmanager-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 alertmanager-deployment1.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volume-permissions' of Deployment 'alertmanager-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 alertmanager-deployment1.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'volume-permissions' of Deployment 'alertmanager-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 alertmanager-deployment1.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'volume-permissions' of Deployment 'alertmanager-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 alertmanager-deployment1.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'volume-permissions' of Deployment 'alertmanager-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 alertmanager-deployment1.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volume-permissions' of Deployment 'alertmanager-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 alertmanager-deployment1.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volume-permissions' of Deployment 'alertmanager-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 alertmanager-deployment1.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 alertmanager-deployment1.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 alertmanager-deployment1.yaml:31-62
────────────────────────────────────────
  31 ┌       - name: alertmanager
  32 │         image: prom/alertmanager:v0.28.1
  33 │         args:
  34 │         - --config.file=/etc/alertmanager/alertmanager.yml
  35 │         - --web.external-url=https://alertmanager.ing.k3s.brickyard.whitestar.systems
  36 │         ports:
  37 │         - containerPort: 9093
  38 │         volumeMounts:
  39 └         - name: alertmanager-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alertmanager" of deployment "alertmanager-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 alertmanager-deployment1.yaml:31-62
────────────────────────────────────────
  31 ┌       - name: alertmanager
  32 │         image: prom/alertmanager:v0.28.1
  33 │         args:
  34 │         - --config.file=/etc/alertmanager/alertmanager.yml
  35 │         - --web.external-url=https://alertmanager.ing.k3s.brickyard.whitestar.systems
  36 │         ports:
  37 │         - containerPort: 9093
  38 │         volumeMounts:
  39 └         - name: alertmanager-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volume-permissions" of deployment "alertmanager-deployment" in "monitoring" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 alertmanager-deployment1.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 alertmanager-deployment1.yaml:31-62
────────────────────────────────────────
  31 ┌       - name: alertmanager
  32 │         image: prom/alertmanager:v0.28.1
  33 │         args:
  34 │         - --config.file=/etc/alertmanager/alertmanager.yml
  35 │         - --web.external-url=https://alertmanager.ing.k3s.brickyard.whitestar.systems
  36 │         ports:
  37 │         - containerPort: 9093
  38 │         volumeMounts:
  39 └         - name: alertmanager-config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 alertmanager-deployment1.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container alertmanager-deployment in monitoring namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alertmanager-deployment1.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 │         - name: alertmanager-storage-volume
  29 └           mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment alertmanager-deployment in monitoring namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alertmanager-deployment1.yaml:20-70
────────────────────────────────────────
  20 ┌       initContainers:
  21 │       - name: volume-permissions
  22 │         image: busybox:1.37
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - chown nobody:nobody /data
  27 │         volumeMounts:
  28 └         - name: alertmanager-storage-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container alertmanager in deployment alertmanager-deployment (namespace: monitoring) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 alertmanager-deployment1.yaml:31-62
────────────────────────────────────────
  31 ┌       - name: alertmanager
  32 │         image: prom/alertmanager:v0.28.1
  33 │         args:
  34 │         - --config.file=/etc/alertmanager/alertmanager.yml
  35 │         - --web.external-url=https://alertmanager.ing.k3s.brickyard.whitestar.systems
  36 │         ports:
  37 │         - containerPort: 9093
  38 │         volumeMounts:
  39 └         - name: alertmanager-config-volume
  ..   
────────────────────────────────────────



alertmanager-deployment2.yaml (kubernetes)
==========================================
Tests: 127 (SUCCESSES: 101, FAILURES: 26)
Failures: 26 (UNKNOWN: 0, LOW: 12, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'prometheus-alertmanager' of Deployment 'alertmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 alertmanager-deployment2.yaml:25-52
────────────────────────────────────────
  25 ┌         - name: prometheus-alertmanager
  26 │           image: "prom/alertmanager:v0.14.0"
  27 │           imagePullPolicy: "IfNotPresent"
  28 │           args:
  29 │             - --config.file=/etc/config/alertmanager.yml
  30 │             - --storage.path=/data
  31 │             - --web.external-url=/
  32 │           ports:
  33 └             - containerPort: 9093
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'prometheus-alertmanager-configmap-reload' of Deployment 'alertmanager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 alertmanager-deployment2.yaml:53-69
────────────────────────────────────────
  53 ┌         - name: prometheus-alertmanager-configmap-reload
  54 │           image: "jimmidyson/configmap-reload:v0.1"
  55 │           imagePullPolicy: "IfNotPresent"
  56 │           args:
  57 │             - --volume-dir=/etc/config
  58 │             - --webhook-url=http://localhost:9093/-/reload
  59 │           volumeMounts:
  60 │             - name: config-volume
  61 └               mountPath: /etc/config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-alertmanager' of Deployment 'alertmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 alertmanager-deployment2.yaml:25-52
────────────────────────────────────────
  25 ┌         - name: prometheus-alertmanager
  26 │           image: "prom/alertmanager:v0.14.0"
  27 │           imagePullPolicy: "IfNotPresent"
  28 │           args:
  29 │             - --config.file=/etc/config/alertmanager.yml
  30 │             - --storage.path=/data
  31 │             - --web.external-url=/
  32 │           ports:
  33 └             - containerPort: 9093
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'prometheus-alertmanager-configmap-reload' of Deployment 'alertmanager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 alertmanager-deployment2.yaml:53-69
────────────────────────────────────────
  53 ┌         - name: prometheus-alertmanager-configmap-reload
  54 │           image: "jimmidyson/configmap-reload:v0.1"
  55 │           imagePullPolicy: "IfNotPresent"
  56 │           args:
  57 │             - --volume-dir=/etc/config
  58 │             - --webhook-url=http://localhost:9093/-/reload
  59 │           volumeMounts:
  60 │             - name: config-volume
  61 └               mountPath: /etc/config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-alertmanager' of 'deployment' 'alertmanager' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 alertmanager-deployment2.yaml:25-52
────────────────────────────────────────
  25 ┌         - name: prometheus-alertmanager
  26 │           image: "prom/alertmanager:v0.14.0"
  27 │           imagePullPolicy: "IfNotPresent"
  28 │           args:
  29 │             - --config.file=/etc/config/alertmanager.yml
  30 │             - --storage.path=/data
  31 │             - --web.external-url=/
  32 │           ports:
  33 └             - containerPort: 9093
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'prometheus-alertmanager-configmap-reload' of 'deployment' 'alertmanager' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 alertmanager-deployment2.yaml:53-69
────────────────────────────────────────
  53 ┌         - name: prometheus-alertmanager-configmap-reload
  54 │           image: "jimmidyson/configmap-reload:v0.1"
  55 │           imagePullPolicy: "IfNotPresent"
  56 │           args:
  57 │             - --volume-dir=/etc/config
  58 │             - --webhook-url=http://localhost:9093/-/reload
  59 │           volumeMounts:
  60 │             - name: config-volume
  61 └               mountPath: /etc/config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus-alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 alertmanager-deployment2.yaml:25-52
────────────────────────────────────────
  25 ┌         - name: prometheus-alertmanager
  26 │           image: "prom/alertmanager:v0.14.0"
  27 │           imagePullPolicy: "IfNotPresent"
  28 │           args:
  29 │             - --config.file=/etc/config/alertmanager.yml
  30 │             - --storage.path=/data
  31 │             - --web.external-url=/
  32 │           ports:
  33 └             - containerPort: 9093
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'prometheus-alertmanager-configmap-reload' of Deployment 'alertmanager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 alertmanager-deployment2.yaml:53-69
────────────────────────────────────────
  53 ┌         - name: prometheus-alertmanager-configmap-reload
  54 │           image: "jimmidyson/configmap-reload:v0.1"
  55 │           imagePullPolicy: "IfNotPresent"
  56 │           args:
  57 │             - --volume-dir=/etc/config
  58 │             - --webhook-url=http://localhost:9093/-/reload
  59 │           volumeMounts:
  60 │             - name: config-volume
  61 └               mountPath: /etc/config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-alertmanager' of Deployment 'alertmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 alertmanager-deployment2.yaml:25-52
────────────────────────────────────────
  25 ┌         - name: prometheus-alertmanager
  26 │           image: "prom/alertmanager:v0.14.0"
  27 │           imagePullPolicy: "IfNotPresent"
  28 │           args:
  29 │             - --config.file=/etc/config/alertmanager.yml
  30 │             - --storage.path=/data
  31 │             - --web.external-url=/
  32 │           ports:
  33 └             - containerPort: 9093
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'prometheus-alertmanager-configmap-reload' of Deployment 'alertmanager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 alertmanager-deployment2.yaml:53-69
────────────────────────────────────────
  53 ┌         - name: prometheus-alertmanager-configmap-reload
  54 │           image: "jimmidyson/configmap-reload:v0.1"
  55 │           imagePullPolicy: "IfNotPresent"
  56 │           args:
  57 │             - --volume-dir=/etc/config
  58 │             - --webhook-url=http://localhost:9093/-/reload
  59 │           volumeMounts:
  60 │             - name: config-volume
  61 └               mountPath: /etc/config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus-alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 alertmanager-deployment2.yaml:25-52
────────────────────────────────────────
  25 ┌         - name: prometheus-alertmanager
  26 │           image: "prom/alertmanager:v0.14.0"
  27 │           imagePullPolicy: "IfNotPresent"
  28 │           args:
  29 │             - --config.file=/etc/config/alertmanager.yml
  30 │             - --storage.path=/data
  31 │             - --web.external-url=/
  32 │           ports:
  33 └             - containerPort: 9093
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'prometheus-alertmanager-configmap-reload' of Deployment 'alertmanager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 alertmanager-deployment2.yaml:53-69
────────────────────────────────────────
  53 ┌         - name: prometheus-alertmanager-configmap-reload
  54 │           image: "jimmidyson/configmap-reload:v0.1"
  55 │           imagePullPolicy: "IfNotPresent"
  56 │           args:
  57 │             - --volume-dir=/etc/config
  58 │             - --webhook-url=http://localhost:9093/-/reload
  59 │           volumeMounts:
  60 │             - name: config-volume
  61 └               mountPath: /etc/config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus-alertmanager' of Deployment 'alertmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 alertmanager-deployment2.yaml:25-52
────────────────────────────────────────
  25 ┌         - name: prometheus-alertmanager
  26 │           image: "prom/alertmanager:v0.14.0"
  27 │           imagePullPolicy: "IfNotPresent"
  28 │           args:
  29 │             - --config.file=/etc/config/alertmanager.yml
  30 │             - --storage.path=/data
  31 │             - --web.external-url=/
  32 │           ports:
  33 └             - containerPort: 9093
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'prometheus-alertmanager-configmap-reload' of Deployment 'alertmanager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 alertmanager-deployment2.yaml:53-69
────────────────────────────────────────
  53 ┌         - name: prometheus-alertmanager-configmap-reload
  54 │           image: "jimmidyson/configmap-reload:v0.1"
  55 │           imagePullPolicy: "IfNotPresent"
  56 │           args:
  57 │             - --volume-dir=/etc/config
  58 │             - --webhook-url=http://localhost:9093/-/reload
  59 │           volumeMounts:
  60 │             - name: config-volume
  61 └               mountPath: /etc/config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 alertmanager-deployment2.yaml:53-69
────────────────────────────────────────
  53 ┌         - name: prometheus-alertmanager-configmap-reload
  54 │           image: "jimmidyson/configmap-reload:v0.1"
  55 │           imagePullPolicy: "IfNotPresent"
  56 │           args:
  57 │             - --volume-dir=/etc/config
  58 │             - --webhook-url=http://localhost:9093/-/reload
  59 │           volumeMounts:
  60 │             - name: config-volume
  61 └               mountPath: /etc/config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 alertmanager-deployment2.yaml:25-52
────────────────────────────────────────
  25 ┌         - name: prometheus-alertmanager
  26 │           image: "prom/alertmanager:v0.14.0"
  27 │           imagePullPolicy: "IfNotPresent"
  28 │           args:
  29 │             - --config.file=/etc/config/alertmanager.yml
  30 │             - --storage.path=/data
  31 │             - --web.external-url=/
  32 │           ports:
  33 └             - containerPort: 9093
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'alertmanager' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 alertmanager-deployment2.yaml:12-76
────────────────────────────────────────
  12 ┌   replicas: 1
  13 │   selector:
  14 │     matchLabels:
  15 │       k8s-app: alertmanager
  16 │       version: v0.14.0
  17 │   template:
  18 │     metadata:
  19 │       labels:
  20 └         k8s-app: alertmanager
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-alertmanager" of deployment "alertmanager" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 alertmanager-deployment2.yaml:25-52
────────────────────────────────────────
  25 ┌         - name: prometheus-alertmanager
  26 │           image: "prom/alertmanager:v0.14.0"
  27 │           imagePullPolicy: "IfNotPresent"
  28 │           args:
  29 │             - --config.file=/etc/config/alertmanager.yml
  30 │             - --storage.path=/data
  31 │             - --web.external-url=/
  32 │           ports:
  33 └             - containerPort: 9093
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "prometheus-alertmanager-configmap-reload" of deployment "alertmanager" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 alertmanager-deployment2.yaml:53-69
────────────────────────────────────────
  53 ┌         - name: prometheus-alertmanager-configmap-reload
  54 │           image: "jimmidyson/configmap-reload:v0.1"
  55 │           imagePullPolicy: "IfNotPresent"
  56 │           args:
  57 │             - --volume-dir=/etc/config
  58 │             - --webhook-url=http://localhost:9093/-/reload
  59 │           volumeMounts:
  60 │             - name: config-volume
  61 └               mountPath: /etc/config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 alertmanager-deployment2.yaml:25-52
────────────────────────────────────────
  25 ┌         - name: prometheus-alertmanager
  26 │           image: "prom/alertmanager:v0.14.0"
  27 │           imagePullPolicy: "IfNotPresent"
  28 │           args:
  29 │             - --config.file=/etc/config/alertmanager.yml
  30 │             - --storage.path=/data
  31 │             - --web.external-url=/
  32 │           ports:
  33 └             - containerPort: 9093
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 alertmanager-deployment2.yaml:53-69
────────────────────────────────────────
  53 ┌         - name: prometheus-alertmanager-configmap-reload
  54 │           image: "jimmidyson/configmap-reload:v0.1"
  55 │           imagePullPolicy: "IfNotPresent"
  56 │           args:
  57 │             - --volume-dir=/etc/config
  58 │             - --webhook-url=http://localhost:9093/-/reload
  59 │           volumeMounts:
  60 │             - name: config-volume
  61 └               mountPath: /etc/config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container alertmanager in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alertmanager-deployment2.yaml:25-52
────────────────────────────────────────
  25 ┌         - name: prometheus-alertmanager
  26 │           image: "prom/alertmanager:v0.14.0"
  27 │           imagePullPolicy: "IfNotPresent"
  28 │           args:
  29 │             - --config.file=/etc/config/alertmanager.yml
  30 │             - --storage.path=/data
  31 │             - --web.external-url=/
  32 │           ports:
  33 └             - containerPort: 9093
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container alertmanager in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alertmanager-deployment2.yaml:53-69
────────────────────────────────────────
  53 ┌         - name: prometheus-alertmanager-configmap-reload
  54 │           image: "jimmidyson/configmap-reload:v0.1"
  55 │           imagePullPolicy: "IfNotPresent"
  56 │           args:
  57 │             - --volume-dir=/etc/config
  58 │             - --webhook-url=http://localhost:9093/-/reload
  59 │           volumeMounts:
  60 │             - name: config-volume
  61 └               mountPath: /etc/config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment alertmanager in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alertmanager-deployment2.yaml:23-76
────────────────────────────────────────
  23 ┌       priorityClassName: system-cluster-critical
  24 │       containers:
  25 │         - name: prometheus-alertmanager
  26 │           image: "prom/alertmanager:v0.14.0"
  27 │           imagePullPolicy: "IfNotPresent"
  28 │           args:
  29 │             - --config.file=/etc/config/alertmanager.yml
  30 │             - --storage.path=/data
  31 └             - --web.external-url=/
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-alertmanager in deployment alertmanager (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 alertmanager-deployment2.yaml:25-52
────────────────────────────────────────
  25 ┌         - name: prometheus-alertmanager
  26 │           image: "prom/alertmanager:v0.14.0"
  27 │           imagePullPolicy: "IfNotPresent"
  28 │           args:
  29 │             - --config.file=/etc/config/alertmanager.yml
  30 │             - --storage.path=/data
  31 │             - --web.external-url=/
  32 │           ports:
  33 └             - containerPort: 9093
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container prometheus-alertmanager-configmap-reload in deployment alertmanager (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 alertmanager-deployment2.yaml:53-69
────────────────────────────────────────
  53 ┌         - name: prometheus-alertmanager-configmap-reload
  54 │           image: "jimmidyson/configmap-reload:v0.1"
  55 │           imagePullPolicy: "IfNotPresent"
  56 │           args:
  57 │             - --volume-dir=/etc/config
  58 │             - --webhook-url=http://localhost:9093/-/reload
  59 │           volumeMounts:
  60 │             - name: config-volume
  61 └               mountPath: /etc/config
  ..   
────────────────────────────────────────



alertmanager-deployment4.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 alertmanager-deployment4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config
  22 └           mountPath: /etc/alertmanager/alertmanager.yml
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alertmanager' of Deployment 'alertmanager-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 alertmanager-deployment4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config
  22 └           mountPath: /etc/alertmanager/alertmanager.yml
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alertmanager' of 'deployment' 'alertmanager-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 alertmanager-deployment4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config
  22 └           mountPath: /etc/alertmanager/alertmanager.yml
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'alertmanager' of Deployment 'alertmanager-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 alertmanager-deployment4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config
  22 └           mountPath: /etc/alertmanager/alertmanager.yml
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 alertmanager-deployment4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config
  22 └           mountPath: /etc/alertmanager/alertmanager.yml
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'alertmanager' of Deployment 'alertmanager-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 alertmanager-deployment4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config
  22 └           mountPath: /etc/alertmanager/alertmanager.yml
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'alertmanager' of Deployment 'alertmanager-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 alertmanager-deployment4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config
  22 └           mountPath: /etc/alertmanager/alertmanager.yml
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'alertmanager' of Deployment 'alertmanager-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 alertmanager-deployment4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config
  22 └           mountPath: /etc/alertmanager/alertmanager.yml
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'alertmanager' of Deployment 'alertmanager-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 alertmanager-deployment4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config
  22 └           mountPath: /etc/alertmanager/alertmanager.yml
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'alertmanager' of Deployment 'alertmanager-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 alertmanager-deployment4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config
  22 └           mountPath: /etc/alertmanager/alertmanager.yml
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'alertmanager' of Deployment 'alertmanager-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 alertmanager-deployment4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config
  22 └           mountPath: /etc/alertmanager/alertmanager.yml
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'alertmanager' of Deployment 'alertmanager-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 alertmanager-deployment4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config
  22 └           mountPath: /etc/alertmanager/alertmanager.yml
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 alertmanager-deployment4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config
  22 └           mountPath: /etc/alertmanager/alertmanager.yml
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alertmanager" of deployment "alertmanager-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 alertmanager-deployment4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config
  22 └           mountPath: /etc/alertmanager/alertmanager.yml
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 alertmanager-deployment4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config
  22 └           mountPath: /etc/alertmanager/alertmanager.yml
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment alertmanager-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 alertmanager-deployment4.yaml:4
────────────────────────────────────────
   4 [   name: alertmanager-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container alertmanager-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alertmanager-deployment4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config
  22 └           mountPath: /etc/alertmanager/alertmanager.yml
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment alertmanager-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 alertmanager-deployment4.yaml:15-26
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config
  22 │           mountPath: /etc/alertmanager/alertmanager.yml
  23 └       volumes:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container alertmanager in deployment alertmanager-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 alertmanager-deployment4.yaml:16-22
────────────────────────────────────────
  16 ┌       - name: alertmanager
  17 │         image: prom/alertmanager:latest
  18 │         ports:
  19 │         - containerPort: 9093
  20 │         volumeMounts:
  21 │         - name: alertmanager-config
  22 └           mountPath: /etc/alertmanager/alertmanager.yml
────────────────────────────────────────


